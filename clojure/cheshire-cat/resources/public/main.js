if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}


var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.define("goog.DEBUG", true);
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.define("goog.DISALLOW_TEST_ONLY_CODE", COMPILED && !goog.DEBUG);
goog.define("goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
  }
  goog.constructNamespace_(name);
};
goog.constructNamespace_ = function(name, opt_obj) {
  if (!COMPILED) {
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name, opt_obj);
};
goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
goog.module = function(name) {
  if (!goog.isString(name) || !name || name.search(goog.VALID_MODULE_RE_) == -1) {
    throw Error("Invalid module identifier");
  }
  if (!goog.isInModuleLoader_()) {
    throw Error("Module " + name + " has been loaded incorrectly.");
  }
  if (goog.moduleLoaderState_.moduleName) {
    throw Error("goog.module may only be called once per module.");
  }
  goog.moduleLoaderState_.moduleName = name;
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
  }
};
goog.module.get = function(name) {
  return goog.module.getInternal_(name);
};
goog.module.getInternal_ = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return name in goog.loadedModules_ ? goog.loadedModules_[name] : goog.getObjectByName(name);
    } else {
      return null;
    }
  }
};
goog.moduleLoaderState_ = null;
goog.isInModuleLoader_ = function() {
  return goog.moduleLoaderState_ != null;
};
goog.module.declareLegacyNamespace = function() {
  if (!COMPILED && !goog.isInModuleLoader_()) {
    throw new Error("goog.module.declareLegacyNamespace must be called from " + "within a goog.module");
  }
  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {
    throw Error("goog.module must be called prior to " + "goog.module.declareLegacyNamespace.");
  }
  goog.moduleLoaderState_.declareLegacyNamespace = true;
};
goog.setTestOnly = function(opt_message) {
  if (goog.DISALLOW_TEST_ONLY_CODE) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
goog.forwardDeclare("Document");
goog.forwardDeclare("HTMLScriptElement");
goog.forwardDeclare("XMLHttpRequest");
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return name in goog.loadedModules_ || !goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {"goog.module":true};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires, opt_isModule) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      deps.pathIsModule[path] = !!opt_isModule;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.logToConsole_ = function(msg) {
  if (goog.global.console) {
    goog.global.console["error"](msg);
  }
};
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_) {
      goog.maybeProcessDeferredDep_(name);
    }
    if (goog.isProvided_(name)) {
      if (goog.isInModuleLoader_()) {
        return goog.module.getInternal_(name);
      } else {
        return null;
      }
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.writeScripts_(path);
        return null;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    goog.logToConsole_(errorMessage);
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.define("goog.LOAD_MODULE_USING_EVAL", true);
goog.define("goog.SEAL_MODULE_EXPORTS", goog.DEBUG);
goog.loadedModules_ = {};
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.dependencies_ = {pathIsModule:{}, nameToPath:{}, requires:{}, visited:{}, written:{}, deferred:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return doc != null && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.isDef(goog.global.CLOSURE_BASE_PATH)) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("SCRIPT");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var script = (scripts[i]);
      var src = script.src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src, opt_sourceText) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (importScript(src, opt_sourceText)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.IS_OLD_IE_ = !!(!goog.global.atob && goog.global.document && goog.global.document.all);
  goog.importModule_ = function(src) {
    var bootstrap = 'goog.retrieveAndExecModule_("' + src + '");';
    if (goog.importScript_("", bootstrap)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.queuedModules_ = [];
  goog.wrapModule_ = function(srcUrl, scriptText) {
    if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON)) {
      return "" + "goog.loadModule(function(exports) {" + '"use strict";' + scriptText + "\n" + ";return exports" + "});" + "\n//# sourceURL\x3d" + srcUrl + "\n";
    } else {
      return "" + "goog.loadModule(" + goog.global.JSON.stringify(scriptText + "\n//# sourceURL\x3d" + srcUrl + "\n") + ");";
    }
  };
  goog.loadQueuedModules_ = function() {
    var count = goog.queuedModules_.length;
    if (count > 0) {
      var queue = goog.queuedModules_;
      goog.queuedModules_ = [];
      for (var i = 0;i < count;i++) {
        var path = queue[i];
        goog.maybeProcessDeferredPath_(path);
      }
    }
  };
  goog.maybeProcessDeferredDep_ = function(name) {
    if (goog.isDeferredModule_(name) && goog.allDepsAreAvailable_(name)) {
      var path = goog.getPathFromDeps_(name);
      goog.maybeProcessDeferredPath_(goog.basePath + path);
    }
  };
  goog.isDeferredModule_ = function(name) {
    var path = goog.getPathFromDeps_(name);
    if (path && goog.dependencies_.pathIsModule[path]) {
      var abspath = goog.basePath + path;
      return abspath in goog.dependencies_.deferred;
    }
    return false;
  };
  goog.allDepsAreAvailable_ = function(name) {
    var path = goog.getPathFromDeps_(name);
    if (path && path in goog.dependencies_.requires) {
      for (var requireName in goog.dependencies_.requires[path]) {
        if (!goog.isProvided_(requireName) && !goog.isDeferredModule_(requireName)) {
          return false;
        }
      }
    }
    return true;
  };
  goog.maybeProcessDeferredPath_ = function(abspath) {
    if (abspath in goog.dependencies_.deferred) {
      var src = goog.dependencies_.deferred[abspath];
      delete goog.dependencies_.deferred[abspath];
      goog.globalEval(src);
    }
  };
  goog.loadModuleFromUrl = function(url) {
    goog.retrieveAndExecModule_(url);
  };
  goog.loadModule = function(moduleDef) {
    var previousState = goog.moduleLoaderState_;
    try {
      goog.moduleLoaderState_ = {moduleName:undefined, declareLegacyNamespace:false};
      var exports;
      if (goog.isFunction(moduleDef)) {
        exports = moduleDef.call(goog.global, {});
      } else {
        if (goog.isString(moduleDef)) {
          exports = goog.loadModuleFromSource_.call(goog.global, moduleDef);
        } else {
          throw Error("Invalid module definition");
        }
      }
      var moduleName = goog.moduleLoaderState_.moduleName;
      if (!goog.isString(moduleName) || !moduleName) {
        throw Error('Invalid module name "' + moduleName + '"');
      }
      if (goog.moduleLoaderState_.declareLegacyNamespace) {
        goog.constructNamespace_(moduleName, exports);
      } else {
        if (goog.SEAL_MODULE_EXPORTS && Object.seal) {
          Object.seal(exports);
        }
      }
      goog.loadedModules_[moduleName] = exports;
    } finally {
      goog.moduleLoaderState_ = previousState;
    }
  };
  goog.loadModuleFromSource_ = function() {
    var exports = {};
    eval(arguments[0]);
    return exports;
  };
  goog.writeScriptSrcNode_ = function(src) {
    goog.global.document.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
  };
  goog.appendScriptSrcNode_ = function(src) {
    var doc = goog.global.document;
    var scriptEl = (doc.createElement("script"));
    scriptEl.type = "text/javascript";
    scriptEl.src = src;
    scriptEl.defer = false;
    scriptEl.async = false;
    doc.head.appendChild(scriptEl);
  };
  goog.writeScriptTag_ = function(src, opt_sourceText) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING && doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      var isOldIE = goog.IS_OLD_IE_;
      if (opt_sourceText === undefined) {
        if (!isOldIE) {
          if (goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {
            goog.appendScriptSrcNode_(src);
          } else {
            goog.writeScriptSrcNode_(src);
          }
        } else {
          var state = " onreadystatechange\x3d'goog.onScriptLoad_(this, " + ++goog.lastNonModuleScriptIndex_ + ")' ";
          doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"' + state + "\x3e\x3c/" + "script\x3e");
        }
      } else {
        doc.write('\x3cscript type\x3d"text/javascript"\x3e' + opt_sourceText + "\x3c/" + "script\x3e");
      }
      return true;
    } else {
      return false;
    }
  };
  goog.lastNonModuleScriptIndex_ = 0;
  goog.onScriptLoad_ = function(script, scriptIndex) {
    if (script.readyState == "complete" && goog.lastNonModuleScriptIndex_ == scriptIndex) {
      goog.loadQueuedModules_();
    }
    return true;
  };
  goog.writeScripts_ = function(pathToLoad) {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    visitNode(pathToLoad);
    for (var i = 0;i < scripts.length;i++) {
      var path = scripts[i];
      goog.dependencies_.written[path] = true;
    }
    var moduleState = goog.moduleLoaderState_;
    goog.moduleLoaderState_ = null;
    for (var i = 0;i < scripts.length;i++) {
      var path = scripts[i];
      if (path) {
        if (!deps.pathIsModule[path]) {
          goog.importScript_(goog.basePath + path);
        } else {
          goog.importModule_(goog.basePath + path);
        }
      } else {
        goog.moduleLoaderState_ = moduleState;
        throw Error("Undefined script input");
      }
    }
    goog.moduleLoaderState_ = moduleState;
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.normalizePath_ = function(path) {
  var components = path.split("/");
  var i = 0;
  while (i < components.length) {
    if (components[i] == ".") {
      components.splice(i, 1);
    } else {
      if (i && components[i] == ".." && components[i - 1] && components[i - 1] != "..") {
        components.splice(--i, 2);
      } else {
        i++;
      }
    }
  }
  return components.join("/");
};
goog.loadFileSync_ = function(src) {
  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {
    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);
  } else {
    var xhr = new goog.global["XMLHttpRequest"];
    xhr.open("get", src, false);
    xhr.send();
    return xhr.responseText;
  }
};
goog.retrieveAndExecModule_ = function(src) {
  if (!COMPILED) {
    var originalPath = src;
    src = goog.normalizePath_(src);
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    var scriptText = goog.loadFileSync_(src);
    if (scriptText != null) {
      var execModuleScript = goog.wrapModule_(src, scriptText);
      var isOldIE = goog.IS_OLD_IE_;
      if (isOldIE) {
        goog.dependencies_.deferred[originalPath] = execModuleScript;
        goog.queuedModules_.push(originalPath);
      } else {
        importScript(src, execModuleScript);
      }
    } else {
      throw new Error("load of " + src + "failed");
    }
  }
};
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return !!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in (obj)) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return (fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return +new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _evalTest_ \x3d 1;");
        if (typeof goog.global["_evalTest_"] != "undefined") {
          try {
            delete goog.global["_evalTest_"];
          } catch (ignore) {
          }
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = (doc.createElement("SCRIPT"));
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return opt_values != null && key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = new Array(arguments.length - 2);
    for (var i = 2;i < arguments.length;i++) {
      args[i - 2] = arguments[i];
    }
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    var ctorArgs = new Array(arguments.length - 1);
    for (var i = 1;i < arguments.length;i++) {
      ctorArgs[i - 1] = arguments[i];
    }
    return caller.superClass_.constructor.apply(me, ctorArgs);
  }
  var args = new Array(arguments.length - 2);
  for (var i = 2;i < arguments.length;i++) {
    args[i - 2] = arguments[i];
  }
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
  this.reportErrorToServer = true;
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.define("goog.string.FORCE_NON_DOM_HTML_UNESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmptyOrWhitespace = function(str) {
  return /^[\s\xa0]*$/.test(str);
};
goog.string.isEmptyString = function(str) {
  return str.length == 0;
};
goog.string.isEmpty = goog.string.isEmptyOrWhitespace;
goog.string.isEmptyOrWhitespaceSafe = function(str) {
  return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str));
};
goog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;
goog.string.isBreakingWhitespace = function(str) {
  return !/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return !/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return !/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return !/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = goog.TRUSTED_SITE && String.prototype.trim ? function(str) {
  return str.trim();
} : function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return -1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numberAwareCompare_ = function(str1, str2, tokenizerRegExp) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return -1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(tokenizerRegExp);
  var tokens2 = str2.toLowerCase().match(tokenizerRegExp);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.intAwareCompare = function(str1, str2) {
  return goog.string.numberAwareCompare_(str1, str2, /\d+|\D+/g);
};
goog.string.floatAwareCompare = function(str1, str2) {
  return goog.string.numberAwareCompare_(str1, str2, /\d+|\.\d+|\D+/g);
};
goog.string.numerateCompare = goog.string.floatAwareCompare;
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if (!goog.string.FORCE_NON_DOM_HTML_UNESCAPING && "document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return '"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\", "\x3c":"\x3c"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  var sb = ['"'];
  for (var i = 0;i < s.length;i++) {
    var ch = s.charAt(i);
    var cc = ch.charCodeAt(0);
    sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
  }
  sb.push('"');
  return sb.join("");
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = String.prototype.repeat ? function(string, length) {
  return string.repeat(length);
} : function(string, length) {
  return (new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return -1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i) >>> 0;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmptyOrWhitespace(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return /^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return /^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.capitalize = function(str) {
  return String(str.charAt(0)).toUpperCase() + String(str.substr(1)).toLowerCase();
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return /^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.string.editDistance = function(a, b) {
  var v0 = [];
  var v1 = [];
  if (a == b) {
    return 0;
  }
  if (!a.length || !b.length) {
    return Math.max(a.length, b.length);
  }
  for (var i = 0;i < b.length + 1;i++) {
    v0[i] = i;
  }
  for (var i = 0;i < a.length;i++) {
    v1[0] = i + 1;
    for (var j = 0;j < b.length;j++) {
      var cost = a[i] != b[j];
      v1[j + 1] = Math.min(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost);
    }
    for (var j = 0;j < v0.length;j++) {
      v0[j] = v1[j];
    }
  }
  return v1[b.length];
};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.", [goog.asserts.getType_(type), goog.asserts.getType_(value)], opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.asserts.getType_ = function(value) {
  if (value instanceof Function) {
    return value.displayName || value.name || "unknown type name";
  } else {
    if (value instanceof Object) {
      return value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value);
    } else {
      return value === null ? "null" : typeof value;
    }
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return -1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return -1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return -1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return -1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.removeAllIf = function(arr, f, opt_obj) {
  var removedCount = 0;
  goog.array.forEachRight(arr, function(val, index) {
    if (f.call(opt_obj, val, index, arr)) {
      if (goog.array.removeAt(arr, index)) {
        removedCount++;
      }
    }
  });
  return removedCount;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return [];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    if (goog.isArrayLike(arr2)) {
      var len1 = arr1.length || 0;
      var len2 = arr2.length || 0;
      arr1.length = len1 + len2;
      for (var j = 0;j < len2;j++) {
        arr1[len1 + j] = arr2[j];
      }
    } else {
      arr1.push(arr2);
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(item) ? "o" + goog.getUid(item) : (typeof item).charAt(0) + item;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortByKey = function(arr, keyFn, opt_compareFn) {
  var keyCompareFn = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return keyCompareFn(keyFn(a), keyFn(b));
  });
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  goog.array.sortByKey(arr, function(obj) {
    return obj[key];
  }, opt_compareFn);
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.inverseDefaultCompare = function(a, b) {
  return -goog.array.defaultCompare(a, b);
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return [];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var CHUNK_SIZE = 8192;
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      for (var c = 0;c < element.length;c += CHUNK_SIZE) {
        var chunk = goog.array.slice(element, c, c + CHUNK_SIZE);
        var recurseResult = goog.array.flatten.apply(null, chunk);
        for (var r = 0;r < recurseResult.length;r++) {
          result.push(recurseResult[r]);
        }
      }
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return [];
  }
  var result = [];
  var minLen = arguments[0].length;
  for (var i = 1;i < arguments.length;i++) {
    if (arguments[i].length < minLen) {
      minLen = arguments[i].length;
    }
  }
  for (var i = 0;i < minLen;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      value.push(arguments[j][i]);
    }
    result.push(value);
  }
  return result;
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.array.copyByIndex = function(arr, index_arr) {
  var result = [];
  goog.array.forEach(index_arr, function(index) {
    result.push(arr[index]);
  });
  return result;
};
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return obj !== null && key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in (obj)) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (obj !== null && key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (obj !== null && key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in (obj) ? obj[key] : obj[key] = value;
};
goog.object.setWithReturnValueIfNotSet = function(obj, key, f) {
  if (key in obj) {
    return obj[key];
  }
  var val = f();
  obj[key] = val;
  return val;
};
goog.object.equals = function(a, b) {
  for (var k in a) {
    if (!(k in b) || a[k] !== b[k]) {
      return false;
    }
  }
  for (var k in b) {
    if (!(k in a)) {
      return false;
    }
  }
  return true;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (goog.isFunction(obj.clone)) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return !!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.object");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchEdge_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Edge");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !(goog.labs.userAgent.browser.matchChrome_() || goog.labs.userAgent.browser.matchCoast_() || goog.labs.userAgent.browser.matchOpera_() || goog.labs.userAgent.browser.matchEdge_() || goog.labs.userAgent.browser.isSilk() || goog.labs.userAgent.util.matchUserAgent("Android"));
};
goog.labs.userAgent.browser.matchCoast_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Coast");
};
goog.labs.userAgent.browser.matchIosWebview_ = function() {
  return (goog.labs.userAgent.util.matchUserAgent("iPad") || goog.labs.userAgent.util.matchUserAgent("iPhone")) && !goog.labs.userAgent.browser.matchSafari_() && !goog.labs.userAgent.browser.matchChrome_() && !goog.labs.userAgent.browser.matchCoast_() && goog.labs.userAgent.util.matchUserAgent("AppleWebKit");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return (goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS")) && !goog.labs.userAgent.browser.matchOpera_() && !goog.labs.userAgent.browser.matchEdge_();
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !(goog.labs.userAgent.browser.isChrome() || goog.labs.userAgent.browser.isFirefox() || goog.labs.userAgent.browser.isOpera() || goog.labs.userAgent.browser.isSilk());
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isEdge = goog.labs.userAgent.browser.matchEdge_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isCoast = goog.labs.userAgent.browser.matchCoast_;
goog.labs.userAgent.browser.isIosWebview = goog.labs.userAgent.browser.matchIosWebview_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  var versionMap = {};
  goog.array.forEach(versionTuples, function(tuple) {
    var key = tuple[0];
    var value = tuple[1];
    versionMap[key] = value;
  });
  var versionMapHasKey = goog.partial(goog.object.containsKey, versionMap);
  function lookUpValueWithKeys(keys) {
    var key = goog.array.find(keys, versionMapHasKey);
    return versionMap[key] || "";
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return lookUpValueWithKeys(["Version", "Opera", "OPR"]);
  }
  if (goog.labs.userAgent.browser.isEdge()) {
    return lookUpValueWithKeys(["Edge"]);
  }
  if (goog.labs.userAgent.browser.isChrome()) {
    return lookUpValueWithKeys(["Chrome", "CriOS"]);
  }
  var tuple = versionTuples[2];
  return tuple && tuple[1] || "";
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isEdge = function() {
  return goog.labs.userAgent.util.matchUserAgent("Edge");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit") && !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident() && !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = goog.labs.userAgent.engine.getEngineTuple_(tuples);
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.getEngineTuple_ = function(tuples) {
  if (!goog.labs.userAgent.engine.isEdge()) {
    return tuples[1];
  }
  for (var i = 0;i < tuples.length;i++) {
    var tuple = tuples[i];
    if (tuple[0] == "Edge") {
      return tuple;
    }
  }
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.labs.userAgent.platform");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.platform.isAndroid = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.platform.isIpod = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPod");
};
goog.labs.userAgent.platform.isIphone = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPhone") && !goog.labs.userAgent.util.matchUserAgent("iPod") && !goog.labs.userAgent.util.matchUserAgent("iPad");
};
goog.labs.userAgent.platform.isIpad = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPad");
};
goog.labs.userAgent.platform.isIos = function() {
  return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpad() || goog.labs.userAgent.platform.isIpod();
};
goog.labs.userAgent.platform.isMacintosh = function() {
  return goog.labs.userAgent.util.matchUserAgent("Macintosh");
};
goog.labs.userAgent.platform.isLinux = function() {
  return goog.labs.userAgent.util.matchUserAgent("Linux");
};
goog.labs.userAgent.platform.isWindows = function() {
  return goog.labs.userAgent.util.matchUserAgent("Windows");
};
goog.labs.userAgent.platform.isChromeOS = function() {
  return goog.labs.userAgent.util.matchUserAgent("CrOS");
};
goog.labs.userAgent.platform.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  var version = "", re;
  if (goog.labs.userAgent.platform.isWindows()) {
    re = /Windows (?:NT|Phone) ([0-9.]+)/;
    var match = re.exec(userAgentString);
    if (match) {
      version = match[1];
    } else {
      version = "0.0";
    }
  } else {
    if (goog.labs.userAgent.platform.isIos()) {
      re = /(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/;
      var match = re.exec(userAgentString);
      version = match && match[1].replace(/_/g, ".");
    } else {
      if (goog.labs.userAgent.platform.isMacintosh()) {
        re = /Mac OS X ([0-9_.]+)/;
        var match = re.exec(userAgentString);
        version = match ? match[1].replace(/_/g, ".") : "10";
      } else {
        if (goog.labs.userAgent.platform.isAndroid()) {
          re = /Android\s+([^\);]+)(\)|;)/;
          var match = re.exec(userAgentString);
          version = match && match[1];
        } else {
          if (goog.labs.userAgent.platform.isChromeOS()) {
            re = /(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/;
            var match = re.exec(userAgentString);
            version = match && match[1];
          }
        }
      }
    }
  }
  return version || "";
};
goog.labs.userAgent.platform.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(), version) >= 0;
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.platform");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_EDGE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.EDGE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_EDGE : goog.labs.userAgent.engine.isEdge();
goog.userAgent.EDGE_OR_IE = goog.userAgent.EDGE || goog.userAgent.IE;
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.labs.userAgent.platform.isMacintosh();
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.labs.userAgent.platform.isWindows();
goog.userAgent.isLegacyLinux_ = function() {
  return goog.labs.userAgent.platform.isLinux() || goog.labs.userAgent.platform.isChromeOS();
};
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.isLegacyLinux_();
goog.userAgent.isX11_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return !!navigator && goog.string.contains(navigator["appVersion"] || "", "X11");
};
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.isX11_();
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.labs.userAgent.platform.isAndroid();
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.labs.userAgent.platform.isIphone();
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad();
goog.userAgent.operaVersion_ = function() {
  var version = goog.global.opera.version;
  try {
    return version();
  } catch (e) {
    return version;
  }
};
goog.userAgent.determineVersion_ = function() {
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    return goog.userAgent.operaVersion_();
  }
  var version = "";
  var arr = goog.userAgent.getVersionRegexResult_();
  if (arr) {
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getVersionRegexResult_ = function() {
  var userAgent = goog.userAgent.getUserAgentString();
  if (goog.userAgent.GECKO) {
    return /rv\:([^\);]+)(\)|;)/.exec(userAgent);
  }
  if (goog.userAgent.EDGE) {
    return /Edge\/([\d\.]+)/.exec(userAgent);
  }
  if (goog.userAgent.IE) {
    return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(userAgent);
  }
  if (goog.userAgent.WEBKIT) {
    return /WebKit\/(\S+)/.exec(userAgent);
  }
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  var mode = goog.userAgent.getDocumentMode_();
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || goog.userAgent.IE && goog.userAgent.isDocumentModeOrHigher(9) || goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9.1"), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || goog.userAgent.OPERA || goog.userAgent.WEBKIT, 
INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE, LEGACY_IE_RANGES:goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEMPLATE:"TEMPLATE", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.dom.tags");
goog.require("goog.object");
goog.dom.tags.VOID_TAGS_ = goog.object.createSet("area", "base", "br", "col", "command", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr");
goog.dom.tags.isVoidTag = function(tagName) {
  return goog.dom.tags.VOID_TAGS_[tagName] === true;
};
goog.provide("goog.string.TypedString");
goog.string.TypedString = function() {
};
goog.string.TypedString.prototype.implementsGoogStringTypedString;
goog.string.TypedString.prototype.getTypedStringValue;
goog.provide("goog.string.Const");
goog.require("goog.asserts");
goog.require("goog.string.TypedString");
goog.string.Const = function() {
  this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = "";
  this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ = goog.string.Const.TYPE_MARKER_;
};
goog.string.Const.prototype.implementsGoogStringTypedString = true;
goog.string.Const.prototype.getTypedStringValue = function() {
  return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
};
goog.string.Const.prototype.toString = function() {
  return "Const{" + this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ + "}";
};
goog.string.Const.unwrap = function(stringConst) {
  if (stringConst instanceof goog.string.Const && stringConst.constructor === goog.string.Const && stringConst.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ === goog.string.Const.TYPE_MARKER_) {
    return stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
  } else {
    goog.asserts.fail("expected object of type Const, got '" + stringConst + "'");
    return "type_error:Const";
  }
};
goog.string.Const.from = function(s) {
  return goog.string.Const.create__googStringSecurityPrivate_(s);
};
goog.string.Const.TYPE_MARKER_ = {};
goog.string.Const.create__googStringSecurityPrivate_ = function(s) {
  var stringConst = new goog.string.Const;
  stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = s;
  return stringConst;
};
goog.provide("goog.html.SafeStyle");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeStyle = function() {
  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = "";
  this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeStyle.prototype.implementsGoogStringTypedString = true;
goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeStyle.fromConstant = function(style) {
  var styleString = goog.string.Const.unwrap(style);
  if (styleString.length === 0) {
    return goog.html.SafeStyle.EMPTY;
  }
  goog.html.SafeStyle.checkStyle_(styleString);
  goog.asserts.assert(goog.string.endsWith(styleString, ";"), "Last character of style string is not ';': " + styleString);
  goog.asserts.assert(goog.string.contains(styleString, ":"), "Style string must contain at least one ':', to " + 'specify a "name: value" pair: ' + styleString);
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(styleString);
};
goog.html.SafeStyle.checkStyle_ = function(style) {
  goog.asserts.assert(!/[<>]/.test(style), "Forbidden characters in style string: " + style);
};
goog.html.SafeStyle.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeStyleWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeStyle.prototype.toString = function() {
    return "SafeStyle{" + this.privateDoNotAccessOrElseSafeStyleWrappedValue_ + "}";
  };
}
goog.html.SafeStyle.unwrap = function(safeStyle) {
  if (safeStyle instanceof goog.html.SafeStyle && safeStyle.constructor === goog.html.SafeStyle && safeStyle.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeStyle, got '" + safeStyle + "'");
    return "type_error:SafeStyle";
  }
};
goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse = function(style) {
  return (new goog.html.SafeStyle).initSecurityPrivateDoNotAccessOrElse_(style);
};
goog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(style) {
  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = style;
  return this;
};
goog.html.SafeStyle.EMPTY = goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse("");
goog.html.SafeStyle.INNOCUOUS_STRING = "zClosurez";
goog.html.SafeStyle.PropertyMap;
goog.html.SafeStyle.create = function(map) {
  var style = "";
  for (var name in map) {
    if (!/^[-_a-zA-Z0-9]+$/.test(name)) {
      throw Error("Name allows only [-_a-zA-Z0-9], got: " + name);
    }
    var value = map[name];
    if (value == null) {
      continue;
    }
    if (value instanceof goog.string.Const) {
      value = goog.string.Const.unwrap(value);
      goog.asserts.assert(!/[{;}]/.test(value), "Value does not allow [{;}].");
    } else {
      if (!goog.html.SafeStyle.VALUE_RE_.test(value)) {
        goog.asserts.fail("String value allows only [-,.\"'%_!# a-zA-Z0-9], got: " + value);
        value = goog.html.SafeStyle.INNOCUOUS_STRING;
      } else {
        if (!goog.html.SafeStyle.hasBalancedQuotes_(value)) {
          goog.asserts.fail("String value requires balanced quotes, got: " + value);
          value = goog.html.SafeStyle.INNOCUOUS_STRING;
        }
      }
    }
    style += name + ":" + value + ";";
  }
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  goog.html.SafeStyle.checkStyle_(style);
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.html.SafeStyle.hasBalancedQuotes_ = function(value) {
  var outsideSingle = true;
  var outsideDouble = true;
  for (var i = 0;i < value.length;i++) {
    var c = value.charAt(i);
    if (c == "'" && outsideDouble) {
      outsideSingle = !outsideSingle;
    } else {
      if (c == '"' && outsideSingle) {
        outsideDouble = !outsideDouble;
      }
    }
  }
  return outsideSingle && outsideDouble;
};
goog.html.SafeStyle.VALUE_RE_ = /^[-,."'%_!# a-zA-Z0-9]+$/;
goog.html.SafeStyle.concat = function(var_args) {
  var style = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      style += goog.html.SafeStyle.unwrap(argument);
    }
  };
  goog.array.forEach(arguments, addArgument);
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.provide("goog.html.SafeStyleSheet");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeStyleSheet = function() {
  this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = "";
  this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeStyleSheet.prototype.implementsGoogStringTypedString = true;
goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeStyleSheet.concat = function(var_args) {
  var result = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      result += goog.html.SafeStyleSheet.unwrap(argument);
    }
  };
  goog.array.forEach(arguments, addArgument);
  return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(result);
};
goog.html.SafeStyleSheet.fromConstant = function(styleSheet) {
  var styleSheetString = goog.string.Const.unwrap(styleSheet);
  if (styleSheetString.length === 0) {
    return goog.html.SafeStyleSheet.EMPTY;
  }
  goog.asserts.assert(!goog.string.contains(styleSheetString, "\x3c"), "Forbidden '\x3c' character in style sheet string: " + styleSheetString);
  return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheetString);
};
goog.html.SafeStyleSheet.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeStyleSheet.prototype.toString = function() {
    return "SafeStyleSheet{" + this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ + "}";
  };
}
goog.html.SafeStyleSheet.unwrap = function(safeStyleSheet) {
  if (safeStyleSheet instanceof goog.html.SafeStyleSheet && safeStyleSheet.constructor === goog.html.SafeStyleSheet && safeStyleSheet.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeStyleSheet.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeStyleSheet, got '" + safeStyleSheet + "'");
    return "type_error:SafeStyleSheet";
  }
};
goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse = function(styleSheet) {
  return (new goog.html.SafeStyleSheet).initSecurityPrivateDoNotAccessOrElse_(styleSheet);
};
goog.html.SafeStyleSheet.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(styleSheet) {
  this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = styleSheet;
  return this;
};
goog.html.SafeStyleSheet.EMPTY = goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse("");
goog.provide("goog.fs.url");
goog.fs.url.createObjectUrl = function(blob) {
  return goog.fs.url.getUrlObject_().createObjectURL(blob);
};
goog.fs.url.revokeObjectUrl = function(url) {
  goog.fs.url.getUrlObject_().revokeObjectURL(url);
};
goog.fs.url.UrlObject_;
goog.fs.url.getUrlObject_ = function() {
  var urlObject = goog.fs.url.findUrlObject_();
  if (urlObject != null) {
    return urlObject;
  } else {
    throw Error("This browser doesn't seem to support blob URLs");
  }
};
goog.fs.url.findUrlObject_ = function() {
  if (goog.isDef(goog.global.URL) && goog.isDef(goog.global.URL.createObjectURL)) {
    return (goog.global.URL);
  } else {
    if (goog.isDef(goog.global.webkitURL) && goog.isDef(goog.global.webkitURL.createObjectURL)) {
      return (goog.global.webkitURL);
    } else {
      if (goog.isDef(goog.global.createObjectURL)) {
        return (goog.global);
      } else {
        return null;
      }
    }
  }
};
goog.fs.url.browserSupportsObjectUrls = function() {
  return goog.fs.url.findUrlObject_() != null;
};
goog.provide("goog.i18n.bidi");
goog.provide("goog.i18n.bidi.Dir");
goog.provide("goog.i18n.bidi.DirectionalString");
goog.provide("goog.i18n.bidi.Format");
goog.define("goog.i18n.bidi.FORCE_RTL", false);
goog.i18n.bidi.IS_RTL = goog.i18n.bidi.FORCE_RTL || (goog.LOCALE.substring(0, 2).toLowerCase() == "ar" || goog.LOCALE.substring(0, 2).toLowerCase() == "fa" || goog.LOCALE.substring(0, 2).toLowerCase() == "he" || goog.LOCALE.substring(0, 2).toLowerCase() == "iw" || goog.LOCALE.substring(0, 2).toLowerCase() == "ps" || goog.LOCALE.substring(0, 2).toLowerCase() == "sd" || goog.LOCALE.substring(0, 2).toLowerCase() == "ug" || goog.LOCALE.substring(0, 2).toLowerCase() == "ur" || goog.LOCALE.substring(0, 
2).toLowerCase() == "yi") && (goog.LOCALE.length == 2 || goog.LOCALE.substring(2, 3) == "-" || goog.LOCALE.substring(2, 3) == "_") || goog.LOCALE.length >= 3 && goog.LOCALE.substring(0, 3).toLowerCase() == "ckb" && (goog.LOCALE.length == 3 || goog.LOCALE.substring(3, 4) == "-" || goog.LOCALE.substring(3, 4) == "_");
goog.i18n.bidi.Format = {LRE:"\u202a", RLE:"\u202b", PDF:"\u202c", LRM:"\u200e", RLM:"\u200f"};
goog.i18n.bidi.Dir = {LTR:1, RTL:-1, NEUTRAL:0};
goog.i18n.bidi.RIGHT = "right";
goog.i18n.bidi.LEFT = "left";
goog.i18n.bidi.I18N_RIGHT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.LEFT : goog.i18n.bidi.RIGHT;
goog.i18n.bidi.I18N_LEFT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
goog.i18n.bidi.toDir = function(givenDir, opt_noNeutral) {
  if (typeof givenDir == "number") {
    return givenDir > 0 ? goog.i18n.bidi.Dir.LTR : givenDir < 0 ? goog.i18n.bidi.Dir.RTL : opt_noNeutral ? null : goog.i18n.bidi.Dir.NEUTRAL;
  } else {
    if (givenDir == null) {
      return null;
    } else {
      return givenDir ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
    }
  }
};
goog.i18n.bidi.ltrChars_ = "A-Za-z\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u0300-\u0590\u0800-\u1fff" + "\u200e\u2c00-\ufb1c\ufe00-\ufe6f\ufefd-\uffff";
goog.i18n.bidi.rtlChars_ = "\u0591-\u06ef\u06fa-\u07ff\u200f\ufb1d-\ufdff\ufe70-\ufefc";
goog.i18n.bidi.htmlSkipReg_ = /<[^>]*>|&[^;]+;/g;
goog.i18n.bidi.stripHtmlIfNeeded_ = function(str, opt_isStripNeeded) {
  return opt_isStripNeeded ? str.replace(goog.i18n.bidi.htmlSkipReg_, "") : str;
};
goog.i18n.bidi.rtlCharReg_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.ltrCharReg_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.hasAnyRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.hasRtlChar = goog.i18n.bidi.hasAnyRtl;
goog.i18n.bidi.hasAnyLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.ltrRe_ = new RegExp("^[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlRe_ = new RegExp("^[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.isRtlChar = function(str) {
  return goog.i18n.bidi.rtlRe_.test(str);
};
goog.i18n.bidi.isLtrChar = function(str) {
  return goog.i18n.bidi.ltrRe_.test(str);
};
goog.i18n.bidi.isNeutralChar = function(str) {
  return !goog.i18n.bidi.isLtrChar(str) && !goog.i18n.bidi.isRtlChar(str);
};
goog.i18n.bidi.ltrDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.rtlChars_ + "]*[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.ltrChars_ + "]*[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.startsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlText = goog.i18n.bidi.startsWithRtl;
goog.i18n.bidi.startsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrText = goog.i18n.bidi.startsWithLtr;
goog.i18n.bidi.isRequiredLtrRe_ = /^http:\/\/.*/;
goog.i18n.bidi.isNeutralText = function(str, opt_isHtml) {
  str = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml);
  return goog.i18n.bidi.isRequiredLtrRe_.test(str) || !goog.i18n.bidi.hasAnyLtr(str) && !goog.i18n.bidi.hasAnyRtl(str);
};
goog.i18n.bidi.ltrExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "][^" + goog.i18n.bidi.rtlChars_ + "]*$");
goog.i18n.bidi.rtlExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "][^" + goog.i18n.bidi.ltrChars_ + "]*$");
goog.i18n.bidi.endsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrExitText = goog.i18n.bidi.endsWithLtr;
goog.i18n.bidi.endsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlExitText = goog.i18n.bidi.endsWithRtl;
goog.i18n.bidi.rtlLocalesRe_ = new RegExp("^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|" + ".*[-_](Arab|Hebr|Thaa|Nkoo|Tfng))" + "(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)", "i");
goog.i18n.bidi.isRtlLanguage = function(lang) {
  return goog.i18n.bidi.rtlLocalesRe_.test(lang);
};
goog.i18n.bidi.bracketGuardHtmlRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(&lt;.*?(&gt;)+)/g;
goog.i18n.bidi.bracketGuardTextRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(<.*?>+)/g;
goog.i18n.bidi.guardBracketInHtml = function(s, opt_isRtlContext) {
  var useRtl = opt_isRtlContext === undefined ? goog.i18n.bidi.hasAnyRtl(s) : opt_isRtlContext;
  if (useRtl) {
    return s.replace(goog.i18n.bidi.bracketGuardHtmlRe_, "\x3cspan dir\x3drtl\x3e$\x26\x3c/span\x3e");
  }
  return s.replace(goog.i18n.bidi.bracketGuardHtmlRe_, "\x3cspan dir\x3dltr\x3e$\x26\x3c/span\x3e");
};
goog.i18n.bidi.guardBracketInText = function(s, opt_isRtlContext) {
  var useRtl = opt_isRtlContext === undefined ? goog.i18n.bidi.hasAnyRtl(s) : opt_isRtlContext;
  var mark = useRtl ? goog.i18n.bidi.Format.RLM : goog.i18n.bidi.Format.LRM;
  return s.replace(goog.i18n.bidi.bracketGuardTextRe_, mark + "$\x26" + mark);
};
goog.i18n.bidi.enforceRtlInHtml = function(html) {
  if (html.charAt(0) == "\x3c") {
    return html.replace(/<\w+/, "$\x26 dir\x3drtl");
  }
  return "\n\x3cspan dir\x3drtl\x3e" + html + "\x3c/span\x3e";
};
goog.i18n.bidi.enforceRtlInText = function(text) {
  return goog.i18n.bidi.Format.RLE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.enforceLtrInHtml = function(html) {
  if (html.charAt(0) == "\x3c") {
    return html.replace(/<\w+/, "$\x26 dir\x3dltr");
  }
  return "\n\x3cspan dir\x3dltr\x3e" + html + "\x3c/span\x3e";
};
goog.i18n.bidi.enforceLtrInText = function(text) {
  return goog.i18n.bidi.Format.LRE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.dimensionsRe_ = /:\s*([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)/g;
goog.i18n.bidi.leftRe_ = /left/gi;
goog.i18n.bidi.rightRe_ = /right/gi;
goog.i18n.bidi.tempRe_ = /%%%%/g;
goog.i18n.bidi.mirrorCSS = function(cssStr) {
  return cssStr.replace(goog.i18n.bidi.dimensionsRe_, ":$1 $4 $3 $2").replace(goog.i18n.bidi.leftRe_, "%%%%").replace(goog.i18n.bidi.rightRe_, goog.i18n.bidi.LEFT).replace(goog.i18n.bidi.tempRe_, goog.i18n.bidi.RIGHT);
};
goog.i18n.bidi.doubleQuoteSubstituteRe_ = /([\u0591-\u05f2])"/g;
goog.i18n.bidi.singleQuoteSubstituteRe_ = /([\u0591-\u05f2])'/g;
goog.i18n.bidi.normalizeHebrewQuote = function(str) {
  return str.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_, "$1\u05f4").replace(goog.i18n.bidi.singleQuoteSubstituteRe_, "$1\u05f3");
};
goog.i18n.bidi.wordSeparatorRe_ = /\s+/;
goog.i18n.bidi.hasNumeralsRe_ = /[\d\u06f0-\u06f9]/;
goog.i18n.bidi.rtlDetectionThreshold_ = .4;
goog.i18n.bidi.estimateDirection = function(str, opt_isHtml) {
  var rtlCount = 0;
  var totalCount = 0;
  var hasWeaklyLtr = false;
  var tokens = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml).split(goog.i18n.bidi.wordSeparatorRe_);
  for (var i = 0;i < tokens.length;i++) {
    var token = tokens[i];
    if (goog.i18n.bidi.startsWithRtl(token)) {
      rtlCount++;
      totalCount++;
    } else {
      if (goog.i18n.bidi.isRequiredLtrRe_.test(token)) {
        hasWeaklyLtr = true;
      } else {
        if (goog.i18n.bidi.hasAnyLtr(token)) {
          totalCount++;
        } else {
          if (goog.i18n.bidi.hasNumeralsRe_.test(token)) {
            hasWeaklyLtr = true;
          }
        }
      }
    }
  }
  return totalCount == 0 ? hasWeaklyLtr ? goog.i18n.bidi.Dir.LTR : goog.i18n.bidi.Dir.NEUTRAL : rtlCount / totalCount > goog.i18n.bidi.rtlDetectionThreshold_ ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
};
goog.i18n.bidi.detectRtlDirectionality = function(str, opt_isHtml) {
  return goog.i18n.bidi.estimateDirection(str, opt_isHtml) == goog.i18n.bidi.Dir.RTL;
};
goog.i18n.bidi.setElementDirAndAlign = function(element, dir) {
  if (element) {
    dir = goog.i18n.bidi.toDir(dir);
    if (dir) {
      element.style.textAlign = dir == goog.i18n.bidi.Dir.RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
      element.dir = dir == goog.i18n.bidi.Dir.RTL ? "rtl" : "ltr";
    }
  }
};
goog.i18n.bidi.setElementDirByTextDirectionality = function(element, text) {
  switch(goog.i18n.bidi.estimateDirection(text)) {
    case goog.i18n.bidi.Dir.LTR:
      element.dir = "ltr";
      break;
    case goog.i18n.bidi.Dir.RTL:
      element.dir = "rtl";
      break;
    default:
      element.removeAttribute("dir");
  }
};
goog.i18n.bidi.DirectionalString = function() {
};
goog.i18n.bidi.DirectionalString.prototype.implementsGoogI18nBidiDirectionalString;
goog.i18n.bidi.DirectionalString.prototype.getDirection;
goog.provide("goog.html.SafeUrl");
goog.require("goog.asserts");
goog.require("goog.fs.url");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeUrl = function() {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
  this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeUrl.INNOCUOUS_STRING = "about:invalid#zClosurez";
goog.html.SafeUrl.prototype.implementsGoogStringTypedString = true;
goog.html.SafeUrl.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};
goog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeUrl.prototype.getDirection = function() {
  return goog.i18n.bidi.Dir.LTR;
};
if (goog.DEBUG) {
  goog.html.SafeUrl.prototype.toString = function() {
    return "SafeUrl{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
  };
}
goog.html.SafeUrl.unwrap = function(safeUrl) {
  if (safeUrl instanceof goog.html.SafeUrl && safeUrl.constructor === goog.html.SafeUrl && safeUrl.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeUrl, got '" + safeUrl + "'");
    return "type_error:SafeUrl";
  }
};
goog.html.SafeUrl.fromConstant = function(url) {
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(url));
};
goog.html.SAFE_MIME_TYPE_PATTERN_ = /^(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm))$/i;
goog.html.SafeUrl.fromBlob = function(blob) {
  var url = goog.html.SAFE_MIME_TYPE_PATTERN_.test(blob.type) ? goog.fs.url.createObjectUrl(blob) : goog.html.SafeUrl.INNOCUOUS_STRING;
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.DATA_URL_PATTERN_ = /^data:([^;,]*);base64,[a-z0-9+\/]+=*$/i;
goog.html.SafeUrl.fromDataUrl = function(dataUrl) {
  var match = dataUrl.match(goog.html.DATA_URL_PATTERN_);
  var valid = match && goog.html.SAFE_MIME_TYPE_PATTERN_.test(match[1]);
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(valid ? dataUrl : goog.html.SafeUrl.INNOCUOUS_STRING);
};
goog.html.SAFE_URL_PATTERN_ = /^(?:(?:https?|mailto|ftp):|[^&:/?#]*(?:[/?#]|$))/i;
goog.html.SafeUrl.sanitize = function(url) {
  if (url instanceof goog.html.SafeUrl) {
    return url;
  } else {
    if (url.implementsGoogStringTypedString) {
      url = url.getTypedStringValue();
    } else {
      url = String(url);
    }
  }
  if (!goog.html.SAFE_URL_PATTERN_.test(url)) {
    url = goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse = function(url) {
  var safeUrl = new goog.html.SafeUrl;
  safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = url;
  return safeUrl;
};
goog.provide("goog.html.TrustedResourceUrl");
goog.require("goog.asserts");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.TrustedResourceUrl = function() {
  this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = "";
  this.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString = true;
goog.html.TrustedResourceUrl.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;
};
goog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.TrustedResourceUrl.prototype.getDirection = function() {
  return goog.i18n.bidi.Dir.LTR;
};
if (goog.DEBUG) {
  goog.html.TrustedResourceUrl.prototype.toString = function() {
    return "TrustedResourceUrl{" + this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ + "}";
  };
}
goog.html.TrustedResourceUrl.unwrap = function(trustedResourceUrl) {
  if (trustedResourceUrl instanceof goog.html.TrustedResourceUrl && trustedResourceUrl.constructor === goog.html.TrustedResourceUrl && trustedResourceUrl.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return trustedResourceUrl.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type TrustedResourceUrl, got '" + trustedResourceUrl + "'");
    return "type_error:TrustedResourceUrl";
  }
};
goog.html.TrustedResourceUrl.fromConstant = function(url) {
  return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(url));
};
goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse = function(url) {
  var trustedResourceUrl = new goog.html.TrustedResourceUrl;
  trustedResourceUrl.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = url;
  return trustedResourceUrl;
};
goog.provide("goog.html.SafeHtml");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.TagName");
goog.require("goog.dom.tags");
goog.require("goog.html.SafeStyle");
goog.require("goog.html.SafeStyleSheet");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeHtml = function() {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
  this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
  this.dir_ = null;
};
goog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeHtml.prototype.getDirection = function() {
  return this.dir_;
};
goog.html.SafeHtml.prototype.implementsGoogStringTypedString = true;
goog.html.SafeHtml.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeHtml.prototype.toString = function() {
    return "SafeHtml{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
  };
}
goog.html.SafeHtml.unwrap = function(safeHtml) {
  if (safeHtml instanceof goog.html.SafeHtml && safeHtml.constructor === goog.html.SafeHtml && safeHtml.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeHtml.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeHtml, got '" + safeHtml + "'");
    return "type_error:SafeHtml";
  }
};
goog.html.SafeHtml.TextOrHtml_;
goog.html.SafeHtml.htmlEscape = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var dir = null;
  if (textOrHtml.implementsGoogI18nBidiDirectionalString) {
    dir = textOrHtml.getDirection();
  }
  var textAsString;
  if (textOrHtml.implementsGoogStringTypedString) {
    textAsString = textOrHtml.getTypedStringValue();
  } else {
    textAsString = String(textOrHtml);
  }
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.htmlEscape(textAsString), dir);
};
goog.html.SafeHtml.htmlEscapePreservingNewlines = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var html = goog.html.SafeHtml.htmlEscape(textOrHtml);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.newLineToBr(goog.html.SafeHtml.unwrap(html)), html.getDirection());
};
goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var html = goog.html.SafeHtml.htmlEscape(textOrHtml);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.whitespaceEscape(goog.html.SafeHtml.unwrap(html)), html.getDirection());
};
goog.html.SafeHtml.from = goog.html.SafeHtml.htmlEscape;
goog.html.SafeHtml.VALID_NAMES_IN_TAG_ = /^[a-zA-Z0-9-]+$/;
goog.html.SafeHtml.URL_ATTRIBUTES_ = goog.object.createSet("action", "cite", "data", "formaction", "href", "manifest", "poster", "src");
goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_ = goog.object.createSet(goog.dom.TagName.EMBED, goog.dom.TagName.IFRAME, goog.dom.TagName.LINK, goog.dom.TagName.OBJECT, goog.dom.TagName.SCRIPT, goog.dom.TagName.STYLE, goog.dom.TagName.TEMPLATE);
goog.html.SafeHtml.AttributeValue_;
goog.html.SafeHtml.create = function(tagName, opt_attributes, opt_content) {
  if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(tagName)) {
    throw Error("Invalid tag name \x3c" + tagName + "\x3e.");
  }
  if (tagName.toUpperCase() in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_) {
    throw Error("Tag name \x3c" + tagName + "\x3e is not allowed for SafeHtml.");
  }
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(tagName, opt_attributes, opt_content);
};
goog.html.SafeHtml.createIframe = function(opt_src, opt_srcdoc, opt_attributes, opt_content) {
  var fixedAttributes = {};
  fixedAttributes["src"] = opt_src || null;
  fixedAttributes["srcdoc"] = opt_srcdoc || null;
  var defaultAttributes = {"sandbox":""};
  var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, defaultAttributes, opt_attributes);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe", attributes, opt_content);
};
goog.html.SafeHtml.createStyle = function(styleSheet, opt_attributes) {
  var fixedAttributes = {"type":"text/css"};
  var defaultAttributes = {};
  var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, defaultAttributes, opt_attributes);
  var content = "";
  styleSheet = goog.array.concat(styleSheet);
  for (var i = 0;i < styleSheet.length;i++) {
    content += goog.html.SafeStyleSheet.unwrap(styleSheet[i]);
  }
  var htmlContent = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content, goog.i18n.bidi.Dir.NEUTRAL);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("style", attributes, htmlContent);
};
goog.html.SafeHtml.getAttrNameAndValue_ = function(tagName, name, value) {
  if (value instanceof goog.string.Const) {
    value = goog.string.Const.unwrap(value);
  } else {
    if (name.toLowerCase() == "style") {
      value = goog.html.SafeHtml.getStyleValue_(value);
    } else {
      if (/^on/i.test(name)) {
        throw Error('Attribute "' + name + '" requires goog.string.Const value, "' + value + '" given.');
      } else {
        if (name.toLowerCase() in goog.html.SafeHtml.URL_ATTRIBUTES_) {
          if (value instanceof goog.html.TrustedResourceUrl) {
            value = goog.html.TrustedResourceUrl.unwrap(value);
          } else {
            if (value instanceof goog.html.SafeUrl) {
              value = goog.html.SafeUrl.unwrap(value);
            } else {
              if (goog.isString(value)) {
                value = goog.html.SafeUrl.sanitize(value).getTypedStringValue();
              } else {
                throw Error('Attribute "' + name + '" on tag "' + tagName + '" requires goog.html.SafeUrl, goog.string.Const, or string,' + ' value "' + value + '" given.');
              }
            }
          }
        }
      }
    }
  }
  if (value.implementsGoogStringTypedString) {
    value = value.getTypedStringValue();
  }
  goog.asserts.assert(goog.isString(value) || goog.isNumber(value), "String or number value expected, got " + typeof value + " with value: " + value);
  return name + '\x3d"' + goog.string.htmlEscape(String(value)) + '"';
};
goog.html.SafeHtml.getStyleValue_ = function(value) {
  if (!goog.isObject(value)) {
    throw Error('The "style" attribute requires goog.html.SafeStyle or map ' + "of style properties, " + typeof value + " given: " + value);
  }
  if (!(value instanceof goog.html.SafeStyle)) {
    value = goog.html.SafeStyle.create(value);
  }
  return goog.html.SafeStyle.unwrap(value);
};
goog.html.SafeHtml.createWithDir = function(dir, tagName, opt_attributes, opt_content) {
  var html = goog.html.SafeHtml.create(tagName, opt_attributes, opt_content);
  html.dir_ = dir;
  return html;
};
goog.html.SafeHtml.concat = function(var_args) {
  var dir = goog.i18n.bidi.Dir.NEUTRAL;
  var content = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      var html = goog.html.SafeHtml.htmlEscape(argument);
      content += goog.html.SafeHtml.unwrap(html);
      var htmlDir = html.getDirection();
      if (dir == goog.i18n.bidi.Dir.NEUTRAL) {
        dir = htmlDir;
      } else {
        if (htmlDir != goog.i18n.bidi.Dir.NEUTRAL && dir != htmlDir) {
          dir = null;
        }
      }
    }
  };
  goog.array.forEach(arguments, addArgument);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content, dir);
};
goog.html.SafeHtml.concatWithDir = function(dir, var_args) {
  var html = goog.html.SafeHtml.concat(goog.array.slice(arguments, 1));
  html.dir_ = dir;
  return html;
};
goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse = function(html, dir) {
  return (new goog.html.SafeHtml).initSecurityPrivateDoNotAccessOrElse_(html, dir);
};
goog.html.SafeHtml.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(html, dir) {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = html;
  this.dir_ = dir;
  return this;
};
goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse = function(tagName, opt_attributes, opt_content) {
  var dir = null;
  var result = "\x3c" + tagName;
  if (opt_attributes) {
    for (var name in opt_attributes) {
      if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(name)) {
        throw Error('Invalid attribute name "' + name + '".');
      }
      var value = opt_attributes[name];
      if (!goog.isDefAndNotNull(value)) {
        continue;
      }
      result += " " + goog.html.SafeHtml.getAttrNameAndValue_(tagName, name, value);
    }
  }
  var content = opt_content;
  if (!goog.isDefAndNotNull(content)) {
    content = [];
  } else {
    if (!goog.isArray(content)) {
      content = [content];
    }
  }
  if (goog.dom.tags.isVoidTag(tagName.toLowerCase())) {
    goog.asserts.assert(!content.length, "Void tag \x3c" + tagName + "\x3e does not allow content.");
    result += "\x3e";
  } else {
    var html = goog.html.SafeHtml.concat(content);
    result += "\x3e" + goog.html.SafeHtml.unwrap(html) + "\x3c/" + tagName + "\x3e";
    dir = html.getDirection();
  }
  var dirAttribute = opt_attributes && opt_attributes["dir"];
  if (dirAttribute) {
    if (/^(ltr|rtl|auto)$/i.test(dirAttribute)) {
      dir = goog.i18n.bidi.Dir.NEUTRAL;
    } else {
      dir = null;
    }
  }
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(result, dir);
};
goog.html.SafeHtml.combineAttributes = function(fixedAttributes, defaultAttributes, opt_attributes) {
  var combinedAttributes = {};
  var name;
  for (name in fixedAttributes) {
    goog.asserts.assert(name.toLowerCase() == name, "Must be lower case");
    combinedAttributes[name] = fixedAttributes[name];
  }
  for (name in defaultAttributes) {
    goog.asserts.assert(name.toLowerCase() == name, "Must be lower case");
    combinedAttributes[name] = defaultAttributes[name];
  }
  for (name in opt_attributes) {
    var nameLower = name.toLowerCase();
    if (nameLower in fixedAttributes) {
      throw Error('Cannot override "' + nameLower + '" attribute, got "' + name + '" with value "' + opt_attributes[name] + '"');
    }
    if (nameLower in defaultAttributes) {
      delete combinedAttributes[nameLower];
    }
    combinedAttributes[name] = opt_attributes[name];
  }
  return combinedAttributes;
};
goog.html.SafeHtml.DOCTYPE_HTML = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("\x3c!DOCTYPE html\x3e", goog.i18n.bidi.Dir.NEUTRAL);
goog.html.SafeHtml.EMPTY = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("", goog.i18n.bidi.Dir.NEUTRAL);
goog.provide("goog.dom.safe");
goog.provide("goog.dom.safe.InsertAdjacentHtmlPosition");
goog.require("goog.asserts");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.dom.safe.InsertAdjacentHtmlPosition = {AFTERBEGIN:"afterbegin", AFTEREND:"afterend", BEFOREBEGIN:"beforebegin", BEFOREEND:"beforeend"};
goog.dom.safe.insertAdjacentHtml = function(node, position, html) {
  node.insertAdjacentHTML(position, goog.html.SafeHtml.unwrap(html));
};
goog.dom.safe.setInnerHtml = function(elem, html) {
  elem.innerHTML = goog.html.SafeHtml.unwrap(html);
};
goog.dom.safe.setOuterHtml = function(elem, html) {
  elem.outerHTML = goog.html.SafeHtml.unwrap(html);
};
goog.dom.safe.documentWrite = function(doc, html) {
  doc.write(goog.html.SafeHtml.unwrap(html));
};
goog.dom.safe.setAnchorHref = function(anchor, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  anchor.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.setEmbedSrc = function(embed, url) {
  embed.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setFrameSrc = function(frame, url) {
  frame.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setIframeSrc = function(iframe, url) {
  iframe.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setLinkHrefAndRel = function(link, url, rel) {
  link.rel = rel;
  if (goog.string.caseInsensitiveContains(rel, "stylesheet")) {
    goog.asserts.assert(url instanceof goog.html.TrustedResourceUrl, 'URL must be TrustedResourceUrl because "rel" contains "stylesheet"');
    link.href = goog.html.TrustedResourceUrl.unwrap(url);
  } else {
    if (url instanceof goog.html.TrustedResourceUrl) {
      link.href = goog.html.TrustedResourceUrl.unwrap(url);
    } else {
      if (url instanceof goog.html.SafeUrl) {
        link.href = goog.html.SafeUrl.unwrap(url);
      } else {
        link.href = goog.html.SafeUrl.sanitize(url).getTypedStringValue();
      }
    }
  }
};
goog.dom.safe.setObjectData = function(object, url) {
  object.data = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setScriptSrc = function(script, url) {
  script.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setLocationHref = function(loc, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  loc.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.openInWindow = function(url, opt_openerWin, opt_name, opt_specs, opt_replace) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  var win = opt_openerWin || window;
  return win.open(goog.html.SafeUrl.unwrap(safeUrl), opt_name ? goog.string.Const.unwrap(opt_name) : "", opt_specs, opt_replace);
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = Math.sign || function(x) {
  if (x > 0) {
    return 1;
  }
  if (x < 0) {
    return -1;
  }
  return x;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return (goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.isNegativeZero = function(num) {
  return num == 0 && 1 / num < 0;
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num ? 1 : 0);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.math.Coordinate.prototype.rotateRadians = function(radians, opt_center) {
  var center = opt_center || new goog.math.Coordinate(0, 0);
  var x = this.x;
  var y = this.y;
  var cos = Math.cos(radians);
  var sin = Math.sin(radians);
  this.x = (x - center.x) * cos - (y - center.y) * sin + center.x;
  this.y = (x - center.x) * sin + (y - center.y) * cos + center.y;
};
goog.math.Coordinate.prototype.rotateDegrees = function(degrees, opt_center) {
  this.rotateRadians(goog.math.toRadians(degrees), opt_center);
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return (this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return !this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToCover = function(target) {
  var s = this.aspectRatio() <= target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.Appendable");
goog.provide("goog.dom.DomHelper");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.TagName");
goog.require("goog.dom.safe");
goog.require("goog.html.SafeHtml");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string.Unicode");
goog.require("goog.userAgent");
goog.define("goog.dom.ASSUME_QUIRKS_MODE", false);
goog.define("goog.dom.ASSUME_STANDARDS_MODE", false);
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.dom.getElementHelper_(document, element);
};
goog.dom.getElementHelper_ = function(doc, element) {
  return goog.isString(element) ? doc.getElementById(element) : element;
};
goog.dom.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(document, id);
};
goog.dom.getRequiredElementHelper_ = function(doc, id) {
  goog.asserts.assertString(id);
  var element = goog.dom.getElementHelper_(doc, id);
  element = goog.asserts.assertElement(element, "No element found with id: " + id);
  return element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (parent.getElementsByClassName) {
    retVal = parent.getElementsByClassName(className)[0];
  } else {
    if (goog.dom.canUseQuerySelector_(parent)) {
      retVal = parent.querySelector("." + className);
    } else {
      retVal = goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el)[0];
    }
  }
  return retVal || null;
};
goog.dom.getRequiredElementByClass = function(className, opt_root) {
  var retValue = goog.dom.getElementByClass(className, opt_root);
  return goog.asserts.assert(retValue, "No element found with className: " + className);
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return !!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (goog.dom.DIRECT_ATTRIBUTE_MAP_.hasOwnProperty(key)) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var body = doc.body;
    var docEl = (doc.documentElement);
    if (!(docEl && body)) {
      return 0;
    }
    var vh = goog.dom.getViewportSize_(win).height;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || goog.global || window;
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  if (goog.userAgent.IE && goog.userAgent.isVersionOrHigher("10") && win.pageYOffset != el.scrollTop) {
    return new goog.math.Coordinate(el.scrollLeft, el.scrollTop);
  }
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  if (doc.scrollingElement) {
    return doc.scrollingElement;
  }
  if (!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc)) {
    return doc.documentElement;
  }
  return doc.body || doc.documentElement;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && attributes && (attributes.name || attributes.type)) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        element.className = attributes.join(" ");
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var table = (doc.createElement(goog.dom.TagName.TABLE));
  var tbody = table.appendChild(doc.createElement(goog.dom.TagName.TBODY));
  for (var i = 0;i < rows;i++) {
    var tr = doc.createElement(goog.dom.TagName.TR);
    for (var j = 0;j < columns;j++) {
      var td = doc.createElement(goog.dom.TagName.TD);
      if (fillWithNbsp) {
        goog.dom.setTextContent(td, goog.string.Unicode.NBSP);
      }
      tr.appendChild(td);
    }
    tbody.appendChild(tr);
  }
  return table;
};
goog.dom.safeHtmlToNode = function(html) {
  return goog.dom.safeHtmlToNode_(document, html);
};
goog.dom.safeHtmlToNode_ = function(doc, html) {
  var tempDiv = doc.createElement(goog.dom.TagName.DIV);
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    goog.dom.safe.setInnerHtml(tempDiv, goog.html.SafeHtml.concat(goog.html.SafeHtml.create("br"), html));
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    goog.dom.safe.setInnerHtml(tempDiv, html);
  }
  return goog.dom.childrenToNode_(doc, tempDiv);
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement(goog.dom.TagName.DIV);
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  return goog.dom.childrenToNode_(doc, tempDiv);
};
goog.dom.childrenToNode_ = function(doc, tempDiv) {
  if (tempDiv.childNodes.length == 1) {
    return tempDiv.removeChild(tempDiv.firstChild);
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch((node).tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return (element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return (goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (goog.isDef(node.firstElementChild)) {
    return (node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (goog.isDef(node.lastElementChild)) {
    return (node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (goog.isDef(node.nextElementSibling)) {
    return (node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (goog.isDef(node.previousElementSibling)) {
    return (node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return (node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  var parent;
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    var isIe9 = goog.userAgent.IE && goog.userAgent.isVersionOrHigher("9") && !goog.userAgent.isVersionOrHigher("10");
    if (!(isIe9 && goog.global["SVGElement"] && element instanceof goog.global["SVGElement"])) {
      parent = element.parentElement;
      if (parent) {
        return parent;
      }
    }
  }
  parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return -1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return -1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return (isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return -1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return -1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  goog.asserts.assert(node, "Node cannot be null or undefined.");
  return (node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow(goog.dom.getFrameContentDocument(frame));
};
goog.dom.setTextContent = function(node, text) {
  goog.asserts.assert(node != null, "goog.dom.setTextContent expects a non-null value for node");
  if ("textContent" in node) {
    node.textContent = text;
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      node.data = text;
    } else {
      if (node.firstChild && node.firstChild.nodeType == goog.dom.NodeType.TEXT) {
        while (node.lastChild != node.firstChild) {
          node.removeChild(node.lastChild);
        }
        node.firstChild.data = text;
      } else {
        goog.dom.removeChildren(node);
        var doc = goog.dom.getOwnerDocument(node);
        node.appendChild(doc.createTextNode(String(text)));
      }
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement(goog.dom.TagName.DIV);
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  return goog.dom.hasSpecifiedTabIndex_(element) && goog.dom.isTabIndexFocusable_(element);
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.isFocusable = function(element) {
  var focusable;
  if (goog.dom.nativelySupportsFocus_(element)) {
    focusable = !element.disabled && (!goog.dom.hasSpecifiedTabIndex_(element) || goog.dom.isTabIndexFocusable_(element));
  } else {
    focusable = goog.dom.isFocusableTabIndex(element);
  }
  return focusable && goog.userAgent.IE ? goog.dom.hasNonZeroBoundingRect_(element) : focusable;
};
goog.dom.hasSpecifiedTabIndex_ = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  return goog.isDefAndNotNull(attrNode) && attrNode.specified;
};
goog.dom.isTabIndexFocusable_ = function(element) {
  var index = element.tabIndex;
  return goog.isNumber(index) && index >= 0 && index < 32768;
};
goog.dom.nativelySupportsFocus_ = function(element) {
  return element.tagName == goog.dom.TagName.A || element.tagName == goog.dom.TagName.INPUT || element.tagName == goog.dom.TagName.TEXTAREA || element.tagName == goog.dom.TagName.SELECT || element.tagName == goog.dom.TagName.BUTTON;
};
goog.dom.hasNonZeroBoundingRect_ = function(element) {
  var rect = goog.isFunction(element["getBoundingClientRect"]) ? element.getBoundingClientRect() : {"height":element.offsetHeight, "width":element.offsetWidth};
  return goog.isDefAndNotNull(rect) && rect.height > 0 && rect.width > 0;
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class, opt_maxSearchSteps) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return (goog.dom.getAncestor(element, function(node) {
    return (!tagName || node.nodeName == tagName) && (!opt_class || goog.isString(node.className) && goog.array.contains(node.className.split(/\s+/), opt_class));
  }, true, opt_maxSearchSteps));
};
goog.dom.getAncestorByClass = function(element, className, opt_maxSearchSteps) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className, opt_maxSearchSteps);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    goog.asserts.assert(element.name != "parentNode");
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.getPixelRatio = function() {
  var win = goog.dom.getWindow();
  if (goog.isDef(win.devicePixelRatio)) {
    return win.devicePixelRatio;
  } else {
    if (win.matchMedia) {
      return goog.dom.matchesPixelRatio_(.75) || goog.dom.matchesPixelRatio_(1.5) || goog.dom.matchesPixelRatio_(2) || goog.dom.matchesPixelRatio_(3) || 1;
    }
  }
  return 1;
};
goog.dom.matchesPixelRatio_ = function(pixelRatio) {
  var win = goog.dom.getWindow();
  var query = "(-webkit-min-device-pixel-ratio: " + pixelRatio + ")," + "(min--moz-device-pixel-ratio: " + pixelRatio + ")," + "(min-resolution: " + pixelRatio + "dppx)";
  return win.matchMedia(query).matches ? pixelRatio : 0;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || goog.global.document || document;
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  return goog.dom.getElementHelper_(this.document_, element);
};
goog.dom.DomHelper.prototype.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(this.document_, id);
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.getRequiredElementByClass = function(className, opt_root) {
  var root = opt_root || this.document_;
  return goog.dom.getRequiredElementByClass(className, root);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.safeHtmlToNode = function(html) {
  return goog.dom.safeHtmlToNode_(this.document_, html);
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.isFocusable = goog.dom.isFocusable;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("goog.userAgent.product");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.platform");
goog.require("goog.userAgent");
goog.define("goog.userAgent.product.ASSUME_FIREFOX", false);
goog.define("goog.userAgent.product.ASSUME_IPHONE", false);
goog.define("goog.userAgent.product.ASSUME_IPAD", false);
goog.define("goog.userAgent.product.ASSUME_ANDROID", false);
goog.define("goog.userAgent.product.ASSUME_CHROME", false);
goog.define("goog.userAgent.product.ASSUME_SAFARI", false);
goog.userAgent.product.PRODUCT_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_OPERA || goog.userAgent.product.ASSUME_FIREFOX || goog.userAgent.product.ASSUME_IPHONE || goog.userAgent.product.ASSUME_IPAD || goog.userAgent.product.ASSUME_ANDROID || goog.userAgent.product.ASSUME_CHROME || goog.userAgent.product.ASSUME_SAFARI;
goog.userAgent.product.OPERA = goog.userAgent.OPERA;
goog.userAgent.product.IE = goog.userAgent.IE;
goog.userAgent.product.EDGE = goog.userAgent.EDGE;
goog.userAgent.product.FIREFOX = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_FIREFOX : goog.labs.userAgent.browser.isFirefox();
goog.userAgent.product.isIphoneOrIpod_ = function() {
  return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpod();
};
goog.userAgent.product.IPHONE = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_IPHONE : goog.userAgent.product.isIphoneOrIpod_();
goog.userAgent.product.IPAD = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad();
goog.userAgent.product.ANDROID = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_ANDROID : goog.labs.userAgent.browser.isAndroidBrowser();
goog.userAgent.product.CHROME = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_CHROME : goog.labs.userAgent.browser.isChrome();
goog.userAgent.product.isSafariDesktop_ = function() {
  return goog.labs.userAgent.browser.isSafari() && !goog.labs.userAgent.platform.isIos();
};
goog.userAgent.product.SAFARI = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_SAFARI : goog.userAgent.product.isSafariDesktop_();
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("cljs.core");
goog.require("goog.string");
goog.require("goog.object");
goog.require("goog.array");
goog.require("goog.string.StringBuffer");
cljs.core._STAR_clojurescript_version_STAR_ = "1.7.228";
cljs.core._STAR_unchecked_if_STAR_ = false;
goog.define("cljs.core._STAR_target_STAR_", "default");
cljs.core._STAR_ns_STAR_ = null;
cljs.core._STAR_out_STAR_ = null;
cljs.core._STAR_assert_STAR_ = true;
if (typeof cljs.core._STAR_print_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_fn_STAR_ = function cljs$core$_STAR_print_fn_STAR_(_) {
    throw new Error("No *print-fn* fn set for evaluation environment");
  };
}
if (typeof cljs.core._STAR_print_err_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_err_fn_STAR_ = function cljs$core$_STAR_print_err_fn_STAR_(_) {
    throw new Error("No *print-err-fn* fn set for evaluation environment");
  };
}
cljs.core.set_print_fn_BANG_ = function cljs$core$set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core.set_print_err_fn_BANG_ = function cljs$core$set_print_err_fn_BANG_(f) {
  return cljs.core._STAR_print_err_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
if (typeof cljs.core._STAR_loaded_libs_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_loaded_libs_STAR_ = null;
}
cljs.core.pr_opts = function cljs$core$pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function cljs$core$enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  cljs.core._STAR_print_fn_STAR_ = function() {
    var G__8262__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args) : cljs.core.into_array.call(null, args));
    };
    var G__8262 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__8263__i = 0, G__8263__a = new Array(arguments.length - 0);
        while (G__8263__i < G__8263__a.length) {
          G__8263__a[G__8263__i] = arguments[G__8263__i + 0];
          ++G__8263__i;
        }
        args = new cljs.core.IndexedSeq(G__8263__a, 0);
      }
      return G__8262__delegate.call(this, args);
    };
    G__8262.cljs$lang$maxFixedArity = 0;
    G__8262.cljs$lang$applyTo = function(arglist__8264) {
      var args = cljs.core.seq(arglist__8264);
      return G__8262__delegate(args);
    };
    G__8262.cljs$core$IFn$_invoke$arity$variadic = G__8262__delegate;
    return G__8262;
  }();
  cljs.core._STAR_print_err_fn_STAR_ = function() {
    var G__8265__delegate = function(args) {
      return console.error.apply(console, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args) : cljs.core.into_array.call(null, args));
    };
    var G__8265 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__8266__i = 0, G__8266__a = new Array(arguments.length - 0);
        while (G__8266__i < G__8266__a.length) {
          G__8266__a[G__8266__i] = arguments[G__8266__i + 0];
          ++G__8266__i;
        }
        args = new cljs.core.IndexedSeq(G__8266__a, 0);
      }
      return G__8265__delegate.call(this, args);
    };
    G__8265.cljs$lang$maxFixedArity = 0;
    G__8265.cljs$lang$applyTo = function(arglist__8267) {
      var args = cljs.core.seq(arglist__8267);
      return G__8265__delegate(args);
    };
    G__8265.cljs$core$IFn$_invoke$arity$variadic = G__8265__delegate;
    return G__8265;
  }();
  return null;
};
cljs.core.truth_ = function cljs$core$truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function cljs$core$identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function cljs$core$nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function cljs$core$array_QMARK_(x) {
  if (cljs.core._STAR_target_STAR_ === "nodejs") {
    return Array.isArray(x);
  } else {
    return x instanceof Array;
  }
};
cljs.core.number_QMARK_ = function cljs$core$number_QMARK_(x) {
  return typeof x === "number";
};
cljs.core.not = function cljs$core$not(x) {
  if (x == null) {
    return true;
  } else {
    if (x === false) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.some_QMARK_ = function cljs$core$some_QMARK_(x) {
  return !(x == null);
};
cljs.core.object_QMARK_ = function cljs$core$object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function cljs$core$string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.char_QMARK_ = function cljs$core$char_QMARK_(x) {
  return goog.string.isUnicodeChar(x);
};
cljs.core.native_satisfies_QMARK_ = function cljs$core$native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function cljs$core$is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function cljs$core$type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function cljs$core$missing_protocol(proto, obj) {
  var ty = cljs.core.type(obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__6141__auto__ = ty;
    if (cljs.core.truth_(and__6141__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__6141__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function cljs$core$type__GT_str(ty) {
  var temp__4655__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4655__auto__)) {
    var s = temp__4655__auto__;
    return s;
  } else {
    return [cljs.core.str(ty)].join("");
  }
};
cljs.core.load_file = function cljs$core$load_file(file) {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    return goog.nodeGlobalRequire(file);
  }
};
if (typeof Symbol !== "undefined" && goog.typeOf(Symbol) === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.CHAR_MAP = {"]":"_RBRACK_", "'":"_SINGLEQUOTE_", "\x3d":"_EQ_", '"':"_DOUBLEQUOTE_", "!":"_BANG_", "*":"_STAR_", "%":"_PERCENT_", "|":"_BAR_", "~":"_TILDE_", "/":"_SLASH_", "\\":"_BSLASH_", "-":"_", "?":"_QMARK_", "\x26":"_AMPERSAND_", ":":"_COLON_", "\x3c":"_LT_", "{":"_LBRACE_", "}":"_RBRACE_", "[":"_LBRACK_", "#":"_SHARP_", "^":"_CARET_", "+":"_PLUS_", "@":"_CIRCA_", "\x3e":"_GT_"};
cljs.core.DEMUNGE_MAP = {"_RBRACE_":"}", "_COLON_":":", "_BANG_":"!", "_QMARK_":"?", "_BSLASH_":"\\\\", "_SLASH_":"/", "_PERCENT_":"%", "_PLUS_":"+", "_SHARP_":"#", "_LBRACE_":"{", "_BAR_":"|", "_LBRACK_":"[", "_EQ_":"\x3d", "_":"-", "_TILDE_":"~", "_RBRACK_":"]", "_GT_":"\x3e", "_SINGLEQUOTE_":"'", "_CIRCA_":"@", "_AMPERSAND_":"\x26", "_DOUBLEQUOTE_":'\\"', "_CARET_":"^", "_LT_":"\x3c", "_STAR_":"*"};
cljs.core.DEMUNGE_PATTERN = null;
cljs.core.system_time = function cljs$core$system_time() {
  if (typeof performance !== "undefined" && !(performance.now == null)) {
    return performance.now();
  } else {
    if (typeof process !== "undefined" && !(process.hrtime == null)) {
      var t = process.hrtime();
      return (t[0] * 1E9 + t[1]) / 1E6;
    } else {
      return (new Date).getTime();
    }
  }
};
cljs.core.make_array = function cljs$core$make_array(var_args) {
  var args8268 = [];
  var len__7211__auto___8271 = arguments.length;
  var i__7212__auto___8272 = 0;
  while (true) {
    if (i__7212__auto___8272 < len__7211__auto___8271) {
      args8268.push(arguments[i__7212__auto___8272]);
      var G__8273 = i__7212__auto___8272 + 1;
      i__7212__auto___8272 = G__8273;
      continue;
    } else {
    }
    break;
  }
  var G__8270 = args8268.length;
  switch(G__8270) {
    case 1:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8268.length)].join(""));;
  }
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$1 = function(size) {
  return new Array(size);
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$2 = function(type, size) {
  return new Array(size);
};
cljs.core.make_array.cljs$lang$maxFixedArity = 2;
cljs.core.aclone = function cljs$core$aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__7056__auto___8275 = len;
  var i_8276 = 0;
  while (true) {
    if (i_8276 < n__7056__auto___8275) {
      new_arr[i_8276] = arr[i_8276];
      var G__8277 = i_8276 + 1;
      i_8276 = G__8277;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function cljs$core$array(var_args) {
  var a = new Array(arguments.length);
  var i = 0;
  while (true) {
    if (i < a.length) {
      a[i] = arguments[i];
      var G__8278 = i + 1;
      i = G__8278;
      continue;
    } else {
      return a;
    }
    break;
  }
};
cljs.core.aget = function cljs$core$aget(var_args) {
  var args8279 = [];
  var len__7211__auto___8288 = arguments.length;
  var i__7212__auto___8289 = 0;
  while (true) {
    if (i__7212__auto___8289 < len__7211__auto___8288) {
      args8279.push(arguments[i__7212__auto___8289]);
      var G__8290 = i__7212__auto___8289 + 1;
      i__7212__auto___8289 = G__8290;
      continue;
    } else {
    }
    break;
  }
  var G__8284 = args8279.length;
  switch(G__8284) {
    case 2:
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8279.slice(2), 0);
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return array[i];
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic = function(array, i, idxs) {
  var G__8285 = cljs.core.aget;
  var G__8286 = array[i];
  var G__8287 = idxs;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__8285, G__8286, G__8287) : cljs.core.apply.call(null, G__8285, G__8286, G__8287);
};
cljs.core.aget.cljs$lang$applyTo = function(seq8280) {
  var G__8281 = cljs.core.first(seq8280);
  var seq8280__$1 = cljs.core.next(seq8280);
  var G__8282 = cljs.core.first(seq8280__$1);
  var seq8280__$2 = cljs.core.next(seq8280__$1);
  return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(G__8281, G__8282, seq8280__$2);
};
cljs.core.aget.cljs$lang$maxFixedArity = 2;
cljs.core.aset = function cljs$core$aset(var_args) {
  var args8292 = [];
  var len__7211__auto___8303 = arguments.length;
  var i__7212__auto___8304 = 0;
  while (true) {
    if (i__7212__auto___8304 < len__7211__auto___8303) {
      args8292.push(arguments[i__7212__auto___8304]);
      var G__8305 = i__7212__auto___8304 + 1;
      i__7212__auto___8304 = G__8305;
      continue;
    } else {
    }
    break;
  }
  var G__8298 = args8292.length;
  switch(G__8298) {
    case 3:
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8292.slice(3), 0);
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__7230__auto__);
  }
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$3 = function(array, i, val) {
  return array[i] = val;
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idx2, idxv) {
  var G__8299 = cljs.core.aset;
  var G__8300 = array[idx];
  var G__8301 = idx2;
  var G__8302 = idxv;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__8299, G__8300, G__8301, G__8302) : cljs.core.apply.call(null, G__8299, G__8300, G__8301, G__8302);
};
cljs.core.aset.cljs$lang$applyTo = function(seq8293) {
  var G__8294 = cljs.core.first(seq8293);
  var seq8293__$1 = cljs.core.next(seq8293);
  var G__8295 = cljs.core.first(seq8293__$1);
  var seq8293__$2 = cljs.core.next(seq8293__$1);
  var G__8296 = cljs.core.first(seq8293__$2);
  var seq8293__$3 = cljs.core.next(seq8293__$2);
  return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(G__8294, G__8295, G__8296, seq8293__$3);
};
cljs.core.aset.cljs$lang$maxFixedArity = 3;
cljs.core.alength = function cljs$core$alength(array) {
  return array.length;
};
cljs.core.into_array = function cljs$core$into_array(var_args) {
  var args8307 = [];
  var len__7211__auto___8313 = arguments.length;
  var i__7212__auto___8314 = 0;
  while (true) {
    if (i__7212__auto___8314 < len__7211__auto___8313) {
      args8307.push(arguments[i__7212__auto___8314]);
      var G__8315 = i__7212__auto___8314 + 1;
      i__7212__auto___8314 = G__8315;
      continue;
    } else {
    }
    break;
  }
  var G__8309 = args8307.length;
  switch(G__8309) {
    case 1:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8307.length)].join(""));;
  }
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 = function(aseq) {
  return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$2 = function(type, aseq) {
  var G__8310 = function(a, x) {
    a.push(x);
    return a;
  };
  var G__8311 = [];
  var G__8312 = aseq;
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__8310, G__8311, G__8312) : cljs.core.reduce.call(null, G__8310, G__8311, G__8312);
};
cljs.core.into_array.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke = function cljs$core$js_invoke(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___8320 = arguments.length;
  var i__7212__auto___8321 = 0;
  while (true) {
    if (i__7212__auto___8321 < len__7211__auto___8320) {
      args__7218__auto__.push(arguments[i__7212__auto___8321]);
      var G__8322 = i__7212__auto___8321 + 1;
      i__7212__auto___8321 = G__8322;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 2 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(2), 0) : null;
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7219__auto__);
};
cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic = function(obj, s, args) {
  return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
};
cljs.core.js_invoke.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke.cljs$lang$applyTo = function(seq8317) {
  var G__8318 = cljs.core.first(seq8317);
  var seq8317__$1 = cljs.core.next(seq8317);
  var G__8319 = cljs.core.first(seq8317__$1);
  var seq8317__$2 = cljs.core.next(seq8317__$1);
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(G__8318, G__8319, seq8317__$2);
};
cljs.core.Fn = function() {
};
cljs.core.IFn = function() {
};
cljs.core._invoke = function cljs$core$_invoke(var_args) {
  var args8323 = [];
  var len__7211__auto___8326 = arguments.length;
  var i__7212__auto___8327 = 0;
  while (true) {
    if (i__7212__auto___8327 < len__7211__auto___8326) {
      args8323.push(arguments[i__7212__auto___8327]);
      var G__8328 = i__7212__auto___8327 + 1;
      i__7212__auto___8327 = G__8328;
      continue;
    } else {
    }
    break;
  }
  var G__8325 = args8323.length;
  switch(G__8325) {
    case 1:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    case 8:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$8(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
      break;
    case 9:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$9(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8]);
      break;
    case 10:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$10(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9]);
      break;
    case 11:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$11(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10]);
      break;
    case 12:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$12(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11]);
      break;
    case 13:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$13(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12]);
      break;
    case 14:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$14(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13]);
      break;
    case 15:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$15(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14]);
      break;
    case 16:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$16(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15]);
      break;
    case 17:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$17(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16]);
      break;
    case 18:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$18(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17]);
      break;
    case 19:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$19(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18]);
      break;
    case 20:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$20(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19]);
      break;
    case 21:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$21(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20]);
      break;
    case 22:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$22(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20], arguments[21]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8323.length)].join(""));;
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$1 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$1(this$);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = cljs.core._invoke[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__6809__auto__.call(null, this$);
    } else {
      var m__6809__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(this$) : m__6809__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$2 = function(this$, a) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$2 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = cljs.core._invoke[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$2(this$, a) : m__6809__auto__.call(null, this$, a);
    } else {
      var m__6809__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2(this$, a) : m__6809__auto____$1.call(null, this$, a);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$3 = function(this$, a, b) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$3 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = cljs.core._invoke[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$3(this$, a, b) : m__6809__auto__.call(null, this$, a, b);
    } else {
      var m__6809__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3(this$, a, b) : m__6809__auto____$1.call(null, this$, a, b);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$4 = function(this$, a, b, c) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$4 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = cljs.core._invoke[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$4 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$4(this$, a, b, c) : m__6809__auto__.call(null, this$, a, b, c);
    } else {
      var m__6809__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$4 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$4(this$, a, b, c) : m__6809__auto____$1.call(null, this$, a, b, c);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$5 = function(this$, a, b, c, d) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$5 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = cljs.core._invoke[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$5 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d) : m__6809__auto__.call(null, this$, a, b, c, d);
    } else {
      var m__6809__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$5 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d) : m__6809__auto____$1.call(null, this$, a, b, c, d);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$6 = function(this$, a, b, c, d, e) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$6 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = cljs.core._invoke[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$6 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e) : m__6809__auto__.call(null, this$, a, b, c, d, e);
    } else {
      var m__6809__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$6 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e) : m__6809__auto____$1.call(null, this$, a, b, c, d, e);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$7 = function(this$, a, b, c, d, e, f) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$7 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = cljs.core._invoke[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$7 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f) : m__6809__auto__.call(null, this$, a, b, c, d, e, f);
    } else {
      var m__6809__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$7 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f) : m__6809__auto____$1.call(null, this$, a, b, c, d, e, f);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$8 = function(this$, a, b, c, d, e, f, g) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$8 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = cljs.core._invoke[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$8 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g) : m__6809__auto__.call(null, this$, a, b, c, d, e, f, g);
    } else {
      var m__6809__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$8 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g) : m__6809__auto____$1.call(null, this$, a, b, c, d, e, f, g);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$9 = function(this$, a, b, c, d, e, f, g, h) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$9 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = cljs.core._invoke[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$9 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h) : m__6809__auto__.call(null, this$, a, b, c, d, e, f, g, h);
    } else {
      var m__6809__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$9 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h) : m__6809__auto____$1.call(null, this$, a, b, c, d, e, f, g, h);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$10 = function(this$, a, b, c, d, e, f, g, h, i) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$10 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = cljs.core._invoke[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$10 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i) : m__6809__auto__.call(null, this$, a, b, c, d, e, f, g, h, i);
    } else {
      var m__6809__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$10 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i) : m__6809__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$11 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = cljs.core._invoke[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$11 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j) : m__6809__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var m__6809__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$11 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j) : m__6809__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$12 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = cljs.core._invoke[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$12 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k) : m__6809__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var m__6809__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$12 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k) : m__6809__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$13 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = cljs.core._invoke[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$13 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l) : m__6809__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var m__6809__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$13 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l) : m__6809__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$14 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = cljs.core._invoke[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$14 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) : m__6809__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var m__6809__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$14 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) : m__6809__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$15 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = cljs.core._invoke[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$15 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) : m__6809__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var m__6809__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$15 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) : m__6809__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$16 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = cljs.core._invoke[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$16 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : m__6809__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var m__6809__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$16 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : m__6809__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$17 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = cljs.core._invoke[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$17 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : m__6809__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var m__6809__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$17 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : m__6809__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$18 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = cljs.core._invoke[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$18 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : m__6809__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var m__6809__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$18 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : m__6809__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$19 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = cljs.core._invoke[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$19 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : m__6809__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var m__6809__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$19 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : m__6809__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$20 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = cljs.core._invoke[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$20 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : m__6809__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var m__6809__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$20 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : m__6809__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$21 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = cljs.core._invoke[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$21 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : m__6809__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var m__6809__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$21 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : m__6809__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$22 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = cljs.core._invoke[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$22 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : m__6809__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var m__6809__auto____$1 = cljs.core._invoke["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$22 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : m__6809__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$lang$maxFixedArity = 22;
cljs.core.ICloneable = function() {
};
cljs.core._clone = function cljs$core$_clone(value) {
  if (!(value == null) && !(value.cljs$core$ICloneable$_clone$arity$1 == null)) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__6808__auto__ = value == null ? null : value;
    var m__6809__auto__ = cljs.core._clone[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(value) : m__6809__auto__.call(null, value);
    } else {
      var m__6809__auto____$1 = cljs.core._clone["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(value) : m__6809__auto____$1.call(null, value);
      } else {
        throw cljs.core.missing_protocol("ICloneable.-clone", value);
      }
    }
  }
};
cljs.core.ICounted = function() {
};
cljs.core._count = function cljs$core$_count(coll) {
  if (!(coll == null) && !(coll.cljs$core$ICounted$_count$arity$1 == null)) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._count[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto__.call(null, coll);
    } else {
      var m__6809__auto____$1 = cljs.core._count["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ICounted.-count", coll);
      }
    }
  }
};
cljs.core.IEmptyableCollection = function() {
};
cljs.core._empty = function cljs$core$_empty(coll) {
  if (!(coll == null) && !(coll.cljs$core$IEmptyableCollection$_empty$arity$1 == null)) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._empty[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto__.call(null, coll);
    } else {
      var m__6809__auto____$1 = cljs.core._empty["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
      }
    }
  }
};
cljs.core.ICollection = function() {
};
cljs.core._conj = function cljs$core$_conj(coll, o) {
  if (!(coll == null) && !(coll.cljs$core$ICollection$_conj$arity$2 == null)) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._conj[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$2(coll, o) : m__6809__auto__.call(null, coll, o);
    } else {
      var m__6809__auto____$1 = cljs.core._conj["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, o) : m__6809__auto____$1.call(null, coll, o);
      } else {
        throw cljs.core.missing_protocol("ICollection.-conj", coll);
      }
    }
  }
};
cljs.core.IIndexed = function() {
};
cljs.core._nth = function cljs$core$_nth(var_args) {
  var args8330 = [];
  var len__7211__auto___8333 = arguments.length;
  var i__7212__auto___8334 = 0;
  while (true) {
    if (i__7212__auto___8334 < len__7211__auto___8333) {
      args8330.push(arguments[i__7212__auto___8334]);
      var G__8335 = i__7212__auto___8334 + 1;
      i__7212__auto___8334 = G__8335;
      continue;
    } else {
    }
    break;
  }
  var G__8332 = args8330.length;
  switch(G__8332) {
    case 2:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8330.length)].join(""));;
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (!(coll == null) && !(coll.cljs$core$IIndexed$_nth$arity$2 == null)) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._nth[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$2(coll, n) : m__6809__auto__.call(null, coll, n);
    } else {
      var m__6809__auto____$1 = cljs.core._nth["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, n) : m__6809__auto____$1.call(null, coll, n);
      } else {
        throw cljs.core.missing_protocol("IIndexed.-nth", coll);
      }
    }
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (!(coll == null) && !(coll.cljs$core$IIndexed$_nth$arity$3 == null)) {
    return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._nth[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$3(coll, n, not_found) : m__6809__auto__.call(null, coll, n, not_found);
    } else {
      var m__6809__auto____$1 = cljs.core._nth["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, n, not_found) : m__6809__auto____$1.call(null, coll, n, not_found);
      } else {
        throw cljs.core.missing_protocol("IIndexed.-nth", coll);
      }
    }
  }
};
cljs.core._nth.cljs$lang$maxFixedArity = 3;
cljs.core.ASeq = function() {
};
cljs.core.ISeq = function() {
};
cljs.core._first = function cljs$core$_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISeq$_first$arity$1 == null)) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._first[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto__.call(null, coll);
    } else {
      var m__6809__auto____$1 = cljs.core._first["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ISeq.-first", coll);
      }
    }
  }
};
cljs.core._rest = function cljs$core$_rest(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISeq$_rest$arity$1 == null)) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._rest[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto__.call(null, coll);
    } else {
      var m__6809__auto____$1 = cljs.core._rest["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ISeq.-rest", coll);
      }
    }
  }
};
cljs.core.INext = function() {
};
cljs.core._next = function cljs$core$_next(coll) {
  if (!(coll == null) && !(coll.cljs$core$INext$_next$arity$1 == null)) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._next[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto__.call(null, coll);
    } else {
      var m__6809__auto____$1 = cljs.core._next["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("INext.-next", coll);
      }
    }
  }
};
cljs.core.ILookup = function() {
};
cljs.core._lookup = function cljs$core$_lookup(var_args) {
  var args8337 = [];
  var len__7211__auto___8340 = arguments.length;
  var i__7212__auto___8341 = 0;
  while (true) {
    if (i__7212__auto___8341 < len__7211__auto___8340) {
      args8337.push(arguments[i__7212__auto___8341]);
      var G__8342 = i__7212__auto___8341 + 1;
      i__7212__auto___8341 = G__8342;
      continue;
    } else {
    }
    break;
  }
  var G__8339 = args8337.length;
  switch(G__8339) {
    case 2:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8337.length)].join(""));;
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (!(o == null) && !(o.cljs$core$ILookup$_lookup$arity$2 == null)) {
    return o.cljs$core$ILookup$_lookup$arity$2(o, k);
  } else {
    var x__6808__auto__ = o == null ? null : o;
    var m__6809__auto__ = cljs.core._lookup[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$2(o, k) : m__6809__auto__.call(null, o, k);
    } else {
      var m__6809__auto____$1 = cljs.core._lookup["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2(o, k) : m__6809__auto____$1.call(null, o, k);
      } else {
        throw cljs.core.missing_protocol("ILookup.-lookup", o);
      }
    }
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (!(o == null) && !(o.cljs$core$ILookup$_lookup$arity$3 == null)) {
    return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
  } else {
    var x__6808__auto__ = o == null ? null : o;
    var m__6809__auto__ = cljs.core._lookup[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$3(o, k, not_found) : m__6809__auto__.call(null, o, k, not_found);
    } else {
      var m__6809__auto____$1 = cljs.core._lookup["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3(o, k, not_found) : m__6809__auto____$1.call(null, o, k, not_found);
      } else {
        throw cljs.core.missing_protocol("ILookup.-lookup", o);
      }
    }
  }
};
cljs.core._lookup.cljs$lang$maxFixedArity = 3;
cljs.core.IAssociative = function() {
};
cljs.core._contains_key_QMARK_ = function cljs$core$_contains_key_QMARK_(coll, k) {
  if (!(coll == null) && !(coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 == null)) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__6809__auto__.call(null, coll, k);
    } else {
      var m__6809__auto____$1 = cljs.core._contains_key_QMARK_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, k) : m__6809__auto____$1.call(null, coll, k);
      } else {
        throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
      }
    }
  }
};
cljs.core._assoc = function cljs$core$_assoc(coll, k, v) {
  if (!(coll == null) && !(coll.cljs$core$IAssociative$_assoc$arity$3 == null)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._assoc[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$3(coll, k, v) : m__6809__auto__.call(null, coll, k, v);
    } else {
      var m__6809__auto____$1 = cljs.core._assoc["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, k, v) : m__6809__auto____$1.call(null, coll, k, v);
      } else {
        throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
      }
    }
  }
};
cljs.core.IMap = function() {
};
cljs.core._dissoc = function cljs$core$_dissoc(coll, k) {
  if (!(coll == null) && !(coll.cljs$core$IMap$_dissoc$arity$2 == null)) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._dissoc[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__6809__auto__.call(null, coll, k);
    } else {
      var m__6809__auto____$1 = cljs.core._dissoc["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, k) : m__6809__auto____$1.call(null, coll, k);
      } else {
        throw cljs.core.missing_protocol("IMap.-dissoc", coll);
      }
    }
  }
};
cljs.core.IMapEntry = function() {
};
cljs.core._key = function cljs$core$_key(coll) {
  if (!(coll == null) && !(coll.cljs$core$IMapEntry$_key$arity$1 == null)) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._key[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto__.call(null, coll);
    } else {
      var m__6809__auto____$1 = cljs.core._key["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IMapEntry.-key", coll);
      }
    }
  }
};
cljs.core._val = function cljs$core$_val(coll) {
  if (!(coll == null) && !(coll.cljs$core$IMapEntry$_val$arity$1 == null)) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._val[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto__.call(null, coll);
    } else {
      var m__6809__auto____$1 = cljs.core._val["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IMapEntry.-val", coll);
      }
    }
  }
};
cljs.core.ISet = function() {
};
cljs.core._disjoin = function cljs$core$_disjoin(coll, v) {
  if (!(coll == null) && !(coll.cljs$core$ISet$_disjoin$arity$2 == null)) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._disjoin[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$2(coll, v) : m__6809__auto__.call(null, coll, v);
    } else {
      var m__6809__auto____$1 = cljs.core._disjoin["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, v) : m__6809__auto____$1.call(null, coll, v);
      } else {
        throw cljs.core.missing_protocol("ISet.-disjoin", coll);
      }
    }
  }
};
cljs.core.IStack = function() {
};
cljs.core._peek = function cljs$core$_peek(coll) {
  if (!(coll == null) && !(coll.cljs$core$IStack$_peek$arity$1 == null)) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._peek[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto__.call(null, coll);
    } else {
      var m__6809__auto____$1 = cljs.core._peek["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IStack.-peek", coll);
      }
    }
  }
};
cljs.core._pop = function cljs$core$_pop(coll) {
  if (!(coll == null) && !(coll.cljs$core$IStack$_pop$arity$1 == null)) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._pop[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto__.call(null, coll);
    } else {
      var m__6809__auto____$1 = cljs.core._pop["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IStack.-pop", coll);
      }
    }
  }
};
cljs.core.IVector = function() {
};
cljs.core._assoc_n = function cljs$core$_assoc_n(coll, n, val) {
  if (!(coll == null) && !(coll.cljs$core$IVector$_assoc_n$arity$3 == null)) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._assoc_n[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$3(coll, n, val) : m__6809__auto__.call(null, coll, n, val);
    } else {
      var m__6809__auto____$1 = cljs.core._assoc_n["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, n, val) : m__6809__auto____$1.call(null, coll, n, val);
      } else {
        throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
      }
    }
  }
};
cljs.core.IDeref = function() {
};
cljs.core._deref = function cljs$core$_deref(o) {
  if (!(o == null) && !(o.cljs$core$IDeref$_deref$arity$1 == null)) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__6808__auto__ = o == null ? null : o;
    var m__6809__auto__ = cljs.core._deref[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__6809__auto__.call(null, o);
    } else {
      var m__6809__auto____$1 = cljs.core._deref["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__6809__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("IDeref.-deref", o);
      }
    }
  }
};
cljs.core.IDerefWithTimeout = function() {
};
cljs.core._deref_with_timeout = function cljs$core$_deref_with_timeout(o, msec, timeout_val) {
  if (!(o == null) && !(o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3 == null)) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__6808__auto__ = o == null ? null : o;
    var m__6809__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$3(o, msec, timeout_val) : m__6809__auto__.call(null, o, msec, timeout_val);
    } else {
      var m__6809__auto____$1 = cljs.core._deref_with_timeout["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3(o, msec, timeout_val) : m__6809__auto____$1.call(null, o, msec, timeout_val);
      } else {
        throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
      }
    }
  }
};
cljs.core.IMeta = function() {
};
cljs.core._meta = function cljs$core$_meta(o) {
  if (!(o == null) && !(o.cljs$core$IMeta$_meta$arity$1 == null)) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__6808__auto__ = o == null ? null : o;
    var m__6809__auto__ = cljs.core._meta[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__6809__auto__.call(null, o);
    } else {
      var m__6809__auto____$1 = cljs.core._meta["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__6809__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("IMeta.-meta", o);
      }
    }
  }
};
cljs.core.IWithMeta = function() {
};
cljs.core._with_meta = function cljs$core$_with_meta(o, meta) {
  if (!(o == null) && !(o.cljs$core$IWithMeta$_with_meta$arity$2 == null)) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__6808__auto__ = o == null ? null : o;
    var m__6809__auto__ = cljs.core._with_meta[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$2(o, meta) : m__6809__auto__.call(null, o, meta);
    } else {
      var m__6809__auto____$1 = cljs.core._with_meta["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2(o, meta) : m__6809__auto____$1.call(null, o, meta);
      } else {
        throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
      }
    }
  }
};
cljs.core.IReduce = function() {
};
cljs.core._reduce = function cljs$core$_reduce(var_args) {
  var args8344 = [];
  var len__7211__auto___8347 = arguments.length;
  var i__7212__auto___8348 = 0;
  while (true) {
    if (i__7212__auto___8348 < len__7211__auto___8347) {
      args8344.push(arguments[i__7212__auto___8348]);
      var G__8349 = i__7212__auto___8348 + 1;
      i__7212__auto___8348 = G__8349;
      continue;
    } else {
    }
    break;
  }
  var G__8346 = args8344.length;
  switch(G__8346) {
    case 2:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8344.length)].join(""));;
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$2 = function(coll, f) {
  if (!(coll == null) && !(coll.cljs$core$IReduce$_reduce$arity$2 == null)) {
    return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._reduce[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$2(coll, f) : m__6809__auto__.call(null, coll, f);
    } else {
      var m__6809__auto____$1 = cljs.core._reduce["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, f) : m__6809__auto____$1.call(null, coll, f);
      } else {
        throw cljs.core.missing_protocol("IReduce.-reduce", coll);
      }
    }
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$3 = function(coll, f, start) {
  if (!(coll == null) && !(coll.cljs$core$IReduce$_reduce$arity$3 == null)) {
    return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._reduce[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$3(coll, f, start) : m__6809__auto__.call(null, coll, f, start);
    } else {
      var m__6809__auto____$1 = cljs.core._reduce["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, f, start) : m__6809__auto____$1.call(null, coll, f, start);
      } else {
        throw cljs.core.missing_protocol("IReduce.-reduce", coll);
      }
    }
  }
};
cljs.core._reduce.cljs$lang$maxFixedArity = 3;
cljs.core.IKVReduce = function() {
};
cljs.core._kv_reduce = function cljs$core$_kv_reduce(coll, f, init) {
  if (!(coll == null) && !(coll.cljs$core$IKVReduce$_kv_reduce$arity$3 == null)) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._kv_reduce[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$3(coll, f, init) : m__6809__auto__.call(null, coll, f, init);
    } else {
      var m__6809__auto____$1 = cljs.core._kv_reduce["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, f, init) : m__6809__auto____$1.call(null, coll, f, init);
      } else {
        throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
      }
    }
  }
};
cljs.core.IEquiv = function() {
};
cljs.core._equiv = function cljs$core$_equiv(o, other) {
  if (!(o == null) && !(o.cljs$core$IEquiv$_equiv$arity$2 == null)) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__6808__auto__ = o == null ? null : o;
    var m__6809__auto__ = cljs.core._equiv[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$2(o, other) : m__6809__auto__.call(null, o, other);
    } else {
      var m__6809__auto____$1 = cljs.core._equiv["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2(o, other) : m__6809__auto____$1.call(null, o, other);
      } else {
        throw cljs.core.missing_protocol("IEquiv.-equiv", o);
      }
    }
  }
};
cljs.core.IHash = function() {
};
cljs.core._hash = function cljs$core$_hash(o) {
  if (!(o == null) && !(o.cljs$core$IHash$_hash$arity$1 == null)) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__6808__auto__ = o == null ? null : o;
    var m__6809__auto__ = cljs.core._hash[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__6809__auto__.call(null, o);
    } else {
      var m__6809__auto____$1 = cljs.core._hash["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__6809__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("IHash.-hash", o);
      }
    }
  }
};
cljs.core.ISeqable = function() {
};
cljs.core._seq = function cljs$core$_seq(o) {
  if (!(o == null) && !(o.cljs$core$ISeqable$_seq$arity$1 == null)) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__6808__auto__ = o == null ? null : o;
    var m__6809__auto__ = cljs.core._seq[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__6809__auto__.call(null, o);
    } else {
      var m__6809__auto____$1 = cljs.core._seq["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__6809__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("ISeqable.-seq", o);
      }
    }
  }
};
cljs.core.ISequential = function() {
};
cljs.core.IList = function() {
};
cljs.core.IRecord = function() {
};
cljs.core.IReversible = function() {
};
cljs.core._rseq = function cljs$core$_rseq(coll) {
  if (!(coll == null) && !(coll.cljs$core$IReversible$_rseq$arity$1 == null)) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._rseq[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto__.call(null, coll);
    } else {
      var m__6809__auto____$1 = cljs.core._rseq["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IReversible.-rseq", coll);
      }
    }
  }
};
cljs.core.ISorted = function() {
};
cljs.core._sorted_seq = function cljs$core$_sorted_seq(coll, ascending_QMARK_) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_sorted_seq$arity$2 == null)) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._sorted_seq[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$2(coll, ascending_QMARK_) : m__6809__auto__.call(null, coll, ascending_QMARK_);
    } else {
      var m__6809__auto____$1 = cljs.core._sorted_seq["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, ascending_QMARK_) : m__6809__auto____$1.call(null, coll, ascending_QMARK_);
      } else {
        throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
      }
    }
  }
};
cljs.core._sorted_seq_from = function cljs$core$_sorted_seq_from(coll, k, ascending_QMARK_) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_sorted_seq_from$arity$3 == null)) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$3(coll, k, ascending_QMARK_) : m__6809__auto__.call(null, coll, k, ascending_QMARK_);
    } else {
      var m__6809__auto____$1 = cljs.core._sorted_seq_from["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, k, ascending_QMARK_) : m__6809__auto____$1.call(null, coll, k, ascending_QMARK_);
      } else {
        throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
      }
    }
  }
};
cljs.core._entry_key = function cljs$core$_entry_key(coll, entry) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_entry_key$arity$2 == null)) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._entry_key[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$2(coll, entry) : m__6809__auto__.call(null, coll, entry);
    } else {
      var m__6809__auto____$1 = cljs.core._entry_key["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, entry) : m__6809__auto____$1.call(null, coll, entry);
      } else {
        throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
      }
    }
  }
};
cljs.core._comparator = function cljs$core$_comparator(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_comparator$arity$1 == null)) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._comparator[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto__.call(null, coll);
    } else {
      var m__6809__auto____$1 = cljs.core._comparator["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ISorted.-comparator", coll);
      }
    }
  }
};
cljs.core.IWriter = function() {
};
cljs.core._write = function cljs$core$_write(writer, s) {
  if (!(writer == null) && !(writer.cljs$core$IWriter$_write$arity$2 == null)) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__6808__auto__ = writer == null ? null : writer;
    var m__6809__auto__ = cljs.core._write[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$2(writer, s) : m__6809__auto__.call(null, writer, s);
    } else {
      var m__6809__auto____$1 = cljs.core._write["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2(writer, s) : m__6809__auto____$1.call(null, writer, s);
      } else {
        throw cljs.core.missing_protocol("IWriter.-write", writer);
      }
    }
  }
};
cljs.core._flush = function cljs$core$_flush(writer) {
  if (!(writer == null) && !(writer.cljs$core$IWriter$_flush$arity$1 == null)) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__6808__auto__ = writer == null ? null : writer;
    var m__6809__auto__ = cljs.core._flush[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(writer) : m__6809__auto__.call(null, writer);
    } else {
      var m__6809__auto____$1 = cljs.core._flush["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(writer) : m__6809__auto____$1.call(null, writer);
      } else {
        throw cljs.core.missing_protocol("IWriter.-flush", writer);
      }
    }
  }
};
cljs.core.IPrintWithWriter = function() {
};
cljs.core._pr_writer = function cljs$core$_pr_writer(o, writer, opts) {
  if (!(o == null) && !(o.cljs$core$IPrintWithWriter$_pr_writer$arity$3 == null)) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__6808__auto__ = o == null ? null : o;
    var m__6809__auto__ = cljs.core._pr_writer[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$3(o, writer, opts) : m__6809__auto__.call(null, o, writer, opts);
    } else {
      var m__6809__auto____$1 = cljs.core._pr_writer["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3(o, writer, opts) : m__6809__auto____$1.call(null, o, writer, opts);
      } else {
        throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
      }
    }
  }
};
cljs.core.IPending = function() {
};
cljs.core._realized_QMARK_ = function cljs$core$_realized_QMARK_(x) {
  if (!(x == null) && !(x.cljs$core$IPending$_realized_QMARK_$arity$1 == null)) {
    return x.cljs$core$IPending$_realized_QMARK_$arity$1(x);
  } else {
    var x__6808__auto__ = x == null ? null : x;
    var m__6809__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__6809__auto__.call(null, x);
    } else {
      var m__6809__auto____$1 = cljs.core._realized_QMARK_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__6809__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("IPending.-realized?", x);
      }
    }
  }
};
cljs.core.IWatchable = function() {
};
cljs.core._notify_watches = function cljs$core$_notify_watches(this$, oldval, newval) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_notify_watches$arity$3 == null)) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = cljs.core._notify_watches[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$3(this$, oldval, newval) : m__6809__auto__.call(null, this$, oldval, newval);
    } else {
      var m__6809__auto____$1 = cljs.core._notify_watches["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3(this$, oldval, newval) : m__6809__auto____$1.call(null, this$, oldval, newval);
      } else {
        throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
      }
    }
  }
};
cljs.core._add_watch = function cljs$core$_add_watch(this$, key, f) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_add_watch$arity$3 == null)) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = cljs.core._add_watch[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$3(this$, key, f) : m__6809__auto__.call(null, this$, key, f);
    } else {
      var m__6809__auto____$1 = cljs.core._add_watch["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3(this$, key, f) : m__6809__auto____$1.call(null, this$, key, f);
      } else {
        throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
      }
    }
  }
};
cljs.core._remove_watch = function cljs$core$_remove_watch(this$, key) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_remove_watch$arity$2 == null)) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = cljs.core._remove_watch[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$2(this$, key) : m__6809__auto__.call(null, this$, key);
    } else {
      var m__6809__auto____$1 = cljs.core._remove_watch["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2(this$, key) : m__6809__auto____$1.call(null, this$, key);
      } else {
        throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
      }
    }
  }
};
cljs.core.IEditableCollection = function() {
};
cljs.core._as_transient = function cljs$core$_as_transient(coll) {
  if (!(coll == null) && !(coll.cljs$core$IEditableCollection$_as_transient$arity$1 == null)) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._as_transient[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto__.call(null, coll);
    } else {
      var m__6809__auto____$1 = cljs.core._as_transient["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
      }
    }
  }
};
cljs.core.ITransientCollection = function() {
};
cljs.core._conj_BANG_ = function cljs$core$_conj_BANG_(tcoll, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__6808__auto__ = tcoll == null ? null : tcoll;
    var m__6809__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, val) : m__6809__auto__.call(null, tcoll, val);
    } else {
      var m__6809__auto____$1 = cljs.core._conj_BANG_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll, val) : m__6809__auto____$1.call(null, tcoll, val);
      } else {
        throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
      }
    }
  }
};
cljs.core._persistent_BANG_ = function cljs$core$_persistent_BANG_(tcoll) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 == null)) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__6808__auto__ = tcoll == null ? null : tcoll;
    var m__6809__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__6809__auto__.call(null, tcoll);
    } else {
      var m__6809__auto____$1 = cljs.core._persistent_BANG_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(tcoll) : m__6809__auto____$1.call(null, tcoll);
      } else {
        throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
      }
    }
  }
};
cljs.core.ITransientAssociative = function() {
};
cljs.core._assoc_BANG_ = function cljs$core$_assoc_BANG_(tcoll, key, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 == null)) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__6808__auto__ = tcoll == null ? null : tcoll;
    var m__6809__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$3(tcoll, key, val) : m__6809__auto__.call(null, tcoll, key, val);
    } else {
      var m__6809__auto____$1 = cljs.core._assoc_BANG_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3(tcoll, key, val) : m__6809__auto____$1.call(null, tcoll, key, val);
      } else {
        throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
      }
    }
  }
};
cljs.core.ITransientMap = function() {
};
cljs.core._dissoc_BANG_ = function cljs$core$_dissoc_BANG_(tcoll, key) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__6808__auto__ = tcoll == null ? null : tcoll;
    var m__6809__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, key) : m__6809__auto__.call(null, tcoll, key);
    } else {
      var m__6809__auto____$1 = cljs.core._dissoc_BANG_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll, key) : m__6809__auto____$1.call(null, tcoll, key);
      } else {
        throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
      }
    }
  }
};
cljs.core.ITransientVector = function() {
};
cljs.core._assoc_n_BANG_ = function cljs$core$_assoc_n_BANG_(tcoll, n, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 == null)) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__6808__auto__ = tcoll == null ? null : tcoll;
    var m__6809__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$3(tcoll, n, val) : m__6809__auto__.call(null, tcoll, n, val);
    } else {
      var m__6809__auto____$1 = cljs.core._assoc_n_BANG_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3(tcoll, n, val) : m__6809__auto____$1.call(null, tcoll, n, val);
      } else {
        throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
      }
    }
  }
};
cljs.core._pop_BANG_ = function cljs$core$_pop_BANG_(tcoll) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1 == null)) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__6808__auto__ = tcoll == null ? null : tcoll;
    var m__6809__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__6809__auto__.call(null, tcoll);
    } else {
      var m__6809__auto____$1 = cljs.core._pop_BANG_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(tcoll) : m__6809__auto____$1.call(null, tcoll);
      } else {
        throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
      }
    }
  }
};
cljs.core.ITransientSet = function() {
};
cljs.core._disjoin_BANG_ = function cljs$core$_disjoin_BANG_(tcoll, v) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__6808__auto__ = tcoll == null ? null : tcoll;
    var m__6809__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, v) : m__6809__auto__.call(null, tcoll, v);
    } else {
      var m__6809__auto____$1 = cljs.core._disjoin_BANG_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll, v) : m__6809__auto____$1.call(null, tcoll, v);
      } else {
        throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
      }
    }
  }
};
cljs.core.IComparable = function() {
};
cljs.core._compare = function cljs$core$_compare(x, y) {
  if (!(x == null) && !(x.cljs$core$IComparable$_compare$arity$2 == null)) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__6808__auto__ = x == null ? null : x;
    var m__6809__auto__ = cljs.core._compare[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$2(x, y) : m__6809__auto__.call(null, x, y);
    } else {
      var m__6809__auto____$1 = cljs.core._compare["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2(x, y) : m__6809__auto____$1.call(null, x, y);
      } else {
        throw cljs.core.missing_protocol("IComparable.-compare", x);
      }
    }
  }
};
cljs.core.IChunk = function() {
};
cljs.core._drop_first = function cljs$core$_drop_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunk$_drop_first$arity$1 == null)) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._drop_first[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto__.call(null, coll);
    } else {
      var m__6809__auto____$1 = cljs.core._drop_first["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
      }
    }
  }
};
cljs.core.IChunkedSeq = function() {
};
cljs.core._chunked_first = function cljs$core$_chunked_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedSeq$_chunked_first$arity$1 == null)) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._chunked_first[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto__.call(null, coll);
    } else {
      var m__6809__auto____$1 = cljs.core._chunked_first["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
      }
    }
  }
};
cljs.core._chunked_rest = function cljs$core$_chunked_rest(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1 == null)) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._chunked_rest[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto__.call(null, coll);
    } else {
      var m__6809__auto____$1 = cljs.core._chunked_rest["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
      }
    }
  }
};
cljs.core.IChunkedNext = function() {
};
cljs.core._chunked_next = function cljs$core$_chunked_next(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedNext$_chunked_next$arity$1 == null)) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._chunked_next[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto__.call(null, coll);
    } else {
      var m__6809__auto____$1 = cljs.core._chunked_next["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
      }
    }
  }
};
cljs.core.INamed = function() {
};
cljs.core._name = function cljs$core$_name(x) {
  if (!(x == null) && !(x.cljs$core$INamed$_name$arity$1 == null)) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__6808__auto__ = x == null ? null : x;
    var m__6809__auto__ = cljs.core._name[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__6809__auto__.call(null, x);
    } else {
      var m__6809__auto____$1 = cljs.core._name["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__6809__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("INamed.-name", x);
      }
    }
  }
};
cljs.core._namespace = function cljs$core$_namespace(x) {
  if (!(x == null) && !(x.cljs$core$INamed$_namespace$arity$1 == null)) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__6808__auto__ = x == null ? null : x;
    var m__6809__auto__ = cljs.core._namespace[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__6809__auto__.call(null, x);
    } else {
      var m__6809__auto____$1 = cljs.core._namespace["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__6809__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("INamed.-namespace", x);
      }
    }
  }
};
cljs.core.IAtom = function() {
};
cljs.core.IReset = function() {
};
cljs.core._reset_BANG_ = function cljs$core$_reset_BANG_(o, new_value) {
  if (!(o == null) && !(o.cljs$core$IReset$_reset_BANG_$arity$2 == null)) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__6808__auto__ = o == null ? null : o;
    var m__6809__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__6809__auto__.call(null, o, new_value);
    } else {
      var m__6809__auto____$1 = cljs.core._reset_BANG_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__6809__auto____$1.call(null, o, new_value);
      } else {
        throw cljs.core.missing_protocol("IReset.-reset!", o);
      }
    }
  }
};
cljs.core.ISwap = function() {
};
cljs.core._swap_BANG_ = function cljs$core$_swap_BANG_(var_args) {
  var args8351 = [];
  var len__7211__auto___8354 = arguments.length;
  var i__7212__auto___8355 = 0;
  while (true) {
    if (i__7212__auto___8355 < len__7211__auto___8354) {
      args8351.push(arguments[i__7212__auto___8355]);
      var G__8356 = i__7212__auto___8355 + 1;
      i__7212__auto___8355 = G__8356;
      continue;
    } else {
    }
    break;
  }
  var G__8353 = args8351.length;
  switch(G__8353) {
    case 2:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8351.length)].join(""));;
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(o, f) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$2 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
  } else {
    var x__6808__auto__ = o == null ? null : o;
    var m__6809__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$2(o, f) : m__6809__auto__.call(null, o, f);
    } else {
      var m__6809__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2(o, f) : m__6809__auto____$1.call(null, o, f);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(o, f, a) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$3 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
  } else {
    var x__6808__auto__ = o == null ? null : o;
    var m__6809__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$3(o, f, a) : m__6809__auto__.call(null, o, f, a);
    } else {
      var m__6809__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3(o, f, a) : m__6809__auto____$1.call(null, o, f, a);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(o, f, a, b) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$4 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
  } else {
    var x__6808__auto__ = o == null ? null : o;
    var m__6809__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$4 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$4(o, f, a, b) : m__6809__auto__.call(null, o, f, a, b);
    } else {
      var m__6809__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$4 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$4(o, f, a, b) : m__6809__auto____$1.call(null, o, f, a, b);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5 = function(o, f, a, b, xs) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$5 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
  } else {
    var x__6808__auto__ = o == null ? null : o;
    var m__6809__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$5 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$5(o, f, a, b, xs) : m__6809__auto__.call(null, o, f, a, b, xs);
    } else {
      var m__6809__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$5 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$5(o, f, a, b, xs) : m__6809__auto____$1.call(null, o, f, a, b, xs);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$lang$maxFixedArity = 5;
cljs.core.IVolatile = function() {
};
cljs.core._vreset_BANG_ = function cljs$core$_vreset_BANG_(o, new_value) {
  if (!(o == null) && !(o.cljs$core$IVolatile$_vreset_BANG_$arity$2 == null)) {
    return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
  } else {
    var x__6808__auto__ = o == null ? null : o;
    var m__6809__auto__ = cljs.core._vreset_BANG_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__6809__auto__.call(null, o, new_value);
    } else {
      var m__6809__auto____$1 = cljs.core._vreset_BANG_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__6809__auto____$1.call(null, o, new_value);
      } else {
        throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
      }
    }
  }
};
cljs.core.IIterable = function() {
};
cljs.core._iterator = function cljs$core$_iterator(coll) {
  if (!(coll == null) && !(coll.cljs$core$IIterable$_iterator$arity$1 == null)) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__6808__auto__ = coll == null ? null : coll;
    var m__6809__auto__ = cljs.core._iterator[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto__.call(null, coll);
    } else {
      var m__6809__auto____$1 = cljs.core._iterator["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__6809__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IIterable.-iterator", coll);
      }
    }
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "sb", "sb", -1249746442, null)], null);
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function cljs$core$__GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function cljs$core$pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return [cljs.core.str(sb)].join("");
};
cljs.core.int_rotate_left = function cljs$core$int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(Math.imul(4294967295, 5) === 0)) {
  cljs.core.imul = function cljs$core$imul(a, b) {
    return Math.imul(a, b);
  };
} else {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353 | 0;
cljs.core.m3_C2 = 461845907 | 0;
cljs.core.m3_mix_K1 = function cljs$core$m3_mix_K1(k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1 | 0, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function cljs$core$m3_mix_H1(h1, k1) {
  return cljs.core.imul(cljs.core.int_rotate_left((h1 | 0) ^ (k1 | 0), 13), 5) + (3864292196 | 0) | 0;
};
cljs.core.m3_fmix = function cljs$core$m3_fmix(h1, len) {
  var h1__$1 = h1 | 0;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul(h1__$3, 2246822507 | 0);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul(h1__$5, 3266489909 | 0);
  return h1__$6 ^ h1__$6 >>> 16;
};
cljs.core.m3_hash_int = function cljs$core$m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1(in$);
    var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix(h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function cljs$core$m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__8358 = i + 2;
        var G__8359 = cljs.core.m3_mix_H1(h1, cljs.core.m3_mix_K1(in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__8358;
        h1 = G__8359;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix(h1__$1, cljs.core.imul(2, in$.length));
};
cljs.core.string_hash_cache = {};
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function cljs$core$hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__8362 = i + 1;
          var G__8363 = cljs.core.imul(31, hash) + s.charCodeAt(i);
          i = G__8362;
          hash = G__8363;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function cljs$core$add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function cljs$core$hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = {};
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache(k);
  }
};
cljs.core.hash = function cljs$core$hash(o) {
  if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 4194304 || o.cljs$core$IHash$ ? true : false : false) {
    return o.cljs$core$IHash$_hash$arity$1(null);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int(cljs.core.hash_string(o));
          } else {
            if (o instanceof Date) {
              return o.valueOf();
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash(o);
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function cljs$core$hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function cljs$core$instance_QMARK_(c, x) {
  return x instanceof c;
};
cljs.core.symbol_QMARK_ = function cljs$core$symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function cljs$core$hash_symbol(sym) {
  return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
};
cljs.core.compare_symbols = function cljs$core$compare_symbols(a, b) {
  if (a.str === b.str) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__6141__auto__ = cljs.core.not(a.ns);
      if (and__6141__auto__) {
        return b.ns;
      } else {
        return and__6141__auto__;
      }
    }())) {
      return -1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__8376 = a.ns;
            var G__8377 = b.ns;
            return goog.array.defaultCompare(G__8376, G__8377);
          }();
          if (0 === nsc) {
            var G__8378 = a.name;
            var G__8379 = b.name;
            return goog.array.defaultCompare(G__8378, G__8379);
          } else {
            return nsc;
          }
        }
      } else {
        var G__8380 = a.name;
        var G__8381 = b.name;
        return goog.array.defaultCompare(G__8380, G__8381);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.call = function() {
  var G__8383 = null;
  var G__8383__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2 ? cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, sym) : cljs.core.get.call(null, coll, sym);
  };
  var G__8383__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3 ? cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found) : cljs.core.get.call(null, coll, sym, not_found);
  };
  G__8383 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8383__2.call(this, self__, coll);
      case 3:
        return G__8383__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8383.cljs$core$IFn$_invoke$arity$2 = G__8383__2;
  G__8383.cljs$core$IFn$_invoke$arity$3 = G__8383__3;
  return G__8383;
}();
cljs.core.Symbol.prototype.apply = function(self__, args8382) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8382)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2 ? cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, sym) : cljs.core.get.call(null, coll, sym);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3 ? cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found) : cljs.core.get.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__6588__auto__ = self__._hash;
  if (!(h__6588__auto__ == null)) {
    return h__6588__auto__;
  } else {
    var h__6588__auto____$1 = cljs.core.hash_symbol(sym__$1);
    self__._hash = h__6588__auto____$1;
    return h__6588__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, self__.str);
};
cljs.core.Symbol.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "str", "str", -1564826950, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_hash", "_hash", -2130838312, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, 
  "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function cljs$core$__GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function cljs$core$symbol(var_args) {
  var args8384 = [];
  var len__7211__auto___8387 = arguments.length;
  var i__7212__auto___8388 = 0;
  while (true) {
    if (i__7212__auto___8388 < len__7211__auto___8387) {
      args8384.push(arguments[i__7212__auto___8388]);
      var G__8389 = i__7212__auto___8388 + 1;
      i__7212__auto___8388 = G__8389;
      continue;
    } else {
    }
    break;
  }
  var G__8386 = args8384.length;
  switch(G__8386) {
    case 1:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8384.length)].join(""));;
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Symbol) {
    return name;
  } else {
    var idx = name.indexOf("/");
    if (idx === -1) {
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(null, name);
    } else {
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(name.substring(0, idx), name.substring(idx + 1, name.length));
    }
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
  return new cljs.core.Symbol(ns, name, sym_str, null, null);
};
cljs.core.symbol.cljs$lang$maxFixedArity = 2;
cljs.core.Var = function(val, sym, _meta) {
  this.val = val;
  this.sym = sym;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2523137;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Var.prototype.isMacro = function() {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).cljs$lang$macro;
};
cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
};
cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Var.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Var(self__.val, self__.sym, new_meta);
};
cljs.core.Var.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  if (other instanceof cljs.core.Var) {
    var G__8392 = this$__$1.sym;
    var G__8393 = other.sym;
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 ? cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(G__8392, G__8393) : cljs.core._EQ_.call(null, G__8392, G__8393);
  } else {
    return false;
  }
};
cljs.core.Var.prototype.cljs$core$Fn$ = true;
cljs.core.Var.prototype.call = function() {
  var G__8438 = null;
  var G__8438__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null);
  };
  var G__8438__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a);
  };
  var G__8438__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b);
  };
  var G__8438__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c);
  };
  var G__8438__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d);
  };
  var G__8438__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e);
  };
  var G__8438__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f);
  };
  var G__8438__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g);
  };
  var G__8438__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h);
  };
  var G__8438__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__8438__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__8438__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__8438__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__8438__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__8438__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__8438__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__8438__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__8438__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__8438__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__8438__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__8438__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__8438__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__8394 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    var G__8395 = a;
    var G__8396 = b;
    var G__8397 = c;
    var G__8398 = d;
    var G__8399 = e;
    var G__8400 = f;
    var G__8401 = g;
    var G__8402 = h;
    var G__8403 = i;
    var G__8404 = j;
    var G__8405 = k;
    var G__8406 = l;
    var G__8407 = m;
    var G__8408 = n;
    var G__8409 = o;
    var G__8410 = p;
    var G__8411 = q;
    var G__8412 = r;
    var G__8413 = s;
    var G__8414 = t;
    var G__8415 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__8394, G__8395, G__8396, G__8397, G__8398, G__8399, G__8400, G__8401, G__8402, G__8403, G__8404, G__8405, G__8406, G__8407, G__8408, G__8409, G__8410, G__8411, G__8412, G__8413, G__8414, G__8415) : cljs.core.apply.call(null, G__8394, G__8395, G__8396, G__8397, G__8398, G__8399, G__8400, G__8401, G__8402, G__8403, G__8404, G__8405, G__8406, G__8407, G__8408, G__8409, G__8410, G__8411, G__8412, 
    G__8413, G__8414, G__8415);
  };
  G__8438 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__8438__1.call(this, self__);
      case 2:
        return G__8438__2.call(this, self__, a);
      case 3:
        return G__8438__3.call(this, self__, a, b);
      case 4:
        return G__8438__4.call(this, self__, a, b, c);
      case 5:
        return G__8438__5.call(this, self__, a, b, c, d);
      case 6:
        return G__8438__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__8438__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__8438__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__8438__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__8438__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__8438__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__8438__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__8438__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__8438__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__8438__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__8438__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__8438__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__8438__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__8438__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__8438__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__8438__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__8438__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8438.cljs$core$IFn$_invoke$arity$1 = G__8438__1;
  G__8438.cljs$core$IFn$_invoke$arity$2 = G__8438__2;
  G__8438.cljs$core$IFn$_invoke$arity$3 = G__8438__3;
  G__8438.cljs$core$IFn$_invoke$arity$4 = G__8438__4;
  G__8438.cljs$core$IFn$_invoke$arity$5 = G__8438__5;
  G__8438.cljs$core$IFn$_invoke$arity$6 = G__8438__6;
  G__8438.cljs$core$IFn$_invoke$arity$7 = G__8438__7;
  G__8438.cljs$core$IFn$_invoke$arity$8 = G__8438__8;
  G__8438.cljs$core$IFn$_invoke$arity$9 = G__8438__9;
  G__8438.cljs$core$IFn$_invoke$arity$10 = G__8438__10;
  G__8438.cljs$core$IFn$_invoke$arity$11 = G__8438__11;
  G__8438.cljs$core$IFn$_invoke$arity$12 = G__8438__12;
  G__8438.cljs$core$IFn$_invoke$arity$13 = G__8438__13;
  G__8438.cljs$core$IFn$_invoke$arity$14 = G__8438__14;
  G__8438.cljs$core$IFn$_invoke$arity$15 = G__8438__15;
  G__8438.cljs$core$IFn$_invoke$arity$16 = G__8438__16;
  G__8438.cljs$core$IFn$_invoke$arity$17 = G__8438__17;
  G__8438.cljs$core$IFn$_invoke$arity$18 = G__8438__18;
  G__8438.cljs$core$IFn$_invoke$arity$19 = G__8438__19;
  G__8438.cljs$core$IFn$_invoke$arity$20 = G__8438__20;
  G__8438.cljs$core$IFn$_invoke$arity$21 = G__8438__21;
  G__8438.cljs$core$IFn$_invoke$arity$22 = G__8438__22;
  return G__8438;
}();
cljs.core.Var.prototype.apply = function(self__, args8391) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8391)));
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__8416 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  var G__8417 = a;
  var G__8418 = b;
  var G__8419 = c;
  var G__8420 = d;
  var G__8421 = e;
  var G__8422 = f;
  var G__8423 = g;
  var G__8424 = h;
  var G__8425 = i;
  var G__8426 = j;
  var G__8427 = k;
  var G__8428 = l;
  var G__8429 = m;
  var G__8430 = n;
  var G__8431 = o;
  var G__8432 = p;
  var G__8433 = q;
  var G__8434 = r;
  var G__8435 = s;
  var G__8436 = t;
  var G__8437 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__8416, G__8417, G__8418, G__8419, G__8420, G__8421, G__8422, G__8423, G__8424, G__8425, G__8426, G__8427, G__8428, G__8429, G__8430, G__8431, G__8432, G__8433, G__8434, G__8435, G__8436, G__8437) : cljs.core.apply.call(null, G__8416, G__8417, G__8418, G__8419, G__8420, G__8421, G__8422, G__8423, G__8424, G__8425, G__8426, G__8427, G__8428, G__8429, G__8430, G__8431, G__8432, G__8433, G__8434, 
  G__8435, G__8436, G__8437);
};
cljs.core.Var.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "sym", "sym", 195671222, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.Var.cljs$lang$type = true;
cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
cljs.core.Var.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/Var");
};
cljs.core.__GT_Var = function cljs$core$__GT_Var(val, sym, _meta) {
  return new cljs.core.Var(val, sym, _meta);
};
cljs.core.var_QMARK_ = function cljs$core$var_QMARK_(v) {
  return v instanceof cljs.core.Var;
};
cljs.core.iterable_QMARK_ = function cljs$core$iterable_QMARK_(x) {
  if (!(x == null)) {
    if (false || x.cljs$core$IIterable$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, x);
  }
};
cljs.core.clone = function cljs$core$clone(value) {
  return cljs.core._clone(value);
};
cljs.core.cloneable_QMARK_ = function cljs$core$cloneable_QMARK_(value) {
  if (!(value == null)) {
    if (value.cljs$lang$protocol_mask$partition1$ & 8192 || value.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!value.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, value);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, value);
  }
};
cljs.core.seq = function cljs$core$seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 8388608 || coll.cljs$core$ISeqable$ ? true : false : false) {
      return coll.cljs$core$ISeqable$_seq$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
            return cljs.core._seq(coll);
          } else {
            throw new Error([cljs.core.str(coll), cljs.core.str(" is not ISeqable")].join(""));
          }
        }
      }
    }
  }
};
cljs.core.first = function cljs$core$first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
      return coll.cljs$core$ISeq$_first$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first(s);
      }
    }
  }
};
cljs.core.rest = function cljs$core$rest(coll) {
  if (!(coll == null)) {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
      return coll.cljs$core$ISeq$_rest$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s) {
        return cljs.core._rest(s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function cljs$core$next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 128 || coll.cljs$core$INext$ ? true : false : false) {
      return coll.cljs$core$INext$_next$arity$1(null);
    } else {
      return cljs.core.seq(cljs.core.rest(coll));
    }
  }
};
cljs.core._EQ_ = function cljs$core$_EQ_(var_args) {
  var args8451 = [];
  var len__7211__auto___8457 = arguments.length;
  var i__7212__auto___8458 = 0;
  while (true) {
    if (i__7212__auto___8458 < len__7211__auto___8457) {
      args8451.push(arguments[i__7212__auto___8458]);
      var G__8459 = i__7212__auto___8458 + 1;
      i__7212__auto___8458 = G__8459;
      continue;
    } else {
    }
    break;
  }
  var G__8456 = args8451.length;
  switch(G__8456) {
    case 1:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8451.slice(2), 0);
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  if (x == null) {
    return y == null;
  } else {
    return x === y || cljs.core._equiv(x, y);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
      if (cljs.core.next(more)) {
        var G__8461 = y;
        var G__8462 = cljs.core.first(more);
        var G__8463 = cljs.core.next(more);
        x = G__8461;
        y = G__8462;
        more = G__8463;
        continue;
      } else {
        return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ_.cljs$lang$applyTo = function(seq8452) {
  var G__8453 = cljs.core.first(seq8452);
  var seq8452__$1 = cljs.core.next(seq8452);
  var G__8454 = cljs.core.first(seq8452__$1);
  var seq8452__$2 = cljs.core.next(seq8452__$1);
  return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(G__8453, G__8454, seq8452__$2);
};
cljs.core._EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return {"value":x, "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6Iterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function cljs$core$__GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function cljs$core$es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq(coll));
};
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(self__.iter) : cljs.core.es6_iterator_seq.call(null, self__.iter);
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "value", "value", 1946509744, null), new cljs.core.Symbol(null, "iter", "iter", -1346195486, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_rest", "_rest", -2100466189, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function cljs$core$__GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function cljs$core$es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return cljs.core.List.EMPTY;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function cljs$core$mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1(hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1(h1, k1);
  return cljs.core.m3_fmix(h1__$1, count);
};
cljs.core.hash_ordered_coll = function cljs$core$hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__8464 = n + 1;
      var G__8465 = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__8466 = cljs.core.next(coll__$1);
      n = G__8464;
      hash_code = G__8465;
      coll__$1 = G__8466;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
cljs.core.hash_unordered_coll = function cljs$core$hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__8467 = n + 1;
      var G__8468 = hash_code + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__8469 = cljs.core.next(coll__$1);
      n = G__8467;
      hash_code = G__8468;
      coll__$1 = G__8469;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.valueOf() === other.valueOf();
};
Date.prototype.cljs$core$IComparable$ = true;
Date.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof Date) {
    var G__8470 = this$__$1.valueOf();
    var G__8471 = other.valueOf();
    return goog.array.defaultCompare(G__8470, G__8471);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(this$__$1), cljs.core.str(" to "), cljs.core.str(other)].join(""));
  }
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.Fn["function"] = true;
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function cljs$core$inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null)], null);
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function cljs$core$__GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function cljs$core$reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function cljs$core$reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function cljs$core$ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return x;
  } else {
    return cljs.core.reduced(x);
  }
};
cljs.core.unreduced = function cljs$core$unreduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(x) : cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.deref = function cljs$core$deref(o) {
  return cljs.core._deref(o);
};
cljs.core.ci_reduce = function cljs$core$ci_reduce(var_args) {
  var args8472 = [];
  var len__7211__auto___8481 = arguments.length;
  var i__7212__auto___8482 = 0;
  while (true) {
    if (i__7212__auto___8482 < len__7211__auto___8481) {
      args8472.push(arguments[i__7212__auto___8482]);
      var G__8483 = i__7212__auto___8482 + 1;
      i__7212__auto___8482 = G__8483;
      continue;
    } else {
    }
    break;
  }
  var G__8474 = args8472.length;
  switch(G__8474) {
    case 2:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8472.length)].join(""));;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2 = function(cicoll, f) {
  var cnt = cljs.core._count(cicoll);
  if (cnt === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, 0);
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__8475 = val;
          var G__8476 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8475, G__8476) : f.call(null, G__8475, G__8476);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__8485 = nval;
          var G__8486 = n + 1;
          val = G__8485;
          n = G__8486;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3 = function(cicoll, f, val) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__8477 = val__$1;
        var G__8478 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8477, G__8478) : f.call(null, G__8477, G__8478);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__8487 = nval;
        var G__8488 = n + 1;
        val__$1 = G__8487;
        n = G__8488;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4 = function(cicoll, f, val, idx) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__8479 = val__$1;
        var G__8480 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8479, G__8480) : f.call(null, G__8479, G__8480);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__8489 = nval;
        var G__8490 = n + 1;
        val__$1 = G__8489;
        n = G__8490;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.array_reduce = function cljs$core$array_reduce(var_args) {
  var args8491 = [];
  var len__7211__auto___8500 = arguments.length;
  var i__7212__auto___8501 = 0;
  while (true) {
    if (i__7212__auto___8501 < len__7211__auto___8500) {
      args8491.push(arguments[i__7212__auto___8501]);
      var G__8502 = i__7212__auto___8501 + 1;
      i__7212__auto___8501 = G__8502;
      continue;
    } else {
    }
    break;
  }
  var G__8493 = args8491.length;
  switch(G__8493) {
    case 2:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8491.length)].join(""));;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2 = function(arr, f) {
  var cnt = arr.length;
  if (arr.length === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = arr[0];
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__8494 = val;
          var G__8495 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8494, G__8495) : f.call(null, G__8494, G__8495);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__8504 = nval;
          var G__8505 = n + 1;
          val = G__8504;
          n = G__8505;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3 = function(arr, f, val) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__8496 = val__$1;
        var G__8497 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8496, G__8497) : f.call(null, G__8496, G__8497);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__8506 = nval;
        var G__8507 = n + 1;
        val__$1 = G__8506;
        n = G__8507;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4 = function(arr, f, val, idx) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__8498 = val__$1;
        var G__8499 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8498, G__8499) : f.call(null, G__8498, G__8499);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__8508 = nval;
        var G__8509 = n + 1;
        val__$1 = G__8508;
        n = G__8509;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.counted_QMARK_ = function cljs$core$counted_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 2 || x.cljs$core$ICounted$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, x);
  }
};
cljs.core.indexed_QMARK_ = function cljs$core$indexed_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16 || x.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, x);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function cljs$core$__GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  var x__6484__auto__ = 0;
  var y__6485__auto__ = self__.arr.length - self__.i;
  return x__6484__auto__ > y__6485__auto__ ? x__6484__auto__ : y__6485__auto__;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count(coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(coll__$1, other) : cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.i < self__.arr.length) {
    return this$__$1;
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(o, coll__$1) : cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null)], null);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function cljs$core$__GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.prim_seq = function cljs$core$prim_seq(var_args) {
  var args8514 = [];
  var len__7211__auto___8517 = arguments.length;
  var i__7212__auto___8518 = 0;
  while (true) {
    if (i__7212__auto___8518 < len__7211__auto___8517) {
      args8514.push(arguments[i__7212__auto___8518]);
      var G__8519 = i__7212__auto___8518 + 1;
      i__7212__auto___8518 = G__8519;
      continue;
    } else {
    }
    break;
  }
  var G__8516 = args8514.length;
  switch(G__8516) {
    case 1:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8514.length)].join(""));;
  }
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1 = function(prim) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2 = function(prim, i) {
  if (i < prim.length) {
    return new cljs.core.IndexedSeq(prim, i);
  } else {
    return null;
  }
};
cljs.core.prim_seq.cljs$lang$maxFixedArity = 2;
cljs.core.array_seq = function cljs$core$array_seq(var_args) {
  var args8521 = [];
  var len__7211__auto___8524 = arguments.length;
  var i__7212__auto___8525 = 0;
  while (true) {
    if (i__7212__auto___8525 < len__7211__auto___8524) {
      args8521.push(arguments[i__7212__auto___8525]);
      var G__8526 = i__7212__auto___8525 + 1;
      i__7212__auto___8525 = G__8526;
      continue;
    } else {
    }
    break;
  }
  var G__8523 = args8521.length;
  switch(G__8523) {
    case 1:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8521.length)].join(""));;
  }
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1 = function(array) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
};
cljs.core.array_seq.cljs$lang$maxFixedArity = 2;
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(coll__$1, other) : cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__8528 = cljs.core.List.EMPTY;
  var G__8529 = self__.meta;
  return cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2 ? cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2(G__8528, G__8529) : cljs.core.with_meta.call(null, G__8528, G__8529);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, col__$1) : cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, col__$1) : cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(o, coll__$1) : cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ci", "ci", 2049808339, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function cljs$core$__GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.second = function cljs$core$second(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.ffirst = function cljs$core$ffirst(coll) {
  return cljs.core.first(cljs.core.first(coll));
};
cljs.core.nfirst = function cljs$core$nfirst(coll) {
  return cljs.core.next(cljs.core.first(coll));
};
cljs.core.fnext = function cljs$core$fnext(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.nnext = function cljs$core$nnext(coll) {
  return cljs.core.next(cljs.core.next(coll));
};
cljs.core.last = function cljs$core$last(s) {
  while (true) {
    var sn = cljs.core.next(s);
    if (!(sn == null)) {
      var G__8530 = sn;
      s = G__8530;
      continue;
    } else {
      return cljs.core.first(s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function cljs$core$conj(var_args) {
  var args8531 = [];
  var len__7211__auto___8537 = arguments.length;
  var i__7212__auto___8538 = 0;
  while (true) {
    if (i__7212__auto___8538 < len__7211__auto___8537) {
      args8531.push(arguments[i__7212__auto___8538]);
      var G__8539 = i__7212__auto___8538 + 1;
      i__7212__auto___8538 = G__8539;
      continue;
    } else {
    }
    break;
  }
  var G__8536 = args8531.length;
  switch(G__8536) {
    case 0:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8531.slice(2), 0);
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
  if (!(coll == null)) {
    return cljs.core._conj(coll, x);
  } else {
    return cljs.core._conj(cljs.core.List.EMPTY, x);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic = function(coll, x, xs) {
  while (true) {
    if (cljs.core.truth_(xs)) {
      var G__8541 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
      var G__8542 = cljs.core.first(xs);
      var G__8543 = cljs.core.next(xs);
      coll = G__8541;
      x = G__8542;
      xs = G__8543;
      continue;
    } else {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
    }
    break;
  }
};
cljs.core.conj.cljs$lang$applyTo = function(seq8532) {
  var G__8533 = cljs.core.first(seq8532);
  var seq8532__$1 = cljs.core.next(seq8532);
  var G__8534 = cljs.core.first(seq8532__$1);
  var seq8532__$2 = cljs.core.next(seq8532__$1);
  return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__8533, G__8534, seq8532__$2);
};
cljs.core.conj.cljs$lang$maxFixedArity = 2;
cljs.core.empty = function cljs$core$empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty(coll);
  }
};
cljs.core.accumulating_seq_count = function cljs$core$accumulating_seq_count(coll) {
  var s = cljs.core.seq(coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_(s)) {
      return acc + cljs.core._count(s);
    } else {
      var G__8544 = cljs.core.next(s);
      var G__8545 = acc + 1;
      s = G__8544;
      acc = G__8545;
      continue;
    }
    break;
  }
};
cljs.core.count = function cljs$core$count(coll) {
  if (!(coll == null)) {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 2 || coll.cljs$core$ICounted$ ? true : false : false) {
      return coll.cljs$core$ICounted$_count$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 8388608 || coll.cljs$core$ISeqable$ ? true : false : false) {
            return cljs.core.accumulating_seq_count(coll);
          } else {
            return cljs.core._count(coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function cljs$core$linear_traversal_nth(var_args) {
  var args8550 = [];
  var len__7211__auto___8553 = arguments.length;
  var i__7212__auto___8554 = 0;
  while (true) {
    if (i__7212__auto___8554 < len__7211__auto___8553) {
      args8550.push(arguments[i__7212__auto___8554]);
      var G__8555 = i__7212__auto___8554 + 1;
      i__7212__auto___8554 = G__8555;
      continue;
    } else {
    }
    break;
  }
  var G__8552 = args8550.length;
  switch(G__8552) {
    case 2:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8550.length)].join(""));;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  while (true) {
    if (coll == null) {
      throw new Error("Index out of bounds");
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          throw new Error("Index out of bounds");
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
        } else {
          if (cljs.core.seq(coll)) {
            var G__8557 = cljs.core.next(coll);
            var G__8558 = n - 1;
            coll = G__8557;
            n = G__8558;
            continue;
          } else {
            throw new Error("Index out of bounds");
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  while (true) {
    if (coll == null) {
      return not_found;
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          return not_found;
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
        } else {
          if (cljs.core.seq(coll)) {
            var G__8559 = cljs.core.next(coll);
            var G__8560 = n - 1;
            var G__8561 = not_found;
            coll = G__8559;
            n = G__8560;
            not_found = G__8561;
            continue;
          } else {
            return not_found;
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$lang$maxFixedArity = 3;
cljs.core.nth = function cljs$core$nth(var_args) {
  var args8562 = [];
  var len__7211__auto___8569 = arguments.length;
  var i__7212__auto___8570 = 0;
  while (true) {
    if (i__7212__auto___8570 < len__7211__auto___8569) {
      args8562.push(arguments[i__7212__auto___8570]);
      var G__8571 = i__7212__auto___8570 + 1;
      i__7212__auto___8570 = G__8571;
      continue;
    } else {
    }
    break;
  }
  var G__8564 = args8562.length;
  switch(G__8564) {
    case 2:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8562.length)].join(""));;
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number");
  } else {
    if (coll == null) {
      return coll;
    } else {
      if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 16 || coll.cljs$core$IIndexed$ ? true : false : false) {
        return coll.cljs$core$IIndexed$_nth$arity$2(null, n);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll.charAt(n);
            } else {
              return null;
            }
          } else {
            if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
              return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number.");
  } else {
    if (coll == null) {
      return not_found;
    } else {
      if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 16 || coll.cljs$core$IIndexed$ ? true : false : false) {
        return coll.cljs$core$IIndexed$_nth$arity$3(null, n, not_found);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll.charAt(n);
            } else {
              return not_found;
            }
          } else {
            if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
              return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$lang$maxFixedArity = 3;
cljs.core.nthrest = function cljs$core$nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    if (n__$1 > 0 && cljs.core.seq(xs)) {
      var G__8573 = n__$1 - 1;
      var G__8574 = cljs.core.rest(xs);
      n__$1 = G__8573;
      xs = G__8574;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function cljs$core$get(var_args) {
  var args8575 = [];
  var len__7211__auto___8580 = arguments.length;
  var i__7212__auto___8581 = 0;
  while (true) {
    if (i__7212__auto___8581 < len__7211__auto___8580) {
      args8575.push(arguments[i__7212__auto___8581]);
      var G__8582 = i__7212__auto___8581 + 1;
      i__7212__auto___8581 = G__8582;
      continue;
    } else {
    }
    break;
  }
  var G__8577 = args8575.length;
  switch(G__8577) {
    case 2:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8575.length)].join(""));;
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (o == null) {
    return null;
  } else {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 256 || o.cljs$core$ILookup$ ? true : false : false) {
      return o.cljs$core$ILookup$_lookup$arity$2(null, k);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k | 0];
        } else {
          return null;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k | 0];
          } else {
            return null;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (!(o == null)) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 256 || o.cljs$core$ILookup$ ? true : false : false) {
      return o.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k];
        } else {
          return not_found;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
          } else {
            return not_found;
          }
        }
      }
    }
  } else {
    return not_found;
  }
};
cljs.core.get.cljs$lang$maxFixedArity = 3;
cljs.core.assoc = function cljs$core$assoc(var_args) {
  var args8584 = [];
  var len__7211__auto___8591 = arguments.length;
  var i__7212__auto___8592 = 0;
  while (true) {
    if (i__7212__auto___8592 < len__7211__auto___8591) {
      args8584.push(arguments[i__7212__auto___8592]);
      var G__8593 = i__7212__auto___8592 + 1;
      i__7212__auto___8592 = G__8593;
      continue;
    } else {
    }
    break;
  }
  var G__8590 = args8584.length;
  switch(G__8590) {
    case 3:
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8584.slice(3), 0);
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__7230__auto__);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$3 = function(coll, k, v) {
  if (!(coll == null)) {
    return cljs.core._assoc(coll, k, v);
  } else {
    return cljs.core.PersistentHashMap.fromArrays([k], [v]);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, v, kvs) {
  while (true) {
    var ret = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v);
    if (cljs.core.truth_(kvs)) {
      var G__8595 = ret;
      var G__8596 = cljs.core.first(kvs);
      var G__8597 = cljs.core.second(kvs);
      var G__8598 = cljs.core.nnext(kvs);
      coll = G__8595;
      k = G__8596;
      v = G__8597;
      kvs = G__8598;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.assoc.cljs$lang$applyTo = function(seq8585) {
  var G__8586 = cljs.core.first(seq8585);
  var seq8585__$1 = cljs.core.next(seq8585);
  var G__8587 = cljs.core.first(seq8585__$1);
  var seq8585__$2 = cljs.core.next(seq8585__$1);
  var G__8588 = cljs.core.first(seq8585__$2);
  var seq8585__$3 = cljs.core.next(seq8585__$2);
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(G__8586, G__8587, G__8588, seq8585__$3);
};
cljs.core.assoc.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc = function cljs$core$dissoc(var_args) {
  var args8599 = [];
  var len__7211__auto___8605 = arguments.length;
  var i__7212__auto___8606 = 0;
  while (true) {
    if (i__7212__auto___8606 < len__7211__auto___8605) {
      args8599.push(arguments[i__7212__auto___8606]);
      var G__8607 = i__7212__auto___8606 + 1;
      i__7212__auto___8606 = G__8607;
      continue;
    } else {
    }
    break;
  }
  var G__8604 = args8599.length;
  switch(G__8604) {
    case 1:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8599.slice(2), 0);
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._dissoc(coll, k);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__8609 = ret;
        var G__8610 = cljs.core.first(ks);
        var G__8611 = cljs.core.next(ks);
        coll = G__8609;
        k = G__8610;
        ks = G__8611;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.dissoc.cljs$lang$applyTo = function(seq8600) {
  var G__8601 = cljs.core.first(seq8600);
  var seq8600__$1 = cljs.core.next(seq8600);
  var G__8602 = cljs.core.first(seq8600__$1);
  var seq8600__$2 = cljs.core.next(seq8600__$1);
  return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(G__8601, G__8602, seq8600__$2);
};
cljs.core.dissoc.cljs$lang$maxFixedArity = 2;
cljs.core.fn_QMARK_ = function cljs$core$fn_QMARK_(f) {
  var or__6153__auto__ = goog.isFunction(f);
  if (or__6153__auto__) {
    return or__6153__auto__;
  } else {
    if (!(f == null)) {
      if (false || f.cljs$core$Fn$) {
        return true;
      } else {
        if (!f.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, f);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, f);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.call = function() {
  var G__8617 = null;
  var G__8617__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
  };
  var G__8617__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(a) : self__.afn.call(null, a);
  };
  var G__8617__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.afn.call(null, a, b);
  };
  var G__8617__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.afn.call(null, a, b, c);
  };
  var G__8617__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.afn.call(null, a, b, c, d);
  };
  var G__8617__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.afn.call(null, a, b, c, d, e);
  };
  var G__8617__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.afn.call(null, a, b, c, d, e, f);
  };
  var G__8617__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.afn.call(null, a, b, c, d, e, f, g);
  };
  var G__8617__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.afn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__8617__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.afn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__8617__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__8617__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__8617__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__8617__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__8617__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__8617__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__8617__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__8617__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__8617__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__8617__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__8617__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__8617__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__8617 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__8617__1.call(this, self__);
      case 2:
        return G__8617__2.call(this, self__, a);
      case 3:
        return G__8617__3.call(this, self__, a, b);
      case 4:
        return G__8617__4.call(this, self__, a, b, c);
      case 5:
        return G__8617__5.call(this, self__, a, b, c, d);
      case 6:
        return G__8617__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__8617__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__8617__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__8617__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__8617__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__8617__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__8617__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__8617__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__8617__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__8617__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__8617__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__8617__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__8617__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__8617__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__8617__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__8617__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__8617__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8617.cljs$core$IFn$_invoke$arity$1 = G__8617__1;
  G__8617.cljs$core$IFn$_invoke$arity$2 = G__8617__2;
  G__8617.cljs$core$IFn$_invoke$arity$3 = G__8617__3;
  G__8617.cljs$core$IFn$_invoke$arity$4 = G__8617__4;
  G__8617.cljs$core$IFn$_invoke$arity$5 = G__8617__5;
  G__8617.cljs$core$IFn$_invoke$arity$6 = G__8617__6;
  G__8617.cljs$core$IFn$_invoke$arity$7 = G__8617__7;
  G__8617.cljs$core$IFn$_invoke$arity$8 = G__8617__8;
  G__8617.cljs$core$IFn$_invoke$arity$9 = G__8617__9;
  G__8617.cljs$core$IFn$_invoke$arity$10 = G__8617__10;
  G__8617.cljs$core$IFn$_invoke$arity$11 = G__8617__11;
  G__8617.cljs$core$IFn$_invoke$arity$12 = G__8617__12;
  G__8617.cljs$core$IFn$_invoke$arity$13 = G__8617__13;
  G__8617.cljs$core$IFn$_invoke$arity$14 = G__8617__14;
  G__8617.cljs$core$IFn$_invoke$arity$15 = G__8617__15;
  G__8617.cljs$core$IFn$_invoke$arity$16 = G__8617__16;
  G__8617.cljs$core$IFn$_invoke$arity$17 = G__8617__17;
  G__8617.cljs$core$IFn$_invoke$arity$18 = G__8617__18;
  G__8617.cljs$core$IFn$_invoke$arity$19 = G__8617__19;
  G__8617.cljs$core$IFn$_invoke$arity$20 = G__8617__20;
  G__8617.cljs$core$IFn$_invoke$arity$21 = G__8617__21;
  G__8617.cljs$core$IFn$_invoke$arity$22 = G__8617__22;
  return G__8617;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args8616) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8616)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(a) : self__.afn.call(null, a);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.afn.call(null, a, b);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.afn.call(null, a, b, c);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.afn.call(null, a, b, c, d);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.afn.call(null, a, b, c, d, e);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.afn.call(null, a, b, c, d, e, f);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.afn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.afn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.afn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.MetaFn.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "afn", "afn", 216963467, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function cljs$core$__GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function cljs$core$with_meta(o, meta) {
  if (goog.isFunction(o)) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta(o, meta);
    }
  }
};
cljs.core.meta = function cljs$core$meta(o) {
  if (function() {
    var and__6141__auto__ = !(o == null);
    if (and__6141__auto__) {
      if (!(o == null)) {
        if (o.cljs$lang$protocol_mask$partition0$ & 131072 || o.cljs$core$IMeta$) {
          return true;
        } else {
          if (!o.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, o);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, o);
      }
    } else {
      return and__6141__auto__;
    }
  }()) {
    return cljs.core._meta(o);
  } else {
    return null;
  }
};
cljs.core.peek = function cljs$core$peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek(coll);
  }
};
cljs.core.pop = function cljs$core$pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop(coll);
  }
};
cljs.core.disj = function cljs$core$disj(var_args) {
  var args8622 = [];
  var len__7211__auto___8628 = arguments.length;
  var i__7212__auto___8629 = 0;
  while (true) {
    if (i__7212__auto___8629 < len__7211__auto___8628) {
      args8622.push(arguments[i__7212__auto___8629]);
      var G__8630 = i__7212__auto___8629 + 1;
      i__7212__auto___8629 = G__8630;
      continue;
    } else {
    }
    break;
  }
  var G__8627 = args8622.length;
  switch(G__8627) {
    case 1:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8622.slice(2), 0);
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._disjoin(coll, k);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.disj.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__8632 = ret;
        var G__8633 = cljs.core.first(ks);
        var G__8634 = cljs.core.next(ks);
        coll = G__8632;
        k = G__8633;
        ks = G__8634;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.disj.cljs$lang$applyTo = function(seq8623) {
  var G__8624 = cljs.core.first(seq8623);
  var seq8623__$1 = cljs.core.next(seq8623);
  var G__8625 = cljs.core.first(seq8623__$1);
  var seq8623__$2 = cljs.core.next(seq8623__$1);
  return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(G__8624, G__8625, seq8623__$2);
};
cljs.core.disj.cljs$lang$maxFixedArity = 2;
cljs.core.empty_QMARK_ = function cljs$core$empty_QMARK_(coll) {
  return coll == null || cljs.core.not(cljs.core.seq(coll));
};
cljs.core.coll_QMARK_ = function cljs$core$coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 8 || x.cljs$core$ICollection$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, x);
    }
  }
};
cljs.core.set_QMARK_ = function cljs$core$set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 4096 || x.cljs$core$ISet$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, x);
    }
  }
};
cljs.core.associative_QMARK_ = function cljs$core$associative_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 512 || x.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, x);
  }
};
cljs.core.sequential_QMARK_ = function cljs$core$sequential_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16777216 || x.cljs$core$ISequential$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, x);
  }
};
cljs.core.sorted_QMARK_ = function cljs$core$sorted_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 268435456 || x.cljs$core$ISorted$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, x);
  }
};
cljs.core.reduceable_QMARK_ = function cljs$core$reduceable_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 524288 || x.cljs$core$IReduce$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, x);
  }
};
cljs.core.map_QMARK_ = function cljs$core$map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 1024 || x.cljs$core$IMap$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, x);
    }
  }
};
cljs.core.record_QMARK_ = function cljs$core$record_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 67108864 || x.cljs$core$IRecord$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, x);
  }
};
cljs.core.vector_QMARK_ = function cljs$core$vector_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16384 || x.cljs$core$IVector$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, x);
  }
};
cljs.core.chunked_seq_QMARK_ = function cljs$core$chunked_seq_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition1$ & 512 || x.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function cljs$core$js_obj(var_args) {
  var args8655 = [];
  var len__7211__auto___8661 = arguments.length;
  var i__7212__auto___8662 = 0;
  while (true) {
    if (i__7212__auto___8662 < len__7211__auto___8661) {
      args8655.push(arguments[i__7212__auto___8662]);
      var G__8663 = i__7212__auto___8662 + 1;
      i__7212__auto___8662 = G__8663;
      continue;
    } else {
    }
    break;
  }
  var G__8658 = args8655.length;
  switch(G__8658) {
    case 0:
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8655.slice(0), 0);
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(argseq__7230__auto__);
  }
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0 = function() {
  return {};
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(goog.object.create, keyvals) : cljs.core.apply.call(null, goog.object.create, keyvals);
};
cljs.core.js_obj.cljs$lang$applyTo = function(seq8656) {
  return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq8656));
};
cljs.core.js_obj.cljs$lang$maxFixedArity = 0;
cljs.core.js_keys = function cljs$core$js_keys(obj) {
  var keys = [];
  var G__8667_8669 = obj;
  var G__8668_8670 = function(G__8667_8669, keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(G__8667_8669, keys);
  goog.object.forEach(G__8667_8669, G__8668_8670);
  return keys;
};
cljs.core.js_delete = function cljs$core$js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function cljs$core$array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__8671 = i__$1 + 1;
      var G__8672 = j__$1 + 1;
      var G__8673 = len__$1 - 1;
      i__$1 = G__8671;
      j__$1 = G__8672;
      len__$1 = G__8673;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function cljs$core$array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__8674 = i__$1 - 1;
      var G__8675 = j__$1 - 1;
      var G__8676 = len__$1 - 1;
      i__$1 = G__8674;
      j__$1 = G__8675;
      len__$1 = G__8676;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = {};
cljs.core.false_QMARK_ = function cljs$core$false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function cljs$core$true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function cljs$core$undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function cljs$core$seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    if (!(s == null)) {
      if (s.cljs$lang$protocol_mask$partition0$ & 64 || s.cljs$core$ISeq$) {
        return true;
      } else {
        if (!s.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, s);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, s);
    }
  }
};
cljs.core.seqable_QMARK_ = function cljs$core$seqable_QMARK_(s) {
  if (!(s == null)) {
    if (s.cljs$lang$protocol_mask$partition0$ & 8388608 || s.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!s.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, s);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, s);
  }
};
cljs.core.boolean$ = function cljs$core$boolean(x) {
  if (x == null) {
    return false;
  } else {
    if (x === false) {
      return false;
    } else {
      return true;
    }
  }
};
cljs.core.ifn_QMARK_ = function cljs$core$ifn_QMARK_(f) {
  var or__6153__auto__ = cljs.core.fn_QMARK_(f);
  if (or__6153__auto__) {
    return or__6153__auto__;
  } else {
    if (!(f == null)) {
      if (f.cljs$lang$protocol_mask$partition0$ & 1 || f.cljs$core$IFn$) {
        return true;
      } else {
        if (!f.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, f);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, f);
    }
  }
};
cljs.core.integer_QMARK_ = function cljs$core$integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10);
};
cljs.core.contains_QMARK_ = function cljs$core$contains_QMARK_(coll, v) {
  if (cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function cljs$core$find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function cljs$core$distinct_QMARK_(var_args) {
  var args8687 = [];
  var len__7211__auto___8693 = arguments.length;
  var i__7212__auto___8694 = 0;
  while (true) {
    if (i__7212__auto___8694 < len__7211__auto___8693) {
      args8687.push(arguments[i__7212__auto___8694]);
      var G__8695 = i__7212__auto___8694 + 1;
      i__7212__auto___8694 = G__8695;
      continue;
    } else {
    }
    break;
  }
  var G__8692 = args8687.length;
  switch(G__8692) {
    case 1:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8687.slice(2), 0);
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
    var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
    var xs = more;
    while (true) {
      var x__$1 = cljs.core.first(xs);
      var etc = cljs.core.next(xs);
      if (cljs.core.truth_(xs)) {
        if (cljs.core.contains_QMARK_(s, x__$1)) {
          return false;
        } else {
          var G__8697 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s, x__$1);
          var G__8698 = etc;
          s = G__8697;
          xs = G__8698;
          continue;
        }
      } else {
        return true;
      }
      break;
    }
  } else {
    return false;
  }
};
cljs.core.distinct_QMARK_.cljs$lang$applyTo = function(seq8688) {
  var G__8689 = cljs.core.first(seq8688);
  var seq8688__$1 = cljs.core.next(seq8688);
  var G__8690 = cljs.core.first(seq8688__$1);
  var seq8688__$2 = cljs.core.next(seq8688__$1);
  return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(G__8689, G__8690, seq8688__$2);
};
cljs.core.distinct_QMARK_.cljs$lang$maxFixedArity = 2;
cljs.core.compare = function cljs$core$compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return -1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (typeof x === "number") {
          if (typeof y === "number") {
            return goog.array.defaultCompare(x, y);
          } else {
            throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x), cljs.core.str(" to "), cljs.core.str(y)].join(""));
          }
        } else {
          if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 2048 || x.cljs$core$IComparable$ ? true : !x.cljs$lang$protocol_mask$partition1$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IComparable, x) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IComparable, x)) {
            return cljs.core._compare(x, y);
          } else {
            if ((typeof x === "string" || cljs.core.array_QMARK_(x) || x === true || x === false) && cljs.core.type(x) === cljs.core.type(y)) {
              return goog.array.defaultCompare(x, y);
            } else {
              throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x), cljs.core.str(" to "), cljs.core.str(y)].join(""));
            }
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function cljs$core$compare_indexed(var_args) {
  var args8701 = [];
  var len__7211__auto___8704 = arguments.length;
  var i__7212__auto___8705 = 0;
  while (true) {
    if (i__7212__auto___8705 < len__7211__auto___8704) {
      args8701.push(arguments[i__7212__auto___8705]);
      var G__8706 = i__7212__auto___8705 + 1;
      i__7212__auto___8705 = G__8706;
      continue;
    } else {
    }
    break;
  }
  var G__8703 = args8701.length;
  switch(G__8703) {
    case 2:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8701.length)].join(""));;
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2 = function(xs, ys) {
  var xl = cljs.core.count(xs);
  var yl = cljs.core.count(ys);
  if (xl < yl) {
    return -1;
  } else {
    if (xl > yl) {
      return 1;
    } else {
      if (xl === 0) {
        return 0;
      } else {
        return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
      }
    }
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4 = function(xs, ys, len, n) {
  while (true) {
    var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
    if (d === 0 && n + 1 < len) {
      var G__8708 = xs;
      var G__8709 = ys;
      var G__8710 = len;
      var G__8711 = n + 1;
      xs = G__8708;
      ys = G__8709;
      len = G__8710;
      n = G__8711;
      continue;
    } else {
      return d;
    }
    break;
  }
};
cljs.core.compare_indexed.cljs$lang$maxFixedArity = 4;
cljs.core.fn__GT_comparator = function cljs$core$fn__GT_comparator(f) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return -1;
        } else {
          if (cljs.core.truth_(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(y, x) : f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function cljs$core$sort(var_args) {
  var args8712 = [];
  var len__7211__auto___8717 = arguments.length;
  var i__7212__auto___8718 = 0;
  while (true) {
    if (i__7212__auto___8718 < len__7211__auto___8717) {
      args8712.push(arguments[i__7212__auto___8718]);
      var G__8719 = i__7212__auto___8718 + 1;
      i__7212__auto___8718 = G__8719;
      continue;
    } else {
    }
    break;
  }
  var G__8714 = args8712.length;
  switch(G__8714) {
    case 1:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8712.length)].join(""));;
  }
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$2 = function(comp, coll) {
  if (cljs.core.seq(coll)) {
    var a = cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.to_array.call(null, coll);
    var G__8715_8721 = a;
    var G__8716_8722 = cljs.core.fn__GT_comparator(comp);
    goog.array.stableSort(G__8715_8721, G__8716_8722);
    return cljs.core.seq(a);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.sort.cljs$lang$maxFixedArity = 2;
cljs.core.sort_by = function cljs$core$sort_by(var_args) {
  var args8723 = [];
  var len__7211__auto___8726 = arguments.length;
  var i__7212__auto___8727 = 0;
  while (true) {
    if (i__7212__auto___8727 < len__7211__auto___8726) {
      args8723.push(arguments[i__7212__auto___8727]);
      var G__8728 = i__7212__auto___8727 + 1;
      i__7212__auto___8727 = G__8728;
      continue;
    } else {
    }
    break;
  }
  var G__8725 = args8723.length;
  switch(G__8725) {
    case 2:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8723.length)].join(""));;
  }
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2 = function(keyfn, coll) {
  return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3 = function(keyfn, comp, coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
    return cljs.core.fn__GT_comparator(comp).call(null, keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(x) : keyfn.call(null, x), keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(y) : keyfn.call(null, y));
  }, coll);
};
cljs.core.sort_by.cljs$lang$maxFixedArity = 3;
cljs.core.seq_reduce = function cljs$core$seq_reduce(var_args) {
  var args8730 = [];
  var len__7211__auto___8738 = arguments.length;
  var i__7212__auto___8739 = 0;
  while (true) {
    if (i__7212__auto___8739 < len__7211__auto___8738) {
      args8730.push(arguments[i__7212__auto___8739]);
      var G__8740 = i__7212__auto___8739 + 1;
      i__7212__auto___8739 = G__8740;
      continue;
    } else {
    }
    break;
  }
  var G__8732 = args8730.length;
  switch(G__8732) {
    case 2:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8730.length)].join(""));;
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var temp__4655__auto__ = cljs.core.seq(coll);
  if (temp__4655__auto__) {
    var s = temp__4655__auto__;
    var G__8733 = f;
    var G__8734 = cljs.core.first(s);
    var G__8735 = cljs.core.next(s);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__8733, G__8734, G__8735) : cljs.core.reduce.call(null, G__8733, G__8734, G__8735);
  } else {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  var val__$1 = val;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (coll__$1) {
      var nval = function() {
        var G__8736 = val__$1;
        var G__8737 = cljs.core.first(coll__$1);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8736, G__8737) : f.call(null, G__8736, G__8737);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__8742 = nval;
        var G__8743 = cljs.core.next(coll__$1);
        val__$1 = G__8742;
        coll__$1 = G__8743;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.seq_reduce.cljs$lang$maxFixedArity = 3;
cljs.core.shuffle = function cljs$core$shuffle(coll) {
  var a = cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(a) : cljs.core.vec.call(null, a);
};
cljs.core.reduce = function cljs$core$reduce(var_args) {
  var args8744 = [];
  var len__7211__auto___8749 = arguments.length;
  var i__7212__auto___8750 = 0;
  while (true) {
    if (i__7212__auto___8750 < len__7211__auto___8749) {
      args8744.push(arguments[i__7212__auto___8750]);
      var G__8751 = i__7212__auto___8750 + 1;
      i__7212__auto___8750 = G__8751;
      continue;
    } else {
    }
    break;
  }
  var G__8746 = args8744.length;
  switch(G__8746) {
    case 2:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8744.length)].join(""));;
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 524288 || coll.cljs$core$IReduce$ ? true : false : false) {
    return coll.cljs$core$IReduce$_reduce$arity$2(null, f);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 524288 || coll.cljs$core$IReduce$ ? true : false : false) {
    return coll.cljs$core$IReduce$_reduce$arity$3(null, f, val);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$lang$maxFixedArity = 3;
cljs.core.reduce_kv = function cljs$core$reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce(coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function cljs$core$identity(x) {
  return x;
};
cljs.core.completing = function cljs$core$completing(var_args) {
  var args8753 = [];
  var len__7211__auto___8756 = arguments.length;
  var i__7212__auto___8757 = 0;
  while (true) {
    if (i__7212__auto___8757 < len__7211__auto___8756) {
      args8753.push(arguments[i__7212__auto___8757]);
      var G__8758 = i__7212__auto___8757 + 1;
      i__7212__auto___8757 = G__8758;
      continue;
    } else {
    }
    break;
  }
  var G__8755 = args8753.length;
  switch(G__8755) {
    case 1:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8753.length)].join(""));;
  }
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$2 = function(f, cf) {
  return function() {
    var G__8760 = null;
    var G__8760__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    };
    var G__8760__1 = function(x) {
      return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(x) : cf.call(null, x);
    };
    var G__8760__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y);
    };
    G__8760 = function(x, y) {
      switch(arguments.length) {
        case 0:
          return G__8760__0.call(this);
        case 1:
          return G__8760__1.call(this, x);
        case 2:
          return G__8760__2.call(this, x, y);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8760.cljs$core$IFn$_invoke$arity$0 = G__8760__0;
    G__8760.cljs$core$IFn$_invoke$arity$1 = G__8760__1;
    G__8760.cljs$core$IFn$_invoke$arity$2 = G__8760__2;
    return G__8760;
  }();
};
cljs.core.completing.cljs$lang$maxFixedArity = 2;
cljs.core.transduce = function cljs$core$transduce(var_args) {
  var args8761 = [];
  var len__7211__auto___8764 = arguments.length;
  var i__7212__auto___8765 = 0;
  while (true) {
    if (i__7212__auto___8765 < len__7211__auto___8764) {
      args8761.push(arguments[i__7212__auto___8765]);
      var G__8766 = i__7212__auto___8765 + 1;
      i__7212__auto___8765 = G__8766;
      continue;
    } else {
    }
    break;
  }
  var G__8763 = args8761.length;
  switch(G__8763) {
    case 3:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8761.length)].join(""));;
  }
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$3 = function(xform, f, coll) {
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, f, f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), coll);
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$4 = function(xform, f, init, coll) {
  var f__$1 = xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(f) : xform.call(null, f);
  var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1, init, coll);
  return f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(ret) : f__$1.call(null, ret);
};
cljs.core.transduce.cljs$lang$maxFixedArity = 4;
cljs.core._PLUS_ = function cljs$core$_PLUS_(var_args) {
  var args8768 = [];
  var len__7211__auto___8774 = arguments.length;
  var i__7212__auto___8775 = 0;
  while (true) {
    if (i__7212__auto___8775 < len__7211__auto___8774) {
      args8768.push(arguments[i__7212__auto___8775]);
      var G__8776 = i__7212__auto___8775 + 1;
      i__7212__auto___8775 = G__8776;
      continue;
    } else {
    }
    break;
  }
  var G__8773 = args8768.length;
  switch(G__8773) {
    case 0:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8768.slice(2), 0);
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._PLUS_, x + y, more);
};
cljs.core._PLUS_.cljs$lang$applyTo = function(seq8769) {
  var G__8770 = cljs.core.first(seq8769);
  var seq8769__$1 = cljs.core.next(seq8769);
  var G__8771 = cljs.core.first(seq8769__$1);
  var seq8769__$2 = cljs.core.next(seq8769__$1);
  return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(G__8770, G__8771, seq8769__$2);
};
cljs.core._PLUS_.cljs$lang$maxFixedArity = 2;
cljs.core._ = function cljs$core$_(var_args) {
  var args8778 = [];
  var len__7211__auto___8784 = arguments.length;
  var i__7212__auto___8785 = 0;
  while (true) {
    if (i__7212__auto___8785 < len__7211__auto___8784) {
      args8778.push(arguments[i__7212__auto___8785]);
      var G__8786 = i__7212__auto___8785 + 1;
      i__7212__auto___8785 = G__8786;
      continue;
    } else {
    }
    break;
  }
  var G__8783 = args8778.length;
  switch(G__8783) {
    case 1:
      return cljs.core._.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8778.slice(2), 0);
      return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core._.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core._.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core._.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._, x - y, more);
};
cljs.core._.cljs$lang$applyTo = function(seq8779) {
  var G__8780 = cljs.core.first(seq8779);
  var seq8779__$1 = cljs.core.next(seq8779);
  var G__8781 = cljs.core.first(seq8779__$1);
  var seq8779__$2 = cljs.core.next(seq8779__$1);
  return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(G__8780, G__8781, seq8779__$2);
};
cljs.core._.cljs$lang$maxFixedArity = 2;
cljs.core._STAR_ = function cljs$core$_STAR_(var_args) {
  var args8788 = [];
  var len__7211__auto___8794 = arguments.length;
  var i__7212__auto___8795 = 0;
  while (true) {
    if (i__7212__auto___8795 < len__7211__auto___8794) {
      args8788.push(arguments[i__7212__auto___8795]);
      var G__8796 = i__7212__auto___8795 + 1;
      i__7212__auto___8795 = G__8796;
      continue;
    } else {
    }
    break;
  }
  var G__8793 = args8788.length;
  switch(G__8793) {
    case 0:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8788.slice(2), 0);
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._STAR_, x * y, more);
};
cljs.core._STAR_.cljs$lang$applyTo = function(seq8789) {
  var G__8790 = cljs.core.first(seq8789);
  var seq8789__$1 = cljs.core.next(seq8789);
  var G__8791 = cljs.core.first(seq8789__$1);
  var seq8789__$2 = cljs.core.next(seq8789__$1);
  return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(G__8790, G__8791, seq8789__$2);
};
cljs.core._STAR_.cljs$lang$maxFixedArity = 2;
cljs.core._SLASH_ = function cljs$core$_SLASH_(var_args) {
  var args8798 = [];
  var len__7211__auto___8804 = arguments.length;
  var i__7212__auto___8805 = 0;
  while (true) {
    if (i__7212__auto___8805 < len__7211__auto___8804) {
      args8798.push(arguments[i__7212__auto___8805]);
      var G__8806 = i__7212__auto___8805 + 1;
      i__7212__auto___8805 = G__8806;
      continue;
    } else {
    }
    break;
  }
  var G__8803 = args8798.length;
  switch(G__8803) {
    case 1:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8798.slice(2), 0);
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._SLASH_, x / y, more);
};
cljs.core._SLASH_.cljs$lang$applyTo = function(seq8799) {
  var G__8800 = cljs.core.first(seq8799);
  var seq8799__$1 = cljs.core.next(seq8799);
  var G__8801 = cljs.core.first(seq8799__$1);
  var seq8799__$2 = cljs.core.next(seq8799__$1);
  return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(G__8800, G__8801, seq8799__$2);
};
cljs.core._SLASH_.cljs$lang$maxFixedArity = 2;
cljs.core._LT_ = function cljs$core$_LT_(var_args) {
  var args8808 = [];
  var len__7211__auto___8814 = arguments.length;
  var i__7212__auto___8815 = 0;
  while (true) {
    if (i__7212__auto___8815 < len__7211__auto___8814) {
      args8808.push(arguments[i__7212__auto___8815]);
      var G__8816 = i__7212__auto___8815 + 1;
      i__7212__auto___8815 = G__8816;
      continue;
    } else {
    }
    break;
  }
  var G__8813 = args8808.length;
  switch(G__8813) {
    case 1:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8808.slice(2), 0);
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x < y;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x < y) {
      if (cljs.core.next(more)) {
        var G__8818 = y;
        var G__8819 = cljs.core.first(more);
        var G__8820 = cljs.core.next(more);
        x = G__8818;
        y = G__8819;
        more = G__8820;
        continue;
      } else {
        return y < cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT_.cljs$lang$applyTo = function(seq8809) {
  var G__8810 = cljs.core.first(seq8809);
  var seq8809__$1 = cljs.core.next(seq8809);
  var G__8811 = cljs.core.first(seq8809__$1);
  var seq8809__$2 = cljs.core.next(seq8809__$1);
  return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(G__8810, G__8811, seq8809__$2);
};
cljs.core._LT_.cljs$lang$maxFixedArity = 2;
cljs.core._LT__EQ_ = function cljs$core$_LT__EQ_(var_args) {
  var args8821 = [];
  var len__7211__auto___8827 = arguments.length;
  var i__7212__auto___8828 = 0;
  while (true) {
    if (i__7212__auto___8828 < len__7211__auto___8827) {
      args8821.push(arguments[i__7212__auto___8828]);
      var G__8829 = i__7212__auto___8828 + 1;
      i__7212__auto___8828 = G__8829;
      continue;
    } else {
    }
    break;
  }
  var G__8826 = args8821.length;
  switch(G__8826) {
    case 1:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8821.slice(2), 0);
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x <= y;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x <= y) {
      if (cljs.core.next(more)) {
        var G__8831 = y;
        var G__8832 = cljs.core.first(more);
        var G__8833 = cljs.core.next(more);
        x = G__8831;
        y = G__8832;
        more = G__8833;
        continue;
      } else {
        return y <= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT__EQ_.cljs$lang$applyTo = function(seq8822) {
  var G__8823 = cljs.core.first(seq8822);
  var seq8822__$1 = cljs.core.next(seq8822);
  var G__8824 = cljs.core.first(seq8822__$1);
  var seq8822__$2 = cljs.core.next(seq8822__$1);
  return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__8823, G__8824, seq8822__$2);
};
cljs.core._LT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core._GT_ = function cljs$core$_GT_(var_args) {
  var args8834 = [];
  var len__7211__auto___8840 = arguments.length;
  var i__7212__auto___8841 = 0;
  while (true) {
    if (i__7212__auto___8841 < len__7211__auto___8840) {
      args8834.push(arguments[i__7212__auto___8841]);
      var G__8842 = i__7212__auto___8841 + 1;
      i__7212__auto___8841 = G__8842;
      continue;
    } else {
    }
    break;
  }
  var G__8839 = args8834.length;
  switch(G__8839) {
    case 1:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8834.slice(2), 0);
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x > y;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x > y) {
      if (cljs.core.next(more)) {
        var G__8844 = y;
        var G__8845 = cljs.core.first(more);
        var G__8846 = cljs.core.next(more);
        x = G__8844;
        y = G__8845;
        more = G__8846;
        continue;
      } else {
        return y > cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT_.cljs$lang$applyTo = function(seq8835) {
  var G__8836 = cljs.core.first(seq8835);
  var seq8835__$1 = cljs.core.next(seq8835);
  var G__8837 = cljs.core.first(seq8835__$1);
  var seq8835__$2 = cljs.core.next(seq8835__$1);
  return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(G__8836, G__8837, seq8835__$2);
};
cljs.core._GT_.cljs$lang$maxFixedArity = 2;
cljs.core._GT__EQ_ = function cljs$core$_GT__EQ_(var_args) {
  var args8847 = [];
  var len__7211__auto___8853 = arguments.length;
  var i__7212__auto___8854 = 0;
  while (true) {
    if (i__7212__auto___8854 < len__7211__auto___8853) {
      args8847.push(arguments[i__7212__auto___8854]);
      var G__8855 = i__7212__auto___8854 + 1;
      i__7212__auto___8854 = G__8855;
      continue;
    } else {
    }
    break;
  }
  var G__8852 = args8847.length;
  switch(G__8852) {
    case 1:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8847.slice(2), 0);
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x >= y;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x >= y) {
      if (cljs.core.next(more)) {
        var G__8857 = y;
        var G__8858 = cljs.core.first(more);
        var G__8859 = cljs.core.next(more);
        x = G__8857;
        y = G__8858;
        more = G__8859;
        continue;
      } else {
        return y >= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT__EQ_.cljs$lang$applyTo = function(seq8848) {
  var G__8849 = cljs.core.first(seq8848);
  var seq8848__$1 = cljs.core.next(seq8848);
  var G__8850 = cljs.core.first(seq8848__$1);
  var seq8848__$2 = cljs.core.next(seq8848__$1);
  return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__8849, G__8850, seq8848__$2);
};
cljs.core._GT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.dec = function cljs$core$dec(x) {
  return x - 1;
};
cljs.core.max = function cljs$core$max(var_args) {
  var args8860 = [];
  var len__7211__auto___8866 = arguments.length;
  var i__7212__auto___8867 = 0;
  while (true) {
    if (i__7212__auto___8867 < len__7211__auto___8866) {
      args8860.push(arguments[i__7212__auto___8867]);
      var G__8868 = i__7212__auto___8867 + 1;
      i__7212__auto___8867 = G__8868;
      continue;
    } else {
    }
    break;
  }
  var G__8865 = args8860.length;
  switch(G__8865) {
    case 1:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8860.slice(2), 0);
      return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core.max.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__6484__auto__ = x;
  var y__6485__auto__ = y;
  return x__6484__auto__ > y__6485__auto__ ? x__6484__auto__ : y__6485__auto__;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.max, function() {
    var x__6484__auto__ = x;
    var y__6485__auto__ = y;
    return x__6484__auto__ > y__6485__auto__ ? x__6484__auto__ : y__6485__auto__;
  }(), more);
};
cljs.core.max.cljs$lang$applyTo = function(seq8861) {
  var G__8862 = cljs.core.first(seq8861);
  var seq8861__$1 = cljs.core.next(seq8861);
  var G__8863 = cljs.core.first(seq8861__$1);
  var seq8861__$2 = cljs.core.next(seq8861__$1);
  return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(G__8862, G__8863, seq8861__$2);
};
cljs.core.max.cljs$lang$maxFixedArity = 2;
cljs.core.min = function cljs$core$min(var_args) {
  var args8870 = [];
  var len__7211__auto___8876 = arguments.length;
  var i__7212__auto___8877 = 0;
  while (true) {
    if (i__7212__auto___8877 < len__7211__auto___8876) {
      args8870.push(arguments[i__7212__auto___8877]);
      var G__8878 = i__7212__auto___8877 + 1;
      i__7212__auto___8877 = G__8878;
      continue;
    } else {
    }
    break;
  }
  var G__8875 = args8870.length;
  switch(G__8875) {
    case 1:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8870.slice(2), 0);
      return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core.min.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__6491__auto__ = x;
  var y__6492__auto__ = y;
  return x__6491__auto__ < y__6492__auto__ ? x__6491__auto__ : y__6492__auto__;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.min, function() {
    var x__6491__auto__ = x;
    var y__6492__auto__ = y;
    return x__6491__auto__ < y__6492__auto__ ? x__6491__auto__ : y__6492__auto__;
  }(), more);
};
cljs.core.min.cljs$lang$applyTo = function(seq8871) {
  var G__8872 = cljs.core.first(seq8871);
  var seq8871__$1 = cljs.core.next(seq8871);
  var G__8873 = cljs.core.first(seq8871__$1);
  var seq8871__$2 = cljs.core.next(seq8871__$1);
  return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(G__8872, G__8873, seq8871__$2);
};
cljs.core.min.cljs$lang$maxFixedArity = 2;
cljs.core.byte$ = function cljs$core$byte(x) {
  return x;
};
cljs.core.char$ = function cljs$core$char(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function cljs$core$short(x) {
  return x;
};
cljs.core.float$ = function cljs$core$float(x) {
  return x;
};
cljs.core.double$ = function cljs$core$double(x) {
  return x;
};
cljs.core.unchecked_byte = function cljs$core$unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function cljs$core$unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function cljs$core$unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function cljs$core$unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function cljs$core$unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function cljs$core$unchecked_add(var_args) {
  var args8880 = [];
  var len__7211__auto___8886 = arguments.length;
  var i__7212__auto___8887 = 0;
  while (true) {
    if (i__7212__auto___8887 < len__7211__auto___8886) {
      args8880.push(arguments[i__7212__auto___8887]);
      var G__8888 = i__7212__auto___8887 + 1;
      i__7212__auto___8887 = G__8888;
      continue;
    } else {
    }
    break;
  }
  var G__8885 = args8880.length;
  switch(G__8885) {
    case 0:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8880.slice(2), 0);
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add, x + y, more);
};
cljs.core.unchecked_add.cljs$lang$applyTo = function(seq8881) {
  var G__8882 = cljs.core.first(seq8881);
  var seq8881__$1 = cljs.core.next(seq8881);
  var G__8883 = cljs.core.first(seq8881__$1);
  var seq8881__$2 = cljs.core.next(seq8881__$1);
  return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(G__8882, G__8883, seq8881__$2);
};
cljs.core.unchecked_add.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_add_int = function cljs$core$unchecked_add_int(var_args) {
  var args8890 = [];
  var len__7211__auto___8896 = arguments.length;
  var i__7212__auto___8897 = 0;
  while (true) {
    if (i__7212__auto___8897 < len__7211__auto___8896) {
      args8890.push(arguments[i__7212__auto___8897]);
      var G__8898 = i__7212__auto___8897 + 1;
      i__7212__auto___8897 = G__8898;
      continue;
    } else {
    }
    break;
  }
  var G__8895 = args8890.length;
  switch(G__8895) {
    case 0:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8890.slice(2), 0);
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add_int, x + y, more);
};
cljs.core.unchecked_add_int.cljs$lang$applyTo = function(seq8891) {
  var G__8892 = cljs.core.first(seq8891);
  var seq8891__$1 = cljs.core.next(seq8891);
  var G__8893 = cljs.core.first(seq8891__$1);
  var seq8891__$2 = cljs.core.next(seq8891__$1);
  return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(G__8892, G__8893, seq8891__$2);
};
cljs.core.unchecked_add_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_dec = function cljs$core$unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function cljs$core$unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function cljs$core$unchecked_divide_int(var_args) {
  var args8900 = [];
  var len__7211__auto___8906 = arguments.length;
  var i__7212__auto___8907 = 0;
  while (true) {
    if (i__7212__auto___8907 < len__7211__auto___8906) {
      args8900.push(arguments[i__7212__auto___8907]);
      var G__8908 = i__7212__auto___8907 + 1;
      i__7212__auto___8907 = G__8908;
      continue;
    } else {
    }
    break;
  }
  var G__8905 = args8900.length;
  switch(G__8905) {
    case 1:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8900.slice(2), 0);
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_divide_int, x / y, more);
};
cljs.core.unchecked_divide_int.cljs$lang$applyTo = function(seq8901) {
  var G__8902 = cljs.core.first(seq8901);
  var seq8901__$1 = cljs.core.next(seq8901);
  var G__8903 = cljs.core.first(seq8901__$1);
  var seq8901__$2 = cljs.core.next(seq8901__$1);
  return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(G__8902, G__8903, seq8901__$2);
};
cljs.core.unchecked_divide_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_inc = function cljs$core$unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function cljs$core$unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function cljs$core$unchecked_multiply(var_args) {
  var args8910 = [];
  var len__7211__auto___8916 = arguments.length;
  var i__7212__auto___8917 = 0;
  while (true) {
    if (i__7212__auto___8917 < len__7211__auto___8916) {
      args8910.push(arguments[i__7212__auto___8917]);
      var G__8918 = i__7212__auto___8917 + 1;
      i__7212__auto___8917 = G__8918;
      continue;
    } else {
    }
    break;
  }
  var G__8915 = args8910.length;
  switch(G__8915) {
    case 0:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8910.slice(2), 0);
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply, x * y, more);
};
cljs.core.unchecked_multiply.cljs$lang$applyTo = function(seq8911) {
  var G__8912 = cljs.core.first(seq8911);
  var seq8911__$1 = cljs.core.next(seq8911);
  var G__8913 = cljs.core.first(seq8911__$1);
  var seq8911__$2 = cljs.core.next(seq8911__$1);
  return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(G__8912, G__8913, seq8911__$2);
};
cljs.core.unchecked_multiply.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_multiply_int = function cljs$core$unchecked_multiply_int(var_args) {
  var args8920 = [];
  var len__7211__auto___8926 = arguments.length;
  var i__7212__auto___8927 = 0;
  while (true) {
    if (i__7212__auto___8927 < len__7211__auto___8926) {
      args8920.push(arguments[i__7212__auto___8927]);
      var G__8928 = i__7212__auto___8927 + 1;
      i__7212__auto___8927 = G__8928;
      continue;
    } else {
    }
    break;
  }
  var G__8925 = args8920.length;
  switch(G__8925) {
    case 0:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8920.slice(2), 0);
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply_int, x * y, more);
};
cljs.core.unchecked_multiply_int.cljs$lang$applyTo = function(seq8921) {
  var G__8922 = cljs.core.first(seq8921);
  var seq8921__$1 = cljs.core.next(seq8921);
  var G__8923 = cljs.core.first(seq8921__$1);
  var seq8921__$2 = cljs.core.next(seq8921__$1);
  return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(G__8922, G__8923, seq8921__$2);
};
cljs.core.unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_negate = function cljs$core$unchecked_negate(x) {
  return -x;
};
cljs.core.unchecked_negate_int = function cljs$core$unchecked_negate_int(x) {
  return -x;
};
cljs.core.unchecked_remainder_int = function cljs$core$unchecked_remainder_int(x, n) {
  return cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(x, n) : cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_subtract = function cljs$core$unchecked_subtract(var_args) {
  var args8930 = [];
  var len__7211__auto___8936 = arguments.length;
  var i__7212__auto___8937 = 0;
  while (true) {
    if (i__7212__auto___8937 < len__7211__auto___8936) {
      args8930.push(arguments[i__7212__auto___8937]);
      var G__8938 = i__7212__auto___8937 + 1;
      i__7212__auto___8937 = G__8938;
      continue;
    } else {
    }
    break;
  }
  var G__8935 = args8930.length;
  switch(G__8935) {
    case 1:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8930.slice(2), 0);
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract, x - y, more);
};
cljs.core.unchecked_subtract.cljs$lang$applyTo = function(seq8931) {
  var G__8932 = cljs.core.first(seq8931);
  var seq8931__$1 = cljs.core.next(seq8931);
  var G__8933 = cljs.core.first(seq8931__$1);
  var seq8931__$2 = cljs.core.next(seq8931__$1);
  return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(G__8932, G__8933, seq8931__$2);
};
cljs.core.unchecked_subtract.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_subtract_int = function cljs$core$unchecked_subtract_int(var_args) {
  var args8940 = [];
  var len__7211__auto___8946 = arguments.length;
  var i__7212__auto___8947 = 0;
  while (true) {
    if (i__7212__auto___8947 < len__7211__auto___8946) {
      args8940.push(arguments[i__7212__auto___8947]);
      var G__8948 = i__7212__auto___8947 + 1;
      i__7212__auto___8947 = G__8948;
      continue;
    } else {
    }
    break;
  }
  var G__8945 = args8940.length;
  switch(G__8945) {
    case 1:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8940.slice(2), 0);
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract_int, x - y, more);
};
cljs.core.unchecked_subtract_int.cljs$lang$applyTo = function(seq8941) {
  var G__8942 = cljs.core.first(seq8941);
  var seq8941__$1 = cljs.core.next(seq8941);
  var G__8943 = cljs.core.first(seq8941__$1);
  var seq8941__$2 = cljs.core.next(seq8941__$1);
  return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(G__8942, G__8943, seq8941__$2);
};
cljs.core.unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
cljs.core.fix = function cljs$core$fix(q) {
  if (q >= 0) {
    return Math.floor(q);
  } else {
    return Math.ceil(q);
  }
};
cljs.core.int$ = function cljs$core$int(x) {
  return x | 0;
};
cljs.core.unchecked_int = function cljs$core$unchecked_int(x) {
  return cljs.core.fix(x);
};
cljs.core.long$ = function cljs$core$long(x) {
  return cljs.core.fix(x);
};
cljs.core.unchecked_long = function cljs$core$unchecked_long(x) {
  return cljs.core.fix(x);
};
cljs.core.booleans = function cljs$core$booleans(x) {
  return x;
};
cljs.core.bytes = function cljs$core$bytes(x) {
  return x;
};
cljs.core.chars = function cljs$core$chars(x) {
  return x;
};
cljs.core.shorts = function cljs$core$shorts(x) {
  return x;
};
cljs.core.ints = function cljs$core$ints(x) {
  return x;
};
cljs.core.floats = function cljs$core$floats(x) {
  return x;
};
cljs.core.doubles = function cljs$core$doubles(x) {
  return x;
};
cljs.core.longs = function cljs$core$longs(x) {
  return x;
};
cljs.core.js_mod = function cljs$core$js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function cljs$core$mod(n, d) {
  return (n % d + d) % d;
};
cljs.core.quot = function cljs$core$quot(n, d) {
  var rem = n % d;
  return cljs.core.fix((n - rem) / d);
};
cljs.core.rem = function cljs$core$rem(n, d) {
  var q = cljs.core.quot(n, d);
  return n - d * q;
};
cljs.core.bit_xor = function cljs$core$bit_xor(var_args) {
  var args8950 = [];
  var len__7211__auto___8956 = arguments.length;
  var i__7212__auto___8957 = 0;
  while (true) {
    if (i__7212__auto___8957 < len__7211__auto___8956) {
      args8950.push(arguments[i__7212__auto___8957]);
      var G__8958 = i__7212__auto___8957 + 1;
      i__7212__auto___8957 = G__8958;
      continue;
    } else {
    }
    break;
  }
  var G__8955 = args8950.length;
  switch(G__8955) {
    case 2:
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8950.slice(2), 0);
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x ^ y;
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_xor, x ^ y, more);
};
cljs.core.bit_xor.cljs$lang$applyTo = function(seq8951) {
  var G__8952 = cljs.core.first(seq8951);
  var seq8951__$1 = cljs.core.next(seq8951);
  var G__8953 = cljs.core.first(seq8951__$1);
  var seq8951__$2 = cljs.core.next(seq8951__$1);
  return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(G__8952, G__8953, seq8951__$2);
};
cljs.core.bit_xor.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and = function cljs$core$bit_and(var_args) {
  var args8960 = [];
  var len__7211__auto___8966 = arguments.length;
  var i__7212__auto___8967 = 0;
  while (true) {
    if (i__7212__auto___8967 < len__7211__auto___8966) {
      args8960.push(arguments[i__7212__auto___8967]);
      var G__8968 = i__7212__auto___8967 + 1;
      i__7212__auto___8967 = G__8968;
      continue;
    } else {
    }
    break;
  }
  var G__8965 = args8960.length;
  switch(G__8965) {
    case 2:
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8960.slice(2), 0);
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & y;
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and, x & y, more);
};
cljs.core.bit_and.cljs$lang$applyTo = function(seq8961) {
  var G__8962 = cljs.core.first(seq8961);
  var seq8961__$1 = cljs.core.next(seq8961);
  var G__8963 = cljs.core.first(seq8961__$1);
  var seq8961__$2 = cljs.core.next(seq8961__$1);
  return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(G__8962, G__8963, seq8961__$2);
};
cljs.core.bit_and.cljs$lang$maxFixedArity = 2;
cljs.core.bit_or = function cljs$core$bit_or(var_args) {
  var args8970 = [];
  var len__7211__auto___8976 = arguments.length;
  var i__7212__auto___8977 = 0;
  while (true) {
    if (i__7212__auto___8977 < len__7211__auto___8976) {
      args8970.push(arguments[i__7212__auto___8977]);
      var G__8978 = i__7212__auto___8977 + 1;
      i__7212__auto___8977 = G__8978;
      continue;
    } else {
    }
    break;
  }
  var G__8975 = args8970.length;
  switch(G__8975) {
    case 2:
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8970.slice(2), 0);
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x | y;
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_or, x | y, more);
};
cljs.core.bit_or.cljs$lang$applyTo = function(seq8971) {
  var G__8972 = cljs.core.first(seq8971);
  var seq8971__$1 = cljs.core.next(seq8971);
  var G__8973 = cljs.core.first(seq8971__$1);
  var seq8971__$2 = cljs.core.next(seq8971__$1);
  return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(G__8972, G__8973, seq8971__$2);
};
cljs.core.bit_or.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and_not = function cljs$core$bit_and_not(var_args) {
  var args8980 = [];
  var len__7211__auto___8986 = arguments.length;
  var i__7212__auto___8987 = 0;
  while (true) {
    if (i__7212__auto___8987 < len__7211__auto___8986) {
      args8980.push(arguments[i__7212__auto___8987]);
      var G__8988 = i__7212__auto___8987 + 1;
      i__7212__auto___8987 = G__8988;
      continue;
    } else {
    }
    break;
  }
  var G__8985 = args8980.length;
  switch(G__8985) {
    case 2:
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8980.slice(2), 0);
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & ~y;
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and_not, x & ~y, more);
};
cljs.core.bit_and_not.cljs$lang$applyTo = function(seq8981) {
  var G__8982 = cljs.core.first(seq8981);
  var seq8981__$1 = cljs.core.next(seq8981);
  var G__8983 = cljs.core.first(seq8981__$1);
  var seq8981__$2 = cljs.core.next(seq8981__$1);
  return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(G__8982, G__8983, seq8981__$2);
};
cljs.core.bit_and_not.cljs$lang$maxFixedArity = 2;
cljs.core.bit_clear = function cljs$core$bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function cljs$core$bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function cljs$core$bit_not(x) {
  return ~x;
};
cljs.core.bit_set = function cljs$core$bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function cljs$core$bit_test(x, n) {
  return (x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function cljs$core$bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function cljs$core$bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function cljs$core$bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function cljs$core$unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function cljs$core$bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return (v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function cljs$core$_EQ__EQ_(var_args) {
  var args8990 = [];
  var len__7211__auto___8996 = arguments.length;
  var i__7212__auto___8997 = 0;
  while (true) {
    if (i__7212__auto___8997 < len__7211__auto___8996) {
      args8990.push(arguments[i__7212__auto___8997]);
      var G__8998 = i__7212__auto___8997 + 1;
      i__7212__auto___8997 = G__8998;
      continue;
    } else {
    }
    break;
  }
  var G__8995 = args8990.length;
  switch(G__8995) {
    case 1:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args8990.slice(2), 0);
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return cljs.core._equiv(x, y);
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x === y) {
      if (cljs.core.next(more)) {
        var G__9000 = y;
        var G__9001 = cljs.core.first(more);
        var G__9002 = cljs.core.next(more);
        x = G__9000;
        y = G__9001;
        more = G__9002;
        continue;
      } else {
        return y === cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ__EQ_.cljs$lang$applyTo = function(seq8991) {
  var G__8992 = cljs.core.first(seq8991);
  var seq8991__$1 = cljs.core.next(seq8991);
  var G__8993 = cljs.core.first(seq8991__$1);
  var seq8991__$2 = cljs.core.next(seq8991__$1);
  return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__8992, G__8993, seq8991__$2);
};
cljs.core._EQ__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.pos_QMARK_ = function cljs$core$pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function cljs$core$zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function cljs$core$neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function cljs$core$nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq(coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__9003 = n__$1 - 1;
      var G__9004 = cljs.core.next(xs);
      n__$1 = G__9003;
      xs = G__9004;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function cljs$core$str(var_args) {
  var args9005 = [];
  var len__7211__auto___9010 = arguments.length;
  var i__7212__auto___9011 = 0;
  while (true) {
    if (i__7212__auto___9011 < len__7211__auto___9010) {
      args9005.push(arguments[i__7212__auto___9011]);
      var G__9012 = i__7212__auto___9011 + 1;
      i__7212__auto___9011 = G__9012;
      continue;
    } else {
    }
    break;
  }
  var G__9009 = args9005.length;
  switch(G__9009) {
    case 0:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args9005.slice(1), 0);
      return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7230__auto__);
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$0 = function() {
  return "";
};
cljs.core.str.cljs$core$IFn$_invoke$arity$1 = function(x) {
  if (x == null) {
    return "";
  } else {
    return [x].join("");
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$variadic = function(x, ys) {
  var sb = new goog.string.StringBuffer([cljs.core.str(x)].join(""));
  var more = ys;
  while (true) {
    if (cljs.core.truth_(more)) {
      var G__9014 = sb.append([cljs.core.str(cljs.core.first(more))].join(""));
      var G__9015 = cljs.core.next(more);
      sb = G__9014;
      more = G__9015;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
cljs.core.str.cljs$lang$applyTo = function(seq9006) {
  var G__9007 = cljs.core.first(seq9006);
  var seq9006__$1 = cljs.core.next(seq9006);
  return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(G__9007, seq9006__$1);
};
cljs.core.str.cljs$lang$maxFixedArity = 1;
cljs.core.subs = function cljs$core$subs(var_args) {
  var args9016 = [];
  var len__7211__auto___9019 = arguments.length;
  var i__7212__auto___9020 = 0;
  while (true) {
    if (i__7212__auto___9020 < len__7211__auto___9019) {
      args9016.push(arguments[i__7212__auto___9020]);
      var G__9021 = i__7212__auto___9020 + 1;
      i__7212__auto___9020 = G__9021;
      continue;
    } else {
    }
    break;
  }
  var G__9018 = args9016.length;
  switch(G__9018) {
    case 2:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9016.length)].join(""));;
  }
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$2 = function(s, start) {
  return s.substring(start);
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$3 = function(s, start, end) {
  return s.substring(start, end);
};
cljs.core.subs.cljs$lang$maxFixedArity = 3;
cljs.core.equiv_sequential = function cljs$core$equiv_sequential(x, y) {
  return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && !(cljs.core.count(x) === cljs.core.count(y)) ? false : function() {
    var xs = cljs.core.seq(x);
    var ys = cljs.core.seq(y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
            var G__9023 = cljs.core.next(xs);
            var G__9024 = cljs.core.next(ys);
            xs = G__9023;
            ys = G__9024;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function cljs$core$hash_coll(coll) {
  if (cljs.core.seq(coll)) {
    var res = cljs.core.hash(cljs.core.first(coll));
    var s = cljs.core.next(coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__9025 = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(s)));
        var G__9026 = cljs.core.next(s);
        res = G__9025;
        s = G__9026;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function cljs$core$hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq(m);
  while (true) {
    if (s) {
      var e = cljs.core.first(s);
      var G__9027 = (h + (cljs.core.hash(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e)) ^ cljs.core.hash(cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__9028 = cljs.core.next(s);
      h = G__9027;
      s = G__9028;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function cljs$core$hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq(s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first(s__$1);
      var G__9029 = (h + cljs.core.hash(e)) % 4503599627370496;
      var G__9030 = cljs.core.next(s__$1);
      h = G__9029;
      s__$1 = G__9030;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function cljs$core$extend_object_BANG_(obj, fn_map) {
  var seq__9037_9043 = cljs.core.seq(fn_map);
  var chunk__9038_9044 = null;
  var count__9039_9045 = 0;
  var i__9040_9046 = 0;
  while (true) {
    if (i__9040_9046 < count__9039_9045) {
      var vec__9041_9047 = chunk__9038_9044.cljs$core$IIndexed$_nth$arity$2(null, i__9040_9046);
      var key_name_9048 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9041_9047, 0, null);
      var f_9049 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9041_9047, 1, null);
      var str_name_9050 = cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(key_name_9048) : cljs.core.name.call(null, key_name_9048);
      obj[str_name_9050] = f_9049;
      var G__9051 = seq__9037_9043;
      var G__9052 = chunk__9038_9044;
      var G__9053 = count__9039_9045;
      var G__9054 = i__9040_9046 + 1;
      seq__9037_9043 = G__9051;
      chunk__9038_9044 = G__9052;
      count__9039_9045 = G__9053;
      i__9040_9046 = G__9054;
      continue;
    } else {
      var temp__4657__auto___9055 = cljs.core.seq(seq__9037_9043);
      if (temp__4657__auto___9055) {
        var seq__9037_9056__$1 = temp__4657__auto___9055;
        if (cljs.core.chunked_seq_QMARK_(seq__9037_9056__$1)) {
          var c__6956__auto___9057 = cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(seq__9037_9056__$1) : cljs.core.chunk_first.call(null, seq__9037_9056__$1);
          var G__9058 = cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(seq__9037_9056__$1) : cljs.core.chunk_rest.call(null, seq__9037_9056__$1);
          var G__9059 = c__6956__auto___9057;
          var G__9060 = cljs.core.count(c__6956__auto___9057);
          var G__9061 = 0;
          seq__9037_9043 = G__9058;
          chunk__9038_9044 = G__9059;
          count__9039_9045 = G__9060;
          i__9040_9046 = G__9061;
          continue;
        } else {
          var vec__9042_9062 = cljs.core.first(seq__9037_9056__$1);
          var key_name_9063 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9042_9062, 0, null);
          var f_9064 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9042_9062, 1, null);
          var str_name_9065 = cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(key_name_9063) : cljs.core.name.call(null, key_name_9063);
          obj[str_name_9065] = f_9064;
          var G__9066 = cljs.core.next(seq__9037_9056__$1);
          var G__9067 = null;
          var G__9068 = 0;
          var G__9069 = 0;
          seq__9037_9043 = G__9066;
          chunk__9038_9044 = G__9067;
          count__9039_9045 = G__9068;
          i__9040_9046 = G__9069;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest(coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6588__auto__ = self__.__hash;
  if (!(h__6588__auto__ == null)) {
    return h__6588__auto__;
  } else {
    var h__6588__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6588__auto____$1;
    return h__6588__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function cljs$core$__GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.list_QMARK_ = function cljs$core$list_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 33554432 || x.cljs$core$IList$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IList, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IList, x);
  }
};
cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.empty_ordered_hash;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.list_QMARK_(other) || cljs.core.sequential_QMARK_(other)) {
    return cljs.core.seq(other) == null;
  } else {
    return false;
  }
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function cljs$core$__GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.reversible_QMARK_ = function cljs$core$reversible_QMARK_(coll) {
  if (!(coll == null)) {
    if (coll.cljs$lang$protocol_mask$partition0$ & 134217728 || coll.cljs$core$IReversible$) {
      return true;
    } else {
      if (!coll.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, coll);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, coll);
  }
};
cljs.core.rseq = function cljs$core$rseq(rev) {
  return cljs.core._rseq(rev);
};
cljs.core.reverse = function cljs$core$reverse(coll) {
  if (cljs.core.reversible_QMARK_(coll)) {
    return cljs.core.rseq(coll);
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function cljs$core$list(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___9075 = arguments.length;
  var i__7212__auto___9076 = 0;
  while (true) {
    if (i__7212__auto___9076 < len__7211__auto___9075) {
      args__7218__auto__.push(arguments[i__7212__auto___9076]);
      var G__9077 = i__7212__auto___9076 + 1;
      i__7212__auto___9076 = G__9077;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
cljs.core.list.cljs$core$IFn$_invoke$arity$variadic = function(xs) {
  var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
    var arr = [];
    var xs__$1 = xs;
    while (true) {
      if (!(xs__$1 == null)) {
        arr.push(xs__$1.cljs$core$ISeq$_first$arity$1(null));
        var G__9078 = xs__$1.cljs$core$INext$_next$arity$1(null);
        xs__$1 = G__9078;
        continue;
      } else {
        return arr;
      }
      break;
    }
  }();
  var i = arr.length;
  var r = cljs.core.List.EMPTY;
  while (true) {
    if (i > 0) {
      var G__9079 = i - 1;
      var G__9080 = r.cljs$core$ICollection$_conj$arity$2(null, arr[i - 1]);
      i = G__9079;
      r = G__9080;
      continue;
    } else {
      return r;
    }
    break;
  }
};
cljs.core.list.cljs$lang$maxFixedArity = 0;
cljs.core.list.cljs$lang$applyTo = function(seq9074) {
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9074));
};
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq(self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6588__auto__ = self__.__hash;
  if (!(h__6588__auto__ == null)) {
    return h__6588__auto__;
  } else {
    var h__6588__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6588__auto____$1;
    return h__6588__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, null);
};
cljs.core.Cons.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function cljs$core$__GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.cons = function cljs$core$cons(x, coll) {
  if (function() {
    var or__6153__auto__ = coll == null;
    if (or__6153__auto__) {
      return or__6153__auto__;
    } else {
      if (!(coll == null)) {
        if (coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
  }
};
cljs.core.hash_keyword = function cljs$core$hash_keyword(k) {
  return cljs.core.hash_symbol(k) + 2654435769 | 0;
};
cljs.core.compare_keywords = function cljs$core$compare_keywords(a, b) {
  if (a.fqn === b.fqn) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__6141__auto__ = cljs.core.not(a.ns);
      if (and__6141__auto__) {
        return b.ns;
      } else {
        return and__6141__auto__;
      }
    }())) {
      return -1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__9091 = a.ns;
            var G__9092 = b.ns;
            return goog.array.defaultCompare(G__9091, G__9092);
          }();
          if (0 === nsc) {
            var G__9093 = a.name;
            var G__9094 = b.name;
            return goog.array.defaultCompare(G__9093, G__9094);
          } else {
            return nsc;
          }
        }
      } else {
        var G__9095 = a.name;
        var G__9096 = b.name;
        return goog.array.defaultCompare(G__9095, G__9096);
      }
    }
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return [cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__9098 = null;
  var G__9098__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
  };
  var G__9098__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
  };
  G__9098 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9098__2.call(this, self__, coll);
      case 3:
        return G__9098__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9098.cljs$core$IFn$_invoke$arity$2 = G__9098__2;
  G__9098.cljs$core$IFn$_invoke$arity$3 = G__9098__3;
  return G__9098;
}();
cljs.core.Keyword.prototype.apply = function(self__, args9097) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9097)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__6588__auto__ = self__._hash;
  if (!(h__6588__auto__ == null)) {
    return h__6588__auto__;
  } else {
    var h__6588__auto____$1 = cljs.core.hash_keyword(this$__$1);
    self__._hash = h__6588__auto____$1;
    return h__6588__auto____$1;
  }
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "fqn", "fqn", -1749334463, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_hash", "_hash", -2130838312, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function cljs$core$__GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function cljs$core$keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function cljs$core$keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.symbol_identical_QMARK_ = function cljs$core$symbol_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Symbol && y instanceof cljs.core.Symbol) {
      return x.str === y.str;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function cljs$core$namespace(x) {
  if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 4096 || x.cljs$core$INamed$ ? true : false : false) {
    return x.cljs$core$INamed$_namespace$arity$1(null);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function cljs$core$keyword(var_args) {
  var args9101 = [];
  var len__7211__auto___9104 = arguments.length;
  var i__7212__auto___9105 = 0;
  while (true) {
    if (i__7212__auto___9105 < len__7211__auto___9104) {
      args9101.push(arguments[i__7212__auto___9105]);
      var G__9106 = i__7212__auto___9105 + 1;
      i__7212__auto___9105 = G__9106;
      continue;
    } else {
    }
    break;
  }
  var G__9103 = args9101.length;
  switch(G__9103) {
    case 1:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9101.length)].join(""));;
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Keyword) {
    return name;
  } else {
    if (name instanceof cljs.core.Symbol) {
      return new cljs.core.Keyword(cljs.core.namespace(name), cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(name) : cljs.core.name.call(null, name), name.str, null);
    } else {
      if (typeof name === "string") {
        var parts = name.split("/");
        if (parts.length === 2) {
          return new cljs.core.Keyword(parts[0], parts[1], name, null);
        } else {
          return new cljs.core.Keyword(null, parts[0], name, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
};
cljs.core.keyword.cljs$lang$maxFixedArity = 2;
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 1;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6588__auto__ = self__.__hash;
  if (!(h__6588__auto__ == null)) {
    return h__6588__auto__;
  } else {
    var h__6588__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6588__auto____$1;
    return h__6588__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(x) {
  var self__ = this;
  var x__$1 = this;
  return cljs.core.not(self__.fn);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest(self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__9108 = ls.sval();
        ls = G__9108;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq(self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.LazySeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "fn", "fn", 465265323, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function cljs$core$__GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function cljs$core$__GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function cljs$core$chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "off", "off", -2047994980, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function cljs$core$__GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function cljs$core$array_chunk(var_args) {
  var args9109 = [];
  var len__7211__auto___9112 = arguments.length;
  var i__7212__auto___9113 = 0;
  while (true) {
    if (i__7212__auto___9113 < len__7211__auto___9112) {
      args9109.push(arguments[i__7212__auto___9113]);
      var G__9114 = i__7212__auto___9113 + 1;
      i__7212__auto___9113 = G__9114;
      continue;
    } else {
    }
    break;
  }
  var G__9111 = args9109.length;
  switch(G__9111) {
    case 1:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9109.length)].join(""));;
  }
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1 = function(arr) {
  return new cljs.core.ArrayChunk(arr, 0, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2 = function(arr, off) {
  return new cljs.core.ArrayChunk(arr, off, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3 = function(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk.cljs$lang$maxFixedArity = 3;
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq(self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6588__auto__ = self__.__hash;
  if (!(h__6588__auto__ == null)) {
    return h__6588__auto__;
  } else {
    var h__6588__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6588__auto____$1;
    return h__6588__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "chunk", "chunk", 449371907, null), new cljs.core.Symbol(null, "more", "more", -418290273, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function cljs$core$__GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.chunk_cons = function cljs$core$chunk_cons(chunk, rest) {
  if (cljs.core._count(chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function cljs$core$chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function cljs$core$chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function cljs$core$chunk_first(s) {
  return cljs.core._chunked_first(s);
};
cljs.core.chunk_rest = function cljs$core$chunk_rest(s) {
  return cljs.core._chunked_rest(s);
};
cljs.core.chunk_next = function cljs$core$chunk_next(s) {
  if (!(s == null) ? s.cljs$lang$protocol_mask$partition1$ & 1024 || s.cljs$core$IChunkedNext$ ? true : false : false) {
    return cljs.core._chunked_next(s);
  } else {
    return cljs.core.seq(cljs.core._chunked_rest(s));
  }
};
cljs.core.to_array = function cljs$core$to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq(s__$1)) {
      ary.push(cljs.core.first(s__$1));
      var G__9118 = cljs.core.next(s__$1);
      s__$1 = G__9118;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function cljs$core$to_array_2d(coll) {
  var ret = new Array(cljs.core.count(coll));
  var i_9119 = 0;
  var xs_9120 = cljs.core.seq(coll);
  while (true) {
    if (xs_9120) {
      ret[i_9119] = cljs.core.to_array(cljs.core.first(xs_9120));
      var G__9121 = i_9119 + 1;
      var G__9122 = cljs.core.next(xs_9120);
      i_9119 = G__9121;
      xs_9120 = G__9122;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function cljs$core$int_array(var_args) {
  var args9123 = [];
  var len__7211__auto___9126 = arguments.length;
  var i__7212__auto___9127 = 0;
  while (true) {
    if (i__7212__auto___9127 < len__7211__auto___9126) {
      args9123.push(arguments[i__7212__auto___9127]);
      var G__9128 = i__7212__auto___9127 + 1;
      i__7212__auto___9127 = G__9128;
      continue;
    } else {
    }
    break;
  }
  var G__9125 = args9123.length;
  switch(G__9125) {
    case 1:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9123.length)].join(""));;
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__9130 = i + 1;
        var G__9131 = cljs.core.next(s__$1);
        i = G__9130;
        s__$1 = G__9131;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__7056__auto___9132 = size;
    var i_9133 = 0;
    while (true) {
      if (i_9133 < n__7056__auto___9132) {
        a[i_9133] = init_val_or_seq;
        var G__9134 = i_9133 + 1;
        i_9133 = G__9134;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.int_array.cljs$lang$maxFixedArity = 2;
cljs.core.long_array = function cljs$core$long_array(var_args) {
  var args9135 = [];
  var len__7211__auto___9138 = arguments.length;
  var i__7212__auto___9139 = 0;
  while (true) {
    if (i__7212__auto___9139 < len__7211__auto___9138) {
      args9135.push(arguments[i__7212__auto___9139]);
      var G__9140 = i__7212__auto___9139 + 1;
      i__7212__auto___9139 = G__9140;
      continue;
    } else {
    }
    break;
  }
  var G__9137 = args9135.length;
  switch(G__9137) {
    case 1:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9135.length)].join(""));;
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__9142 = i + 1;
        var G__9143 = cljs.core.next(s__$1);
        i = G__9142;
        s__$1 = G__9143;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__7056__auto___9144 = size;
    var i_9145 = 0;
    while (true) {
      if (i_9145 < n__7056__auto___9144) {
        a[i_9145] = init_val_or_seq;
        var G__9146 = i_9145 + 1;
        i_9145 = G__9146;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.long_array.cljs$lang$maxFixedArity = 2;
cljs.core.double_array = function cljs$core$double_array(var_args) {
  var args9147 = [];
  var len__7211__auto___9150 = arguments.length;
  var i__7212__auto___9151 = 0;
  while (true) {
    if (i__7212__auto___9151 < len__7211__auto___9150) {
      args9147.push(arguments[i__7212__auto___9151]);
      var G__9152 = i__7212__auto___9151 + 1;
      i__7212__auto___9151 = G__9152;
      continue;
    } else {
    }
    break;
  }
  var G__9149 = args9147.length;
  switch(G__9149) {
    case 1:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9147.length)].join(""));;
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__9154 = i + 1;
        var G__9155 = cljs.core.next(s__$1);
        i = G__9154;
        s__$1 = G__9155;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__7056__auto___9156 = size;
    var i_9157 = 0;
    while (true) {
      if (i_9157 < n__7056__auto___9156) {
        a[i_9157] = init_val_or_seq;
        var G__9158 = i_9157 + 1;
        i_9157 = G__9158;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.double_array.cljs$lang$maxFixedArity = 2;
cljs.core.object_array = function cljs$core$object_array(var_args) {
  var args9159 = [];
  var len__7211__auto___9162 = arguments.length;
  var i__7212__auto___9163 = 0;
  while (true) {
    if (i__7212__auto___9163 < len__7211__auto___9162) {
      args9159.push(arguments[i__7212__auto___9163]);
      var G__9164 = i__7212__auto___9163 + 1;
      i__7212__auto___9163 = G__9164;
      continue;
    } else {
    }
    break;
  }
  var G__9161 = args9159.length;
  switch(G__9161) {
    case 1:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9159.length)].join(""));;
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__9166 = i + 1;
        var G__9167 = cljs.core.next(s__$1);
        i = G__9166;
        s__$1 = G__9167;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__7056__auto___9168 = size;
    var i_9169 = 0;
    while (true) {
      if (i_9169 < n__7056__auto___9168) {
        a[i_9169] = init_val_or_seq;
        var G__9170 = i_9169 + 1;
        i_9169 = G__9170;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.object_array.cljs$lang$maxFixedArity = 2;
cljs.core.bounded_count = function cljs$core$bounded_count(s, n) {
  if (cljs.core.counted_QMARK_(s)) {
    return cljs.core.count(s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq(s__$1)) {
        var G__9171 = cljs.core.next(s__$1);
        var G__9172 = i - 1;
        var G__9173 = sum + 1;
        s__$1 = G__9171;
        i = G__9172;
        sum = G__9173;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function cljs$core$spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next(arglist) == null) {
      return cljs.core.seq(cljs.core.first(arglist));
    } else {
      return cljs.core.cons(cljs.core.first(arglist), cljs$core$spread(cljs.core.next(arglist)));
    }
  }
};
cljs.core.concat = function cljs$core$concat(var_args) {
  var args9175 = [];
  var len__7211__auto___9187 = arguments.length;
  var i__7212__auto___9188 = 0;
  while (true) {
    if (i__7212__auto___9188 < len__7211__auto___9187) {
      args9175.push(arguments[i__7212__auto___9188]);
      var G__9189 = i__7212__auto___9188 + 1;
      i__7212__auto___9188 = G__9189;
      continue;
    } else {
    }
    break;
  }
  var G__9180 = args9175.length;
  switch(G__9180) {
    case 0:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args9175.slice(2), 0);
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$0 = function() {
  return new cljs.core.LazySeq(null, function() {
    return null;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return x;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return new cljs.core.LazySeq(null, function() {
    var s = cljs.core.seq(x);
    if (s) {
      if (cljs.core.chunked_seq_QMARK_(s)) {
        return cljs.core.chunk_cons(cljs.core.chunk_first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y));
      } else {
        return cljs.core.cons(cljs.core.first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y));
      }
    } else {
      return y;
    }
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic = function(x, y, zs) {
  var cat = function cljs$core$cat(xys, zs__$1) {
    return new cljs.core.LazySeq(null, function() {
      var xys__$1 = cljs.core.seq(xys);
      if (xys__$1) {
        if (cljs.core.chunked_seq_QMARK_(xys__$1)) {
          return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cljs$core$cat(cljs.core.chunk_rest(xys__$1), zs__$1));
        } else {
          return cljs.core.cons(cljs.core.first(xys__$1), cljs$core$cat(cljs.core.rest(xys__$1), zs__$1));
        }
      } else {
        if (cljs.core.truth_(zs__$1)) {
          return cljs$core$cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
};
cljs.core.concat.cljs$lang$applyTo = function(seq9176) {
  var G__9177 = cljs.core.first(seq9176);
  var seq9176__$1 = cljs.core.next(seq9176);
  var G__9178 = cljs.core.first(seq9176__$1);
  var seq9176__$2 = cljs.core.next(seq9176__$1);
  return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(G__9177, G__9178, seq9176__$2);
};
cljs.core.concat.cljs$lang$maxFixedArity = 2;
cljs.core.list_STAR_ = function cljs$core$list_STAR_(var_args) {
  var args9191 = [];
  var len__7211__auto___9199 = arguments.length;
  var i__7212__auto___9200 = 0;
  while (true) {
    if (i__7212__auto___9200 < len__7211__auto___9199) {
      args9191.push(arguments[i__7212__auto___9200]);
      var G__9201 = i__7212__auto___9200 + 1;
      i__7212__auto___9200 = G__9201;
      continue;
    } else {
    }
    break;
  }
  var G__9198 = args9191.length;
  switch(G__9198) {
    case 1:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args9191.slice(4), 0);
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__7230__auto__);
  }
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1 = function(args) {
  return cljs.core.seq(args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2 = function(a, args) {
  return cljs.core.cons(a, args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3 = function(a, b, args) {
  return cljs.core.cons(a, cljs.core.cons(b, args));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, args) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic = function(a, b, c, d, more) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
};
cljs.core.list_STAR_.cljs$lang$applyTo = function(seq9192) {
  var G__9193 = cljs.core.first(seq9192);
  var seq9192__$1 = cljs.core.next(seq9192);
  var G__9194 = cljs.core.first(seq9192__$1);
  var seq9192__$2 = cljs.core.next(seq9192__$1);
  var G__9195 = cljs.core.first(seq9192__$2);
  var seq9192__$3 = cljs.core.next(seq9192__$2);
  var G__9196 = cljs.core.first(seq9192__$3);
  var seq9192__$4 = cljs.core.next(seq9192__$3);
  return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(G__9193, G__9194, G__9195, G__9196, seq9192__$4);
};
cljs.core.list_STAR_.cljs$lang$maxFixedArity = 4;
cljs.core.transient$ = function cljs$core$transient(coll) {
  return cljs.core._as_transient(coll);
};
cljs.core.persistent_BANG_ = function cljs$core$persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_(tcoll);
};
cljs.core.conj_BANG_ = function cljs$core$conj_BANG_(var_args) {
  var args9203 = [];
  var len__7211__auto___9209 = arguments.length;
  var i__7212__auto___9210 = 0;
  while (true) {
    if (i__7212__auto___9210 < len__7211__auto___9209) {
      args9203.push(arguments[i__7212__auto___9210]);
      var G__9211 = i__7212__auto___9210 + 1;
      i__7212__auto___9210 = G__9211;
      continue;
    } else {
    }
    break;
  }
  var G__9208 = args9203.length;
  switch(G__9208) {
    case 0:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args9203.slice(2), 0);
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._conj_BANG_(tcoll, val);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._conj_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__9213 = ntcoll;
      var G__9214 = cljs.core.first(vals);
      var G__9215 = cljs.core.next(vals);
      tcoll = G__9213;
      val = G__9214;
      vals = G__9215;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.conj_BANG_.cljs$lang$applyTo = function(seq9204) {
  var G__9205 = cljs.core.first(seq9204);
  var seq9204__$1 = cljs.core.next(seq9204);
  var G__9206 = cljs.core.first(seq9204__$1);
  var seq9204__$2 = cljs.core.next(seq9204__$1);
  return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__9205, G__9206, seq9204__$2);
};
cljs.core.conj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.assoc_BANG_ = function cljs$core$assoc_BANG_(var_args) {
  var args9216 = [];
  var len__7211__auto___9223 = arguments.length;
  var i__7212__auto___9224 = 0;
  while (true) {
    if (i__7212__auto___9224 < len__7211__auto___9223) {
      args9216.push(arguments[i__7212__auto___9224]);
      var G__9225 = i__7212__auto___9224 + 1;
      i__7212__auto___9224 = G__9225;
      continue;
    } else {
    }
    break;
  }
  var G__9222 = args9216.length;
  switch(G__9222) {
    case 3:
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args9216.slice(3), 0);
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__7230__auto__);
  }
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = function(tcoll, key, val) {
  return cljs.core._assoc_BANG_(tcoll, key, val);
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, val, kvs) {
  while (true) {
    var ntcoll = cljs.core._assoc_BANG_(tcoll, key, val);
    if (cljs.core.truth_(kvs)) {
      var G__9227 = ntcoll;
      var G__9228 = cljs.core.first(kvs);
      var G__9229 = cljs.core.second(kvs);
      var G__9230 = cljs.core.nnext(kvs);
      tcoll = G__9227;
      key = G__9228;
      val = G__9229;
      kvs = G__9230;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.assoc_BANG_.cljs$lang$applyTo = function(seq9217) {
  var G__9218 = cljs.core.first(seq9217);
  var seq9217__$1 = cljs.core.next(seq9217);
  var G__9219 = cljs.core.first(seq9217__$1);
  var seq9217__$2 = cljs.core.next(seq9217__$1);
  var G__9220 = cljs.core.first(seq9217__$2);
  var seq9217__$3 = cljs.core.next(seq9217__$2);
  return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__9218, G__9219, G__9220, seq9217__$3);
};
cljs.core.assoc_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc_BANG_ = function cljs$core$dissoc_BANG_(var_args) {
  var args9231 = [];
  var len__7211__auto___9237 = arguments.length;
  var i__7212__auto___9238 = 0;
  while (true) {
    if (i__7212__auto___9238 < len__7211__auto___9237) {
      args9231.push(arguments[i__7212__auto___9238]);
      var G__9239 = i__7212__auto___9238 + 1;
      i__7212__auto___9238 = G__9239;
      continue;
    } else {
    }
    break;
  }
  var G__9236 = args9231.length;
  switch(G__9236) {
    case 2:
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args9231.slice(2), 0);
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, key) {
  return cljs.core._dissoc_BANG_(tcoll, key);
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, ks) {
  while (true) {
    var ntcoll = cljs.core._dissoc_BANG_(tcoll, key);
    if (cljs.core.truth_(ks)) {
      var G__9241 = ntcoll;
      var G__9242 = cljs.core.first(ks);
      var G__9243 = cljs.core.next(ks);
      tcoll = G__9241;
      key = G__9242;
      ks = G__9243;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.dissoc_BANG_.cljs$lang$applyTo = function(seq9232) {
  var G__9233 = cljs.core.first(seq9232);
  var seq9232__$1 = cljs.core.next(seq9232);
  var G__9234 = cljs.core.first(seq9232__$1);
  var seq9232__$2 = cljs.core.next(seq9232__$1);
  return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__9233, G__9234, seq9232__$2);
};
cljs.core.dissoc_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.pop_BANG_ = function cljs$core$pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_(tcoll);
};
cljs.core.disj_BANG_ = function cljs$core$disj_BANG_(var_args) {
  var args9244 = [];
  var len__7211__auto___9250 = arguments.length;
  var i__7212__auto___9251 = 0;
  while (true) {
    if (i__7212__auto___9251 < len__7211__auto___9250) {
      args9244.push(arguments[i__7212__auto___9251]);
      var G__9252 = i__7212__auto___9251 + 1;
      i__7212__auto___9251 = G__9252;
      continue;
    } else {
    }
    break;
  }
  var G__9249 = args9244.length;
  switch(G__9249) {
    case 2:
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args9244.slice(2), 0);
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._disjoin_BANG_(tcoll, val);
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._disjoin_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__9254 = ntcoll;
      var G__9255 = cljs.core.first(vals);
      var G__9256 = cljs.core.next(vals);
      tcoll = G__9254;
      val = G__9255;
      vals = G__9256;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.disj_BANG_.cljs$lang$applyTo = function(seq9245) {
  var G__9246 = cljs.core.first(seq9245);
  var seq9245__$1 = cljs.core.next(seq9245);
  var G__9247 = cljs.core.first(seq9245__$1);
  var seq9245__$2 = cljs.core.next(seq9245__$1);
  return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__9246, G__9247, seq9245__$2);
};
cljs.core.disj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.apply_to = function cljs$core$apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq(args);
  if (argc === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var a7100 = cljs.core._first(args__$1);
    var args__$2 = cljs.core._rest(args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a7100);
      } else {
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(a7100) : f.call(null, a7100);
      }
    } else {
      var b7101 = cljs.core._first(args__$2);
      var args__$3 = cljs.core._rest(args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a7100, b7101);
        } else {
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(a7100, b7101) : f.call(null, a7100, b7101);
        }
      } else {
        var c7102 = cljs.core._first(args__$3);
        var args__$4 = cljs.core._rest(args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a7100, b7101, c7102);
          } else {
            return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(a7100, b7101, c7102) : f.call(null, a7100, b7101, c7102);
          }
        } else {
          var d7103 = cljs.core._first(args__$4);
          var args__$5 = cljs.core._rest(args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a7100, b7101, c7102, d7103);
            } else {
              return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(a7100, b7101, c7102, d7103) : f.call(null, a7100, b7101, c7102, d7103);
            }
          } else {
            var e7104 = cljs.core._first(args__$5);
            var args__$6 = cljs.core._rest(args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a7100, b7101, c7102, d7103, e7104);
              } else {
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(a7100, b7101, c7102, d7103, e7104) : f.call(null, a7100, b7101, c7102, d7103, e7104);
              }
            } else {
              var f7105 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a7100, b7101, c7102, d7103, e7104, f7105);
                } else {
                  return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(a7100, b7101, c7102, d7103, e7104, f7105) : f.call(null, a7100, b7101, c7102, d7103, e7104, f7105);
                }
              } else {
                var g7106 = cljs.core._first(args__$7);
                var args__$8 = cljs.core._rest(args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a7100, b7101, c7102, d7103, e7104, f7105, g7106);
                  } else {
                    return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(a7100, b7101, c7102, d7103, e7104, f7105, g7106) : f.call(null, a7100, b7101, c7102, d7103, e7104, f7105, g7106);
                  }
                } else {
                  var h7107 = cljs.core._first(args__$8);
                  var args__$9 = cljs.core._rest(args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107);
                    } else {
                      return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107) : f.call(null, a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107);
                    }
                  } else {
                    var i7108 = cljs.core._first(args__$9);
                    var args__$10 = cljs.core._rest(args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108);
                      } else {
                        return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108) : f.call(null, a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108);
                      }
                    } else {
                      var j7109 = cljs.core._first(args__$10);
                      var args__$11 = cljs.core._rest(args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109);
                        } else {
                          return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109) : f.call(null, a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109);
                        }
                      } else {
                        var k7110 = cljs.core._first(args__$11);
                        var args__$12 = cljs.core._rest(args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110);
                          } else {
                            return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110) : f.call(null, a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110);
                          }
                        } else {
                          var l7111 = cljs.core._first(args__$12);
                          var args__$13 = cljs.core._rest(args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110, l7111);
                            } else {
                              return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110, l7111) : f.call(null, a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110, l7111);
                            }
                          } else {
                            var m7112 = cljs.core._first(args__$13);
                            var args__$14 = cljs.core._rest(args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110, l7111, m7112);
                              } else {
                                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110, l7111, m7112) : f.call(null, a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110, l7111, m7112);
                              }
                            } else {
                              var n7113 = cljs.core._first(args__$14);
                              var args__$15 = cljs.core._rest(args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110, l7111, m7112, n7113);
                                } else {
                                  return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110, l7111, m7112, n7113) : f.call(null, a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110, l7111, m7112, n7113);
                                }
                              } else {
                                var o7114 = cljs.core._first(args__$15);
                                var args__$16 = cljs.core._rest(args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110, l7111, m7112, n7113, o7114);
                                  } else {
                                    return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110, l7111, m7112, n7113, o7114) : f.call(null, a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110, l7111, m7112, n7113, o7114);
                                  }
                                } else {
                                  var p7115 = cljs.core._first(args__$16);
                                  var args__$17 = cljs.core._rest(args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110, l7111, m7112, n7113, o7114, p7115);
                                    } else {
                                      return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110, l7111, m7112, n7113, o7114, p7115) : f.call(null, a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110, l7111, m7112, n7113, o7114, p7115);
                                    }
                                  } else {
                                    var q7116 = cljs.core._first(args__$17);
                                    var args__$18 = cljs.core._rest(args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110, l7111, m7112, n7113, o7114, p7115, q7116);
                                      } else {
                                        return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110, l7111, m7112, n7113, o7114, p7115, q7116) : f.call(null, a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110, l7111, m7112, n7113, o7114, p7115, q7116);
                                      }
                                    } else {
                                      var r7117 = cljs.core._first(args__$18);
                                      var args__$19 = cljs.core._rest(args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110, l7111, m7112, n7113, o7114, p7115, q7116, r7117);
                                        } else {
                                          return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110, l7111, m7112, n7113, o7114, p7115, q7116, r7117) : f.call(null, a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110, l7111, m7112, n7113, o7114, p7115, q7116, r7117);
                                        }
                                      } else {
                                        var s7118 = cljs.core._first(args__$19);
                                        var args__$20 = cljs.core._rest(args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110, l7111, m7112, n7113, o7114, p7115, q7116, r7117, s7118);
                                          } else {
                                            return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110, l7111, m7112, n7113, o7114, p7115, q7116, r7117, s7118) : f.call(null, a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110, l7111, m7112, n7113, o7114, p7115, q7116, r7117, s7118);
                                          }
                                        } else {
                                          var t7119 = cljs.core._first(args__$20);
                                          var args__$21 = cljs.core._rest(args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110, l7111, m7112, n7113, o7114, p7115, q7116, r7117, s7118, t7119);
                                            } else {
                                              return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110, l7111, m7112, n7113, o7114, p7115, q7116, r7117, s7118, t7119) : f.call(null, a7100, b7101, c7102, d7103, e7104, f7105, g7106, h7107, i7108, j7109, k7110, l7111, m7112, n7113, o7114, p7115, q7116, r7117, s7118, t7119);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function cljs$core$apply(var_args) {
  var args9257 = [];
  var len__7211__auto___9266 = arguments.length;
  var i__7212__auto___9267 = 0;
  while (true) {
    if (i__7212__auto___9267 < len__7211__auto___9266) {
      args9257.push(arguments[i__7212__auto___9267]);
      var G__9268 = i__7212__auto___9267 + 1;
      i__7212__auto___9267 = G__9268;
      continue;
    } else {
    }
    break;
  }
  var G__9265 = args9257.length;
  switch(G__9265) {
    case 2:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args9257.slice(5), 0);
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], argseq__7230__auto__);
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$2 = function(f, args) {
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(args, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, args);
    } else {
      return f.cljs$lang$applyTo(args);
    }
  } else {
    return f.apply(f, cljs.core.to_array(args));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$3 = function(f, x, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$5 = function(f, x, y, z, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic = function(f, a, b, c, d, args) {
  var arglist = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(args)))));
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$lang$applyTo = function(seq9258) {
  var G__9259 = cljs.core.first(seq9258);
  var seq9258__$1 = cljs.core.next(seq9258);
  var G__9260 = cljs.core.first(seq9258__$1);
  var seq9258__$2 = cljs.core.next(seq9258__$1);
  var G__9261 = cljs.core.first(seq9258__$2);
  var seq9258__$3 = cljs.core.next(seq9258__$2);
  var G__9262 = cljs.core.first(seq9258__$3);
  var seq9258__$4 = cljs.core.next(seq9258__$3);
  var G__9263 = cljs.core.first(seq9258__$4);
  var seq9258__$5 = cljs.core.next(seq9258__$4);
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(G__9259, G__9260, G__9261, G__9262, G__9263, seq9258__$5);
};
cljs.core.apply.cljs$lang$maxFixedArity = 5;
cljs.core.vary_meta = function cljs$core$vary_meta(var_args) {
  var args9270 = [];
  var len__7211__auto___9295 = arguments.length;
  var i__7212__auto___9296 = 0;
  while (true) {
    if (i__7212__auto___9296 < len__7211__auto___9295) {
      args9270.push(arguments[i__7212__auto___9296]);
      var G__9297 = i__7212__auto___9296 + 1;
      i__7212__auto___9296 = G__9297;
      continue;
    } else {
    }
    break;
  }
  var G__9279 = args9270.length;
  switch(G__9279) {
    case 2:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args9270.slice(6), 0);
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__7230__auto__);
  }
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2 = function(obj, f) {
  return cljs.core.with_meta(obj, function() {
    var G__9280 = cljs.core.meta(obj);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9280) : f.call(null, G__9280);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3 = function(obj, f, a) {
  return cljs.core.with_meta(obj, function() {
    var G__9281 = cljs.core.meta(obj);
    var G__9282 = a;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9281, G__9282) : f.call(null, G__9281, G__9282);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4 = function(obj, f, a, b) {
  return cljs.core.with_meta(obj, function() {
    var G__9283 = cljs.core.meta(obj);
    var G__9284 = a;
    var G__9285 = b;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9283, G__9284, G__9285) : f.call(null, G__9283, G__9284, G__9285);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5 = function(obj, f, a, b, c) {
  return cljs.core.with_meta(obj, function() {
    var G__9286 = cljs.core.meta(obj);
    var G__9287 = a;
    var G__9288 = b;
    var G__9289 = c;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__9286, G__9287, G__9288, G__9289) : f.call(null, G__9286, G__9287, G__9288, G__9289);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6 = function(obj, f, a, b, c, d) {
  return cljs.core.with_meta(obj, function() {
    var G__9290 = cljs.core.meta(obj);
    var G__9291 = a;
    var G__9292 = b;
    var G__9293 = c;
    var G__9294 = d;
    return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__9290, G__9291, G__9292, G__9293, G__9294) : f.call(null, G__9290, G__9291, G__9292, G__9293, G__9294);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic = function(obj, f, a, b, c, d, args) {
  return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.array_seq([d, args], 0)));
};
cljs.core.vary_meta.cljs$lang$applyTo = function(seq9271) {
  var G__9272 = cljs.core.first(seq9271);
  var seq9271__$1 = cljs.core.next(seq9271);
  var G__9273 = cljs.core.first(seq9271__$1);
  var seq9271__$2 = cljs.core.next(seq9271__$1);
  var G__9274 = cljs.core.first(seq9271__$2);
  var seq9271__$3 = cljs.core.next(seq9271__$2);
  var G__9275 = cljs.core.first(seq9271__$3);
  var seq9271__$4 = cljs.core.next(seq9271__$3);
  var G__9276 = cljs.core.first(seq9271__$4);
  var seq9271__$5 = cljs.core.next(seq9271__$4);
  var G__9277 = cljs.core.first(seq9271__$5);
  var seq9271__$6 = cljs.core.next(seq9271__$5);
  return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(G__9272, G__9273, G__9274, G__9275, G__9276, G__9277, seq9271__$6);
};
cljs.core.vary_meta.cljs$lang$maxFixedArity = 6;
cljs.core.not_EQ_ = function cljs$core$not_EQ_(var_args) {
  var args9299 = [];
  var len__7211__auto___9305 = arguments.length;
  var i__7212__auto___9306 = 0;
  while (true) {
    if (i__7212__auto___9306 < len__7211__auto___9305) {
      args9299.push(arguments[i__7212__auto___9306]);
      var G__9307 = i__7212__auto___9306 + 1;
      i__7212__auto___9306 = G__9307;
      continue;
    } else {
    }
    break;
  }
  var G__9304 = args9299.length;
  switch(G__9304) {
    case 1:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args9299.slice(2), 0);
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return false;
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
};
cljs.core.not_EQ_.cljs$lang$applyTo = function(seq9300) {
  var G__9301 = cljs.core.first(seq9300);
  var seq9300__$1 = cljs.core.next(seq9300);
  var G__9302 = cljs.core.first(seq9300__$1);
  var seq9300__$2 = cljs.core.next(seq9300__$1);
  return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(G__9301, G__9302, seq9300__$2);
};
cljs.core.not_EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.not_empty = function cljs$core$not_empty(coll) {
  if (cljs.core.seq(coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function cljs$core$nil_iter() {
  if (typeof cljs.core.t_cljs$core9312 !== "undefined") {
  } else {
    cljs.core.t_cljs$core9312 = function(nil_iter, meta9313) {
      this.nil_iter = nil_iter;
      this.meta9313 = meta9313;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.t_cljs$core9312.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_9314, meta9313__$1) {
      var self__ = this;
      var _9314__$1 = this;
      return new cljs.core.t_cljs$core9312(self__.nil_iter, meta9313__$1);
    };
    cljs.core.t_cljs$core9312.prototype.cljs$core$IMeta$_meta$arity$1 = function(_9314) {
      var self__ = this;
      var _9314__$1 = this;
      return self__.meta9313;
    };
    cljs.core.t_cljs$core9312.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t_cljs$core9312.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t_cljs$core9312.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t_cljs$core9312.getBasis = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "nil-iter", "nil-iter", 1101030523, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)), new cljs.core.Symbol(null, "meta9313", "meta9313", 1127723478, null)], 
      null);
    };
    cljs.core.t_cljs$core9312.cljs$lang$type = true;
    cljs.core.t_cljs$core9312.cljs$lang$ctorStr = "cljs.core/t_cljs$core9312";
    cljs.core.t_cljs$core9312.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
      return cljs.core._write(writer__6752__auto__, "cljs.core/t_cljs$core9312");
    };
    cljs.core.__GT_t_cljs$core9312 = function cljs$core$nil_iter_$___GT_t_cljs$core9312(nil_iter__$1, meta9313) {
      return new cljs.core.t_cljs$core9312(nil_iter__$1, meta9313);
    };
  }
  return new cljs.core.t_cljs$core9312(cljs$core$nil_iter, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function cljs$core$__GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function cljs$core$string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function cljs$core$__GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function cljs$core$array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq(self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next(self__._seq);
    } else {
    }
  }
  return !(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not(this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first(self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "_seq", "_seq", -449557847, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "_next", "_next", 101877036, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function cljs$core$__GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function cljs$core$seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function cljs$core$iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter();
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter(coll);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_iter(coll);
      } else {
        if (cljs.core.iterable_QMARK_(coll)) {
          return cljs.core._iterator(coll);
        } else {
          if (cljs.core.seqable_QMARK_(coll)) {
            return cljs.core.seq_iter(coll);
          } else {
            throw new Error([cljs.core.str("Cannot create iterator from "), cljs.core.str(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function cljs$core$lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__6141__auto__ = !(lt.stepper == null);
      if (and__6141__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__6141__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(function() {
        var G__9315 = lt;
        var G__9316 = self__.iter.next();
        return self__.xform.cljs$core$IFn$_invoke$arity$2 ? self__.xform.cljs$core$IFn$_invoke$arity$2(G__9315, G__9316) : self__.xform.call(null, G__9315, G__9316);
      }())) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(lt) : self__.xform.call(null, lt);
  }
};
cljs.core.Stepper.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "iter", "iter", -1346195486, null)], null);
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/Stepper");
};
cljs.core.__GT_Stepper = function cljs$core$__GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function cljs$core$stepper(xform, iter) {
  var stepfn = function() {
    var cljs$core$stepper_$_stepfn = null;
    var cljs$core$stepper_$_stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return result;
    };
    var cljs$core$stepper_$_stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepper_$_stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepper_$_stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepper_$_stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepper_$_stepfn__1;
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepper_$_stepfn__2;
    return cljs$core$stepper_$_stepfn;
  }();
  return new cljs.core.Stepper(xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(stepfn) : xform.call(null, stepfn), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq(self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first(iters__$1);
      if (cljs.core.not(iter.hasNext())) {
        return false;
      } else {
        var G__9317 = cljs.core.next(iters__$1);
        iters__$1 = G__9317;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__7056__auto___9318 = self__.iters.length;
  var i_9319 = 0;
  while (true) {
    if (i_9319 < n__7056__auto___9318) {
      self__.nexts[i_9319] = self__.iters[i_9319].next();
      var G__9320 = i_9319 + 1;
      i_9319 = G__9320;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__6141__auto__ = !(lt.stepper == null);
      if (and__6141__auto__) {
        return this$.hasNext();
      } else {
        return and__6141__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xform, cljs.core.cons(lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(lt) : self__.xform.call(null, lt);
  }
};
cljs.core.MultiStepper.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "iters", "iters", 719353031, null), new cljs.core.Symbol(null, "nexts", "nexts", -1683579407, null)], null);
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/MultiStepper");
};
cljs.core.__GT_MultiStepper = function cljs$core$__GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function cljs$core$multi_stepper(var_args) {
  var args9321 = [];
  var len__7211__auto___9324 = arguments.length;
  var i__7212__auto___9325 = 0;
  while (true) {
    if (i__7212__auto___9325 < len__7211__auto___9324) {
      args9321.push(arguments[i__7212__auto___9325]);
      var G__9326 = i__7212__auto___9325 + 1;
      i__7212__auto___9325 = G__9326;
      continue;
    } else {
    }
    break;
  }
  var G__9323 = args9321.length;
  switch(G__9323) {
    case 2:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9321.length)].join(""));;
  }
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2 = function(xform, iters) {
  return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length));
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3 = function(xform, iters, nexts) {
  var stepfn = function() {
    var cljs$core$stepfn = null;
    var cljs$core$stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return lt;
    };
    var cljs$core$stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepfn__1;
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepfn__2;
    return cljs$core$stepfn;
  }();
  return new cljs.core.MultiStepper(xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(stepfn) : xform.call(null, stepfn), iters, nexts);
};
cljs.core.multi_stepper.cljs$lang$maxFixedArity = 3;
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, cljs.core._seq(this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq(this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential(this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_(other) && cljs.core.seq(other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll(this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq(self__.rest);
  }
};
cljs.core.LazyTransformer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "stepper", "stepper", 1159163296, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), 
  cljs.core.with_meta(new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/LazyTransformer");
};
cljs.core.__GT_LazyTransformer = function cljs$core$__GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper(xform, cljs.core.iter(coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__9328_9332 = cljs.core.seq(colls);
  var chunk__9329_9333 = null;
  var count__9330_9334 = 0;
  var i__9331_9335 = 0;
  while (true) {
    if (i__9331_9335 < count__9330_9334) {
      var coll_9336 = chunk__9329_9333.cljs$core$IIndexed$_nth$arity$2(null, i__9331_9335);
      iters.push(cljs.core.iter(coll_9336));
      var G__9337 = seq__9328_9332;
      var G__9338 = chunk__9329_9333;
      var G__9339 = count__9330_9334;
      var G__9340 = i__9331_9335 + 1;
      seq__9328_9332 = G__9337;
      chunk__9329_9333 = G__9338;
      count__9330_9334 = G__9339;
      i__9331_9335 = G__9340;
      continue;
    } else {
      var temp__4657__auto___9341 = cljs.core.seq(seq__9328_9332);
      if (temp__4657__auto___9341) {
        var seq__9328_9342__$1 = temp__4657__auto___9341;
        if (cljs.core.chunked_seq_QMARK_(seq__9328_9342__$1)) {
          var c__6956__auto___9343 = cljs.core.chunk_first(seq__9328_9342__$1);
          var G__9344 = cljs.core.chunk_rest(seq__9328_9342__$1);
          var G__9345 = c__6956__auto___9343;
          var G__9346 = cljs.core.count(c__6956__auto___9343);
          var G__9347 = 0;
          seq__9328_9332 = G__9344;
          chunk__9329_9333 = G__9345;
          count__9330_9334 = G__9346;
          i__9331_9335 = G__9347;
          continue;
        } else {
          var coll_9348 = cljs.core.first(seq__9328_9342__$1);
          iters.push(cljs.core.iter(coll_9348));
          var G__9349 = cljs.core.next(seq__9328_9342__$1);
          var G__9350 = null;
          var G__9351 = 0;
          var G__9352 = 0;
          seq__9328_9332 = G__9349;
          chunk__9329_9333 = G__9350;
          count__9330_9334 = G__9351;
          i__9331_9335 = G__9352;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function cljs$core$sequence(var_args) {
  var args9353 = [];
  var len__7211__auto___9359 = arguments.length;
  var i__7212__auto___9360 = 0;
  while (true) {
    if (i__7212__auto___9360 < len__7211__auto___9359) {
      args9353.push(arguments[i__7212__auto___9360]);
      var G__9361 = i__7212__auto___9360 + 1;
      i__7212__auto___9360 = G__9361;
      continue;
    } else {
    }
    break;
  }
  var G__9358 = args9353.length;
  switch(G__9358) {
    case 1:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args9353.slice(2), 0);
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  if (cljs.core.seq_QMARK_(coll)) {
    return coll;
  } else {
    var or__6153__auto__ = cljs.core.seq(coll);
    if (or__6153__auto__) {
      return or__6153__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$2 = function(xform, coll) {
  return cljs.core.LazyTransformer.create(xform, coll);
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic = function(xform, coll, colls) {
  return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array(cljs.core.cons(coll, colls)));
};
cljs.core.sequence.cljs$lang$applyTo = function(seq9354) {
  var G__9355 = cljs.core.first(seq9354);
  var seq9354__$1 = cljs.core.next(seq9354);
  var G__9356 = cljs.core.first(seq9354__$1);
  var seq9354__$2 = cljs.core.next(seq9354__$1);
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(G__9355, G__9356, seq9354__$2);
};
cljs.core.sequence.cljs$lang$maxFixedArity = 2;
cljs.core.every_QMARK_ = function cljs$core$every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var G__9364 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9364) : pred.call(null, G__9364);
      }())) {
        var G__9365 = pred;
        var G__9366 = cljs.core.next(coll);
        pred = G__9365;
        coll = G__9366;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function cljs$core$not_every_QMARK_(pred, coll) {
  return !cljs.core.every_QMARK_(pred, coll);
};
cljs.core.some = function cljs$core$some(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var or__6153__auto__ = function() {
        var G__9370 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9370) : pred.call(null, G__9370);
      }();
      if (cljs.core.truth_(or__6153__auto__)) {
        return or__6153__auto__;
      } else {
        var G__9371 = pred;
        var G__9372 = cljs.core.next(coll);
        pred = G__9371;
        coll = G__9372;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function cljs$core$not_any_QMARK_(pred, coll) {
  return cljs.core.not(cljs.core.some(pred, coll));
};
cljs.core.even_QMARK_ = function cljs$core$even_QMARK_(n) {
  if (cljs.core.integer_QMARK_(n)) {
    return (n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function cljs$core$odd_QMARK_(n) {
  return !cljs.core.even_QMARK_(n);
};
cljs.core.complement = function cljs$core$complement(f) {
  return function() {
    var G__9373 = null;
    var G__9373__0 = function() {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));
    };
    var G__9373__1 = function(x) {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x));
    };
    var G__9373__2 = function(x, y) {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y));
    };
    var G__9373__3 = function() {
      var G__9374__delegate = function(x, y, zs) {
        return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
      };
      var G__9374 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          var G__9375__i = 0, G__9375__a = new Array(arguments.length - 2);
          while (G__9375__i < G__9375__a.length) {
            G__9375__a[G__9375__i] = arguments[G__9375__i + 2];
            ++G__9375__i;
          }
          zs = new cljs.core.IndexedSeq(G__9375__a, 0);
        }
        return G__9374__delegate.call(this, x, y, zs);
      };
      G__9374.cljs$lang$maxFixedArity = 2;
      G__9374.cljs$lang$applyTo = function(arglist__9376) {
        var x = cljs.core.first(arglist__9376);
        arglist__9376 = cljs.core.next(arglist__9376);
        var y = cljs.core.first(arglist__9376);
        var zs = cljs.core.rest(arglist__9376);
        return G__9374__delegate(x, y, zs);
      };
      G__9374.cljs$core$IFn$_invoke$arity$variadic = G__9374__delegate;
      return G__9374;
    }();
    G__9373 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__9373__0.call(this);
        case 1:
          return G__9373__1.call(this, x);
        case 2:
          return G__9373__2.call(this, x, y);
        default:
          var G__9377 = null;
          if (arguments.length > 2) {
            var G__9378__i = 0, G__9378__a = new Array(arguments.length - 2);
            while (G__9378__i < G__9378__a.length) {
              G__9378__a[G__9378__i] = arguments[G__9378__i + 2];
              ++G__9378__i;
            }
            G__9377 = new cljs.core.IndexedSeq(G__9378__a, 0);
          }
          return G__9373__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__9377);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9373.cljs$lang$maxFixedArity = 2;
    G__9373.cljs$lang$applyTo = G__9373__3.cljs$lang$applyTo;
    G__9373.cljs$core$IFn$_invoke$arity$0 = G__9373__0;
    G__9373.cljs$core$IFn$_invoke$arity$1 = G__9373__1;
    G__9373.cljs$core$IFn$_invoke$arity$2 = G__9373__2;
    G__9373.cljs$core$IFn$_invoke$arity$variadic = G__9373__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__9373;
  }();
};
cljs.core.constantly = function cljs$core$constantly(x) {
  return function() {
    var G__9379__delegate = function(args) {
      return x;
    };
    var G__9379 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__9380__i = 0, G__9380__a = new Array(arguments.length - 0);
        while (G__9380__i < G__9380__a.length) {
          G__9380__a[G__9380__i] = arguments[G__9380__i + 0];
          ++G__9380__i;
        }
        args = new cljs.core.IndexedSeq(G__9380__a, 0);
      }
      return G__9379__delegate.call(this, args);
    };
    G__9379.cljs$lang$maxFixedArity = 0;
    G__9379.cljs$lang$applyTo = function(arglist__9381) {
      var args = cljs.core.seq(arglist__9381);
      return G__9379__delegate(args);
    };
    G__9379.cljs$core$IFn$_invoke$arity$variadic = G__9379__delegate;
    return G__9379;
  }();
};
cljs.core.comp = function cljs$core$comp(var_args) {
  var args9382 = [];
  var len__7211__auto___9409 = arguments.length;
  var i__7212__auto___9410 = 0;
  while (true) {
    if (i__7212__auto___9410 < len__7211__auto___9409) {
      args9382.push(arguments[i__7212__auto___9410]);
      var G__9411 = i__7212__auto___9410 + 1;
      i__7212__auto___9410 = G__9411;
      continue;
    } else {
    }
    break;
  }
  var G__9388 = args9382.length;
  switch(G__9388) {
    case 0:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args9382.slice(3), 0);
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__7230__auto__);
  }
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.identity;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__9413 = null;
    var G__9413__0 = function() {
      var G__9389 = g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9389) : f.call(null, G__9389);
    };
    var G__9413__1 = function(x) {
      var G__9390 = g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9390) : f.call(null, G__9390);
    };
    var G__9413__2 = function(x, y) {
      var G__9391 = g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9391) : f.call(null, G__9391);
    };
    var G__9413__3 = function(x, y, z) {
      var G__9392 = g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9392) : f.call(null, G__9392);
    };
    var G__9413__4 = function() {
      var G__9414__delegate = function(x, y, z, args) {
        var G__9393 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9393) : f.call(null, G__9393);
      };
      var G__9414 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9415__i = 0, G__9415__a = new Array(arguments.length - 3);
          while (G__9415__i < G__9415__a.length) {
            G__9415__a[G__9415__i] = arguments[G__9415__i + 3];
            ++G__9415__i;
          }
          args = new cljs.core.IndexedSeq(G__9415__a, 0);
        }
        return G__9414__delegate.call(this, x, y, z, args);
      };
      G__9414.cljs$lang$maxFixedArity = 3;
      G__9414.cljs$lang$applyTo = function(arglist__9416) {
        var x = cljs.core.first(arglist__9416);
        arglist__9416 = cljs.core.next(arglist__9416);
        var y = cljs.core.first(arglist__9416);
        arglist__9416 = cljs.core.next(arglist__9416);
        var z = cljs.core.first(arglist__9416);
        var args = cljs.core.rest(arglist__9416);
        return G__9414__delegate(x, y, z, args);
      };
      G__9414.cljs$core$IFn$_invoke$arity$variadic = G__9414__delegate;
      return G__9414;
    }();
    G__9413 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__9413__0.call(this);
        case 1:
          return G__9413__1.call(this, x);
        case 2:
          return G__9413__2.call(this, x, y);
        case 3:
          return G__9413__3.call(this, x, y, z);
        default:
          var G__9417 = null;
          if (arguments.length > 3) {
            var G__9418__i = 0, G__9418__a = new Array(arguments.length - 3);
            while (G__9418__i < G__9418__a.length) {
              G__9418__a[G__9418__i] = arguments[G__9418__i + 3];
              ++G__9418__i;
            }
            G__9417 = new cljs.core.IndexedSeq(G__9418__a, 0);
          }
          return G__9413__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9417);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9413.cljs$lang$maxFixedArity = 3;
    G__9413.cljs$lang$applyTo = G__9413__4.cljs$lang$applyTo;
    G__9413.cljs$core$IFn$_invoke$arity$0 = G__9413__0;
    G__9413.cljs$core$IFn$_invoke$arity$1 = G__9413__1;
    G__9413.cljs$core$IFn$_invoke$arity$2 = G__9413__2;
    G__9413.cljs$core$IFn$_invoke$arity$3 = G__9413__3;
    G__9413.cljs$core$IFn$_invoke$arity$variadic = G__9413__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9413;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__9419 = null;
    var G__9419__0 = function() {
      var G__9395 = function() {
        var G__9396 = h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__9396) : g.call(null, G__9396);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9395) : f.call(null, G__9395);
    };
    var G__9419__1 = function(x) {
      var G__9398 = function() {
        var G__9399 = h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(x) : h.call(null, x);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__9399) : g.call(null, G__9399);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9398) : f.call(null, G__9398);
    };
    var G__9419__2 = function(x, y) {
      var G__9401 = function() {
        var G__9402 = h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(x, y) : h.call(null, x, y);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__9402) : g.call(null, G__9402);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9401) : f.call(null, G__9401);
    };
    var G__9419__3 = function(x, y, z) {
      var G__9404 = function() {
        var G__9405 = h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(x, y, z) : h.call(null, x, y, z);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__9405) : g.call(null, G__9405);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9404) : f.call(null, G__9404);
    };
    var G__9419__4 = function() {
      var G__9420__delegate = function(x, y, z, args) {
        var G__9407 = function() {
          var G__9408 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__9408) : g.call(null, G__9408);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9407) : f.call(null, G__9407);
      };
      var G__9420 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9421__i = 0, G__9421__a = new Array(arguments.length - 3);
          while (G__9421__i < G__9421__a.length) {
            G__9421__a[G__9421__i] = arguments[G__9421__i + 3];
            ++G__9421__i;
          }
          args = new cljs.core.IndexedSeq(G__9421__a, 0);
        }
        return G__9420__delegate.call(this, x, y, z, args);
      };
      G__9420.cljs$lang$maxFixedArity = 3;
      G__9420.cljs$lang$applyTo = function(arglist__9422) {
        var x = cljs.core.first(arglist__9422);
        arglist__9422 = cljs.core.next(arglist__9422);
        var y = cljs.core.first(arglist__9422);
        arglist__9422 = cljs.core.next(arglist__9422);
        var z = cljs.core.first(arglist__9422);
        var args = cljs.core.rest(arglist__9422);
        return G__9420__delegate(x, y, z, args);
      };
      G__9420.cljs$core$IFn$_invoke$arity$variadic = G__9420__delegate;
      return G__9420;
    }();
    G__9419 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__9419__0.call(this);
        case 1:
          return G__9419__1.call(this, x);
        case 2:
          return G__9419__2.call(this, x, y);
        case 3:
          return G__9419__3.call(this, x, y, z);
        default:
          var G__9423 = null;
          if (arguments.length > 3) {
            var G__9424__i = 0, G__9424__a = new Array(arguments.length - 3);
            while (G__9424__i < G__9424__a.length) {
              G__9424__a[G__9424__i] = arguments[G__9424__i + 3];
              ++G__9424__i;
            }
            G__9423 = new cljs.core.IndexedSeq(G__9424__a, 0);
          }
          return G__9419__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9423);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9419.cljs$lang$maxFixedArity = 3;
    G__9419.cljs$lang$applyTo = G__9419__4.cljs$lang$applyTo;
    G__9419.cljs$core$IFn$_invoke$arity$0 = G__9419__0;
    G__9419.cljs$core$IFn$_invoke$arity$1 = G__9419__1;
    G__9419.cljs$core$IFn$_invoke$arity$2 = G__9419__2;
    G__9419.cljs$core$IFn$_invoke$arity$3 = G__9419__3;
    G__9419.cljs$core$IFn$_invoke$arity$variadic = G__9419__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9419;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic = function(f1, f2, f3, fs) {
  var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs));
  return function(fs__$1) {
    return function() {
      var G__9425__delegate = function(args) {
        var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
        var fs__$2 = cljs.core.next(fs__$1);
        while (true) {
          if (fs__$2) {
            var G__9426 = cljs.core.first(fs__$2).call(null, ret);
            var G__9427 = cljs.core.next(fs__$2);
            ret = G__9426;
            fs__$2 = G__9427;
            continue;
          } else {
            return ret;
          }
          break;
        }
      };
      var G__9425 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__9428__i = 0, G__9428__a = new Array(arguments.length - 0);
          while (G__9428__i < G__9428__a.length) {
            G__9428__a[G__9428__i] = arguments[G__9428__i + 0];
            ++G__9428__i;
          }
          args = new cljs.core.IndexedSeq(G__9428__a, 0);
        }
        return G__9425__delegate.call(this, args);
      };
      G__9425.cljs$lang$maxFixedArity = 0;
      G__9425.cljs$lang$applyTo = function(arglist__9429) {
        var args = cljs.core.seq(arglist__9429);
        return G__9425__delegate(args);
      };
      G__9425.cljs$core$IFn$_invoke$arity$variadic = G__9425__delegate;
      return G__9425;
    }();
  }(fs__$1);
};
cljs.core.comp.cljs$lang$applyTo = function(seq9383) {
  var G__9384 = cljs.core.first(seq9383);
  var seq9383__$1 = cljs.core.next(seq9383);
  var G__9385 = cljs.core.first(seq9383__$1);
  var seq9383__$2 = cljs.core.next(seq9383__$1);
  var G__9386 = cljs.core.first(seq9383__$2);
  var seq9383__$3 = cljs.core.next(seq9383__$2);
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(G__9384, G__9385, G__9386, seq9383__$3);
};
cljs.core.comp.cljs$lang$maxFixedArity = 3;
cljs.core.partial = function cljs$core$partial(var_args) {
  var args9430 = [];
  var len__7211__auto___9438 = arguments.length;
  var i__7212__auto___9439 = 0;
  while (true) {
    if (i__7212__auto___9439 < len__7211__auto___9438) {
      args9430.push(arguments[i__7212__auto___9439]);
      var G__9440 = i__7212__auto___9439 + 1;
      i__7212__auto___9439 = G__9440;
      continue;
    } else {
    }
    break;
  }
  var G__9437 = args9430.length;
  switch(G__9437) {
    case 1:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args9430.slice(4), 0);
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__7230__auto__);
  }
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$2 = function(f, arg1) {
  return function() {
    var G__9442 = null;
    var G__9442__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(arg1) : f.call(null, arg1);
    };
    var G__9442__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(arg1, x) : f.call(null, arg1, x);
    };
    var G__9442__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, x, y) : f.call(null, arg1, x, y);
    };
    var G__9442__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, x, y, z) : f.call(null, arg1, x, y, z);
    };
    var G__9442__4 = function() {
      var G__9443__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.array_seq([args], 0));
      };
      var G__9443 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9444__i = 0, G__9444__a = new Array(arguments.length - 3);
          while (G__9444__i < G__9444__a.length) {
            G__9444__a[G__9444__i] = arguments[G__9444__i + 3];
            ++G__9444__i;
          }
          args = new cljs.core.IndexedSeq(G__9444__a, 0);
        }
        return G__9443__delegate.call(this, x, y, z, args);
      };
      G__9443.cljs$lang$maxFixedArity = 3;
      G__9443.cljs$lang$applyTo = function(arglist__9445) {
        var x = cljs.core.first(arglist__9445);
        arglist__9445 = cljs.core.next(arglist__9445);
        var y = cljs.core.first(arglist__9445);
        arglist__9445 = cljs.core.next(arglist__9445);
        var z = cljs.core.first(arglist__9445);
        var args = cljs.core.rest(arglist__9445);
        return G__9443__delegate(x, y, z, args);
      };
      G__9443.cljs$core$IFn$_invoke$arity$variadic = G__9443__delegate;
      return G__9443;
    }();
    G__9442 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__9442__0.call(this);
        case 1:
          return G__9442__1.call(this, x);
        case 2:
          return G__9442__2.call(this, x, y);
        case 3:
          return G__9442__3.call(this, x, y, z);
        default:
          var G__9446 = null;
          if (arguments.length > 3) {
            var G__9447__i = 0, G__9447__a = new Array(arguments.length - 3);
            while (G__9447__i < G__9447__a.length) {
              G__9447__a[G__9447__i] = arguments[G__9447__i + 3];
              ++G__9447__i;
            }
            G__9446 = new cljs.core.IndexedSeq(G__9447__a, 0);
          }
          return G__9442__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9446);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9442.cljs$lang$maxFixedArity = 3;
    G__9442.cljs$lang$applyTo = G__9442__4.cljs$lang$applyTo;
    G__9442.cljs$core$IFn$_invoke$arity$0 = G__9442__0;
    G__9442.cljs$core$IFn$_invoke$arity$1 = G__9442__1;
    G__9442.cljs$core$IFn$_invoke$arity$2 = G__9442__2;
    G__9442.cljs$core$IFn$_invoke$arity$3 = G__9442__3;
    G__9442.cljs$core$IFn$_invoke$arity$variadic = G__9442__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9442;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$3 = function(f, arg1, arg2) {
  return function() {
    var G__9448 = null;
    var G__9448__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(arg1, arg2) : f.call(null, arg1, arg2);
    };
    var G__9448__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, arg2, x) : f.call(null, arg1, arg2, x);
    };
    var G__9448__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, arg2, x, y) : f.call(null, arg1, arg2, x, y);
    };
    var G__9448__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(arg1, arg2, x, y, z) : f.call(null, arg1, arg2, x, y, z);
    };
    var G__9448__4 = function() {
      var G__9449__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.array_seq([z, args], 0));
      };
      var G__9449 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9450__i = 0, G__9450__a = new Array(arguments.length - 3);
          while (G__9450__i < G__9450__a.length) {
            G__9450__a[G__9450__i] = arguments[G__9450__i + 3];
            ++G__9450__i;
          }
          args = new cljs.core.IndexedSeq(G__9450__a, 0);
        }
        return G__9449__delegate.call(this, x, y, z, args);
      };
      G__9449.cljs$lang$maxFixedArity = 3;
      G__9449.cljs$lang$applyTo = function(arglist__9451) {
        var x = cljs.core.first(arglist__9451);
        arglist__9451 = cljs.core.next(arglist__9451);
        var y = cljs.core.first(arglist__9451);
        arglist__9451 = cljs.core.next(arglist__9451);
        var z = cljs.core.first(arglist__9451);
        var args = cljs.core.rest(arglist__9451);
        return G__9449__delegate(x, y, z, args);
      };
      G__9449.cljs$core$IFn$_invoke$arity$variadic = G__9449__delegate;
      return G__9449;
    }();
    G__9448 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__9448__0.call(this);
        case 1:
          return G__9448__1.call(this, x);
        case 2:
          return G__9448__2.call(this, x, y);
        case 3:
          return G__9448__3.call(this, x, y, z);
        default:
          var G__9452 = null;
          if (arguments.length > 3) {
            var G__9453__i = 0, G__9453__a = new Array(arguments.length - 3);
            while (G__9453__i < G__9453__a.length) {
              G__9453__a[G__9453__i] = arguments[G__9453__i + 3];
              ++G__9453__i;
            }
            G__9452 = new cljs.core.IndexedSeq(G__9453__a, 0);
          }
          return G__9448__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9452);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9448.cljs$lang$maxFixedArity = 3;
    G__9448.cljs$lang$applyTo = G__9448__4.cljs$lang$applyTo;
    G__9448.cljs$core$IFn$_invoke$arity$0 = G__9448__0;
    G__9448.cljs$core$IFn$_invoke$arity$1 = G__9448__1;
    G__9448.cljs$core$IFn$_invoke$arity$2 = G__9448__2;
    G__9448.cljs$core$IFn$_invoke$arity$3 = G__9448__3;
    G__9448.cljs$core$IFn$_invoke$arity$variadic = G__9448__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9448;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$4 = function(f, arg1, arg2, arg3) {
  return function() {
    var G__9454 = null;
    var G__9454__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, arg2, arg3) : f.call(null, arg1, arg2, arg3);
    };
    var G__9454__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, arg2, arg3, x) : f.call(null, arg1, arg2, arg3, x);
    };
    var G__9454__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(arg1, arg2, arg3, x, y) : f.call(null, arg1, arg2, arg3, x, y);
    };
    var G__9454__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(arg1, arg2, arg3, x, y, z) : f.call(null, arg1, arg2, arg3, x, y, z);
    };
    var G__9454__4 = function() {
      var G__9455__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.array_seq([y, z, args], 0));
      };
      var G__9455 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9456__i = 0, G__9456__a = new Array(arguments.length - 3);
          while (G__9456__i < G__9456__a.length) {
            G__9456__a[G__9456__i] = arguments[G__9456__i + 3];
            ++G__9456__i;
          }
          args = new cljs.core.IndexedSeq(G__9456__a, 0);
        }
        return G__9455__delegate.call(this, x, y, z, args);
      };
      G__9455.cljs$lang$maxFixedArity = 3;
      G__9455.cljs$lang$applyTo = function(arglist__9457) {
        var x = cljs.core.first(arglist__9457);
        arglist__9457 = cljs.core.next(arglist__9457);
        var y = cljs.core.first(arglist__9457);
        arglist__9457 = cljs.core.next(arglist__9457);
        var z = cljs.core.first(arglist__9457);
        var args = cljs.core.rest(arglist__9457);
        return G__9455__delegate(x, y, z, args);
      };
      G__9455.cljs$core$IFn$_invoke$arity$variadic = G__9455__delegate;
      return G__9455;
    }();
    G__9454 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__9454__0.call(this);
        case 1:
          return G__9454__1.call(this, x);
        case 2:
          return G__9454__2.call(this, x, y);
        case 3:
          return G__9454__3.call(this, x, y, z);
        default:
          var G__9458 = null;
          if (arguments.length > 3) {
            var G__9459__i = 0, G__9459__a = new Array(arguments.length - 3);
            while (G__9459__i < G__9459__a.length) {
              G__9459__a[G__9459__i] = arguments[G__9459__i + 3];
              ++G__9459__i;
            }
            G__9458 = new cljs.core.IndexedSeq(G__9459__a, 0);
          }
          return G__9454__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9458);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9454.cljs$lang$maxFixedArity = 3;
    G__9454.cljs$lang$applyTo = G__9454__4.cljs$lang$applyTo;
    G__9454.cljs$core$IFn$_invoke$arity$0 = G__9454__0;
    G__9454.cljs$core$IFn$_invoke$arity$1 = G__9454__1;
    G__9454.cljs$core$IFn$_invoke$arity$2 = G__9454__2;
    G__9454.cljs$core$IFn$_invoke$arity$3 = G__9454__3;
    G__9454.cljs$core$IFn$_invoke$arity$variadic = G__9454__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9454;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic = function(f, arg1, arg2, arg3, more) {
  return function() {
    var G__9460__delegate = function(args) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
    };
    var G__9460 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__9461__i = 0, G__9461__a = new Array(arguments.length - 0);
        while (G__9461__i < G__9461__a.length) {
          G__9461__a[G__9461__i] = arguments[G__9461__i + 0];
          ++G__9461__i;
        }
        args = new cljs.core.IndexedSeq(G__9461__a, 0);
      }
      return G__9460__delegate.call(this, args);
    };
    G__9460.cljs$lang$maxFixedArity = 0;
    G__9460.cljs$lang$applyTo = function(arglist__9462) {
      var args = cljs.core.seq(arglist__9462);
      return G__9460__delegate(args);
    };
    G__9460.cljs$core$IFn$_invoke$arity$variadic = G__9460__delegate;
    return G__9460;
  }();
};
cljs.core.partial.cljs$lang$applyTo = function(seq9431) {
  var G__9432 = cljs.core.first(seq9431);
  var seq9431__$1 = cljs.core.next(seq9431);
  var G__9433 = cljs.core.first(seq9431__$1);
  var seq9431__$2 = cljs.core.next(seq9431__$1);
  var G__9434 = cljs.core.first(seq9431__$2);
  var seq9431__$3 = cljs.core.next(seq9431__$2);
  var G__9435 = cljs.core.first(seq9431__$3);
  var seq9431__$4 = cljs.core.next(seq9431__$3);
  return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(G__9432, G__9433, G__9434, G__9435, seq9431__$4);
};
cljs.core.partial.cljs$lang$maxFixedArity = 4;
cljs.core.fnil = function cljs$core$fnil(var_args) {
  var args9463 = [];
  var len__7211__auto___9482 = arguments.length;
  var i__7212__auto___9483 = 0;
  while (true) {
    if (i__7212__auto___9483 < len__7211__auto___9482) {
      args9463.push(arguments[i__7212__auto___9483]);
      var G__9484 = i__7212__auto___9483 + 1;
      i__7212__auto___9483 = G__9484;
      continue;
    } else {
    }
    break;
  }
  var G__9465 = args9463.length;
  switch(G__9465) {
    case 2:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9463.length)].join(""));;
  }
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$2 = function(f, x) {
  return function() {
    var G__9486 = null;
    var G__9486__1 = function(a) {
      var G__9466 = a == null ? x : a;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9466) : f.call(null, G__9466);
    };
    var G__9486__2 = function(a, b) {
      var G__9467 = a == null ? x : a;
      var G__9468 = b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9467, G__9468) : f.call(null, G__9467, G__9468);
    };
    var G__9486__3 = function(a, b, c) {
      var G__9469 = a == null ? x : a;
      var G__9470 = b;
      var G__9471 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9469, G__9470, G__9471) : f.call(null, G__9469, G__9470, G__9471);
    };
    var G__9486__4 = function() {
      var G__9487__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b, c, ds);
      };
      var G__9487 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__9488__i = 0, G__9488__a = new Array(arguments.length - 3);
          while (G__9488__i < G__9488__a.length) {
            G__9488__a[G__9488__i] = arguments[G__9488__i + 3];
            ++G__9488__i;
          }
          ds = new cljs.core.IndexedSeq(G__9488__a, 0);
        }
        return G__9487__delegate.call(this, a, b, c, ds);
      };
      G__9487.cljs$lang$maxFixedArity = 3;
      G__9487.cljs$lang$applyTo = function(arglist__9489) {
        var a = cljs.core.first(arglist__9489);
        arglist__9489 = cljs.core.next(arglist__9489);
        var b = cljs.core.first(arglist__9489);
        arglist__9489 = cljs.core.next(arglist__9489);
        var c = cljs.core.first(arglist__9489);
        var ds = cljs.core.rest(arglist__9489);
        return G__9487__delegate(a, b, c, ds);
      };
      G__9487.cljs$core$IFn$_invoke$arity$variadic = G__9487__delegate;
      return G__9487;
    }();
    G__9486 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 1:
          return G__9486__1.call(this, a);
        case 2:
          return G__9486__2.call(this, a, b);
        case 3:
          return G__9486__3.call(this, a, b, c);
        default:
          var G__9490 = null;
          if (arguments.length > 3) {
            var G__9491__i = 0, G__9491__a = new Array(arguments.length - 3);
            while (G__9491__i < G__9491__a.length) {
              G__9491__a[G__9491__i] = arguments[G__9491__i + 3];
              ++G__9491__i;
            }
            G__9490 = new cljs.core.IndexedSeq(G__9491__a, 0);
          }
          return G__9486__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__9490);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9486.cljs$lang$maxFixedArity = 3;
    G__9486.cljs$lang$applyTo = G__9486__4.cljs$lang$applyTo;
    G__9486.cljs$core$IFn$_invoke$arity$1 = G__9486__1;
    G__9486.cljs$core$IFn$_invoke$arity$2 = G__9486__2;
    G__9486.cljs$core$IFn$_invoke$arity$3 = G__9486__3;
    G__9486.cljs$core$IFn$_invoke$arity$variadic = G__9486__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9486;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$3 = function(f, x, y) {
  return function() {
    var G__9492 = null;
    var G__9492__2 = function(a, b) {
      var G__9472 = a == null ? x : a;
      var G__9473 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9472, G__9473) : f.call(null, G__9472, G__9473);
    };
    var G__9492__3 = function(a, b, c) {
      var G__9474 = a == null ? x : a;
      var G__9475 = b == null ? y : b;
      var G__9476 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9474, G__9475, G__9476) : f.call(null, G__9474, G__9475, G__9476);
    };
    var G__9492__4 = function() {
      var G__9493__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c, ds);
      };
      var G__9493 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__9494__i = 0, G__9494__a = new Array(arguments.length - 3);
          while (G__9494__i < G__9494__a.length) {
            G__9494__a[G__9494__i] = arguments[G__9494__i + 3];
            ++G__9494__i;
          }
          ds = new cljs.core.IndexedSeq(G__9494__a, 0);
        }
        return G__9493__delegate.call(this, a, b, c, ds);
      };
      G__9493.cljs$lang$maxFixedArity = 3;
      G__9493.cljs$lang$applyTo = function(arglist__9495) {
        var a = cljs.core.first(arglist__9495);
        arglist__9495 = cljs.core.next(arglist__9495);
        var b = cljs.core.first(arglist__9495);
        arglist__9495 = cljs.core.next(arglist__9495);
        var c = cljs.core.first(arglist__9495);
        var ds = cljs.core.rest(arglist__9495);
        return G__9493__delegate(a, b, c, ds);
      };
      G__9493.cljs$core$IFn$_invoke$arity$variadic = G__9493__delegate;
      return G__9493;
    }();
    G__9492 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__9492__2.call(this, a, b);
        case 3:
          return G__9492__3.call(this, a, b, c);
        default:
          var G__9496 = null;
          if (arguments.length > 3) {
            var G__9497__i = 0, G__9497__a = new Array(arguments.length - 3);
            while (G__9497__i < G__9497__a.length) {
              G__9497__a[G__9497__i] = arguments[G__9497__i + 3];
              ++G__9497__i;
            }
            G__9496 = new cljs.core.IndexedSeq(G__9497__a, 0);
          }
          return G__9492__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__9496);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9492.cljs$lang$maxFixedArity = 3;
    G__9492.cljs$lang$applyTo = G__9492__4.cljs$lang$applyTo;
    G__9492.cljs$core$IFn$_invoke$arity$2 = G__9492__2;
    G__9492.cljs$core$IFn$_invoke$arity$3 = G__9492__3;
    G__9492.cljs$core$IFn$_invoke$arity$variadic = G__9492__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9492;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, z) {
  return function() {
    var G__9498 = null;
    var G__9498__2 = function(a, b) {
      var G__9477 = a == null ? x : a;
      var G__9478 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9477, G__9478) : f.call(null, G__9477, G__9478);
    };
    var G__9498__3 = function(a, b, c) {
      var G__9479 = a == null ? x : a;
      var G__9480 = b == null ? y : b;
      var G__9481 = c == null ? z : c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9479, G__9480, G__9481) : f.call(null, G__9479, G__9480, G__9481);
    };
    var G__9498__4 = function() {
      var G__9499__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
      };
      var G__9499 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__9500__i = 0, G__9500__a = new Array(arguments.length - 3);
          while (G__9500__i < G__9500__a.length) {
            G__9500__a[G__9500__i] = arguments[G__9500__i + 3];
            ++G__9500__i;
          }
          ds = new cljs.core.IndexedSeq(G__9500__a, 0);
        }
        return G__9499__delegate.call(this, a, b, c, ds);
      };
      G__9499.cljs$lang$maxFixedArity = 3;
      G__9499.cljs$lang$applyTo = function(arglist__9501) {
        var a = cljs.core.first(arglist__9501);
        arglist__9501 = cljs.core.next(arglist__9501);
        var b = cljs.core.first(arglist__9501);
        arglist__9501 = cljs.core.next(arglist__9501);
        var c = cljs.core.first(arglist__9501);
        var ds = cljs.core.rest(arglist__9501);
        return G__9499__delegate(a, b, c, ds);
      };
      G__9499.cljs$core$IFn$_invoke$arity$variadic = G__9499__delegate;
      return G__9499;
    }();
    G__9498 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__9498__2.call(this, a, b);
        case 3:
          return G__9498__3.call(this, a, b, c);
        default:
          var G__9502 = null;
          if (arguments.length > 3) {
            var G__9503__i = 0, G__9503__a = new Array(arguments.length - 3);
            while (G__9503__i < G__9503__a.length) {
              G__9503__a[G__9503__i] = arguments[G__9503__i + 3];
              ++G__9503__i;
            }
            G__9502 = new cljs.core.IndexedSeq(G__9503__a, 0);
          }
          return G__9498__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__9502);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9498.cljs$lang$maxFixedArity = 3;
    G__9498.cljs$lang$applyTo = G__9498__4.cljs$lang$applyTo;
    G__9498.cljs$core$IFn$_invoke$arity$2 = G__9498__2;
    G__9498.cljs$core$IFn$_invoke$arity$3 = G__9498__3;
    G__9498.cljs$core$IFn$_invoke$arity$variadic = G__9498__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9498;
  }();
};
cljs.core.fnil.cljs$lang$maxFixedArity = 4;
cljs.core.map_indexed = function cljs$core$map_indexed(var_args) {
  var args9504 = [];
  var len__7211__auto___9537 = arguments.length;
  var i__7212__auto___9538 = 0;
  while (true) {
    if (i__7212__auto___9538 < len__7211__auto___9537) {
      args9504.push(arguments[i__7212__auto___9538]);
      var G__9539 = i__7212__auto___9538 + 1;
      i__7212__auto___9538 = G__9539;
      continue;
    } else {
    }
    break;
  }
  var G__9506 = args9504.length;
  switch(G__9506) {
    case 1:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9504.length)].join(""));;
  }
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var i = cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1(-1) : cljs.core.volatile_BANG_.call(null, -1);
    return function(i) {
      return function() {
        var G__9541 = null;
        var G__9541__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9541__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__9541__2 = function(result, input) {
          var G__9509 = result;
          var G__9510 = function() {
            var G__9511 = cljs.core._vreset_BANG_(i, cljs.core._deref(i) + 1);
            var G__9512 = input;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9511, G__9512) : f.call(null, G__9511, G__9512);
          }();
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9509, G__9510) : rf.call(null, G__9509, G__9510);
        };
        G__9541 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9541__0.call(this);
            case 1:
              return G__9541__1.call(this, result);
            case 2:
              return G__9541__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9541.cljs$core$IFn$_invoke$arity$0 = G__9541__0;
        G__9541.cljs$core$IFn$_invoke$arity$1 = G__9541__1;
        G__9541.cljs$core$IFn$_invoke$arity$2 = G__9541__2;
        return G__9541;
      }();
    }(i);
  };
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var mapi = function cljs$core$mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4657__auto__ = cljs.core.seq(coll__$1);
      if (temp__4657__auto__) {
        var s = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__7056__auto___9542 = size;
          var i_9543 = 0;
          while (true) {
            if (i_9543 < n__7056__auto___9542) {
              cljs.core.chunk_append(b, function() {
                var G__9533 = idx + i_9543;
                var G__9534 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9543);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9533, G__9534) : f.call(null, G__9533, G__9534);
              }());
              var G__9544 = i_9543 + 1;
              i_9543 = G__9544;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$mapi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          return cljs.core.cons(function() {
            var G__9535 = idx;
            var G__9536 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9535, G__9536) : f.call(null, G__9535, G__9536);
          }(), cljs$core$mapi(idx + 1, cljs.core.rest(s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi(0, coll);
};
cljs.core.map_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.keep = function cljs$core$keep(var_args) {
  var args9545 = [];
  var len__7211__auto___9550 = arguments.length;
  var i__7212__auto___9551 = 0;
  while (true) {
    if (i__7212__auto___9551 < len__7211__auto___9550) {
      args9545.push(arguments[i__7212__auto___9551]);
      var G__9552 = i__7212__auto___9551 + 1;
      i__7212__auto___9551 = G__9552;
      continue;
    } else {
    }
    break;
  }
  var G__9547 = args9545.length;
  switch(G__9547) {
    case 1:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9545.length)].join(""));;
  }
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__9554 = null;
      var G__9554__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__9554__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__9554__2 = function(result, input) {
        var v = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
        if (v == null) {
          return result;
        } else {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
        }
      };
      G__9554 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__9554__0.call(this);
          case 1:
            return G__9554__1.call(this, result);
          case 2:
            return G__9554__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9554.cljs$core$IFn$_invoke$arity$0 = G__9554__0;
      G__9554.cljs$core$IFn$_invoke$arity$1 = G__9554__1;
      G__9554.cljs$core$IFn$_invoke$arity$2 = G__9554__2;
      return G__9554;
    }();
  };
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__7056__auto___9555 = size;
        var i_9556 = 0;
        while (true) {
          if (i_9556 < n__7056__auto___9555) {
            var x_9557 = function() {
              var G__9548 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9556);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9548) : f.call(null, G__9548);
            }();
            if (x_9557 == null) {
            } else {
              cljs.core.chunk_append(b, x_9557);
            }
            var G__9558 = i_9556 + 1;
            i_9556 = G__9558;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        var x = function() {
          var G__9549 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9549) : f.call(null, G__9549);
        }();
        if (x == null) {
          return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s));
        } else {
          return cljs.core.cons(x, cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep.cljs$lang$maxFixedArity = 2;
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__9559 = cljs.core.seq(self__.watches);
  var chunk__9560 = null;
  var count__9561 = 0;
  var i__9562 = 0;
  while (true) {
    if (i__9562 < count__9561) {
      var vec__9563 = chunk__9560.cljs$core$IIndexed$_nth$arity$2(null, i__9562);
      var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9563, 0, null);
      var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9563, 1, null);
      f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(key, this$__$1, oldval, newval) : f.call(null, key, this$__$1, oldval, newval);
      var G__9565 = seq__9559;
      var G__9566 = chunk__9560;
      var G__9567 = count__9561;
      var G__9568 = i__9562 + 1;
      seq__9559 = G__9565;
      chunk__9560 = G__9566;
      count__9561 = G__9567;
      i__9562 = G__9568;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__9559);
      if (temp__4657__auto__) {
        var seq__9559__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__9559__$1)) {
          var c__6956__auto__ = cljs.core.chunk_first(seq__9559__$1);
          var G__9569 = cljs.core.chunk_rest(seq__9559__$1);
          var G__9570 = c__6956__auto__;
          var G__9571 = cljs.core.count(c__6956__auto__);
          var G__9572 = 0;
          seq__9559 = G__9569;
          chunk__9560 = G__9570;
          count__9561 = G__9571;
          i__9562 = G__9572;
          continue;
        } else {
          var vec__9564 = cljs.core.first(seq__9559__$1);
          var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9564, 0, null);
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9564, 1, null);
          f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(key, this$__$1, oldval, newval) : f.call(null, key, this$__$1, oldval, newval);
          var G__9573 = cljs.core.next(seq__9559__$1);
          var G__9574 = null;
          var G__9575 = 0;
          var G__9576 = 0;
          seq__9559 = G__9573;
          chunk__9560 = G__9574;
          count__9561 = G__9575;
          i__9562 = G__9576;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "state", "state", -348086572, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "validator", "validator", -325659154, null), new cljs.core.Symbol(null, "watches", "watches", 1367433992, null)], null);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function cljs$core$__GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function cljs$core$atom(var_args) {
  var args9577 = [];
  var len__7211__auto___9585 = arguments.length;
  var i__7212__auto___9586 = 0;
  while (true) {
    if (i__7212__auto___9586 < len__7211__auto___9585) {
      args9577.push(arguments[i__7212__auto___9586]);
      var G__9587 = i__7212__auto___9586 + 1;
      i__7212__auto___9586 = G__9587;
      continue;
    } else {
    }
    break;
  }
  var G__9581 = args9577.length;
  switch(G__9581) {
    case 1:
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args9577.slice(1), 0);
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7230__auto__);
  }
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.Atom(x, null, null, null);
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic = function(x, p__9582) {
  var map__9583 = p__9582;
  var map__9583__$1 = (!(map__9583 == null) ? map__9583.cljs$lang$protocol_mask$partition0$ & 64 || map__9583.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__9583) : map__9583;
  var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9583__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
  var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9583__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
  return new cljs.core.Atom(x, meta, validator, null);
};
cljs.core.atom.cljs$lang$applyTo = function(seq9578) {
  var G__9579 = cljs.core.first(seq9578);
  var seq9578__$1 = cljs.core.next(seq9578);
  return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(G__9579, seq9578__$1);
};
cljs.core.atom.cljs$lang$maxFixedArity = 1;
cljs.core.reset_BANG_ = function cljs$core$reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(new_value) : validate.call(null, new_value))) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(function() {
          var G__9590 = cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null));
          return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__9590) : cljs.core.pr_str.call(null, G__9590);
        }())].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches(a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_(a, new_value);
  }
};
cljs.core.swap_BANG_ = function cljs$core$swap_BANG_(var_args) {
  var args9591 = [];
  var len__7211__auto___9605 = arguments.length;
  var i__7212__auto___9606 = 0;
  while (true) {
    if (i__7212__auto___9606 < len__7211__auto___9605) {
      args9591.push(arguments[i__7212__auto___9606]);
      var G__9607 = i__7212__auto___9606 + 1;
      i__7212__auto___9606 = G__9607;
      continue;
    } else {
    }
    break;
  }
  var G__9598 = args9591.length;
  switch(G__9598) {
    case 2:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args9591.slice(4), 0);
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__7230__auto__);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(a, f) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__9599 = a.state;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9599) : f.call(null, G__9599);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(a, f, x) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__9600 = a.state;
      var G__9601 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9600, G__9601) : f.call(null, G__9600, G__9601);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(a, f, x, y) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__9602 = a.state;
      var G__9603 = x;
      var G__9604 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9602, G__9603, G__9604) : f.call(null, G__9602, G__9603, G__9604);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(a, f, x, y, more) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
  }
};
cljs.core.swap_BANG_.cljs$lang$applyTo = function(seq9592) {
  var G__9593 = cljs.core.first(seq9592);
  var seq9592__$1 = cljs.core.next(seq9592);
  var G__9594 = cljs.core.first(seq9592__$1);
  var seq9592__$2 = cljs.core.next(seq9592__$1);
  var G__9595 = cljs.core.first(seq9592__$2);
  var seq9592__$3 = cljs.core.next(seq9592__$2);
  var G__9596 = cljs.core.first(seq9592__$3);
  var seq9592__$4 = cljs.core.next(seq9592__$3);
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__9593, G__9594, G__9595, G__9596, seq9592__$4);
};
cljs.core.swap_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.compare_and_set_BANG_ = function cljs$core$compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval)) {
    cljs.core.reset_BANG_(a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function cljs$core$set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function cljs$core$get_validator(iref) {
  return iref.validator;
};
cljs.core.Volatile = function(state) {
  this.state = state;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Volatile.prototype.cljs$core$IVolatile$ = true;
cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
  var self__ = this;
  var ___$1 = this;
  return self__.state = new_state;
};
cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Volatile.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "state", "state", -348086572, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Volatile.cljs$lang$type = true;
cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/Volatile");
};
cljs.core.__GT_Volatile = function cljs$core$__GT_Volatile(state) {
  return new cljs.core.Volatile(state);
};
cljs.core.volatile_BANG_ = function cljs$core$volatile_BANG_(val) {
  return new cljs.core.Volatile(val);
};
cljs.core.volatile_QMARK_ = function cljs$core$volatile_QMARK_(x) {
  return x instanceof cljs.core.Volatile;
};
cljs.core.vreset_BANG_ = function cljs$core$vreset_BANG_(vol, newval) {
  return cljs.core._vreset_BANG_(vol, newval);
};
cljs.core.keep_indexed = function cljs$core$keep_indexed(var_args) {
  var args9609 = [];
  var len__7211__auto___9640 = arguments.length;
  var i__7212__auto___9641 = 0;
  while (true) {
    if (i__7212__auto___9641 < len__7211__auto___9640) {
      args9609.push(arguments[i__7212__auto___9641]);
      var G__9642 = i__7212__auto___9641 + 1;
      i__7212__auto___9641 = G__9642;
      continue;
    } else {
    }
    break;
  }
  var G__9611 = args9609.length;
  switch(G__9611) {
    case 1:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9609.length)].join(""));;
  }
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__9644 = null;
        var G__9644__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9644__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__9644__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          var v = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(i, input) : f.call(null, i, input);
          if (v == null) {
            return result;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
          }
        };
        G__9644 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9644__0.call(this);
            case 1:
              return G__9644__1.call(this, result);
            case 2:
              return G__9644__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9644.cljs$core$IFn$_invoke$arity$0 = G__9644__0;
        G__9644.cljs$core$IFn$_invoke$arity$1 = G__9644__1;
        G__9644.cljs$core$IFn$_invoke$arity$2 = G__9644__2;
        return G__9644;
      }();
    }(ia);
  };
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var keepi = function cljs$core$keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4657__auto__ = cljs.core.seq(coll__$1);
      if (temp__4657__auto__) {
        var s = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__7056__auto___9645 = size;
          var i_9646 = 0;
          while (true) {
            if (i_9646 < n__7056__auto___9645) {
              var x_9647 = function() {
                var G__9636 = idx + i_9646;
                var G__9637 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9646);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9636, G__9637) : f.call(null, G__9636, G__9637);
              }();
              if (x_9647 == null) {
              } else {
                cljs.core.chunk_append(b, x_9647);
              }
              var G__9648 = i_9646 + 1;
              i_9646 = G__9648;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$keepi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          var x = function() {
            var G__9638 = idx;
            var G__9639 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9638, G__9639) : f.call(null, G__9638, G__9639);
          }();
          if (x == null) {
            return cljs$core$keepi(idx + 1, cljs.core.rest(s));
          } else {
            return cljs.core.cons(x, cljs$core$keepi(idx + 1, cljs.core.rest(s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi(0, coll);
};
cljs.core.keep_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.every_pred = function cljs$core$every_pred(var_args) {
  var args9655 = [];
  var len__7211__auto___9662 = arguments.length;
  var i__7212__auto___9663 = 0;
  while (true) {
    if (i__7212__auto___9663 < len__7211__auto___9662) {
      args9655.push(arguments[i__7212__auto___9663]);
      var G__9664 = i__7212__auto___9663 + 1;
      i__7212__auto___9663 = G__9664;
      continue;
    } else {
    }
    break;
  }
  var G__9661 = args9655.length;
  switch(G__9661) {
    case 1:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args9655.slice(3), 0);
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__7230__auto__);
  }
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$ep1 = null;
    var cljs$core$ep1__0 = function() {
      return true;
    };
    var cljs$core$ep1__1 = function(x) {
      return cljs.core.boolean$(p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x));
    };
    var cljs$core$ep1__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__6141__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
        if (cljs.core.truth_(and__6141__auto__)) {
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
        } else {
          return and__6141__auto__;
        }
      }());
    };
    var cljs$core$ep1__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__6141__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
        if (cljs.core.truth_(and__6141__auto__)) {
          var and__6141__auto____$1 = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
          if (cljs.core.truth_(and__6141__auto____$1)) {
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(z) : p.call(null, z);
          } else {
            return and__6141__auto____$1;
          }
        } else {
          return and__6141__auto__;
        }
      }());
    };
    var cljs$core$ep1__4 = function() {
      var G__9666__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__6141__auto__ = cljs$core$ep1.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__6141__auto__)) {
            return cljs.core.every_QMARK_(p, args);
          } else {
            return and__6141__auto__;
          }
        }());
      };
      var G__9666 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9667__i = 0, G__9667__a = new Array(arguments.length - 3);
          while (G__9667__i < G__9667__a.length) {
            G__9667__a[G__9667__i] = arguments[G__9667__i + 3];
            ++G__9667__i;
          }
          args = new cljs.core.IndexedSeq(G__9667__a, 0);
        }
        return G__9666__delegate.call(this, x, y, z, args);
      };
      G__9666.cljs$lang$maxFixedArity = 3;
      G__9666.cljs$lang$applyTo = function(arglist__9668) {
        var x = cljs.core.first(arglist__9668);
        arglist__9668 = cljs.core.next(arglist__9668);
        var y = cljs.core.first(arglist__9668);
        arglist__9668 = cljs.core.next(arglist__9668);
        var z = cljs.core.first(arglist__9668);
        var args = cljs.core.rest(arglist__9668);
        return G__9666__delegate(x, y, z, args);
      };
      G__9666.cljs$core$IFn$_invoke$arity$variadic = G__9666__delegate;
      return G__9666;
    }();
    cljs$core$ep1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep1__0.call(this);
        case 1:
          return cljs$core$ep1__1.call(this, x);
        case 2:
          return cljs$core$ep1__2.call(this, x, y);
        case 3:
          return cljs$core$ep1__3.call(this, x, y, z);
        default:
          var G__9669 = null;
          if (arguments.length > 3) {
            var G__9670__i = 0, G__9670__a = new Array(arguments.length - 3);
            while (G__9670__i < G__9670__a.length) {
              G__9670__a[G__9670__i] = arguments[G__9670__i + 3];
              ++G__9670__i;
            }
            G__9669 = new cljs.core.IndexedSeq(G__9670__a, 0);
          }
          return cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9669);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep1.cljs$lang$maxFixedArity = 3;
    cljs$core$ep1.cljs$lang$applyTo = cljs$core$ep1__4.cljs$lang$applyTo;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep1__0;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep1__1;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep1__2;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep1__3;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep1;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$ep2 = null;
    var cljs$core$ep2__0 = function() {
      return true;
    };
    var cljs$core$ep2__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__6141__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__6141__auto__)) {
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        } else {
          return and__6141__auto__;
        }
      }());
    };
    var cljs$core$ep2__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__6141__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__6141__auto__)) {
          var and__6141__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
          if (cljs.core.truth_(and__6141__auto____$1)) {
            var and__6141__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
            if (cljs.core.truth_(and__6141__auto____$2)) {
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
            } else {
              return and__6141__auto____$2;
            }
          } else {
            return and__6141__auto____$1;
          }
        } else {
          return and__6141__auto__;
        }
      }());
    };
    var cljs$core$ep2__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__6141__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__6141__auto__)) {
          var and__6141__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
          if (cljs.core.truth_(and__6141__auto____$1)) {
            var and__6141__auto____$2 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
            if (cljs.core.truth_(and__6141__auto____$2)) {
              var and__6141__auto____$3 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
              if (cljs.core.truth_(and__6141__auto____$3)) {
                var and__6141__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__6141__auto____$4)) {
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                } else {
                  return and__6141__auto____$4;
                }
              } else {
                return and__6141__auto____$3;
              }
            } else {
              return and__6141__auto____$2;
            }
          } else {
            return and__6141__auto____$1;
          }
        } else {
          return and__6141__auto__;
        }
      }());
    };
    var cljs$core$ep2__4 = function() {
      var G__9671__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__6141__auto__ = cljs$core$ep2.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__6141__auto__)) {
            return cljs.core.every_QMARK_(function(and__6141__auto__) {
              return function(p1__9649_SHARP_) {
                var and__6141__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__9649_SHARP_) : p1.call(null, p1__9649_SHARP_);
                if (cljs.core.truth_(and__6141__auto____$1)) {
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__9649_SHARP_) : p2.call(null, p1__9649_SHARP_);
                } else {
                  return and__6141__auto____$1;
                }
              };
            }(and__6141__auto__), args);
          } else {
            return and__6141__auto__;
          }
        }());
      };
      var G__9671 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9672__i = 0, G__9672__a = new Array(arguments.length - 3);
          while (G__9672__i < G__9672__a.length) {
            G__9672__a[G__9672__i] = arguments[G__9672__i + 3];
            ++G__9672__i;
          }
          args = new cljs.core.IndexedSeq(G__9672__a, 0);
        }
        return G__9671__delegate.call(this, x, y, z, args);
      };
      G__9671.cljs$lang$maxFixedArity = 3;
      G__9671.cljs$lang$applyTo = function(arglist__9673) {
        var x = cljs.core.first(arglist__9673);
        arglist__9673 = cljs.core.next(arglist__9673);
        var y = cljs.core.first(arglist__9673);
        arglist__9673 = cljs.core.next(arglist__9673);
        var z = cljs.core.first(arglist__9673);
        var args = cljs.core.rest(arglist__9673);
        return G__9671__delegate(x, y, z, args);
      };
      G__9671.cljs$core$IFn$_invoke$arity$variadic = G__9671__delegate;
      return G__9671;
    }();
    cljs$core$ep2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep2__0.call(this);
        case 1:
          return cljs$core$ep2__1.call(this, x);
        case 2:
          return cljs$core$ep2__2.call(this, x, y);
        case 3:
          return cljs$core$ep2__3.call(this, x, y, z);
        default:
          var G__9674 = null;
          if (arguments.length > 3) {
            var G__9675__i = 0, G__9675__a = new Array(arguments.length - 3);
            while (G__9675__i < G__9675__a.length) {
              G__9675__a[G__9675__i] = arguments[G__9675__i + 3];
              ++G__9675__i;
            }
            G__9674 = new cljs.core.IndexedSeq(G__9675__a, 0);
          }
          return cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9674);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep2.cljs$lang$maxFixedArity = 3;
    cljs$core$ep2.cljs$lang$applyTo = cljs$core$ep2__4.cljs$lang$applyTo;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep2__0;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep2__1;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep2__2;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep2__3;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep2;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$ep3 = null;
    var cljs$core$ep3__0 = function() {
      return true;
    };
    var cljs$core$ep3__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__6141__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__6141__auto__)) {
          var and__6141__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__6141__auto____$1)) {
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          } else {
            return and__6141__auto____$1;
          }
        } else {
          return and__6141__auto__;
        }
      }());
    };
    var cljs$core$ep3__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__6141__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__6141__auto__)) {
          var and__6141__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__6141__auto____$1)) {
            var and__6141__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
            if (cljs.core.truth_(and__6141__auto____$2)) {
              var and__6141__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
              if (cljs.core.truth_(and__6141__auto____$3)) {
                var and__6141__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__6141__auto____$4)) {
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                } else {
                  return and__6141__auto____$4;
                }
              } else {
                return and__6141__auto____$3;
              }
            } else {
              return and__6141__auto____$2;
            }
          } else {
            return and__6141__auto____$1;
          }
        } else {
          return and__6141__auto__;
        }
      }());
    };
    var cljs$core$ep3__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__6141__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__6141__auto__)) {
          var and__6141__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__6141__auto____$1)) {
            var and__6141__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
            if (cljs.core.truth_(and__6141__auto____$2)) {
              var and__6141__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
              if (cljs.core.truth_(and__6141__auto____$3)) {
                var and__6141__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__6141__auto____$4)) {
                  var and__6141__auto____$5 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                  if (cljs.core.truth_(and__6141__auto____$5)) {
                    var and__6141__auto____$6 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
                    if (cljs.core.truth_(and__6141__auto____$6)) {
                      var and__6141__auto____$7 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                      if (cljs.core.truth_(and__6141__auto____$7)) {
                        return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(z) : p3.call(null, z);
                      } else {
                        return and__6141__auto____$7;
                      }
                    } else {
                      return and__6141__auto____$6;
                    }
                  } else {
                    return and__6141__auto____$5;
                  }
                } else {
                  return and__6141__auto____$4;
                }
              } else {
                return and__6141__auto____$3;
              }
            } else {
              return and__6141__auto____$2;
            }
          } else {
            return and__6141__auto____$1;
          }
        } else {
          return and__6141__auto__;
        }
      }());
    };
    var cljs$core$ep3__4 = function() {
      var G__9676__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__6141__auto__ = cljs$core$ep3.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__6141__auto__)) {
            return cljs.core.every_QMARK_(function(and__6141__auto__) {
              return function(p1__9650_SHARP_) {
                var and__6141__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__9650_SHARP_) : p1.call(null, p1__9650_SHARP_);
                if (cljs.core.truth_(and__6141__auto____$1)) {
                  var and__6141__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__9650_SHARP_) : p2.call(null, p1__9650_SHARP_);
                  if (cljs.core.truth_(and__6141__auto____$2)) {
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(p1__9650_SHARP_) : p3.call(null, p1__9650_SHARP_);
                  } else {
                    return and__6141__auto____$2;
                  }
                } else {
                  return and__6141__auto____$1;
                }
              };
            }(and__6141__auto__), args);
          } else {
            return and__6141__auto__;
          }
        }());
      };
      var G__9676 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9677__i = 0, G__9677__a = new Array(arguments.length - 3);
          while (G__9677__i < G__9677__a.length) {
            G__9677__a[G__9677__i] = arguments[G__9677__i + 3];
            ++G__9677__i;
          }
          args = new cljs.core.IndexedSeq(G__9677__a, 0);
        }
        return G__9676__delegate.call(this, x, y, z, args);
      };
      G__9676.cljs$lang$maxFixedArity = 3;
      G__9676.cljs$lang$applyTo = function(arglist__9678) {
        var x = cljs.core.first(arglist__9678);
        arglist__9678 = cljs.core.next(arglist__9678);
        var y = cljs.core.first(arglist__9678);
        arglist__9678 = cljs.core.next(arglist__9678);
        var z = cljs.core.first(arglist__9678);
        var args = cljs.core.rest(arglist__9678);
        return G__9676__delegate(x, y, z, args);
      };
      G__9676.cljs$core$IFn$_invoke$arity$variadic = G__9676__delegate;
      return G__9676;
    }();
    cljs$core$ep3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep3__0.call(this);
        case 1:
          return cljs$core$ep3__1.call(this, x);
        case 2:
          return cljs$core$ep3__2.call(this, x, y);
        case 3:
          return cljs$core$ep3__3.call(this, x, y, z);
        default:
          var G__9679 = null;
          if (arguments.length > 3) {
            var G__9680__i = 0, G__9680__a = new Array(arguments.length - 3);
            while (G__9680__i < G__9680__a.length) {
              G__9680__a[G__9680__i] = arguments[G__9680__i + 3];
              ++G__9680__i;
            }
            G__9679 = new cljs.core.IndexedSeq(G__9680__a, 0);
          }
          return cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9679);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep3.cljs$lang$maxFixedArity = 3;
    cljs$core$ep3.cljs$lang$applyTo = cljs$core$ep3__4.cljs$lang$applyTo;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep3__0;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep3__1;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep3__2;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep3__3;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep3;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$epn = null;
      var cljs$core$epn__0 = function() {
        return true;
      };
      var cljs$core$epn__1 = function(x) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__9651_SHARP_) {
            return p1__9651_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9651_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__9651_SHARP_.call(null, x);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__2 = function(x, y) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__9652_SHARP_) {
            var and__6141__auto__ = p1__9652_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9652_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__9652_SHARP_.call(null, x);
            if (cljs.core.truth_(and__6141__auto__)) {
              return p1__9652_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9652_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__9652_SHARP_.call(null, y);
            } else {
              return and__6141__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__3 = function(x, y, z) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__9653_SHARP_) {
            var and__6141__auto__ = p1__9653_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9653_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__9653_SHARP_.call(null, x);
            if (cljs.core.truth_(and__6141__auto__)) {
              var and__6141__auto____$1 = p1__9653_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9653_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__9653_SHARP_.call(null, y);
              if (cljs.core.truth_(and__6141__auto____$1)) {
                return p1__9653_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9653_SHARP_.cljs$core$IFn$_invoke$arity$1(z) : p1__9653_SHARP_.call(null, z);
              } else {
                return and__6141__auto____$1;
              }
            } else {
              return and__6141__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__4 = function() {
        var G__9681__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(function() {
            var and__6141__auto__ = cljs$core$epn.cljs$core$IFn$_invoke$arity$3(x, y, z);
            if (cljs.core.truth_(and__6141__auto__)) {
              return cljs.core.every_QMARK_(function(and__6141__auto__, ps__$1) {
                return function(p1__9654_SHARP_) {
                  return cljs.core.every_QMARK_(p1__9654_SHARP_, args);
                };
              }(and__6141__auto__, ps__$1), ps__$1);
            } else {
              return and__6141__auto__;
            }
          }());
        };
        var G__9681 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__9682__i = 0, G__9682__a = new Array(arguments.length - 3);
            while (G__9682__i < G__9682__a.length) {
              G__9682__a[G__9682__i] = arguments[G__9682__i + 3];
              ++G__9682__i;
            }
            args = new cljs.core.IndexedSeq(G__9682__a, 0);
          }
          return G__9681__delegate.call(this, x, y, z, args);
        };
        G__9681.cljs$lang$maxFixedArity = 3;
        G__9681.cljs$lang$applyTo = function(arglist__9683) {
          var x = cljs.core.first(arglist__9683);
          arglist__9683 = cljs.core.next(arglist__9683);
          var y = cljs.core.first(arglist__9683);
          arglist__9683 = cljs.core.next(arglist__9683);
          var z = cljs.core.first(arglist__9683);
          var args = cljs.core.rest(arglist__9683);
          return G__9681__delegate(x, y, z, args);
        };
        G__9681.cljs$core$IFn$_invoke$arity$variadic = G__9681__delegate;
        return G__9681;
      }();
      cljs$core$epn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$epn__0.call(this);
          case 1:
            return cljs$core$epn__1.call(this, x);
          case 2:
            return cljs$core$epn__2.call(this, x, y);
          case 3:
            return cljs$core$epn__3.call(this, x, y, z);
          default:
            var G__9684 = null;
            if (arguments.length > 3) {
              var G__9685__i = 0, G__9685__a = new Array(arguments.length - 3);
              while (G__9685__i < G__9685__a.length) {
                G__9685__a[G__9685__i] = arguments[G__9685__i + 3];
                ++G__9685__i;
              }
              G__9684 = new cljs.core.IndexedSeq(G__9685__a, 0);
            }
            return cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9684);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$epn.cljs$lang$maxFixedArity = 3;
      cljs$core$epn.cljs$lang$applyTo = cljs$core$epn__4.cljs$lang$applyTo;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$0 = cljs$core$epn__0;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$1 = cljs$core$epn__1;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$2 = cljs$core$epn__2;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$3 = cljs$core$epn__3;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$epn;
    }();
  }(ps__$1);
};
cljs.core.every_pred.cljs$lang$applyTo = function(seq9656) {
  var G__9657 = cljs.core.first(seq9656);
  var seq9656__$1 = cljs.core.next(seq9656);
  var G__9658 = cljs.core.first(seq9656__$1);
  var seq9656__$2 = cljs.core.next(seq9656__$1);
  var G__9659 = cljs.core.first(seq9656__$2);
  var seq9656__$3 = cljs.core.next(seq9656__$2);
  return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(G__9657, G__9658, G__9659, seq9656__$3);
};
cljs.core.every_pred.cljs$lang$maxFixedArity = 3;
cljs.core.some_fn = function cljs$core$some_fn(var_args) {
  var args9692 = [];
  var len__7211__auto___9699 = arguments.length;
  var i__7212__auto___9700 = 0;
  while (true) {
    if (i__7212__auto___9700 < len__7211__auto___9699) {
      args9692.push(arguments[i__7212__auto___9700]);
      var G__9701 = i__7212__auto___9700 + 1;
      i__7212__auto___9700 = G__9701;
      continue;
    } else {
    }
    break;
  }
  var G__9698 = args9692.length;
  switch(G__9698) {
    case 1:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args9692.slice(3), 0);
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__7230__auto__);
  }
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$sp1 = null;
    var cljs$core$sp1__0 = function() {
      return null;
    };
    var cljs$core$sp1__1 = function(x) {
      return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
    };
    var cljs$core$sp1__2 = function(x, y) {
      var or__6153__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
      if (cljs.core.truth_(or__6153__auto__)) {
        return or__6153__auto__;
      } else {
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
      }
    };
    var cljs$core$sp1__3 = function(x, y, z) {
      var or__6153__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
      if (cljs.core.truth_(or__6153__auto__)) {
        return or__6153__auto__;
      } else {
        var or__6153__auto____$1 = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
        if (cljs.core.truth_(or__6153__auto____$1)) {
          return or__6153__auto____$1;
        } else {
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(z) : p.call(null, z);
        }
      }
    };
    var cljs$core$sp1__4 = function() {
      var G__9703__delegate = function(x, y, z, args) {
        var or__6153__auto__ = cljs$core$sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__6153__auto__)) {
          return or__6153__auto__;
        } else {
          return cljs.core.some(p, args);
        }
      };
      var G__9703 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9704__i = 0, G__9704__a = new Array(arguments.length - 3);
          while (G__9704__i < G__9704__a.length) {
            G__9704__a[G__9704__i] = arguments[G__9704__i + 3];
            ++G__9704__i;
          }
          args = new cljs.core.IndexedSeq(G__9704__a, 0);
        }
        return G__9703__delegate.call(this, x, y, z, args);
      };
      G__9703.cljs$lang$maxFixedArity = 3;
      G__9703.cljs$lang$applyTo = function(arglist__9705) {
        var x = cljs.core.first(arglist__9705);
        arglist__9705 = cljs.core.next(arglist__9705);
        var y = cljs.core.first(arglist__9705);
        arglist__9705 = cljs.core.next(arglist__9705);
        var z = cljs.core.first(arglist__9705);
        var args = cljs.core.rest(arglist__9705);
        return G__9703__delegate(x, y, z, args);
      };
      G__9703.cljs$core$IFn$_invoke$arity$variadic = G__9703__delegate;
      return G__9703;
    }();
    cljs$core$sp1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp1__0.call(this);
        case 1:
          return cljs$core$sp1__1.call(this, x);
        case 2:
          return cljs$core$sp1__2.call(this, x, y);
        case 3:
          return cljs$core$sp1__3.call(this, x, y, z);
        default:
          var G__9706 = null;
          if (arguments.length > 3) {
            var G__9707__i = 0, G__9707__a = new Array(arguments.length - 3);
            while (G__9707__i < G__9707__a.length) {
              G__9707__a[G__9707__i] = arguments[G__9707__i + 3];
              ++G__9707__i;
            }
            G__9706 = new cljs.core.IndexedSeq(G__9707__a, 0);
          }
          return cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9706);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp1.cljs$lang$maxFixedArity = 3;
    cljs$core$sp1.cljs$lang$applyTo = cljs$core$sp1__4.cljs$lang$applyTo;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp1__0;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp1__1;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp1__2;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp1__3;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp1;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$sp2 = null;
    var cljs$core$sp2__0 = function() {
      return null;
    };
    var cljs$core$sp2__1 = function(x) {
      var or__6153__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__6153__auto__)) {
        return or__6153__auto__;
      } else {
        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
      }
    };
    var cljs$core$sp2__2 = function(x, y) {
      var or__6153__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__6153__auto__)) {
        return or__6153__auto__;
      } else {
        var or__6153__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
        if (cljs.core.truth_(or__6153__auto____$1)) {
          return or__6153__auto____$1;
        } else {
          var or__6153__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(or__6153__auto____$2)) {
            return or__6153__auto____$2;
          } else {
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
          }
        }
      }
    };
    var cljs$core$sp2__3 = function(x, y, z) {
      var or__6153__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__6153__auto__)) {
        return or__6153__auto__;
      } else {
        var or__6153__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
        if (cljs.core.truth_(or__6153__auto____$1)) {
          return or__6153__auto____$1;
        } else {
          var or__6153__auto____$2 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
          if (cljs.core.truth_(or__6153__auto____$2)) {
            return or__6153__auto____$2;
          } else {
            var or__6153__auto____$3 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
            if (cljs.core.truth_(or__6153__auto____$3)) {
              return or__6153__auto____$3;
            } else {
              var or__6153__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__6153__auto____$4)) {
                return or__6153__auto____$4;
              } else {
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp2__4 = function() {
      var G__9708__delegate = function(x, y, z, args) {
        var or__6153__auto__ = cljs$core$sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__6153__auto__)) {
          return or__6153__auto__;
        } else {
          return cljs.core.some(function(or__6153__auto__) {
            return function(p1__9686_SHARP_) {
              var or__6153__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__9686_SHARP_) : p1.call(null, p1__9686_SHARP_);
              if (cljs.core.truth_(or__6153__auto____$1)) {
                return or__6153__auto____$1;
              } else {
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__9686_SHARP_) : p2.call(null, p1__9686_SHARP_);
              }
            };
          }(or__6153__auto__), args);
        }
      };
      var G__9708 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9709__i = 0, G__9709__a = new Array(arguments.length - 3);
          while (G__9709__i < G__9709__a.length) {
            G__9709__a[G__9709__i] = arguments[G__9709__i + 3];
            ++G__9709__i;
          }
          args = new cljs.core.IndexedSeq(G__9709__a, 0);
        }
        return G__9708__delegate.call(this, x, y, z, args);
      };
      G__9708.cljs$lang$maxFixedArity = 3;
      G__9708.cljs$lang$applyTo = function(arglist__9710) {
        var x = cljs.core.first(arglist__9710);
        arglist__9710 = cljs.core.next(arglist__9710);
        var y = cljs.core.first(arglist__9710);
        arglist__9710 = cljs.core.next(arglist__9710);
        var z = cljs.core.first(arglist__9710);
        var args = cljs.core.rest(arglist__9710);
        return G__9708__delegate(x, y, z, args);
      };
      G__9708.cljs$core$IFn$_invoke$arity$variadic = G__9708__delegate;
      return G__9708;
    }();
    cljs$core$sp2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp2__0.call(this);
        case 1:
          return cljs$core$sp2__1.call(this, x);
        case 2:
          return cljs$core$sp2__2.call(this, x, y);
        case 3:
          return cljs$core$sp2__3.call(this, x, y, z);
        default:
          var G__9711 = null;
          if (arguments.length > 3) {
            var G__9712__i = 0, G__9712__a = new Array(arguments.length - 3);
            while (G__9712__i < G__9712__a.length) {
              G__9712__a[G__9712__i] = arguments[G__9712__i + 3];
              ++G__9712__i;
            }
            G__9711 = new cljs.core.IndexedSeq(G__9712__a, 0);
          }
          return cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9711);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp2.cljs$lang$maxFixedArity = 3;
    cljs$core$sp2.cljs$lang$applyTo = cljs$core$sp2__4.cljs$lang$applyTo;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp2__0;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp2__1;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp2__2;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp2__3;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp2;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$sp3 = null;
    var cljs$core$sp3__0 = function() {
      return null;
    };
    var cljs$core$sp3__1 = function(x) {
      var or__6153__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__6153__auto__)) {
        return or__6153__auto__;
      } else {
        var or__6153__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__6153__auto____$1)) {
          return or__6153__auto____$1;
        } else {
          return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
        }
      }
    };
    var cljs$core$sp3__2 = function(x, y) {
      var or__6153__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__6153__auto__)) {
        return or__6153__auto__;
      } else {
        var or__6153__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__6153__auto____$1)) {
          return or__6153__auto____$1;
        } else {
          var or__6153__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          if (cljs.core.truth_(or__6153__auto____$2)) {
            return or__6153__auto____$2;
          } else {
            var or__6153__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
            if (cljs.core.truth_(or__6153__auto____$3)) {
              return or__6153__auto____$3;
            } else {
              var or__6153__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__6153__auto____$4)) {
                return or__6153__auto____$4;
              } else {
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__3 = function(x, y, z) {
      var or__6153__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__6153__auto__)) {
        return or__6153__auto__;
      } else {
        var or__6153__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__6153__auto____$1)) {
          return or__6153__auto____$1;
        } else {
          var or__6153__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          if (cljs.core.truth_(or__6153__auto____$2)) {
            return or__6153__auto____$2;
          } else {
            var or__6153__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
            if (cljs.core.truth_(or__6153__auto____$3)) {
              return or__6153__auto____$3;
            } else {
              var or__6153__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__6153__auto____$4)) {
                return or__6153__auto____$4;
              } else {
                var or__6153__auto____$5 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                if (cljs.core.truth_(or__6153__auto____$5)) {
                  return or__6153__auto____$5;
                } else {
                  var or__6153__auto____$6 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
                  if (cljs.core.truth_(or__6153__auto____$6)) {
                    return or__6153__auto____$6;
                  } else {
                    var or__6153__auto____$7 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                    if (cljs.core.truth_(or__6153__auto____$7)) {
                      return or__6153__auto____$7;
                    } else {
                      return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(z) : p3.call(null, z);
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__4 = function() {
      var G__9713__delegate = function(x, y, z, args) {
        var or__6153__auto__ = cljs$core$sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__6153__auto__)) {
          return or__6153__auto__;
        } else {
          return cljs.core.some(function(or__6153__auto__) {
            return function(p1__9687_SHARP_) {
              var or__6153__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__9687_SHARP_) : p1.call(null, p1__9687_SHARP_);
              if (cljs.core.truth_(or__6153__auto____$1)) {
                return or__6153__auto____$1;
              } else {
                var or__6153__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__9687_SHARP_) : p2.call(null, p1__9687_SHARP_);
                if (cljs.core.truth_(or__6153__auto____$2)) {
                  return or__6153__auto____$2;
                } else {
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(p1__9687_SHARP_) : p3.call(null, p1__9687_SHARP_);
                }
              }
            };
          }(or__6153__auto__), args);
        }
      };
      var G__9713 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9714__i = 0, G__9714__a = new Array(arguments.length - 3);
          while (G__9714__i < G__9714__a.length) {
            G__9714__a[G__9714__i] = arguments[G__9714__i + 3];
            ++G__9714__i;
          }
          args = new cljs.core.IndexedSeq(G__9714__a, 0);
        }
        return G__9713__delegate.call(this, x, y, z, args);
      };
      G__9713.cljs$lang$maxFixedArity = 3;
      G__9713.cljs$lang$applyTo = function(arglist__9715) {
        var x = cljs.core.first(arglist__9715);
        arglist__9715 = cljs.core.next(arglist__9715);
        var y = cljs.core.first(arglist__9715);
        arglist__9715 = cljs.core.next(arglist__9715);
        var z = cljs.core.first(arglist__9715);
        var args = cljs.core.rest(arglist__9715);
        return G__9713__delegate(x, y, z, args);
      };
      G__9713.cljs$core$IFn$_invoke$arity$variadic = G__9713__delegate;
      return G__9713;
    }();
    cljs$core$sp3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp3__0.call(this);
        case 1:
          return cljs$core$sp3__1.call(this, x);
        case 2:
          return cljs$core$sp3__2.call(this, x, y);
        case 3:
          return cljs$core$sp3__3.call(this, x, y, z);
        default:
          var G__9716 = null;
          if (arguments.length > 3) {
            var G__9717__i = 0, G__9717__a = new Array(arguments.length - 3);
            while (G__9717__i < G__9717__a.length) {
              G__9717__a[G__9717__i] = arguments[G__9717__i + 3];
              ++G__9717__i;
            }
            G__9716 = new cljs.core.IndexedSeq(G__9717__a, 0);
          }
          return cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9716);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp3.cljs$lang$maxFixedArity = 3;
    cljs$core$sp3.cljs$lang$applyTo = cljs$core$sp3__4.cljs$lang$applyTo;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp3__0;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp3__1;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp3__2;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp3__3;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp3;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$spn = null;
      var cljs$core$spn__0 = function() {
        return null;
      };
      var cljs$core$spn__1 = function(x) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__9688_SHARP_) {
            return p1__9688_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9688_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__9688_SHARP_.call(null, x);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__2 = function(x, y) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__9689_SHARP_) {
            var or__6153__auto__ = p1__9689_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9689_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__9689_SHARP_.call(null, x);
            if (cljs.core.truth_(or__6153__auto__)) {
              return or__6153__auto__;
            } else {
              return p1__9689_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9689_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__9689_SHARP_.call(null, y);
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__3 = function(x, y, z) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__9690_SHARP_) {
            var or__6153__auto__ = p1__9690_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9690_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__9690_SHARP_.call(null, x);
            if (cljs.core.truth_(or__6153__auto__)) {
              return or__6153__auto__;
            } else {
              var or__6153__auto____$1 = p1__9690_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9690_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__9690_SHARP_.call(null, y);
              if (cljs.core.truth_(or__6153__auto____$1)) {
                return or__6153__auto____$1;
              } else {
                return p1__9690_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9690_SHARP_.cljs$core$IFn$_invoke$arity$1(z) : p1__9690_SHARP_.call(null, z);
              }
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__4 = function() {
        var G__9718__delegate = function(x, y, z, args) {
          var or__6153__auto__ = cljs$core$spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__6153__auto__)) {
            return or__6153__auto__;
          } else {
            return cljs.core.some(function(or__6153__auto__, ps__$1) {
              return function(p1__9691_SHARP_) {
                return cljs.core.some(p1__9691_SHARP_, args);
              };
            }(or__6153__auto__, ps__$1), ps__$1);
          }
        };
        var G__9718 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__9719__i = 0, G__9719__a = new Array(arguments.length - 3);
            while (G__9719__i < G__9719__a.length) {
              G__9719__a[G__9719__i] = arguments[G__9719__i + 3];
              ++G__9719__i;
            }
            args = new cljs.core.IndexedSeq(G__9719__a, 0);
          }
          return G__9718__delegate.call(this, x, y, z, args);
        };
        G__9718.cljs$lang$maxFixedArity = 3;
        G__9718.cljs$lang$applyTo = function(arglist__9720) {
          var x = cljs.core.first(arglist__9720);
          arglist__9720 = cljs.core.next(arglist__9720);
          var y = cljs.core.first(arglist__9720);
          arglist__9720 = cljs.core.next(arglist__9720);
          var z = cljs.core.first(arglist__9720);
          var args = cljs.core.rest(arglist__9720);
          return G__9718__delegate(x, y, z, args);
        };
        G__9718.cljs$core$IFn$_invoke$arity$variadic = G__9718__delegate;
        return G__9718;
      }();
      cljs$core$spn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$spn__0.call(this);
          case 1:
            return cljs$core$spn__1.call(this, x);
          case 2:
            return cljs$core$spn__2.call(this, x, y);
          case 3:
            return cljs$core$spn__3.call(this, x, y, z);
          default:
            var G__9721 = null;
            if (arguments.length > 3) {
              var G__9722__i = 0, G__9722__a = new Array(arguments.length - 3);
              while (G__9722__i < G__9722__a.length) {
                G__9722__a[G__9722__i] = arguments[G__9722__i + 3];
                ++G__9722__i;
              }
              G__9721 = new cljs.core.IndexedSeq(G__9722__a, 0);
            }
            return cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9721);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$spn.cljs$lang$maxFixedArity = 3;
      cljs$core$spn.cljs$lang$applyTo = cljs$core$spn__4.cljs$lang$applyTo;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$0 = cljs$core$spn__0;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$1 = cljs$core$spn__1;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$2 = cljs$core$spn__2;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$3 = cljs$core$spn__3;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$spn;
    }();
  }(ps__$1);
};
cljs.core.some_fn.cljs$lang$applyTo = function(seq9693) {
  var G__9694 = cljs.core.first(seq9693);
  var seq9693__$1 = cljs.core.next(seq9693);
  var G__9695 = cljs.core.first(seq9693__$1);
  var seq9693__$2 = cljs.core.next(seq9693__$1);
  var G__9696 = cljs.core.first(seq9693__$2);
  var seq9693__$3 = cljs.core.next(seq9693__$2);
  return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(G__9694, G__9695, G__9696, seq9693__$3);
};
cljs.core.some_fn.cljs$lang$maxFixedArity = 3;
cljs.core.map = function cljs$core$map(var_args) {
  var args9724 = [];
  var len__7211__auto___9744 = arguments.length;
  var i__7212__auto___9745 = 0;
  while (true) {
    if (i__7212__auto___9745 < len__7211__auto___9744) {
      args9724.push(arguments[i__7212__auto___9745]);
      var G__9746 = i__7212__auto___9745 + 1;
      i__7212__auto___9745 = G__9746;
      continue;
    } else {
    }
    break;
  }
  var G__9731 = args9724.length;
  switch(G__9731) {
    case 1:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args9724.slice(4), 0);
      return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__7230__auto__);
  }
};
cljs.core.map.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__9748 = null;
      var G__9748__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__9748__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__9748__2 = function(result, input) {
        var G__9732 = result;
        var G__9733 = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
        return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9732, G__9733) : rf.call(null, G__9732, G__9733);
      };
      var G__9748__3 = function() {
        var G__9749__delegate = function(result, input, inputs) {
          var G__9734 = result;
          var G__9735 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9734, G__9735) : rf.call(null, G__9734, G__9735);
        };
        var G__9749 = function(result, input, var_args) {
          var inputs = null;
          if (arguments.length > 2) {
            var G__9750__i = 0, G__9750__a = new Array(arguments.length - 2);
            while (G__9750__i < G__9750__a.length) {
              G__9750__a[G__9750__i] = arguments[G__9750__i + 2];
              ++G__9750__i;
            }
            inputs = new cljs.core.IndexedSeq(G__9750__a, 0);
          }
          return G__9749__delegate.call(this, result, input, inputs);
        };
        G__9749.cljs$lang$maxFixedArity = 2;
        G__9749.cljs$lang$applyTo = function(arglist__9751) {
          var result = cljs.core.first(arglist__9751);
          arglist__9751 = cljs.core.next(arglist__9751);
          var input = cljs.core.first(arglist__9751);
          var inputs = cljs.core.rest(arglist__9751);
          return G__9749__delegate(result, input, inputs);
        };
        G__9749.cljs$core$IFn$_invoke$arity$variadic = G__9749__delegate;
        return G__9749;
      }();
      G__9748 = function(result, input, var_args) {
        var inputs = var_args;
        switch(arguments.length) {
          case 0:
            return G__9748__0.call(this);
          case 1:
            return G__9748__1.call(this, result);
          case 2:
            return G__9748__2.call(this, result, input);
          default:
            var G__9752 = null;
            if (arguments.length > 2) {
              var G__9753__i = 0, G__9753__a = new Array(arguments.length - 2);
              while (G__9753__i < G__9753__a.length) {
                G__9753__a[G__9753__i] = arguments[G__9753__i + 2];
                ++G__9753__i;
              }
              G__9752 = new cljs.core.IndexedSeq(G__9753__a, 0);
            }
            return G__9748__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__9752);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9748.cljs$lang$maxFixedArity = 2;
      G__9748.cljs$lang$applyTo = G__9748__3.cljs$lang$applyTo;
      G__9748.cljs$core$IFn$_invoke$arity$0 = G__9748__0;
      G__9748.cljs$core$IFn$_invoke$arity$1 = G__9748__1;
      G__9748.cljs$core$IFn$_invoke$arity$2 = G__9748__2;
      G__9748.cljs$core$IFn$_invoke$arity$variadic = G__9748__3.cljs$core$IFn$_invoke$arity$variadic;
      return G__9748;
    }();
  };
};
cljs.core.map.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__7056__auto___9754 = size;
        var i_9755 = 0;
        while (true) {
          if (i_9755 < n__7056__auto___9754) {
            cljs.core.chunk_append(b, function() {
              var G__9736 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9755);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9736) : f.call(null, G__9736);
            }());
            var G__9756 = i_9755 + 1;
            i_9755 = G__9756;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        return cljs.core.cons(function() {
          var G__9737 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9737) : f.call(null, G__9737);
        }(), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(function() {
        var G__9738 = cljs.core.first(s1);
        var G__9739 = cljs.core.first(s2);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9738, G__9739) : f.call(null, G__9738, G__9739);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    var s3 = cljs.core.seq(c3);
    if (s1 && s2 && s3) {
      return cljs.core.cons(function() {
        var G__9740 = cljs.core.first(s1);
        var G__9741 = cljs.core.first(s2);
        var G__9742 = cljs.core.first(s3);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9740, G__9741, G__9742) : f.call(null, G__9740, G__9741, G__9742);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  var step = function cljs$core$step(cs) {
    return new cljs.core.LazySeq(null, function() {
      var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
      if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
        return cljs.core.cons(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs$core$step(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
      } else {
        return null;
      }
    }, null, null);
  };
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(step) {
    return function(p1__9723_SHARP_) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__9723_SHARP_);
    };
  }(step), step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.array_seq([c2, c1], 0))));
};
cljs.core.map.cljs$lang$applyTo = function(seq9725) {
  var G__9726 = cljs.core.first(seq9725);
  var seq9725__$1 = cljs.core.next(seq9725);
  var G__9727 = cljs.core.first(seq9725__$1);
  var seq9725__$2 = cljs.core.next(seq9725__$1);
  var G__9728 = cljs.core.first(seq9725__$2);
  var seq9725__$3 = cljs.core.next(seq9725__$2);
  var G__9729 = cljs.core.first(seq9725__$3);
  var seq9725__$4 = cljs.core.next(seq9725__$3);
  return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(G__9726, G__9727, G__9728, G__9729, seq9725__$4);
};
cljs.core.map.cljs$lang$maxFixedArity = 4;
cljs.core.take = function cljs$core$take(var_args) {
  var args9757 = [];
  var len__7211__auto___9762 = arguments.length;
  var i__7212__auto___9763 = 0;
  while (true) {
    if (i__7212__auto___9763 < len__7211__auto___9762) {
      args9757.push(arguments[i__7212__auto___9763]);
      var G__9764 = i__7212__auto___9763 + 1;
      i__7212__auto___9763 = G__9764;
      continue;
    } else {
    }
    break;
  }
  var G__9759 = args9757.length;
  switch(G__9759) {
    case 1:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9757.length)].join(""));;
  }
};
cljs.core.take.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (typeof n === "number") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(function() {
      var G__9760 = cljs.core.list(new cljs.core.Symbol(null, "number?", "number?", -1747282210, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null));
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__9760) : cljs.core.pr_str.call(null, G__9760);
    }())].join(""));
  }
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__9766 = null;
        var G__9766__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9766__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__9766__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          var nn = cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          var result__$1 = n__$1 > 0 ? rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input) : result;
          if (!(nn > 0)) {
            return cljs.core.ensure_reduced(result__$1);
          } else {
            return result__$1;
          }
        };
        G__9766 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9766__0.call(this);
            case 1:
              return G__9766__1.call(this, result);
            case 2:
              return G__9766__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9766.cljs$core$IFn$_invoke$arity$0 = G__9766__0;
        G__9766.cljs$core$IFn$_invoke$arity$1 = G__9766__1;
        G__9766.cljs$core$IFn$_invoke$arity$2 = G__9766__2;
        return G__9766;
      }();
    }(na);
  };
};
cljs.core.take.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  if (typeof n === "number") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(function() {
      var G__9761 = cljs.core.list(new cljs.core.Symbol(null, "number?", "number?", -1747282210, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null));
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__9761) : cljs.core.pr_str.call(null, G__9761);
    }())].join(""));
  }
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4657__auto__ = cljs.core.seq(coll);
      if (temp__4657__auto__) {
        var s = temp__4657__auto__;
        return cljs.core.cons(cljs.core.first(s), cljs.core.take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take.cljs$lang$maxFixedArity = 2;
cljs.core.drop = function cljs$core$drop(var_args) {
  var args9767 = [];
  var len__7211__auto___9772 = arguments.length;
  var i__7212__auto___9773 = 0;
  while (true) {
    if (i__7212__auto___9773 < len__7211__auto___9772) {
      args9767.push(arguments[i__7212__auto___9773]);
      var G__9774 = i__7212__auto___9773 + 1;
      i__7212__auto___9773 = G__9774;
      continue;
    } else {
    }
    break;
  }
  var G__9769 = args9767.length;
  switch(G__9769) {
    case 1:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9767.length)].join(""));;
  }
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (typeof n === "number") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(function() {
      var G__9770 = cljs.core.list(new cljs.core.Symbol(null, "number?", "number?", -1747282210, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null));
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__9770) : cljs.core.pr_str.call(null, G__9770);
    }())].join(""));
  }
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__9776 = null;
        var G__9776__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9776__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__9776__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          if (n__$1 > 0) {
            return result;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__9776 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9776__0.call(this);
            case 1:
              return G__9776__1.call(this, result);
            case 2:
              return G__9776__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9776.cljs$core$IFn$_invoke$arity$0 = G__9776__0;
        G__9776.cljs$core$IFn$_invoke$arity$1 = G__9776__1;
        G__9776.cljs$core$IFn$_invoke$arity$2 = G__9776__2;
        return G__9776;
      }();
    }(na);
  };
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  if (typeof n === "number") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(function() {
      var G__9771 = cljs.core.list(new cljs.core.Symbol(null, "number?", "number?", -1747282210, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null));
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__9771) : cljs.core.pr_str.call(null, G__9771);
    }())].join(""));
  }
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (n__$1 > 0 && s) {
        var G__9777 = n__$1 - 1;
        var G__9778 = cljs.core.rest(s);
        n__$1 = G__9777;
        coll__$1 = G__9778;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(n, coll);
    };
  }(step), null, null);
};
cljs.core.drop.cljs$lang$maxFixedArity = 2;
cljs.core.drop_last = function cljs$core$drop_last(var_args) {
  var args9779 = [];
  var len__7211__auto___9782 = arguments.length;
  var i__7212__auto___9783 = 0;
  while (true) {
    if (i__7212__auto___9783 < len__7211__auto___9782) {
      args9779.push(arguments[i__7212__auto___9783]);
      var G__9784 = i__7212__auto___9783 + 1;
      i__7212__auto___9783 = G__9784;
      continue;
    } else {
    }
    break;
  }
  var G__9781 = args9779.length;
  switch(G__9781) {
    case 1:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9779.length)].join(""));;
  }
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1 = function(s) {
  return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2 = function(n, s) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
    return x;
  }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
};
cljs.core.drop_last.cljs$lang$maxFixedArity = 2;
cljs.core.take_last = function cljs$core$take_last(n, coll) {
  var s = cljs.core.seq(coll);
  var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));
  while (true) {
    if (lead) {
      var G__9786 = cljs.core.next(s);
      var G__9787 = cljs.core.next(lead);
      s = G__9786;
      lead = G__9787;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function cljs$core$drop_while(var_args) {
  var args9788 = [];
  var len__7211__auto___9793 = arguments.length;
  var i__7212__auto___9794 = 0;
  while (true) {
    if (i__7212__auto___9794 < len__7211__auto___9793) {
      args9788.push(arguments[i__7212__auto___9794]);
      var G__9795 = i__7212__auto___9794 + 1;
      i__7212__auto___9794 = G__9795;
      continue;
    } else {
    }
    break;
  }
  var G__9790 = args9788.length;
  switch(G__9790) {
    case 1:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9788.length)].join(""));;
  }
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    var da = cljs.core.volatile_BANG_(true);
    return function(da) {
      return function() {
        var G__9797 = null;
        var G__9797__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9797__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__9797__2 = function(result, input) {
          var drop_QMARK_ = cljs.core.deref(da);
          if (cljs.core.truth_(function() {
            var and__6141__auto__ = drop_QMARK_;
            if (cljs.core.truth_(and__6141__auto__)) {
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input);
            } else {
              return and__6141__auto__;
            }
          }())) {
            return result;
          } else {
            cljs.core.vreset_BANG_(da, null);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__9797 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9797__0.call(this);
            case 1:
              return G__9797__1.call(this, result);
            case 2:
              return G__9797__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9797.cljs$core$IFn$_invoke$arity$0 = G__9797__0;
        G__9797.cljs$core$IFn$_invoke$arity$1 = G__9797__1;
        G__9797.cljs$core$IFn$_invoke$arity$2 = G__9797__2;
        return G__9797;
      }();
    }(da);
  };
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (cljs.core.truth_(function() {
        var and__6141__auto__ = s;
        if (and__6141__auto__) {
          var G__9792 = cljs.core.first(s);
          return pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__9792) : pred__$1.call(null, G__9792);
        } else {
          return and__6141__auto__;
        }
      }())) {
        var G__9798 = pred__$1;
        var G__9799 = cljs.core.rest(s);
        pred__$1 = G__9798;
        coll__$1 = G__9799;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(pred, coll);
    };
  }(step), null, null);
};
cljs.core.drop_while.cljs$lang$maxFixedArity = 2;
cljs.core.cycle = function cljs$core$cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(s, cljs$core$cycle(s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function cljs$core$split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
};
cljs.core.repeat = function cljs$core$repeat(var_args) {
  var args9800 = [];
  var len__7211__auto___9803 = arguments.length;
  var i__7212__auto___9804 = 0;
  while (true) {
    if (i__7212__auto___9804 < len__7211__auto___9803) {
      args9800.push(arguments[i__7212__auto___9804]);
      var G__9805 = i__7212__auto___9804 + 1;
      i__7212__auto___9804 = G__9805;
      continue;
    } else {
    }
    break;
  }
  var G__9802 = args9800.length;
  switch(G__9802) {
    case 1:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9800.length)].join(""));;
  }
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(x, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
  }, null, null);
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$2 = function(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeat.cljs$lang$maxFixedArity = 2;
cljs.core.replicate = function cljs$core$replicate(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeatedly = function cljs$core$repeatedly(var_args) {
  var args9807 = [];
  var len__7211__auto___9810 = arguments.length;
  var i__7212__auto___9811 = 0;
  while (true) {
    if (i__7212__auto___9811 < len__7211__auto___9810) {
      args9807.push(arguments[i__7212__auto___9811]);
      var G__9812 = i__7212__auto___9811 + 1;
      i__7212__auto___9811 = G__9812;
      continue;
    } else {
    }
    break;
  }
  var G__9809 = args9807.length;
  switch(G__9809) {
    case 1:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9807.length)].join(""));;
  }
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
  }, null, null);
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2 = function(n, f) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
};
cljs.core.repeatedly.cljs$lang$maxFixedArity = 2;
cljs.core.iterate = function cljs$core$iterate(f, x) {
  return cljs.core.cons(x, new cljs.core.LazySeq(null, function() {
    return cljs$core$iterate(f, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function cljs$core$interleave(var_args) {
  var args9816 = [];
  var len__7211__auto___9822 = arguments.length;
  var i__7212__auto___9823 = 0;
  while (true) {
    if (i__7212__auto___9823 < len__7211__auto___9822) {
      args9816.push(arguments[i__7212__auto___9823]);
      var G__9824 = i__7212__auto___9823 + 1;
      i__7212__auto___9823 = G__9824;
      continue;
    } else {
    }
    break;
  }
  var G__9821 = args9816.length;
  switch(G__9821) {
    case 2:
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args9816.slice(2), 0);
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7230__auto__);
  }
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$2 = function(c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic = function(c1, c2, colls) {
  return new cljs.core.LazySeq(null, function() {
    var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.array_seq([c1], 0)));
    if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$lang$applyTo = function(seq9817) {
  var G__9818 = cljs.core.first(seq9817);
  var seq9817__$1 = cljs.core.next(seq9817);
  var G__9819 = cljs.core.first(seq9817__$1);
  var seq9817__$2 = cljs.core.next(seq9817__$1);
  return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(G__9818, G__9819, seq9817__$2);
};
cljs.core.interleave.cljs$lang$maxFixedArity = 2;
cljs.core.interpose = function cljs$core$interpose(var_args) {
  var args9826 = [];
  var len__7211__auto___9829 = arguments.length;
  var i__7212__auto___9830 = 0;
  while (true) {
    if (i__7212__auto___9830 < len__7211__auto___9829) {
      args9826.push(arguments[i__7212__auto___9830]);
      var G__9831 = i__7212__auto___9830 + 1;
      i__7212__auto___9830 = G__9831;
      continue;
    } else {
    }
    break;
  }
  var G__9828 = args9826.length;
  switch(G__9828) {
    case 1:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9826.length)].join(""));;
  }
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$1 = function(sep) {
  return function(rf) {
    var started = cljs.core.volatile_BANG_(false);
    return function(started) {
      return function() {
        var G__9833 = null;
        var G__9833__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9833__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__9833__2 = function(result, input) {
          if (cljs.core.truth_(cljs.core.deref(started))) {
            var sepr = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, sep) : rf.call(null, result, sep);
            if (cljs.core.reduced_QMARK_(sepr)) {
              return sepr;
            } else {
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(sepr, input) : rf.call(null, sepr, input);
            }
          } else {
            cljs.core.vreset_BANG_(started, true);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__9833 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9833__0.call(this);
            case 1:
              return G__9833__1.call(this, result);
            case 2:
              return G__9833__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9833.cljs$core$IFn$_invoke$arity$0 = G__9833__0;
        G__9833.cljs$core$IFn$_invoke$arity$1 = G__9833__1;
        G__9833.cljs$core$IFn$_invoke$arity$2 = G__9833__2;
        return G__9833;
      }();
    }(started);
  };
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$2 = function(sep, coll) {
  return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
};
cljs.core.interpose.cljs$lang$maxFixedArity = 2;
cljs.core.flatten1 = function cljs$core$flatten1(colls) {
  var cat = function cljs$core$flatten1_$_cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4655__auto__ = cljs.core.seq(coll);
      if (temp__4655__auto__) {
        var coll__$1 = temp__4655__auto__;
        return cljs.core.cons(cljs.core.first(coll__$1), cljs$core$flatten1_$_cat(cljs.core.rest(coll__$1), colls__$1));
      } else {
        if (cljs.core.seq(colls__$1)) {
          return cljs$core$flatten1_$_cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(null, colls);
};
cljs.core.mapcat = function cljs$core$mapcat(var_args) {
  var args9842 = [];
  var len__7211__auto___9847 = arguments.length;
  var i__7212__auto___9848 = 0;
  while (true) {
    if (i__7212__auto___9848 < len__7211__auto___9847) {
      args9842.push(arguments[i__7212__auto___9848]);
      var G__9849 = i__7212__auto___9848 + 1;
      i__7212__auto___9848 = G__9849;
      continue;
    } else {
    }
    break;
  }
  var G__9846 = args9842.length;
  switch(G__9846) {
    case 1:
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args9842.slice(1), 0);
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7230__auto__);
  }
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic = function(f, colls) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
};
cljs.core.mapcat.cljs$lang$applyTo = function(seq9843) {
  var G__9844 = cljs.core.first(seq9843);
  var seq9843__$1 = cljs.core.next(seq9843);
  return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(G__9844, seq9843__$1);
};
cljs.core.mapcat.cljs$lang$maxFixedArity = 1;
cljs.core.filter = function cljs$core$filter(var_args) {
  var args9851 = [];
  var len__7211__auto___9855 = arguments.length;
  var i__7212__auto___9856 = 0;
  while (true) {
    if (i__7212__auto___9856 < len__7211__auto___9855) {
      args9851.push(arguments[i__7212__auto___9856]);
      var G__9857 = i__7212__auto___9856 + 1;
      i__7212__auto___9856 = G__9857;
      continue;
    } else {
    }
    break;
  }
  var G__9853 = args9851.length;
  switch(G__9853) {
    case 1:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9851.length)].join(""));;
  }
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__9859 = null;
      var G__9859__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__9859__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__9859__2 = function(result, input) {
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input))) {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        } else {
          return result;
        }
      };
      G__9859 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__9859__0.call(this);
          case 1:
            return G__9859__1.call(this, result);
          case 2:
            return G__9859__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9859.cljs$core$IFn$_invoke$arity$0 = G__9859__0;
      G__9859.cljs$core$IFn$_invoke$arity$1 = G__9859__1;
      G__9859.cljs$core$IFn$_invoke$arity$2 = G__9859__2;
      return G__9859;
    }();
  };
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__7056__auto___9860 = size;
        var i_9861 = 0;
        while (true) {
          if (i_9861 < n__7056__auto___9860) {
            if (cljs.core.truth_(function() {
              var G__9854 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9861);
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9854) : pred.call(null, G__9854);
            }())) {
              cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9861));
            } else {
            }
            var G__9862 = i_9861 + 1;
            i_9861 = G__9862;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(s)));
      } else {
        var f = cljs.core.first(s);
        var r = cljs.core.rest(s);
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(f) : pred.call(null, f))) {
          return cljs.core.cons(f, cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r));
        } else {
          return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.filter.cljs$lang$maxFixedArity = 2;
cljs.core.remove = function cljs$core$remove(var_args) {
  var args9863 = [];
  var len__7211__auto___9866 = arguments.length;
  var i__7212__auto___9867 = 0;
  while (true) {
    if (i__7212__auto___9867 < len__7211__auto___9866) {
      args9863.push(arguments[i__7212__auto___9867]);
      var G__9868 = i__7212__auto___9867 + 1;
      i__7212__auto___9867 = G__9868;
      continue;
    } else {
    }
    break;
  }
  var G__9865 = args9863.length;
  switch(G__9865) {
    case 1:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9863.length)].join(""));;
  }
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
};
cljs.core.remove.cljs$lang$maxFixedArity = 2;
cljs.core.tree_seq = function cljs$core$tree_seq(branch_QMARK_, children, root) {
  var walk = function cljs$core$tree_seq_$_walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(node, cljs.core.truth_(branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(node) : branch_QMARK_.call(null, node)) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs$core$tree_seq_$_walk, cljs.core.array_seq([children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(node) : children.call(null, node)], 0)) : null);
    }, null, null);
  };
  return walk(root);
};
cljs.core.flatten = function cljs$core$flatten(x) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__9870_SHARP_) {
    return !cljs.core.sequential_QMARK_(p1__9870_SHARP_);
  }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function cljs$core$into(var_args) {
  var args9871 = [];
  var len__7211__auto___9876 = arguments.length;
  var i__7212__auto___9877 = 0;
  while (true) {
    if (i__7212__auto___9877 < len__7211__auto___9876) {
      args9871.push(arguments[i__7212__auto___9877]);
      var G__9878 = i__7212__auto___9877 + 1;
      i__7212__auto___9877 = G__9878;
      continue;
    } else {
    }
    break;
  }
  var G__9873 = args9871.length;
  switch(G__9873) {
    case 2:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9871.length)].join(""));;
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$2 = function(to, from) {
  if (!(to == null)) {
    if (!(to == null) ? to.cljs$lang$protocol_mask$partition1$ & 4 || to.cljs$core$IEditableCollection$ ? true : false : false) {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
    } else {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$3 = function(to, xform, from) {
  if (!(to == null) ? to.cljs$lang$protocol_mask$partition1$ & 4 || to.cljs$core$IEditableCollection$ ? true : false : false) {
    return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
  } else {
    return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
  }
};
cljs.core.into.cljs$lang$maxFixedArity = 3;
cljs.core.mapv = function cljs$core$mapv(var_args) {
  var args9880 = [];
  var len__7211__auto___9888 = arguments.length;
  var i__7212__auto___9889 = 0;
  while (true) {
    if (i__7212__auto___9889 < len__7211__auto___9888) {
      args9880.push(arguments[i__7212__auto___9889]);
      var G__9890 = i__7212__auto___9889 + 1;
      i__7212__auto___9889 = G__9890;
      continue;
    } else {
    }
    break;
  }
  var G__9887 = args9880.length;
  switch(G__9887) {
    case 2:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args9880.slice(4), 0);
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__7230__auto__);
  }
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(o) : f.call(null, o));
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.array_seq([colls], 0)));
};
cljs.core.mapv.cljs$lang$applyTo = function(seq9881) {
  var G__9882 = cljs.core.first(seq9881);
  var seq9881__$1 = cljs.core.next(seq9881);
  var G__9883 = cljs.core.first(seq9881__$1);
  var seq9881__$2 = cljs.core.next(seq9881__$1);
  var G__9884 = cljs.core.first(seq9881__$2);
  var seq9881__$3 = cljs.core.next(seq9881__$2);
  var G__9885 = cljs.core.first(seq9881__$3);
  var seq9881__$4 = cljs.core.next(seq9881__$3);
  return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(G__9882, G__9883, G__9884, G__9885, seq9881__$4);
};
cljs.core.mapv.cljs$lang$maxFixedArity = 4;
cljs.core.filterv = function cljs$core$filterv(pred, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(o) : pred.call(null, o))) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function cljs$core$partition(var_args) {
  var args9892 = [];
  var len__7211__auto___9895 = arguments.length;
  var i__7212__auto___9896 = 0;
  while (true) {
    if (i__7212__auto___9896 < len__7211__auto___9895) {
      args9892.push(arguments[i__7212__auto___9896]);
      var G__9897 = i__7212__auto___9896 + 1;
      i__7212__auto___9896 = G__9897;
      continue;
    } else {
    }
    break;
  }
  var G__9894 = args9892.length;
  switch(G__9894) {
    case 2:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9892.length)].join(""));;
  }
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$4 = function(n, step, pad, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return cljs.core._conj(cljs.core.List.EMPTY, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$lang$maxFixedArity = 4;
cljs.core.get_in = function cljs$core$get_in(var_args) {
  var args9899 = [];
  var len__7211__auto___9903 = arguments.length;
  var i__7212__auto___9904 = 0;
  while (true) {
    if (i__7212__auto___9904 < len__7211__auto___9903) {
      args9899.push(arguments[i__7212__auto___9904]);
      var G__9905 = i__7212__auto___9904 + 1;
      i__7212__auto___9904 = G__9905;
      continue;
    } else {
    }
    break;
  }
  var G__9901 = args9899.length;
  switch(G__9901) {
    case 2:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9899.length)].join(""));;
  }
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$2 = function(m, ks) {
  return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(m, ks, null);
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$3 = function(m, ks, not_found) {
  var sentinel = cljs.core.lookup_sentinel;
  var m__$1 = m;
  var ks__$1 = cljs.core.seq(ks);
  while (true) {
    if (ks__$1) {
      if (!(!(m__$1 == null) ? m__$1.cljs$lang$protocol_mask$partition0$ & 256 || m__$1.cljs$core$ILookup$ ? true : !m__$1.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, m__$1) : false : cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, m__$1))) {
        return not_found;
      } else {
        var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1, cljs.core.first(ks__$1), sentinel);
        if (sentinel === m__$2) {
          return not_found;
        } else {
          var G__9907 = sentinel;
          var G__9908 = m__$2;
          var G__9909 = cljs.core.next(ks__$1);
          sentinel = G__9907;
          m__$1 = G__9908;
          ks__$1 = G__9909;
          continue;
        }
      }
    } else {
      return m__$1;
    }
    break;
  }
};
cljs.core.get_in.cljs$lang$maxFixedArity = 3;
cljs.core.assoc_in = function cljs$core$assoc_in(m, p__9910, v) {
  var vec__9915 = p__9910;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9915, 0, null);
  var ks = cljs.core.nthnext(vec__9915, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$assoc_in(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, v));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
  }
};
cljs.core.update_in = function cljs$core$update_in(var_args) {
  var args9916 = [];
  var len__7211__auto___9946 = arguments.length;
  var i__7212__auto___9947 = 0;
  while (true) {
    if (i__7212__auto___9947 < len__7211__auto___9946) {
      args9916.push(arguments[i__7212__auto___9947]);
      var G__9948 = i__7212__auto___9947 + 1;
      i__7212__auto___9947 = G__9948;
      continue;
    } else {
    }
    break;
  }
  var G__9925 = args9916.length;
  switch(G__9925) {
    case 3:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args9916.slice(6), 0);
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__7230__auto__);
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$3 = function(m, p__9926, f) {
  var vec__9927 = p__9926;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9927, 0, null);
  var ks = cljs.core.nthnext(vec__9927, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9928 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9928) : f.call(null, G__9928);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$4 = function(m, p__9929, f, a) {
  var vec__9930 = p__9929;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9930, 0, null);
  var ks = cljs.core.nthnext(vec__9930, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9931 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__9932 = a;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9931, G__9932) : f.call(null, G__9931, G__9932);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$5 = function(m, p__9933, f, a, b) {
  var vec__9934 = p__9933;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9934, 0, null);
  var ks = cljs.core.nthnext(vec__9934, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9935 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__9936 = a;
      var G__9937 = b;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9935, G__9936, G__9937) : f.call(null, G__9935, G__9936, G__9937);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$6 = function(m, p__9938, f, a, b, c) {
  var vec__9939 = p__9938;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9939, 0, null);
  var ks = cljs.core.nthnext(vec__9939, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b, c));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9940 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__9941 = a;
      var G__9942 = b;
      var G__9943 = c;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__9940, G__9941, G__9942, G__9943) : f.call(null, G__9940, G__9941, G__9942, G__9943);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic = function(m, p__9944, f, a, b, c, args) {
  var vec__9945 = p__9944;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9945, 0, null);
  var ks = cljs.core.nthnext(vec__9945, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, cljs.core.array_seq([b, c, args], 0)));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), a, b, c, cljs.core.array_seq([args], 0)));
  }
};
cljs.core.update_in.cljs$lang$applyTo = function(seq9917) {
  var G__9918 = cljs.core.first(seq9917);
  var seq9917__$1 = cljs.core.next(seq9917);
  var G__9919 = cljs.core.first(seq9917__$1);
  var seq9917__$2 = cljs.core.next(seq9917__$1);
  var G__9920 = cljs.core.first(seq9917__$2);
  var seq9917__$3 = cljs.core.next(seq9917__$2);
  var G__9921 = cljs.core.first(seq9917__$3);
  var seq9917__$4 = cljs.core.next(seq9917__$3);
  var G__9922 = cljs.core.first(seq9917__$4);
  var seq9917__$5 = cljs.core.next(seq9917__$4);
  var G__9923 = cljs.core.first(seq9917__$5);
  var seq9917__$6 = cljs.core.next(seq9917__$5);
  return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(G__9918, G__9919, G__9920, G__9921, G__9922, G__9923, seq9917__$6);
};
cljs.core.update_in.cljs$lang$maxFixedArity = 6;
cljs.core.update = function cljs$core$update(var_args) {
  var args9950 = [];
  var len__7211__auto___9970 = arguments.length;
  var i__7212__auto___9971 = 0;
  while (true) {
    if (i__7212__auto___9971 < len__7211__auto___9970) {
      args9950.push(arguments[i__7212__auto___9971]);
      var G__9972 = i__7212__auto___9971 + 1;
      i__7212__auto___9971 = G__9972;
      continue;
    } else {
    }
    break;
  }
  var G__9959 = args9950.length;
  switch(G__9959) {
    case 3:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args9950.slice(6), 0);
      return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__7230__auto__);
  }
};
cljs.core.update.cljs$core$IFn$_invoke$arity$3 = function(m, k, f) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__9960 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9960) : f.call(null, G__9960);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$4 = function(m, k, f, x) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__9961 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__9962 = x;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9961, G__9962) : f.call(null, G__9961, G__9962);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$5 = function(m, k, f, x, y) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__9963 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__9964 = x;
    var G__9965 = y;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9963, G__9964, G__9965) : f.call(null, G__9963, G__9964, G__9965);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$6 = function(m, k, f, x, y, z) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__9966 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__9967 = x;
    var G__9968 = y;
    var G__9969 = z;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__9966, G__9967, G__9968, G__9969) : f.call(null, G__9966, G__9967, G__9968, G__9969);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$variadic = function(m, k, f, x, y, z, more) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.array_seq([more], 0)));
};
cljs.core.update.cljs$lang$applyTo = function(seq9951) {
  var G__9952 = cljs.core.first(seq9951);
  var seq9951__$1 = cljs.core.next(seq9951);
  var G__9953 = cljs.core.first(seq9951__$1);
  var seq9951__$2 = cljs.core.next(seq9951__$1);
  var G__9954 = cljs.core.first(seq9951__$2);
  var seq9951__$3 = cljs.core.next(seq9951__$2);
  var G__9955 = cljs.core.first(seq9951__$3);
  var seq9951__$4 = cljs.core.next(seq9951__$3);
  var G__9956 = cljs.core.first(seq9951__$4);
  var seq9951__$5 = cljs.core.next(seq9951__$4);
  var G__9957 = cljs.core.first(seq9951__$5);
  var seq9951__$6 = cljs.core.next(seq9951__$5);
  return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(G__9952, G__9953, G__9954, G__9955, G__9956, G__9957, seq9951__$6);
};
cljs.core.update.cljs$lang$maxFixedArity = 6;
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function cljs$core$__GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function cljs$core$pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function cljs$core$pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function cljs$core$pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function cljs$core$pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
};
cljs.core.tail_off = function cljs$core$tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function cljs$core$new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node(edit);
      var _ = cljs.core.pv_aset(r, 0, embed);
      var G__9974 = ll - 5;
      var G__9975 = r;
      ll = G__9974;
      ret = G__9975;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function cljs$core$push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node(parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset(ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget(parent, subidx);
    if (!(child == null)) {
      var node_to_insert = cljs$core$push_tail(pv, level - 5, child, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path(null, level - 5, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function cljs$core$vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function cljs$core$first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__9980 = cljs.core.pv_aget(node, 0);
      var G__9981 = level - 5;
      node = G__9980;
      level = G__9981;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function cljs$core$unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off(pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__9982 = cljs.core.pv_aget(node, i >>> level & 31);
        var G__9983 = level - 5;
        node = G__9982;
        level = G__9983;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function cljs$core$array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for(pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds(i, pv.cnt);
  }
};
cljs.core.do_assoc = function cljs$core$do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node(node);
  if (level === 0) {
    cljs.core.pv_aset(ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset(ret, subidx, cljs$core$do_assoc(pv, level - 5, cljs.core.pv_aget(node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function cljs$core$pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$pop_tail(pv, level - 5, cljs.core.pv_aget(node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for(self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "base", "base", 1825810849, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "v", "v", 1661996586, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function cljs$core$__GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function cljs$core$ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__9993 = init__$2;
              var G__9994 = j + i;
              var G__9995 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9993, G__9994, G__9995) : f.call(null, G__9993, G__9994, G__9995);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__10002 = j + 1;
              var G__10003 = init__$3;
              j = G__10002;
              init__$2 = G__10003;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__10004 = i + len;
        var G__10005 = init__$2;
        i = G__10004;
        init__$1 = G__10005;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for(coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for(coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off(coll__$1) <= n) {
      var new_tail = cljs.core.aclone(self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc(coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj(coll__$1, val);
    } else {
      throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator(this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off(coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for(coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail(coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget(new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6588__auto__ = self__.__hash;
  if (!(h__6588__auto__ == null)) {
    return h__6588__auto__;
  } else {
    var h__6588__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6588__auto____$1;
    return h__6588__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count(other)) {
      var me_iter = cljs.core._iterator(coll__$1);
      var you_iter = cljs.core._iterator(other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential(coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(self__.root) : cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(self__.tail) : cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__9996 = init__$2;
              var G__9997 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9996, G__9997) : f.call(null, G__9996, G__9997);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__10006 = j + 1;
              var G__10007 = init__$3;
              j = G__10006;
              init__$2 = G__10007;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__10008 = i + len;
        var G__10009 = init__$2;
        i = G__10008;
        init__$1 = G__10009;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n(coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      var G__9998 = coll__$1;
      var G__9999 = cljs.core.first_array_for_longvec(coll__$1);
      var G__10000 = 0;
      var G__10001 = 0;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__9998, G__9999, G__10000, G__10001) : cljs.core.chunked_seq.call(null, G__9998, G__9999, G__10000, G__10001);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off(coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__7056__auto___10010 = len;
    var i_10011 = 0;
    while (true) {
      if (i_10011 < n__7056__auto___10010) {
        new_tail[i_10011] = self__.tail[i_10011];
        var G__10012 = i_10011 + 1;
        i_10011 = G__10012;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node(null);
      cljs.core.pv_aset(n_r, 0, self__.root);
      cljs.core.pv_aset(n_r, 1, cljs.core.new_path(null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail(coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__10013 = null;
  var G__10013__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__10013__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__10013 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10013__2.call(this, self__, k);
      case 3:
        return G__10013__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10013.cljs$core$IFn$_invoke$arity$2 = G__10013__2;
  G__10013.cljs$core$IFn$_invoke$arity$3 = G__10013__3;
  return G__10013;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args9992) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9992)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "shift", "shift", -1657295705, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.Symbol(null, "tail", "tail", 494507963, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function cljs$core$__GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone(xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
    while (true) {
      if (i < l) {
        var G__10014 = i + 1;
        var G__10015 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs__$1[i]);
        i = G__10014;
        out = G__10015;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.vec = function cljs$core$vec(coll) {
  if (cljs.core.array_QMARK_(coll)) {
    return cljs.core.PersistentVector.fromArray(coll, true);
  } else {
    return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
  }
};
cljs.core.vector = function cljs$core$vector(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___10017 = arguments.length;
  var i__7212__auto___10018 = 0;
  while (true) {
    if (i__7212__auto___10018 < len__7211__auto___10017) {
      args__7218__auto__.push(arguments[i__7212__auto___10018]);
      var G__10019 = i__7212__auto___10018 + 1;
      i__7212__auto___10018 = G__10019;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
    return cljs.core.PersistentVector.fromArray(args.arr, true);
  } else {
    return cljs.core.vec(args);
  }
};
cljs.core.vector.cljs$lang$maxFixedArity = 0;
cljs.core.vector.cljs$lang$applyTo = function(seq10016) {
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10016));
};
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__10020 = self__.vec;
      var G__10021 = self__.node;
      var G__10022 = self__.i;
      var G__10023 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__10020, G__10021, G__10022, G__10023) : cljs.core.chunked_seq.call(null, G__10020, G__10021, G__10022, G__10023);
    }();
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6588__auto__ = self__.__hash;
  if (!(h__6588__auto__ == null)) {
    return h__6588__auto__;
  } else {
    var h__6588__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6588__auto____$1;
    return h__6588__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(function() {
    var G__10024 = self__.vec;
    var G__10025 = self__.i + self__.off;
    var G__10026 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__10024, G__10025, G__10026) : cljs.core.subvec.call(null, G__10024, G__10025, G__10026);
  }(), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(function() {
    var G__10027 = self__.vec;
    var G__10028 = self__.i + self__.off;
    var G__10029 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__10027, G__10028, G__10029) : cljs.core.subvec.call(null, G__10027, G__10028, G__10029);
  }(), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__10030 = self__.vec;
      var G__10031 = self__.node;
      var G__10032 = self__.i;
      var G__10033 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__10030, G__10031, G__10032, G__10033) : cljs.core.chunked_seq.call(null, G__10030, G__10031, G__10032, G__10033);
    }();
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__10034 = self__.vec;
    var G__10035 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__10036 = end;
    var G__10037 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__10034, G__10035, G__10036, G__10037) : cljs.core.chunked_seq.call(null, G__10034, G__10035, G__10036, G__10037);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(self__.vec, self__.node, self__.i, self__.off, m) : cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__10038 = self__.vec;
    var G__10039 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__10040 = end;
    var G__10041 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__10038, G__10039, G__10040, G__10041) : cljs.core.chunked_seq.call(null, G__10038, G__10039, G__10040, G__10041);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "vec", "vec", 982683596, null), new cljs.core.Symbol(null, "node", "node", -2073234571, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "off", "off", -2047994980, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function cljs$core$__GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.chunked_seq = function cljs$core$chunked_seq(var_args) {
  var args10042 = [];
  var len__7211__auto___10045 = arguments.length;
  var i__7212__auto___10046 = 0;
  while (true) {
    if (i__7212__auto___10046 < len__7211__auto___10045) {
      args10042.push(arguments[i__7212__auto___10046]);
      var G__10047 = i__7212__auto___10046 + 1;
      i__7212__auto___10046 = G__10047;
      continue;
    } else {
    }
    break;
  }
  var G__10044 = args10042.length;
  switch(G__10044) {
    case 3:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10042.length)].join(""));;
  }
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3 = function(vec, i, off) {
  return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 = function(vec, node, i, off) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 = function(vec, node, i, off, meta) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
};
cljs.core.chunked_seq.cljs$lang$maxFixedArity = 5;
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167666463;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var i = self__.start;
  var j = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.end) {
      var init__$2 = function() {
        var G__10050 = init__$1;
        var G__10051 = j;
        var G__10052 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10050, G__10051, G__10052) : f.call(null, G__10050, G__10051, G__10052);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__10069 = i + 1;
        var G__10070 = j + 1;
        var G__10071 = init__$2;
        i = G__10069;
        j = G__10070;
        init__$1 = G__10071;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds(n, self__.end - self__.start);
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  var G__10053 = self__.meta;
  var G__10054 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v, v_pos, val);
  var G__10055 = self__.start;
  var G__10056 = function() {
    var x__6484__auto__ = self__.end;
    var y__6485__auto__ = v_pos + 1;
    return x__6484__auto__ > y__6485__auto__ ? x__6484__auto__ : y__6485__auto__;
  }();
  var G__10057 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__10053, G__10054, G__10055, G__10056, G__10057) : cljs.core.build_subvec.call(null, G__10053, G__10054, G__10055, G__10056, G__10057);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    var G__10058 = self__.meta;
    var G__10059 = self__.v;
    var G__10060 = self__.start;
    var G__10061 = self__.end - 1;
    var G__10062 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__10058, G__10059, G__10060, G__10061, G__10062) : cljs.core.build_subvec.call(null, G__10058, G__10059, G__10060, G__10061, G__10062);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6588__auto__ = self__.__hash;
  if (!(h__6588__auto__ == null)) {
    return h__6588__auto__;
  } else {
    var h__6588__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6588__auto____$1;
    return h__6588__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n(coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function cljs$core$subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return cljs$core$subvec_seq(i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq(self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(meta__$1, self__.v, self__.start, self__.end, self__.__hash) : cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__10064 = self__.meta;
  var G__10065 = cljs.core._assoc_n(self__.v, self__.end, o);
  var G__10066 = self__.start;
  var G__10067 = self__.end + 1;
  var G__10068 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__10064, G__10065, G__10066, G__10067, G__10068) : cljs.core.build_subvec.call(null, G__10064, G__10065, G__10066, G__10067, G__10068);
};
cljs.core.Subvec.prototype.call = function() {
  var G__10072 = null;
  var G__10072__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__10072__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__10072 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10072__2.call(this, self__, k);
      case 3:
        return G__10072__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10072.cljs$core$IFn$_invoke$arity$2 = G__10072__2;
  G__10072.cljs$core$IFn$_invoke$arity$3 = G__10072__3;
  return G__10072;
}();
cljs.core.Subvec.prototype.apply = function(self__, args10049) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10049)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function cljs$core$__GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.build_subvec = function cljs$core$build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__10073 = meta;
      var G__10074 = v.v;
      var G__10075 = v.start + start;
      var G__10076 = v.start + end;
      var G__10077 = __hash;
      meta = G__10073;
      v = G__10074;
      start = G__10075;
      end = G__10076;
      __hash = G__10077;
      continue;
    } else {
      var c = cljs.core.count(v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function cljs$core$subvec(var_args) {
  var args10078 = [];
  var len__7211__auto___10081 = arguments.length;
  var i__7212__auto___10082 = 0;
  while (true) {
    if (i__7212__auto___10082 < len__7211__auto___10081) {
      args10078.push(arguments[i__7212__auto___10082]);
      var G__10083 = i__7212__auto___10082 + 1;
      i__7212__auto___10082 = G__10083;
      continue;
    } else {
    }
    break;
  }
  var G__10080 = args10078.length;
  switch(G__10080) {
    case 2:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10078.length)].join(""));;
  }
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$2 = function(v, start) {
  return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 = function(v, start, end) {
  return cljs.core.build_subvec(null, v, start, end, null);
};
cljs.core.subvec.cljs$lang$maxFixedArity = 3;
cljs.core.tv_ensure_editable = function cljs$core$tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
  }
};
cljs.core.tv_editable_root = function cljs$core$tv_editable_root(node) {
  return new cljs.core.VectorNode({}, cljs.core.aclone(node.arr));
};
cljs.core.tv_editable_tail = function cljs$core$tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy(tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function cljs$core$tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset(ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget(ret, subidx);
    if (!(child == null)) {
      return cljs$core$tv_push_tail(tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function cljs$core$tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$tv_pop_tail(tv, level - 5, cljs.core.pv_aget(node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function cljs$core$unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off(tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__10096 = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> level & 31));
        var G__10097 = level - 5;
        node = G__10096;
        level = G__10097;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition1$ = 88;
  this.cljs$lang$protocol_mask$partition0$ = 275;
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off(tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path(self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail(tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off(tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy(self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_(tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off(tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function cljs$core$go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset(node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset(node__$1, subidx, cljs$core$go(level - 5, cljs.core.pv_aget(node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_(tcoll__$1, val);
      } else {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail(tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit, cljs.core.pv_aget(new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for(coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.call = function() {
  var G__10101 = null;
  var G__10101__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10101__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10101 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10101__2.call(this, self__, k);
      case 3:
        return G__10101__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10101.cljs$core$IFn$_invoke$arity$2 = G__10101__2;
  G__10101.cljs$core$IFn$_invoke$arity$3 = G__10101__3;
  return G__10101;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args10098) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10098)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "shift", "shift", -1657295705, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "root", "root", 1191874074, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "tail", "tail", 494507963, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function cljs$core$__GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueIter = function(fseq, riter) {
  this.fseq = fseq;
  this.riter = riter;
};
cljs.core.PersistentQueueIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var or__6153__auto__ = cljs.core.some_QMARK_(self__.fseq) && cljs.core.seq(self__.fseq);
  if (or__6153__auto__) {
    return or__6153__auto__;
  } else {
    var and__6141__auto__ = cljs.core.some_QMARK_(self__.riter);
    if (and__6141__auto__) {
      return self__.riter.hasNext();
    } else {
      return and__6141__auto__;
    }
  }
};
cljs.core.PersistentQueueIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (cljs.core.some_QMARK_(self__.fseq)) {
    var ret = cljs.core.first(self__.fseq);
    self__.fseq = cljs.core.next(self__.fseq);
    return ret;
  } else {
    if (cljs.core.some_QMARK_(self__.riter) && self__.riter.hasNext()) {
      return self__.riter.next();
    } else {
      throw new Error("No such element");
    }
  }
};
cljs.core.PersistentQueueIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.PersistentQueueIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "fseq", "fseq", -1466412450, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "riter", "riter", -237834262, null)], null);
};
cljs.core.PersistentQueueIter.cljs$lang$type = true;
cljs.core.PersistentQueueIter.cljs$lang$ctorStr = "cljs.core/PersistentQueueIter";
cljs.core.PersistentQueueIter.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/PersistentQueueIter");
};
cljs.core.__GT_PersistentQueueIter = function cljs$core$__GT_PersistentQueueIter(fseq, riter) {
  return new cljs.core.PersistentQueueIter(fseq, riter);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6588__auto__ = self__.__hash;
  if (!(h__6588__auto__ == null)) {
    return h__6588__auto__;
  } else {
    var h__6588__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6588__auto____$1;
    return h__6588__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4655__auto__ = cljs.core.next(self__.front);
  if (temp__4655__auto__) {
    var f1 = temp__4655__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty(coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentQueueSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "front", "front", 117022539, null), new cljs.core.Symbol(null, "rear", "rear", -900164830, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function cljs$core$__GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueIter(self__.front, cljs.core._iterator(self__.rear));
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4655__auto__ = cljs.core.next(self__.front);
    if (temp__4655__auto__) {
      var f1 = temp__4655__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq(self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6588__auto__ = self__.__hash;
  if (!(h__6588__auto__ == null)) {
    return h__6588__auto__;
  } else {
    var h__6588__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6588__auto____$1;
    return h__6588__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentQueue.EMPTY, self__.meta);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest(cljs.core.seq(coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq(self__.rear);
  if (cljs.core.truth_(function() {
    var or__6153__auto__ = self__.front;
    if (cljs.core.truth_(or__6153__auto__)) {
      return or__6153__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
      var or__6153__auto__ = self__.rear;
      if (cljs.core.truth_(or__6153__auto__)) {
        return or__6153__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "front", "front", 117022539, null), new cljs.core.Symbol(null, "rear", "rear", -900164830, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function cljs$core$__GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function cljs$core$__GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function cljs$core$equiv_map(x, y) {
  return cljs.core.boolean$(cljs.core.map_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? cljs.core.every_QMARK_(cljs.core.identity, cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(xkv) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function cljs$core$scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__10102 = i + incr;
        i = G__10102;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function cljs$core$obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash(a);
  var b__$1 = cljs.core.hash(b);
  if (a__$1 < b__$1) {
    return -1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function cljs$core$obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta(m);
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__10103 = i + 1;
      var G__10104 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, so[k__$1]);
      i = G__10103;
      out = G__10104;
      continue;
    } else {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function cljs$core$obj_clone(obj, ks) {
  var new_obj = {};
  var l = ks.length;
  var i_10109 = 0;
  while (true) {
    if (i_10109 < l) {
      var k_10110 = ks[i_10109];
      new_obj[k_10110] = obj[k_10110];
      var G__10111 = i_10109 + 1;
      i_10109 = G__10111;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq(keys__$1)) {
      var k = cljs.core.first(keys__$1);
      var init__$2 = function() {
        var G__10114 = init__$1;
        var G__10115 = k;
        var G__10116 = self__.strobj[k];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10114, G__10115, G__10116) : f.call(null, G__10114, G__10115, G__10116);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__10117 = cljs.core.rest(keys__$1);
        var G__10118 = init__$2;
        keys__$1 = G__10117;
        init__$1 = G__10118;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6588__auto__ = self__.__hash;
  if (!(h__6588__auto__ == null)) {
    return h__6588__auto__;
  } else {
    var h__6588__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__6588__auto____$1;
    return h__6588__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone(self__.keys);
    var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array(1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array(1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone(self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(coll__$1) {
      return function(p1__10112_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__10112_SHARP_, self__.strobj[p1__10112_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__10119 = null;
  var G__10119__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10119__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10119 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10119__2.call(this, self__, k);
      case 3:
        return G__10119__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10119.cljs$core$IFn$_invoke$arity$2 = G__10119__2;
  G__10119.cljs$core$IFn$_invoke$arity$3 = G__10119__3;
  return G__10119;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args10113) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10113)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "keys", "keys", -1586012071, null), new cljs.core.Symbol(null, "strobj", "strobj", 1088091283, null), new cljs.core.Symbol(null, "update-count", "update-count", -411982269, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function cljs$core$__GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], {}, 0, cljs.core.empty_unordered_hash);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.RecordIter = function(i, record, base_count, fields, ext_map_iter) {
  this.i = i;
  this.record = record;
  this.base_count = base_count;
  this.fields = fields;
  this.ext_map_iter = ext_map_iter;
};
cljs.core.RecordIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var or__6153__auto__ = self__.i < self__.base_count;
  if (or__6153__auto__) {
    return or__6153__auto__;
  } else {
    return self__.ext_map_iter.hasNext();
  }
};
cljs.core.RecordIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (self__.i < self__.base_count) {
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(self__.fields, self__.i);
    self__.i = self__.i + 1;
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(self__.record, k)], null);
  } else {
    return self__.ext_map_iter.next();
  }
};
cljs.core.RecordIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.RecordIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "record", "record", 861424668, null), new cljs.core.Symbol(null, "base-count", "base-count", -1180647182, null), new cljs.core.Symbol(null, "fields", "fields", -291534703, null), new cljs.core.Symbol(null, 
  "ext-map-iter", "ext-map-iter", -1215982757, null)], null);
};
cljs.core.RecordIter.cljs$lang$type = true;
cljs.core.RecordIter.cljs$lang$ctorStr = "cljs.core/RecordIter";
cljs.core.RecordIter.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/RecordIter");
};
cljs.core.__GT_RecordIter = function cljs$core$__GT_RecordIter(i, record, base_count, fields, ext_map_iter) {
  return new cljs.core.RecordIter(i, record, base_count, fields, ext_map_iter);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__10122 = cljs.core.first(self__.s);
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10122, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10122, 1, null);
    self__.s = cljs.core.next(self__.s);
    return {"value":[k, v], "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6EntriesIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function cljs$core$__GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function cljs$core$es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return {"value":[x, x], "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6SetEntriesIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function cljs$core$__GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function cljs$core$es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
};
cljs.core.array_index_of_nil_QMARK_ = function cljs$core$array_index_of_nil_QMARK_(arr) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__10123 = i + 2;
        i = G__10123;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_keyword_QMARK_ = function cljs$core$array_index_of_keyword_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] instanceof cljs.core.Keyword && kstr === arr[i].fqn) {
        return i;
      } else {
        var G__10124 = i + 2;
        i = G__10124;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_symbol_QMARK_ = function cljs$core$array_index_of_symbol_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] instanceof cljs.core.Symbol && kstr === arr[i].str) {
        return i;
      } else {
        var G__10125 = i + 2;
        i = G__10125;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_identical_QMARK_ = function cljs$core$array_index_of_identical_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__10126 = i + 2;
        i = G__10126;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_equiv_QMARK_ = function cljs$core$array_index_of_equiv_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
        return i;
      } else {
        var G__10127 = i + 2;
        i = G__10127;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of = function cljs$core$array_index_of(arr, k) {
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_index_of_keyword_QMARK_(arr, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_index_of_identical_QMARK_(arr, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_index_of_symbol_QMARK_(arr, k);
      } else {
        if (k == null) {
          return cljs.core.array_index_of_nil_QMARK_(arr);
        } else {
          return cljs.core.array_index_of_equiv_QMARK_(arr, k);
        }
      }
    }
  }
};
cljs.core.array_map_index_of = function cljs$core$array_map_index_of(m, k) {
  return cljs.core.array_index_of(m.arr, k);
};
cljs.core.array_extend_kv = function cljs$core$array_extend_kv(arr, k, v) {
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_10128 = 0;
  while (true) {
    if (i_10128 < l) {
      narr[i_10128] = arr[i_10128];
      var G__10129 = i_10128 + 1;
      i_10128 = G__10129;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.array_map_extend_kv = function cljs$core$array_map_extend_kv(m, k, v) {
  return cljs.core.array_extend_kv(m.arr, k, v);
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return (self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function cljs$core$__GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.persistent_array_map_seq = function cljs$core$persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null)], null);
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function cljs$core$__GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__10131 = cljs.core.seq(coll);
  var chunk__10132 = null;
  var count__10133 = 0;
  var i__10134 = 0;
  while (true) {
    if (i__10134 < count__10133) {
      var vec__10135 = chunk__10132.cljs$core$IIndexed$_nth$arity$2(null, i__10134);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10135, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10135, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__10144 = seq__10131;
      var G__10145 = chunk__10132;
      var G__10146 = count__10133;
      var G__10147 = i__10134 + 1;
      seq__10131 = G__10144;
      chunk__10132 = G__10145;
      count__10133 = G__10146;
      i__10134 = G__10147;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__10131);
      if (temp__4657__auto__) {
        var seq__10131__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10131__$1)) {
          var c__6956__auto__ = cljs.core.chunk_first(seq__10131__$1);
          var G__10148 = cljs.core.chunk_rest(seq__10131__$1);
          var G__10149 = c__6956__auto__;
          var G__10150 = cljs.core.count(c__6956__auto__);
          var G__10151 = 0;
          seq__10131 = G__10148;
          chunk__10132 = G__10149;
          count__10133 = G__10150;
          i__10134 = G__10151;
          continue;
        } else {
          var vec__10136 = cljs.core.first(seq__10131__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10136, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10136, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__10152 = cljs.core.next(seq__10131__$1);
          var G__10153 = null;
          var G__10154 = 0;
          var G__10155 = 0;
          seq__10131 = G__10152;
          chunk__10132 = G__10153;
          count__10133 = G__10154;
          i__10134 = G__10155;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var G__10137 = init__$1;
        var G__10138 = self__.arr[i];
        var G__10139 = self__.arr[i + 1];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10137, G__10138, G__10139) : f.call(null, G__10137, G__10138, G__10139);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__10156 = i + 2;
        var G__10157 = init__$2;
        i = G__10156;
        init__$1 = G__10157;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6588__auto__ = self__.__hash;
  if (!(h__6588__auto__ == null)) {
    return h__6588__auto__;
  } else {
    var h__6588__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__6588__auto____$1;
    return h__6588__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (!(other == null) ? other.cljs$lang$protocol_mask$partition0$ & 1024 || other.cljs$core$IMap$ ? true : false : false) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[i + 1], v)) {
              var G__10158 = i + 2;
              i = G__10158;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map(coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap({}, self__.arr.length, cljs.core.aclone(self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty(coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, self__.arr[s])) {
            var G__10159 = s + 2;
            var G__10160 = d;
            s = G__10159;
            d = G__10160;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__10161 = s + 2;
            var G__10162 = d + 2;
            s = G__10161;
            d = G__10162;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv(coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__10143 = cljs.core.aclone(self__.arr);
        G__10143[idx + 1] = v;
        return G__10143;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return !(cljs.core.array_map_index_of(coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq(self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__10163 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__10164 = cljs.core.next(es);
          ret = G__10163;
          es = G__10164;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__10165 = null;
  var G__10165__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10165__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10165 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10165__2.call(this, self__, k);
      case 3:
        return G__10165__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10165.cljs$core$IFn$_invoke$arity$2 = G__10165__2;
  G__10165.cljs$core$IFn$_invoke$arity$3 = G__10165__3;
  return G__10165;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args10130) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10130)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function cljs$core$__GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var arr__$2 = no_check ? arr__$1 : function() {
    var ret = [];
    var i_10166 = 0;
    while (true) {
      if (i_10166 < arr__$1.length) {
        var k_10167 = arr__$1[i_10166];
        var v_10168 = arr__$1[i_10166 + 1];
        var idx_10169 = cljs.core.array_index_of(ret, k_10167);
        if (idx_10169 === -1) {
          ret.push(k_10167);
          ret.push(v_10168);
        } else {
        }
        var G__10170 = i_10166 + 2;
        i_10166 = G__10170;
        continue;
      } else {
      }
      break;
    }
    return ret;
  }();
  var cnt = arr__$2.length / 2;
  return new cljs.core.PersistentArrayMap(null, cnt, arr__$2, null);
};
cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot(self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 2048 || o.cljs$core$IMapEntry$ ? true : !o.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o)) {
      return cljs.core._assoc_BANG_(tcoll__$1, cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.key.call(null, o), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4655__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4655__auto__)) {
          var e = temp__4655__auto__;
          var G__10173 = cljs.core.next(es);
          var G__10174 = cljs.core._assoc_BANG_(tcoll__$2, cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e));
          es = G__10173;
          tcoll__$2 = G__10174;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot(self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(self__.len, self__.arr) : cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__10172_10175 = self__.arr;
      G__10172_10175.pop();
      G__10172_10175.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "editable?", "editable?", -164945806, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "len", "len", -1230778691, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), 
  new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function cljs$core$__GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function cljs$core$array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__10176 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]);
      var G__10177 = i + 2;
      out = G__10176;
      i = G__10177;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function cljs$core$__GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function cljs$core$key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_(key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
    }
  }
};
cljs.core.mask = function cljs$core$mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function cljs$core$clone_and_set(var_args) {
  var args10178 = [];
  var len__7211__auto___10183 = arguments.length;
  var i__7212__auto___10184 = 0;
  while (true) {
    if (i__7212__auto___10184 < len__7211__auto___10183) {
      args10178.push(arguments[i__7212__auto___10184]);
      var G__10185 = i__7212__auto___10184 + 1;
      i__7212__auto___10184 = G__10185;
      continue;
    } else {
    }
    break;
  }
  var G__10180 = args10178.length;
  switch(G__10180) {
    case 3:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10178.length)].join(""));;
  }
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3 = function(arr, i, a) {
  var G__10181 = cljs.core.aclone(arr);
  G__10181[i] = a;
  return G__10181;
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5 = function(arr, i, a, j, b) {
  var G__10182 = cljs.core.aclone(arr);
  G__10182[i] = a;
  G__10182[j] = b;
  return G__10182;
};
cljs.core.clone_and_set.cljs$lang$maxFixedArity = 5;
cljs.core.remove_pair = function cljs$core$remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function cljs$core$bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count(bitmap & bit - 1);
};
cljs.core.bitpos = function cljs$core$bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function cljs$core$edit_and_set(var_args) {
  var args10187 = [];
  var len__7211__auto___10190 = arguments.length;
  var i__7212__auto___10191 = 0;
  while (true) {
    if (i__7212__auto___10191 < len__7211__auto___10190) {
      args10187.push(arguments[i__7212__auto___10191]);
      var G__10192 = i__7212__auto___10191 + 1;
      i__7212__auto___10191 = G__10192;
      continue;
    } else {
    }
    break;
  }
  var G__10189 = args10187.length;
  switch(G__10189) {
    case 4:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 6:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10187.length)].join(""));;
  }
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4 = function(inode, edit, i, a) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  return editable;
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6 = function(inode, edit, i, a, j, b) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  editable.arr[j] = b;
  return editable;
};
cljs.core.edit_and_set.cljs$lang$maxFixedArity = 6;
cljs.core.inode_kv_reduce = function cljs$core$inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          var G__10197 = init__$1;
          var G__10198 = k;
          var G__10199 = arr[i + 1];
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10197, G__10198, G__10199) : f.call(null, G__10197, G__10198, G__10199);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__10200 = i + 2;
        var G__10201 = init__$2;
        i = G__10200;
        init__$1 = G__10201;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.NodeIterator = function(arr, i, next_entry, next_iter) {
  this.arr = arr;
  this.i = i;
  this.next_entry = next_entry;
  this.next_iter = next_iter;
};
cljs.core.NodeIterator.prototype.advance = function() {
  var self__ = this;
  var this$ = this;
  var len = self__.arr.length;
  while (true) {
    if (self__.i < len) {
      var key = self__.arr[self__.i];
      var node_or_val = self__.arr[self__.i + 1];
      var found = cljs.core.some_QMARK_(key) ? self__.next_entry = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key, node_or_val], null) : cljs.core.some_QMARK_(node_or_val) ? function() {
        var new_iter = cljs.core._iterator(node_or_val);
        if (new_iter.hasNext()) {
          return self__.next_iter = new_iter;
        } else {
          return false;
        }
      }() : false;
      self__.i = self__.i + 2;
      if (found) {
        return true;
      } else {
        continue;
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core.NodeIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  var or__6153__auto__ = cljs.core.some_QMARK_(self__.next_entry);
  if (or__6153__auto__) {
    return or__6153__auto__;
  } else {
    var or__6153__auto____$1 = cljs.core.some_QMARK_(self__.next_iter);
    if (or__6153__auto____$1) {
      return or__6153__auto____$1;
    } else {
      return this$.advance();
    }
  }
};
cljs.core.NodeIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.some_QMARK_(self__.next_entry)) {
    var ret = self__.next_entry;
    self__.next_entry = null;
    return ret;
  } else {
    if (cljs.core.some_QMARK_(self__.next_iter)) {
      var ret = self__.next_iter.next();
      if (self__.next_iter.hasNext()) {
      } else {
        self__.next_iter = null;
      }
      return ret;
    } else {
      if (this$.advance()) {
        return this$.next();
      } else {
        throw new Error("No such element");
      }
    }
  }
};
cljs.core.NodeIterator.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.NodeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "next-entry", "next-entry", 1091342476, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "next-iter", "next-iter", 1526626239, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.NodeIterator.cljs$lang$type = true;
cljs.core.NodeIterator.cljs$lang$ctorStr = "cljs.core/NodeIterator";
cljs.core.NodeIterator.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/NodeIterator");
};
cljs.core.__GT_NodeIterator = function cljs$core$__GT_NodeIterator(arr, i, next_entry, next_iter) {
  return new cljs.core.NodeIterator(arr, i, next_entry, next_iter);
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count(self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_10215 = 0;
        var j_10216 = 0;
        while (true) {
          if (i_10215 < 32) {
            if ((self__.bitmap >>> i_10215 & 1) === 0) {
              var G__10217 = i_10215 + 1;
              var G__10218 = j_10216;
              i_10215 = G__10217;
              j_10216 = G__10218;
              continue;
            } else {
              nodes[i_10215] = !(self__.arr[j_10216] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(self__.arr[j_10216]), self__.arr[j_10216], self__.arr[j_10216 + 1], added_leaf_QMARK_) : self__.arr[j_10216 + 1];
              var G__10219 = i_10215 + 1;
              var G__10220 = j_10216 + 2;
              i_10215 = G__10219;
              j_10216 = G__10220;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * idx, null, 2 * idx + 1, function() {
          var G__10202 = edit__$1;
          var G__10203 = shift + 5;
          var G__10204 = key_or_nil;
          var G__10205 = val_or_node;
          var G__10206 = hash;
          var G__10207 = key;
          var G__10208 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(G__10202, G__10203, G__10204, G__10205, G__10206, G__10207, G__10208) : cljs.core.create_node.call(null, G__10202, G__10203, G__10204, G__10205, G__10206, G__10207, G__10208);
        }());
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_10221 = 0;
      var j_10222 = 0;
      while (true) {
        if (i_10221 < 32) {
          if ((self__.bitmap >>> i_10221 & 1) === 0) {
            var G__10223 = i_10221 + 1;
            var G__10224 = j_10222;
            i_10221 = G__10223;
            j_10222 = G__10224;
            continue;
          } else {
            nodes[i_10221] = !(self__.arr[j_10222] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(self__.arr[j_10222]), self__.arr[j_10222], self__.arr[j_10222 + 1], added_leaf_QMARK_) : self__.arr[j_10222 + 1];
            var G__10225 = i_10221 + 1;
            var G__10226 = j_10222 + 2;
            i_10221 = G__10225;
            j_10222 = G__10226;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr, 2 * idx, null, 2 * idx + 1, function() {
          var G__10209 = shift + 5;
          var G__10210 = key_or_nil;
          var G__10211 = val_or_node;
          var G__10212 = hash;
          var G__10213 = key;
          var G__10214 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__10209, G__10210, G__10211, G__10212, G__10213, G__10214) : cljs.core.create_node.call(null, G__10209, G__10210, G__10211, G__10212, G__10213, G__10214);
        }()));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.cljs$core$IIterable$ = true;
cljs.core.BitmapIndexedNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeIterator(self__.arr, 0, null, null);
};
cljs.core.BitmapIndexedNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs.core.with_meta(new cljs.core.Symbol(null, "bitmap", "bitmap", 501334601, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function cljs$core$__GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function cljs$core$pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__10227 = i + 1;
        var G__10228 = j + 2;
        var G__10229 = bitmap | 1 << i;
        i = G__10227;
        j = G__10228;
        bitmap = G__10229;
        continue;
      } else {
        var G__10230 = i + 1;
        var G__10231 = j;
        var G__10232 = bitmap;
        i = G__10230;
        j = G__10231;
        bitmap = G__10232;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNodeIterator = function(arr, i, next_iter) {
  this.arr = arr;
  this.i = i;
  this.next_iter = next_iter;
};
cljs.core.ArrayNodeIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  var len = self__.arr.length;
  while (true) {
    if (!(cljs.core.some_QMARK_(self__.next_iter) && self__.next_iter.hasNext())) {
      if (self__.i < len) {
        var node = self__.arr[self__.i];
        self__.i = self__.i + 1;
        if (cljs.core.some_QMARK_(node)) {
          self__.next_iter = cljs.core._iterator(node);
        } else {
        }
        continue;
      } else {
        return false;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.ArrayNodeIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (this$.hasNext()) {
    return self__.next_iter.next();
  } else {
    throw new Error("No such element");
  }
};
cljs.core.ArrayNodeIterator.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayNodeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "next-iter", "next-iter", 1526626239, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayNodeIterator.cljs$lang$type = true;
cljs.core.ArrayNodeIterator.cljs$lang$ctorStr = "cljs.core/ArrayNodeIterator";
cljs.core.ArrayNodeIterator.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/ArrayNodeIterator");
};
cljs.core.__GT_ArrayNodeIterator = function cljs$core$__GT_ArrayNodeIterator(arr, i, next_iter) {
  return new cljs.core.ArrayNodeIterator(arr, i, next_iter);
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone(self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_(init__$2)) {
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
        } else {
          var G__10233 = i + 1;
          var G__10234 = init__$2;
          i = G__10233;
          init__$1 = G__10234;
          continue;
        }
      } else {
        var G__10235 = i + 1;
        var G__10236 = init__$1;
        i = G__10235;
        init__$1 = G__10236;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.prototype.cljs$core$IIterable$ = true;
cljs.core.ArrayNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeIterator(self__.arr, 0, null);
};
cljs.core.ArrayNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function cljs$core$__GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function cljs$core$hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test(key, arr[i])) {
        return i;
      } else {
        var G__10237 = i + 2;
        i = G__10237;
        continue;
      }
    } else {
      return -1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return (new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx + 1, val));
      }
    }
  } else {
    return (new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair(self__.arr, cljs.core.quot(idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.prototype.cljs$core$IIterable$ = true;
cljs.core.HashCollisionNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeIterator(self__.arr, 0, null, null);
};
cljs.core.HashCollisionNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs.core.with_meta(new cljs.core.Symbol(null, "collision-hash", "collision-hash", -35831342, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function cljs$core$__GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function cljs$core$create_node(var_args) {
  var args10238 = [];
  var len__7211__auto___10241 = arguments.length;
  var i__7212__auto___10242 = 0;
  while (true) {
    if (i__7212__auto___10242 < len__7211__auto___10241) {
      args10238.push(arguments[i__7212__auto___10242]);
      var G__10243 = i__7212__auto___10242 + 1;
      i__7212__auto___10242 = G__10243;
      continue;
    } else {
    }
    break;
  }
  var G__10240 = args10238.length;
  switch(G__10240) {
    case 6:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10238.length)].join(""));;
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 = function(shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$lang$maxFixedArity = 7;
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6588__auto__ = self__.__hash;
  if (!(h__6588__auto__ == null)) {
    return h__6588__auto__;
  } else {
    var h__6588__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6588__auto____$1;
    return h__6588__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    var G__10245 = self__.nodes;
    var G__10246 = self__.i + 2;
    var G__10247 = null;
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__10245, G__10246, G__10247) : cljs.core.create_inode_seq.call(null, G__10245, G__10246, G__10247);
  } else {
    var G__10248 = self__.nodes;
    var G__10249 = self__.i;
    var G__10250 = cljs.core.next(self__.s);
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__10248, G__10249, G__10250) : cljs.core.create_inode_seq.call(null, G__10248, G__10249, G__10250);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.NodeSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "nodes", "nodes", -459054278, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 
  875778266), true], null))], null);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function cljs$core$__GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.create_inode_seq = function cljs$core$create_inode_seq(var_args) {
  var args10251 = [];
  var len__7211__auto___10254 = arguments.length;
  var i__7212__auto___10255 = 0;
  while (true) {
    if (i__7212__auto___10255 < len__7211__auto___10254) {
      args10251.push(arguments[i__7212__auto___10255]);
      var G__10256 = i__7212__auto___10255 + 1;
      i__7212__auto___10255 = G__10256;
      continue;
    } else {
    }
    break;
  }
  var G__10253 = args10251.length;
  switch(G__10253) {
    case 1:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10251.length)].join(""));;
  }
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 = function(nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        if (!(nodes[j] == null)) {
          return new cljs.core.NodeSeq(null, nodes, j, null, null);
        } else {
          var temp__4655__auto__ = nodes[j + 1];
          if (cljs.core.truth_(temp__4655__auto__)) {
            var node = temp__4655__auto__;
            var temp__4655__auto____$1 = node.inode_seq();
            if (cljs.core.truth_(temp__4655__auto____$1)) {
              var node_seq = temp__4655__auto____$1;
              return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
            } else {
              var G__10258 = j + 2;
              j = G__10258;
              continue;
            }
          } else {
            var G__10259 = j + 2;
            j = G__10259;
            continue;
          }
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.NodeSeq(null, nodes, i, s, null);
  }
};
cljs.core.create_inode_seq.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6588__auto__ = self__.__hash;
  if (!(h__6588__auto__ == null)) {
    return h__6588__auto__;
  } else {
    var h__6588__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6588__auto____$1;
    return h__6588__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__10260 = null;
  var G__10261 = self__.nodes;
  var G__10262 = self__.i;
  var G__10263 = cljs.core.next(self__.s);
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(G__10260, G__10261, G__10262, G__10263) : cljs.core.create_array_node_seq.call(null, G__10260, G__10261, G__10262, G__10263);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ArrayNodeSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "nodes", "nodes", -459054278, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 
  875778266), true], null))], null);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function cljs$core$__GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.create_array_node_seq = function cljs$core$create_array_node_seq(var_args) {
  var args10264 = [];
  var len__7211__auto___10267 = arguments.length;
  var i__7212__auto___10268 = 0;
  while (true) {
    if (i__7212__auto___10268 < len__7211__auto___10267) {
      args10264.push(arguments[i__7212__auto___10268]);
      var G__10269 = i__7212__auto___10268 + 1;
      i__7212__auto___10268 = G__10269;
      continue;
    } else {
    }
    break;
  }
  var G__10266 = args10264.length;
  switch(G__10266) {
    case 1:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 4:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10264.length)].join(""));;
  }
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(null, nodes, 0, null);
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = function(meta, nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        var temp__4655__auto__ = nodes[j];
        if (cljs.core.truth_(temp__4655__auto__)) {
          var nj = temp__4655__auto__;
          var temp__4655__auto____$1 = nj.inode_seq();
          if (cljs.core.truth_(temp__4655__auto____$1)) {
            var ns = temp__4655__auto____$1;
            return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
          } else {
            var G__10271 = j + 1;
            j = G__10271;
            continue;
          }
        } else {
          var G__10272 = j + 1;
          j = G__10272;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
  }
};
cljs.core.create_array_node_seq.cljs$lang$maxFixedArity = 4;
cljs.core.HashMapIter = function(nil_val, root_iter, seen) {
  this.nil_val = nil_val;
  this.root_iter = root_iter;
  this.seen = seen;
};
cljs.core.HashMapIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.seen && self__.root_iter.hasNext();
};
cljs.core.HashMapIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!self__.seen) {
    self__.seen = true;
    return self__.nil_val;
  } else {
    return self__.root_iter.next();
  }
};
cljs.core.HashMapIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.HashMapIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), new cljs.core.Symbol(null, "root-iter", "root-iter", 1974672108, null), cljs.core.with_meta(new cljs.core.Symbol(null, "seen", "seen", 1121531738, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.HashMapIter.cljs$lang$type = true;
cljs.core.HashMapIter.cljs$lang$ctorStr = "cljs.core/HashMapIter";
cljs.core.HashMapIter.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/HashMapIter");
};
cljs.core.__GT_HashMapIter = function cljs$core$__GT_HashMapIter(nil_val, root_iter, seen) {
  return new cljs.core.HashMapIter(nil_val, root_iter, seen);
};
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__10274 = cljs.core.seq(coll);
  var chunk__10275 = null;
  var count__10276 = 0;
  var i__10277 = 0;
  while (true) {
    if (i__10277 < count__10276) {
      var vec__10278 = chunk__10275.cljs$core$IIndexed$_nth$arity$2(null, i__10277);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10278, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10278, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__10282 = seq__10274;
      var G__10283 = chunk__10275;
      var G__10284 = count__10276;
      var G__10285 = i__10277 + 1;
      seq__10274 = G__10282;
      chunk__10275 = G__10283;
      count__10276 = G__10284;
      i__10277 = G__10285;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__10274);
      if (temp__4657__auto__) {
        var seq__10274__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10274__$1)) {
          var c__6956__auto__ = cljs.core.chunk_first(seq__10274__$1);
          var G__10286 = cljs.core.chunk_rest(seq__10274__$1);
          var G__10287 = c__6956__auto__;
          var G__10288 = cljs.core.count(c__6956__auto__);
          var G__10289 = 0;
          seq__10274 = G__10286;
          chunk__10275 = G__10287;
          count__10276 = G__10288;
          i__10277 = G__10289;
          continue;
        } else {
          var vec__10279 = cljs.core.first(seq__10274__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10279, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10279, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__10290 = cljs.core.next(seq__10274__$1);
          var G__10291 = null;
          var G__10292 = 0;
          var G__10293 = 0;
          seq__10274 = G__10290;
          chunk__10275 = G__10291;
          count__10276 = G__10292;
          i__10277 = G__10293;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(init, null, self__.nil_val) : f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$1) : cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var root_iter = self__.root ? cljs.core._iterator(self__.root) : cljs.core.nil_iter;
  if (self__.has_nil_QMARK_) {
    return new cljs.core.HashMapIter(self__.nil_val, root_iter, false);
  } else {
    return root_iter;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6588__auto__ = self__.__hash;
  if (!(h__6588__auto__ == null)) {
    return h__6588__auto__;
  } else {
    var h__6588__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__6588__auto____$1;
    return h__6588__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap({}, self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash(k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return !(self__.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__10294 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__10295 = cljs.core.next(es);
          ret = G__10294;
          es = G__10295;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__10296 = null;
  var G__10296__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10296__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10296 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10296__2.call(this, self__, k);
      case 3:
        return G__10296__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10296.cljs$core$IFn$_invoke$arity$2 = G__10296__2;
  G__10296.cljs$core$IFn$_invoke$arity$3 = G__10296__3;
  return G__10296;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args10273) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10273)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), cljs.core.with_meta(new cljs.core.Symbol(null, "has-nil?", "has-nil?", 825886722, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", 
  "boolean", -278886877, null)], null)), new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function cljs$core$__GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var len = arr__$1.length;
  var i = 0;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__10297 = i + 2;
      var G__10298 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
      i = G__10297;
      ret = G__10298;
      continue;
    } else {
      return cljs.core._persistent_BANG_(ret);
    }
    break;
  }
};
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__10299 = i + 1;
      var G__10300 = out.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, ks[i], vs[i]);
      i = G__10299;
      out = G__10300;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 2048 || o.cljs$core$IMapEntry$ ? true : !o.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o)) {
      return tcoll.assoc_BANG_(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.key.call(null, o), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4655__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4655__auto__)) {
          var e = temp__4655__auto__;
          var G__10302 = cljs.core.next(es);
          var G__10303 = tcoll__$1.assoc_BANG_(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e));
          es = G__10302;
          tcoll__$1 = G__10303;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null), new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "has-nil?", "has-nil?", 825886722, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, 
  "boolean", "boolean", -278886877, null), new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function cljs$core$__GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function cljs$core$tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__10304 = ascending_QMARK_ ? t.left : t.right;
      var G__10305 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, t);
      t = G__10304;
      stack__$1 = G__10305;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count(cljs.core.next(coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6588__auto__ = self__.__hash;
  if (!(h__6588__auto__ == null)) {
    return h__6588__auto__;
  } else {
    var h__6588__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6588__auto____$1;
    return h__6588__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek(self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "stack", "stack", 847125597, null), cljs.core.with_meta(new cljs.core.Symbol(null, "ascending?", "ascending?", -1938452653, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null)], null)), new cljs.core.Symbol(null, 
  "cnt", "cnt", 1924510325, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function cljs$core$__GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.create_tree_map_seq = function cljs$core$create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function cljs$core$balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function cljs$core$balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function cljs$core$balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right(key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function cljs$core$balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left(key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function cljs$core$tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? cljs$core$tree_map_kv_reduce(node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$1) : cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = function() {
      var G__10315 = init__$1;
      var G__10316 = node.key;
      var G__10317 = node.val;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10315, G__10316, G__10317) : f.call(null, G__10315, G__10316, G__10317);
    }();
    if (cljs.core.reduced_QMARK_(init__$2)) {
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? cljs$core$tree_map_kv_reduce(node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_(init__$3)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$3) : cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del(self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del(self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6588__auto__ = self__.__hash;
  if (!(h__6588__auto__ == null)) {
    return h__6588__auto__;
  } else {
    var h__6588__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6588__auto____$1;
    return h__6588__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__10319 = null;
  var G__10319__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10319__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10319 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10319__2.call(this, self__, k);
      case 3:
        return G__10319__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10319.cljs$core$IFn$_invoke$arity$2 = G__10319__2;
  G__10319.cljs$core$IFn$_invoke$arity$3 = G__10319__3;
  return G__10319;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args10318) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10318)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "left", "left", 1241415590, null), new cljs.core.Symbol(null, "right", "right", 1187949694, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function cljs$core$__GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6588__auto__ = self__.__hash;
  if (!(h__6588__auto__ == null)) {
    return h__6588__auto__;
  } else {
    var h__6588__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__6588__auto____$1;
    return h__6588__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__10321 = null;
  var G__10321__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10321__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10321 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10321__2.call(this, self__, k);
      case 3:
        return G__10321__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10321.cljs$core$IFn$_invoke$arity$2 = G__10321__2;
  G__10321.cljs$core$IFn$_invoke$arity$3 = G__10321__3;
  return G__10321;
}();
cljs.core.RedNode.prototype.apply = function(self__, args10320) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10320)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "left", "left", 1241415590, null), new cljs.core.Symbol(null, "right", "right", 1187949694, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function cljs$core$__GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.tree_map_add = function cljs$core$tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = function() {
      var G__10334 = k;
      var G__10335 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__10334, G__10335) : comp.call(null, G__10334, G__10335);
    }();
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = cljs$core$tree_map_add(comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = cljs$core$tree_map_add(comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function cljs$core$tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, cljs$core$tree_map_append(left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, cljs$core$tree_map_append(left, right.left), right.right, null);
        } else {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function cljs$core$tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = function() {
      var G__10354 = k;
      var G__10355 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__10354, G__10355) : comp.call(null, G__10354, G__10355);
    }();
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append(tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = cljs$core$tree_map_remove(comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del(tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = cljs$core$tree_map_remove(comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del(tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function cljs$core$tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(k, tk) : comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, cljs$core$tree_map_replace(comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, cljs$core$tree_map_replace(comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__10365 = cljs.core.seq(coll);
  var chunk__10366 = null;
  var count__10367 = 0;
  var i__10368 = 0;
  while (true) {
    if (i__10368 < count__10367) {
      var vec__10369 = chunk__10366.cljs$core$IIndexed$_nth$arity$2(null, i__10368);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10369, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10369, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__10375 = seq__10365;
      var G__10376 = chunk__10366;
      var G__10377 = count__10367;
      var G__10378 = i__10368 + 1;
      seq__10365 = G__10375;
      chunk__10366 = G__10376;
      count__10367 = G__10377;
      i__10368 = G__10378;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__10365);
      if (temp__4657__auto__) {
        var seq__10365__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10365__$1)) {
          var c__6956__auto__ = cljs.core.chunk_first(seq__10365__$1);
          var G__10379 = cljs.core.chunk_rest(seq__10365__$1);
          var G__10380 = c__6956__auto__;
          var G__10381 = cljs.core.count(c__6956__auto__);
          var G__10382 = 0;
          seq__10365 = G__10379;
          chunk__10366 = G__10380;
          count__10367 = G__10381;
          i__10368 = G__10382;
          continue;
        } else {
          var vec__10370 = cljs.core.first(seq__10365__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10370, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10370, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__10383 = cljs.core.next(seq__10365__$1);
          var G__10384 = null;
          var G__10385 = 0;
          var G__10386 = 0;
          seq__10365 = G__10383;
          chunk__10366 = G__10384;
          count__10367 = G__10385;
          i__10368 = G__10386;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = function() {
        var G__10371 = k;
        var G__10372 = t.key;
        return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__10371, G__10372) : self__.comp.call(null, G__10371, G__10372);
      }();
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__10387 = t.left;
          t = G__10387;
          continue;
        } else {
          var G__10388 = t.right;
          t = G__10388;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce(self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6588__auto__ = self__.__hash;
  if (!(h__6588__auto__ == null)) {
    return h__6588__auto__;
  } else {
    var h__6588__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__6588__auto____$1;
    return h__6588__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, 0);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove(self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add(self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace(self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return !(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__10389 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__10390 = cljs.core.next(es);
          ret = G__10389;
          es = G__10390;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__10391 = null;
  var G__10391__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10391__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10391 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10391__2.call(this, self__, k);
      case 3:
        return G__10391__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10391.cljs$core$IFn$_invoke$arity$2 = G__10391__2;
  G__10391.cljs$core$IFn$_invoke$arity$3 = G__10391__3;
  return G__10391;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args10364) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10364)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = function() {
          var G__10373 = k;
          var G__10374 = t.key;
          return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__10373, G__10374) : self__.comp.call(null, G__10373, G__10374);
        }();
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__10392 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__10393 = t.left;
              stack = G__10392;
              t = G__10393;
              continue;
            } else {
              var G__10394 = stack;
              var G__10395 = t.right;
              stack = G__10394;
              t = G__10395;
              continue;
            }
          } else {
            if (c > 0) {
              var G__10396 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__10397 = t.right;
              stack = G__10396;
              t = G__10397;
              continue;
            } else {
              var G__10398 = stack;
              var G__10399 = t.left;
              stack = G__10398;
              t = G__10399;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(entry) : cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "comp", "comp", -1462482139, null), new cljs.core.Symbol(null, "tree", "tree", 1444219499, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function cljs$core$__GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.hash_map = function cljs$core$hash_map(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___10401 = arguments.length;
  var i__7212__auto___10402 = 0;
  while (true) {
    if (i__7212__auto___10402 < len__7211__auto___10401) {
      args__7218__auto__.push(arguments[i__7212__auto___10402]);
      var G__10403 = i__7212__auto___10402 + 1;
      i__7212__auto___10402 = G__10403;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (in$) {
      var G__10404 = cljs.core.nnext(in$);
      var G__10405 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__10404;
      out = G__10405;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.hash_map.cljs$lang$maxFixedArity = 0;
cljs.core.hash_map.cljs$lang$applyTo = function(seq10400) {
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10400));
};
cljs.core.array_map = function cljs$core$array_map(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___10407 = arguments.length;
  var i__7212__auto___10408 = 0;
  while (true) {
    if (i__7212__auto___10408 < len__7211__auto___10407) {
      args__7218__auto__.push(arguments[i__7212__auto___10408]);
      var G__10409 = i__7212__auto___10408 + 1;
      i__7212__auto___10408 = G__10409;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var arr = keyvals instanceof cljs.core.IndexedSeq && keyvals.i === 0 ? keyvals.arr : cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(keyvals);
  return cljs.core.PersistentArrayMap.fromArray(arr, true, false);
};
cljs.core.array_map.cljs$lang$maxFixedArity = 0;
cljs.core.array_map.cljs$lang$applyTo = function(seq10406) {
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10406));
};
cljs.core.obj_map = function cljs$core$obj_map(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___10413 = arguments.length;
  var i__7212__auto___10414 = 0;
  while (true) {
    if (i__7212__auto___10414 < len__7211__auto___10413) {
      args__7218__auto__.push(arguments[i__7212__auto___10414]);
      var G__10415 = i__7212__auto___10414 + 1;
      i__7212__auto___10414 = G__10415;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var ks = [];
  var obj = {};
  var kvs = cljs.core.seq(keyvals);
  while (true) {
    if (kvs) {
      ks.push(cljs.core.first(kvs));
      obj[cljs.core.first(kvs)] = cljs.core.second(kvs);
      var G__10416 = cljs.core.nnext(kvs);
      kvs = G__10416;
      continue;
    } else {
      return cljs.core.ObjMap.fromObject(ks, obj);
    }
    break;
  }
};
cljs.core.obj_map.cljs$lang$maxFixedArity = 0;
cljs.core.obj_map.cljs$lang$applyTo = function(seq10410) {
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10410));
};
cljs.core.sorted_map = function cljs$core$sorted_map(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___10418 = arguments.length;
  var i__7212__auto___10419 = 0;
  while (true) {
    if (i__7212__auto___10419 < len__7211__auto___10418) {
      args__7218__auto__.push(arguments[i__7212__auto___10419]);
      var G__10420 = i__7212__auto___10419 + 1;
      i__7212__auto___10419 = G__10420;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.PersistentTreeMap.EMPTY;
  while (true) {
    if (in$) {
      var G__10421 = cljs.core.nnext(in$);
      var G__10422 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__10421;
      out = G__10422;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_map.cljs$lang$applyTo = function(seq10417) {
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10417));
};
cljs.core.sorted_map_by = function cljs$core$sorted_map_by(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___10425 = arguments.length;
  var i__7212__auto___10426 = 0;
  while (true) {
    if (i__7212__auto___10426 < len__7211__auto___10425) {
      args__7218__auto__.push(arguments[i__7212__auto___10426]);
      var G__10427 = i__7212__auto___10426 + 1;
      i__7212__auto___10426 = G__10427;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);
  while (true) {
    if (in$) {
      var G__10428 = cljs.core.nnext(in$);
      var G__10429 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__10428;
      out = G__10429;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_map_by.cljs$lang$applyTo = function(seq10423) {
  var G__10424 = cljs.core.first(seq10423);
  var seq10423__$1 = cljs.core.next(seq10423);
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(G__10424, seq10423__$1);
};
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_key$arity$1(null);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.KeySeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "mseq", "mseq", 1602647196, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function cljs$core$__GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.keys = function cljs$core$keys(hash_map) {
  var temp__4657__auto__ = cljs.core.seq(hash_map);
  if (temp__4657__auto__) {
    var mseq = temp__4657__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function cljs$core$key(map_entry) {
  return cljs.core._key(map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_val$arity$1(null);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ValSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "mseq", "mseq", 1602647196, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function cljs$core$__GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.vals = function cljs$core$vals(hash_map) {
  var temp__4657__auto__ = cljs.core.seq(hash_map);
  if (temp__4657__auto__) {
    var mseq = temp__4657__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function cljs$core$val(map_entry) {
  return cljs.core._val(map_entry);
};
cljs.core.merge = function cljs$core$merge(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___10437 = arguments.length;
  var i__7212__auto___10438 = 0;
  while (true) {
    if (i__7212__auto___10438 < len__7211__auto___10437) {
      args__7218__auto__.push(arguments[i__7212__auto___10438]);
      var G__10439 = i__7212__auto___10438 + 1;
      i__7212__auto___10438 = G__10439;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic = function(maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__10434_SHARP_, p2__10435_SHARP_) {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
        var or__6153__auto__ = p1__10434_SHARP_;
        if (cljs.core.truth_(or__6153__auto__)) {
          return or__6153__auto__;
        } else {
          return cljs.core.PersistentArrayMap.EMPTY;
        }
      }(), p2__10435_SHARP_);
    }, maps);
  } else {
    return null;
  }
};
cljs.core.merge.cljs$lang$maxFixedArity = 0;
cljs.core.merge.cljs$lang$applyTo = function(seq10436) {
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10436));
};
cljs.core.merge_with = function cljs$core$merge_with(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___10444 = arguments.length;
  var i__7212__auto___10445 = 0;
  while (true) {
    if (i__7212__auto___10445 < len__7211__auto___10444) {
      args__7218__auto__.push(arguments[i__7212__auto___10445]);
      var G__10446 = i__7212__auto___10445 + 1;
      i__7212__auto___10445 = G__10446;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic = function(f, maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    var merge_entry = function(m, e) {
      var k = cljs.core.first(e);
      var v = cljs.core.second(e);
      if (cljs.core.contains_QMARK_(m, k)) {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
          var G__10442 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
          var G__10443 = v;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10442, G__10443) : f.call(null, G__10442, G__10443);
        }());
      } else {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
      }
    };
    var merge2 = function(merge_entry) {
      return function(m1, m2) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, function() {
          var or__6153__auto__ = m1;
          if (cljs.core.truth_(or__6153__auto__)) {
            return or__6153__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), cljs.core.seq(m2));
      };
    }(merge_entry);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
  } else {
    return null;
  }
};
cljs.core.merge_with.cljs$lang$maxFixedArity = 1;
cljs.core.merge_with.cljs$lang$applyTo = function(seq10440) {
  var G__10441 = cljs.core.first(seq10440);
  var seq10440__$1 = cljs.core.next(seq10440);
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(G__10441, seq10440__$1);
};
cljs.core.select_keys = function cljs$core$select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq(keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first(keys);
      var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__10447 = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
      var G__10448 = cljs.core.next(keys);
      ret = G__10447;
      keys = G__10448;
      continue;
    } else {
      return cljs.core.with_meta(ret, cljs.core.meta(map));
    }
    break;
  }
};
cljs.core.HashSetIter = function(iter) {
  this.iter = iter;
};
cljs.core.HashSetIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.iter.hasNext();
};
cljs.core.HashSetIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (self__.iter.hasNext()) {
    return self__.iter.next().tail[0];
  } else {
    throw new Error("No such element");
  }
};
cljs.core.HashSetIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.HashSetIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "iter", "iter", -1346195486, null)], null);
};
cljs.core.HashSetIter.cljs$lang$type = true;
cljs.core.HashSetIter.cljs$lang$ctorStr = "cljs.core/HashSetIter";
cljs.core.HashSetIter.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/HashSetIter");
};
cljs.core.__GT_HashSetIter = function cljs$core$__GT_HashSetIter(iter) {
  return new cljs.core.HashSetIter(iter);
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__10451 = cljs.core.seq(coll);
  var chunk__10452 = null;
  var count__10453 = 0;
  var i__10454 = 0;
  while (true) {
    if (i__10454 < count__10453) {
      var vec__10455 = chunk__10452.cljs$core$IIndexed$_nth$arity$2(null, i__10454);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10455, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10455, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__10457 = seq__10451;
      var G__10458 = chunk__10452;
      var G__10459 = count__10453;
      var G__10460 = i__10454 + 1;
      seq__10451 = G__10457;
      chunk__10452 = G__10458;
      count__10453 = G__10459;
      i__10454 = G__10460;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__10451);
      if (temp__4657__auto__) {
        var seq__10451__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10451__$1)) {
          var c__6956__auto__ = cljs.core.chunk_first(seq__10451__$1);
          var G__10461 = cljs.core.chunk_rest(seq__10451__$1);
          var G__10462 = c__6956__auto__;
          var G__10463 = cljs.core.count(c__6956__auto__);
          var G__10464 = 0;
          seq__10451 = G__10461;
          chunk__10452 = G__10462;
          count__10453 = G__10463;
          i__10454 = G__10464;
          continue;
        } else {
          var vec__10456 = cljs.core.first(seq__10451__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10456, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10456, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__10465 = cljs.core.next(seq__10451__$1);
          var G__10466 = null;
          var G__10467 = 0;
          var G__10468 = 0;
          seq__10451 = G__10465;
          chunk__10452 = G__10466;
          count__10453 = G__10467;
          i__10454 = G__10468;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_(self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.HashSetIter(cljs.core._iterator(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6588__auto__ = self__.__hash;
  if (!(h__6588__auto__ == null)) {
    return h__6588__auto__;
  } else {
    var h__6588__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__6588__auto____$1;
    return h__6588__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__10449_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__10449_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc(self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__10469 = null;
  var G__10469__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10469__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10469 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10469__2.call(this, self__, k);
      case 3:
        return G__10469__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10469.cljs$core$IFn$_invoke$arity$2 = G__10469__2;
  G__10469.cljs$core$IFn$_invoke$arity$3 = G__10469__3;
  return G__10469;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args10450) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10450)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "hash-map", "hash-map", -439030950, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function cljs$core$__GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone(items);
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__10470 = i + 1;
        var G__10471 = cljs.core._assoc_BANG_(out, items[i], null);
        i = G__10470;
        out = G__10471;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__10472 = i + 1;
        var G__10473 = cljs.core._conj_BANG_(out, items[i]);
        i = G__10472;
        out = G__10473;
        continue;
      } else {
        return cljs.core._persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition1$ = 136;
  this.cljs$lang$protocol_mask$partition0$ = 259;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(self__.transient_map), null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count(self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__10475 = null;
  var G__10475__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__10475__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__10475 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10475__2.call(this, self__, k);
      case 3:
        return G__10475__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10475.cljs$core$IFn$_invoke$arity$2 = G__10475__2;
  G__10475.cljs$core$IFn$_invoke$arity$3 = G__10475__3;
  return G__10475;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args10474) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10474)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "transient-map", "transient-map", 351764893, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function cljs$core$__GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__10478 = cljs.core.seq(coll);
  var chunk__10479 = null;
  var count__10480 = 0;
  var i__10481 = 0;
  while (true) {
    if (i__10481 < count__10480) {
      var vec__10482 = chunk__10479.cljs$core$IIndexed$_nth$arity$2(null, i__10481);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10482, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10482, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__10484 = seq__10478;
      var G__10485 = chunk__10479;
      var G__10486 = count__10480;
      var G__10487 = i__10481 + 1;
      seq__10478 = G__10484;
      chunk__10479 = G__10485;
      count__10480 = G__10486;
      i__10481 = G__10487;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__10478);
      if (temp__4657__auto__) {
        var seq__10478__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10478__$1)) {
          var c__6956__auto__ = cljs.core.chunk_first(seq__10478__$1);
          var G__10488 = cljs.core.chunk_rest(seq__10478__$1);
          var G__10489 = c__6956__auto__;
          var G__10490 = cljs.core.count(c__6956__auto__);
          var G__10491 = 0;
          seq__10478 = G__10488;
          chunk__10479 = G__10489;
          count__10480 = G__10490;
          i__10481 = G__10491;
          continue;
        } else {
          var vec__10483 = cljs.core.first(seq__10478__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10483, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10483, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__10492 = cljs.core.next(seq__10478__$1);
          var G__10493 = null;
          var G__10494 = 0;
          var G__10495 = 0;
          seq__10478 = G__10492;
          chunk__10479 = G__10493;
          count__10480 = G__10494;
          i__10481 = G__10495;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count(self__.tree_map) > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__6588__auto__ = self__.__hash;
  if (!(h__6588__auto__ == null)) {
    return h__6588__auto__;
  } else {
    var h__6588__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__6588__auto____$1;
    return h__6588__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__10476_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__10476_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core._empty(self__.tree_map), 0);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__10496 = null;
  var G__10496__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10496__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10496 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10496__2.call(this, self__, k);
      case 3:
        return G__10496__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10496.cljs$core$IFn$_invoke$arity$2 = G__10496__2;
  G__10496.cljs$core$IFn$_invoke$arity$3 = G__10496__3;
  return G__10496;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args10477) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10477)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator(self__.tree_map);
};
cljs.core.PersistentTreeSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "tree-map", "tree-map", 1373073049, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function cljs$core$__GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.set_from_indexed_seq = function cljs$core$set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__7050__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__7050__auto__.length) {
        var G__10497 = i + 1;
        var G__10498 = res.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, arr[i]);
        i = G__10497;
        res = G__10498;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
};
cljs.core.set = function cljs$core$set(coll) {
  var in$ = cljs.core.seq(coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq(in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__10499 = cljs.core.next(in$__$1);
          var G__10500 = out.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, in$__$1.cljs$core$ISeq$_first$arity$1(null));
          in$__$1 = G__10499;
          out = G__10500;
          continue;
        } else {
          return cljs.core.persistent_BANG_(out);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function cljs$core$hash_set(var_args) {
  var args10501 = [];
  var len__7211__auto___10505 = arguments.length;
  var i__7212__auto___10506 = 0;
  while (true) {
    if (i__7212__auto___10506 < len__7211__auto___10505) {
      args10501.push(arguments[i__7212__auto___10506]);
      var G__10507 = i__7212__auto___10506 + 1;
      i__7212__auto___10506 = G__10507;
      continue;
    } else {
    }
    break;
  }
  var G__10504 = args10501.length;
  switch(G__10504) {
    case 0:
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args10501.slice(0), 0);
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(argseq__7230__auto__);
  }
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentHashSet.EMPTY;
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.set(keys);
};
cljs.core.hash_set.cljs$lang$applyTo = function(seq10502) {
  return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10502));
};
cljs.core.hash_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set = function cljs$core$sorted_set(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___10510 = arguments.length;
  var i__7212__auto___10511 = 0;
  while (true) {
    if (i__7212__auto___10511 < len__7211__auto___10510) {
      args__7218__auto__.push(arguments[i__7212__auto___10511]);
      var G__10512 = i__7212__auto___10511 + 1;
      i__7212__auto___10511 = G__10512;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
};
cljs.core.sorted_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set.cljs$lang$applyTo = function(seq10509) {
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10509));
};
cljs.core.sorted_set_by = function cljs$core$sorted_set_by(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___10515 = arguments.length;
  var i__7212__auto___10516 = 0;
  while (true) {
    if (i__7212__auto___10516 < len__7211__auto___10515) {
      args__7218__auto__.push(arguments[i__7212__auto___10516]);
      var G__10517 = i__7212__auto___10516 + 1;
      i__7212__auto___10516 = G__10517;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
};
cljs.core.sorted_set_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_set_by.cljs$lang$applyTo = function(seq10513) {
  var G__10514 = cljs.core.first(seq10513);
  var seq10513__$1 = cljs.core.next(seq10513);
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(G__10514, seq10513__$1);
};
cljs.core.replace = function cljs$core$replace(var_args) {
  var args10520 = [];
  var len__7211__auto___10523 = arguments.length;
  var i__7212__auto___10524 = 0;
  while (true) {
    if (i__7212__auto___10524 < len__7211__auto___10523) {
      args10520.push(arguments[i__7212__auto___10524]);
      var G__10525 = i__7212__auto___10524 + 1;
      i__7212__auto___10524 = G__10525;
      continue;
    } else {
    }
    break;
  }
  var G__10522 = args10520.length;
  switch(G__10522) {
    case 1:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10520.length)].join(""));;
  }
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$1 = function(smap) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__10518_SHARP_) {
    var temp__4655__auto__ = cljs.core.find(smap, p1__10518_SHARP_);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var e = temp__4655__auto__;
      return cljs.core.val(e);
    } else {
      return p1__10518_SHARP_;
    }
  });
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$2 = function(smap, coll) {
  if (cljs.core.vector_QMARK_(coll)) {
    var n = cljs.core.count(coll);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(n) {
      return function(v, i) {
        var temp__4655__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
        if (cljs.core.truth_(temp__4655__auto__)) {
          var e = temp__4655__auto__;
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(e));
        } else {
          return v;
        }
      };
    }(n), coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.iterate(cljs.core.inc, 0)));
  } else {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__10519_SHARP_) {
      var temp__4655__auto__ = cljs.core.find(smap, p1__10519_SHARP_);
      if (cljs.core.truth_(temp__4655__auto__)) {
        var e = temp__4655__auto__;
        return cljs.core.second(e);
      } else {
        return p1__10519_SHARP_;
      }
    }, coll);
  }
};
cljs.core.replace.cljs$lang$maxFixedArity = 2;
cljs.core.distinct = function cljs$core$distinct(var_args) {
  var args10527 = [];
  var len__7211__auto___10536 = arguments.length;
  var i__7212__auto___10537 = 0;
  while (true) {
    if (i__7212__auto___10537 < len__7211__auto___10536) {
      args10527.push(arguments[i__7212__auto___10537]);
      var G__10538 = i__7212__auto___10537 + 1;
      i__7212__auto___10537 = G__10538;
      continue;
    } else {
    }
    break;
  }
  var G__10529 = args10527.length;
  switch(G__10529) {
    case 0:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10527.length)].join(""));;
  }
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
    return function(seen) {
      return function() {
        var G__10540 = null;
        var G__10540__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10540__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__10540__2 = function(result, input) {
          if (cljs.core.contains_QMARK_(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(seen) : cljs.core.deref.call(null, seen), input)) {
            return result;
          } else {
            cljs.core._vreset_BANG_(seen, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core._deref(seen), input));
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__10540 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10540__0.call(this);
            case 1:
              return G__10540__1.call(this, result);
            case 2:
              return G__10540__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10540.cljs$core$IFn$_invoke$arity$0 = G__10540__0;
        G__10540.cljs$core$IFn$_invoke$arity$1 = G__10540__1;
        G__10540.cljs$core$IFn$_invoke$arity$2 = G__10540__2;
        return G__10540;
      }();
    }(seen);
  };
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var step = function cljs$core$step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__10534, seen__$1) {
        while (true) {
          var vec__10535 = p__10534;
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10535, 0, null);
          var xs__$1 = vec__10535;
          var temp__4657__auto__ = cljs.core.seq(xs__$1);
          if (temp__4657__auto__) {
            var s = temp__4657__auto__;
            if (cljs.core.contains_QMARK_(seen__$1, f)) {
              var G__10541 = cljs.core.rest(s);
              var G__10542 = seen__$1;
              p__10534 = G__10541;
              seen__$1 = G__10542;
              continue;
            } else {
              return cljs.core.cons(f, cljs$core$step(cljs.core.rest(s), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step(coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.distinct.cljs$lang$maxFixedArity = 1;
cljs.core.butlast = function cljs$core$butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next(s__$1)) {
      var G__10543 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s__$1));
      var G__10544 = cljs.core.next(s__$1);
      ret = G__10543;
      s__$1 = G__10544;
      continue;
    } else {
      return cljs.core.seq(ret);
    }
    break;
  }
};
cljs.core.name = function cljs$core$name(x) {
  if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 4096 || x.cljs$core$INamed$ ? true : false : false) {
    return x.cljs$core$INamed$_name$arity$1(null);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function cljs$core$zipmap(keys, vals) {
  var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq(keys);
  var vs = cljs.core.seq(vals);
  while (true) {
    if (ks && vs) {
      var G__10547 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(ks), cljs.core.first(vs));
      var G__10548 = cljs.core.next(ks);
      var G__10549 = cljs.core.next(vs);
      map = G__10547;
      ks = G__10548;
      vs = G__10549;
      continue;
    } else {
      return cljs.core.persistent_BANG_(map);
    }
    break;
  }
};
cljs.core.max_key = function cljs$core$max_key(var_args) {
  var args10552 = [];
  var len__7211__auto___10559 = arguments.length;
  var i__7212__auto___10560 = 0;
  while (true) {
    if (i__7212__auto___10560 < len__7211__auto___10559) {
      args10552.push(arguments[i__7212__auto___10560]);
      var G__10561 = i__7212__auto___10560 + 1;
      i__7212__auto___10560 = G__10561;
      continue;
    } else {
    }
    break;
  }
  var G__10558 = args10552.length;
  switch(G__10558) {
    case 2:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args10552.slice(3), 0);
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__7230__auto__);
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if ((k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(x) : k.call(null, x)) > (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(y) : k.call(null, y))) {
    return x;
  } else {
    return y;
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__10550_SHARP_, p2__10551_SHARP_) {
    return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, p1__10550_SHARP_, p2__10551_SHARP_);
  }, cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.max_key.cljs$lang$applyTo = function(seq10553) {
  var G__10554 = cljs.core.first(seq10553);
  var seq10553__$1 = cljs.core.next(seq10553);
  var G__10555 = cljs.core.first(seq10553__$1);
  var seq10553__$2 = cljs.core.next(seq10553__$1);
  var G__10556 = cljs.core.first(seq10553__$2);
  var seq10553__$3 = cljs.core.next(seq10553__$2);
  return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(G__10554, G__10555, G__10556, seq10553__$3);
};
cljs.core.max_key.cljs$lang$maxFixedArity = 3;
cljs.core.min_key = function cljs$core$min_key(var_args) {
  var args10565 = [];
  var len__7211__auto___10572 = arguments.length;
  var i__7212__auto___10573 = 0;
  while (true) {
    if (i__7212__auto___10573 < len__7211__auto___10572) {
      args10565.push(arguments[i__7212__auto___10573]);
      var G__10574 = i__7212__auto___10573 + 1;
      i__7212__auto___10573 = G__10574;
      continue;
    } else {
    }
    break;
  }
  var G__10571 = args10565.length;
  switch(G__10571) {
    case 2:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args10565.slice(3), 0);
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__7230__auto__);
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if ((k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(x) : k.call(null, x)) < (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(y) : k.call(null, y))) {
    return x;
  } else {
    return y;
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__10563_SHARP_, p2__10564_SHARP_) {
    return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, p1__10563_SHARP_, p2__10564_SHARP_);
  }, cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.min_key.cljs$lang$applyTo = function(seq10566) {
  var G__10567 = cljs.core.first(seq10566);
  var seq10566__$1 = cljs.core.next(seq10566);
  var G__10568 = cljs.core.first(seq10566__$1);
  var seq10566__$2 = cljs.core.next(seq10566__$1);
  var G__10569 = cljs.core.first(seq10566__$2);
  var seq10566__$3 = cljs.core.next(seq10566__$2);
  return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(G__10567, G__10568, G__10569, seq10566__$3);
};
cljs.core.min_key.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function cljs$core$__GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function cljs$core$array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function cljs$core$partition_all(var_args) {
  var args10576 = [];
  var len__7211__auto___10579 = arguments.length;
  var i__7212__auto___10580 = 0;
  while (true) {
    if (i__7212__auto___10580 < len__7211__auto___10579) {
      args10576.push(arguments[i__7212__auto___10580]);
      var G__10581 = i__7212__auto___10580 + 1;
      i__7212__auto___10580 = G__10581;
      continue;
    } else {
    }
    break;
  }
  var G__10578 = args10576.length;
  switch(G__10578) {
    case 1:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10576.length)].join(""));;
  }
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var a = cljs.core.array_list();
    return function(a) {
      return function() {
        var G__10583 = null;
        var G__10583__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10583__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v));
          }();
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result__$1) : rf.call(null, result__$1);
        };
        var G__10583__2 = function(result, input) {
          a.add(input);
          if (n === a.size()) {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
          } else {
            return result;
          }
        };
        G__10583 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10583__0.call(this);
            case 1:
              return G__10583__1.call(this, result);
            case 2:
              return G__10583__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10583.cljs$core$IFn$_invoke$arity$0 = G__10583__0;
        G__10583.cljs$core$IFn$_invoke$arity$1 = G__10583__1;
        G__10583.cljs$core$IFn$_invoke$arity$2 = G__10583__2;
        return G__10583;
      }();
    }(a);
  };
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s), cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_all.cljs$lang$maxFixedArity = 3;
cljs.core.take_while = function cljs$core$take_while(var_args) {
  var args10584 = [];
  var len__7211__auto___10588 = arguments.length;
  var i__7212__auto___10589 = 0;
  while (true) {
    if (i__7212__auto___10589 < len__7211__auto___10588) {
      args10584.push(arguments[i__7212__auto___10589]);
      var G__10590 = i__7212__auto___10589 + 1;
      i__7212__auto___10589 = G__10590;
      continue;
    } else {
    }
    break;
  }
  var G__10586 = args10584.length;
  switch(G__10586) {
    case 1:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10584.length)].join(""));;
  }
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__10592 = null;
      var G__10592__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__10592__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__10592__2 = function(result, input) {
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input))) {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        } else {
          return cljs.core.reduced(result);
        }
      };
      G__10592 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__10592__0.call(this);
          case 1:
            return G__10592__1.call(this, result);
          case 2:
            return G__10592__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__10592.cljs$core$IFn$_invoke$arity$0 = G__10592__0;
      G__10592.cljs$core$IFn$_invoke$arity$1 = G__10592__1;
      G__10592.cljs$core$IFn$_invoke$arity$2 = G__10592__2;
      return G__10592;
    }();
  };
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      if (cljs.core.truth_(function() {
        var G__10587 = cljs.core.first(s);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__10587) : pred.call(null, G__10587);
      }())) {
        return cljs.core.cons(cljs.core.first(s), cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_while.cljs$lang$maxFixedArity = 2;
cljs.core.mk_bound_fn = function cljs$core$mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator(sc);
    var G__10601 = function() {
      var G__10603 = cljs.core._entry_key(sc, e);
      var G__10604 = key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__10603, G__10604) : comp.call(null, G__10603, G__10604);
    }();
    var G__10602 = 0;
    return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__10601, G__10602) : test.call(null, G__10601, G__10602);
  };
};
cljs.core.subseq = function cljs$core$subseq(var_args) {
  var args10605 = [];
  var len__7211__auto___10610 = arguments.length;
  var i__7212__auto___10611 = 0;
  while (true) {
    if (i__7212__auto___10611 < len__7211__auto___10610) {
      args10605.push(arguments[i__7212__auto___10611]);
      var G__10612 = i__7212__auto___10611 + 1;
      i__7212__auto___10611 = G__10612;
      continue;
    } else {
    }
    break;
  }
  var G__10607 = args10605.length;
  switch(G__10607) {
    case 3:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10605.length)].join(""));;
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
    var temp__4657__auto__ = cljs.core._sorted_seq_from(sc, key, true);
    if (cljs.core.truth_(temp__4657__auto__)) {
      var vec__10608 = temp__4657__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10608, 0, null);
      var s = vec__10608;
      if (cljs.core.truth_(include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(e) : include.call(null, e))) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, true));
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4657__auto__ = cljs.core._sorted_seq_from(sc, start_key, true);
  if (cljs.core.truth_(temp__4657__auto__)) {
    var vec__10609 = temp__4657__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10609, 0, null);
    var s = vec__10609;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, start_test, start_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.subseq.cljs$lang$maxFixedArity = 5;
cljs.core.rsubseq = function cljs$core$rsubseq(var_args) {
  var args10614 = [];
  var len__7211__auto___10619 = arguments.length;
  var i__7212__auto___10620 = 0;
  while (true) {
    if (i__7212__auto___10620 < len__7211__auto___10619) {
      args10614.push(arguments[i__7212__auto___10620]);
      var G__10621 = i__7212__auto___10620 + 1;
      i__7212__auto___10620 = G__10621;
      continue;
    } else {
    }
    break;
  }
  var G__10616 = args10614.length;
  switch(G__10616) {
    case 3:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10614.length)].join(""));;
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
    var temp__4657__auto__ = cljs.core._sorted_seq_from(sc, key, false);
    if (cljs.core.truth_(temp__4657__auto__)) {
      var vec__10617 = temp__4657__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10617, 0, null);
      var s = vec__10617;
      if (cljs.core.truth_(include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(e) : include.call(null, e))) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, false));
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4657__auto__ = cljs.core._sorted_seq_from(sc, end_key, false);
  if (cljs.core.truth_(temp__4657__auto__)) {
    var vec__10618 = temp__4657__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10618, 0, null);
    var s = vec__10618;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, end_test, end_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.rsubseq.cljs$lang$maxFixedArity = 5;
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.Symbol(null, "step", "step", -1365547645, null)], null);
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function cljs$core$__GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not(cljs.core._seq(rng__$1))) {
    return 0;
  } else {
    var G__10623 = (self__.end - self__.start) / self__.step;
    return Math.ceil(G__10623);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__6588__auto__ = self__.__hash;
  if (!(h__6588__auto__ == null)) {
    return h__6588__auto__;
  } else {
    var h__6588__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
    self__.__hash = h__6588__auto____$1;
    return h__6588__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential(rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(ret, i) : f.call(null, ret, i);
      if (cljs.core.reduced_QMARK_(ret__$1)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(ret__$1) : cljs.core.deref.call(null, ret__$1);
      } else {
        var G__10624 = i + self__.step;
        var G__10625 = ret__$1;
        i = G__10624;
        ret = G__10625;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq(rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq(rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.step < 0) {
      if (self__.start > self__.end) {
        return rng__$1;
      } else {
        return null;
      }
    } else {
      if (self__.start === self__.end) {
        return null;
      } else {
        return rng__$1;
      }
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons(o, rng__$1);
};
cljs.core.Range.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.Symbol(null, "step", "step", -1365547645, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function cljs$core$__GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.range = function cljs$core$range(var_args) {
  var args10626 = [];
  var len__7211__auto___10629 = arguments.length;
  var i__7212__auto___10630 = 0;
  while (true) {
    if (i__7212__auto___10630 < len__7211__auto___10629) {
      args10626.push(arguments[i__7212__auto___10630]);
      var G__10631 = i__7212__auto___10630 + 1;
      i__7212__auto___10630 = G__10631;
      continue;
    } else {
    }
    break;
  }
  var G__10628 = args10626.length;
  switch(G__10628) {
    case 0:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10626.length)].join(""));;
  }
};
cljs.core.range.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$1 = function(end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$2 = function(start, end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$3 = function(start, end, step) {
  return new cljs.core.Range(null, start, end, step, null);
};
cljs.core.range.cljs$lang$maxFixedArity = 3;
cljs.core.take_nth = function cljs$core$take_nth(var_args) {
  var args10633 = [];
  var len__7211__auto___10638 = arguments.length;
  var i__7212__auto___10639 = 0;
  while (true) {
    if (i__7212__auto___10639 < len__7211__auto___10638) {
      args10633.push(arguments[i__7212__auto___10639]);
      var G__10640 = i__7212__auto___10639 + 1;
      i__7212__auto___10639 = G__10640;
      continue;
    } else {
    }
    break;
  }
  var G__10635 = args10633.length;
  switch(G__10635) {
    case 1:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10633.length)].join(""));;
  }
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (typeof n === "number") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(function() {
      var G__10636 = cljs.core.list(new cljs.core.Symbol(null, "number?", "number?", -1747282210, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null));
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__10636) : cljs.core.pr_str.call(null, G__10636);
    }())].join(""));
  }
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__10642 = null;
        var G__10642__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10642__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__10642__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          if (cljs.core.rem(i, n) === 0) {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          } else {
            return result;
          }
        };
        G__10642 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10642__0.call(this);
            case 1:
              return G__10642__1.call(this, result);
            case 2:
              return G__10642__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10642.cljs$core$IFn$_invoke$arity$0 = G__10642__0;
        G__10642.cljs$core$IFn$_invoke$arity$1 = G__10642__1;
        G__10642.cljs$core$IFn$_invoke$arity$2 = G__10642__2;
        return G__10642;
      }();
    }(ia);
  };
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  if (typeof n === "number") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(function() {
      var G__10637 = cljs.core.list(new cljs.core.Symbol(null, "number?", "number?", -1747282210, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null));
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__10637) : cljs.core.pr_str.call(null, G__10637);
    }())].join(""));
  }
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      return cljs.core.cons(cljs.core.first(s), cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_nth.cljs$lang$maxFixedArity = 2;
cljs.core.split_with = function cljs$core$split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
};
cljs.core.partition_by = function cljs$core$partition_by(var_args) {
  var args10644 = [];
  var len__7211__auto___10647 = arguments.length;
  var i__7212__auto___10648 = 0;
  while (true) {
    if (i__7212__auto___10648 < len__7211__auto___10647) {
      args10644.push(arguments[i__7212__auto___10648]);
      var G__10649 = i__7212__auto___10648 + 1;
      i__7212__auto___10648 = G__10649;
      continue;
    } else {
    }
    break;
  }
  var G__10646 = args10644.length;
  switch(G__10646) {
    case 1:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10644.length)].join(""));;
  }
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var a = cljs.core.array_list();
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(a, pa) {
      return function() {
        var G__10651 = null;
        var G__10651__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10651__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v));
          }();
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result__$1) : rf.call(null, result__$1);
        };
        var G__10651__2 = function(result, input) {
          var pval = cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(pa) : cljs.core.deref.call(null, pa);
          var val = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
          cljs.core.vreset_BANG_(pa, val);
          if (cljs.core.keyword_identical_QMARK_(pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
            a.add(input);
            return result;
          } else {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            var ret = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
            if (cljs.core.reduced_QMARK_(ret)) {
            } else {
              a.add(input);
            }
            return ret;
          }
        };
        G__10651 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10651__0.call(this);
            case 1:
              return G__10651__1.call(this, result);
            case 2:
              return G__10651__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10651.cljs$core$IFn$_invoke$arity$0 = G__10651__0;
        G__10651.cljs$core$IFn$_invoke$arity$1 = G__10651__1;
        G__10651.cljs$core$IFn$_invoke$arity$2 = G__10651__2;
        return G__10651;
      }();
    }(a, pa);
  };
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      var fst = cljs.core.first(s);
      var fv = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(fst) : f.call(null, fst);
      var run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(fst, fv, s, temp__4657__auto__) {
        return function(p1__10643_SHARP_) {
          return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(p1__10643_SHARP_) : f.call(null, p1__10643_SHARP_));
        };
      }(fst, fv, s, temp__4657__auto__), cljs.core.next(s)));
      return cljs.core.cons(run, cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_by.cljs$lang$maxFixedArity = 2;
cljs.core.frequencies = function cljs$core$frequencies(coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function cljs$core$reductions(var_args) {
  var args10652 = [];
  var len__7211__auto___10657 = arguments.length;
  var i__7212__auto___10658 = 0;
  while (true) {
    if (i__7212__auto___10658 < len__7211__auto___10657) {
      args10652.push(arguments[i__7212__auto___10658]);
      var G__10659 = i__7212__auto___10658 + 1;
      i__7212__auto___10658 = G__10659;
      continue;
    } else {
    }
    break;
  }
  var G__10654 = args10652.length;
  switch(G__10654) {
    case 2:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10652.length)].join(""));;
  }
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4655__auto__ = cljs.core.seq(coll);
    if (temp__4655__auto__) {
      var s = temp__4655__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.rest(s));
    } else {
      return cljs.core._conj(cljs.core.List.EMPTY, f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));
    }
  }, null, null);
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$3 = function(f, init, coll) {
  return cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
        var G__10655 = init;
        var G__10656 = cljs.core.first(s);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10655, G__10656) : f.call(null, G__10655, G__10656);
      }(), cljs.core.rest(s));
    } else {
      return null;
    }
  }, null, null));
};
cljs.core.reductions.cljs$lang$maxFixedArity = 3;
cljs.core.juxt = function cljs$core$juxt(var_args) {
  var args10671 = [];
  var len__7211__auto___10678 = arguments.length;
  var i__7212__auto___10679 = 0;
  while (true) {
    if (i__7212__auto___10679 < len__7211__auto___10678) {
      args10671.push(arguments[i__7212__auto___10679]);
      var G__10680 = i__7212__auto___10679 + 1;
      i__7212__auto___10679 = G__10680;
      continue;
    } else {
    }
    break;
  }
  var G__10677 = args10671.length;
  switch(G__10677) {
    case 1:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args10671.slice(3), 0);
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__7230__auto__);
  }
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function() {
    var G__10682 = null;
    var G__10682__0 = function() {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null)], null);
    };
    var G__10682__1 = function(x) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x)], null);
    };
    var G__10682__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y)], null);
    };
    var G__10682__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z)], null);
    };
    var G__10682__4 = function() {
      var G__10683__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
      };
      var G__10683 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__10684__i = 0, G__10684__a = new Array(arguments.length - 3);
          while (G__10684__i < G__10684__a.length) {
            G__10684__a[G__10684__i] = arguments[G__10684__i + 3];
            ++G__10684__i;
          }
          args = new cljs.core.IndexedSeq(G__10684__a, 0);
        }
        return G__10683__delegate.call(this, x, y, z, args);
      };
      G__10683.cljs$lang$maxFixedArity = 3;
      G__10683.cljs$lang$applyTo = function(arglist__10685) {
        var x = cljs.core.first(arglist__10685);
        arglist__10685 = cljs.core.next(arglist__10685);
        var y = cljs.core.first(arglist__10685);
        arglist__10685 = cljs.core.next(arglist__10685);
        var z = cljs.core.first(arglist__10685);
        var args = cljs.core.rest(arglist__10685);
        return G__10683__delegate(x, y, z, args);
      };
      G__10683.cljs$core$IFn$_invoke$arity$variadic = G__10683__delegate;
      return G__10683;
    }();
    G__10682 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__10682__0.call(this);
        case 1:
          return G__10682__1.call(this, x);
        case 2:
          return G__10682__2.call(this, x, y);
        case 3:
          return G__10682__3.call(this, x, y, z);
        default:
          var G__10686 = null;
          if (arguments.length > 3) {
            var G__10687__i = 0, G__10687__a = new Array(arguments.length - 3);
            while (G__10687__i < G__10687__a.length) {
              G__10687__a[G__10687__i] = arguments[G__10687__i + 3];
              ++G__10687__i;
            }
            G__10686 = new cljs.core.IndexedSeq(G__10687__a, 0);
          }
          return G__10682__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10686);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__10682.cljs$lang$maxFixedArity = 3;
    G__10682.cljs$lang$applyTo = G__10682__4.cljs$lang$applyTo;
    G__10682.cljs$core$IFn$_invoke$arity$0 = G__10682__0;
    G__10682.cljs$core$IFn$_invoke$arity$1 = G__10682__1;
    G__10682.cljs$core$IFn$_invoke$arity$2 = G__10682__2;
    G__10682.cljs$core$IFn$_invoke$arity$3 = G__10682__3;
    G__10682.cljs$core$IFn$_invoke$arity$variadic = G__10682__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10682;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__10688 = null;
    var G__10688__0 = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null)], null);
    };
    var G__10688__1 = function(x) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x), g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x)], null);
    };
    var G__10688__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y), g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y)], null);
    };
    var G__10688__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z), g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z)], null);
    };
    var G__10688__4 = function() {
      var G__10689__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
      };
      var G__10689 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__10690__i = 0, G__10690__a = new Array(arguments.length - 3);
          while (G__10690__i < G__10690__a.length) {
            G__10690__a[G__10690__i] = arguments[G__10690__i + 3];
            ++G__10690__i;
          }
          args = new cljs.core.IndexedSeq(G__10690__a, 0);
        }
        return G__10689__delegate.call(this, x, y, z, args);
      };
      G__10689.cljs$lang$maxFixedArity = 3;
      G__10689.cljs$lang$applyTo = function(arglist__10691) {
        var x = cljs.core.first(arglist__10691);
        arglist__10691 = cljs.core.next(arglist__10691);
        var y = cljs.core.first(arglist__10691);
        arglist__10691 = cljs.core.next(arglist__10691);
        var z = cljs.core.first(arglist__10691);
        var args = cljs.core.rest(arglist__10691);
        return G__10689__delegate(x, y, z, args);
      };
      G__10689.cljs$core$IFn$_invoke$arity$variadic = G__10689__delegate;
      return G__10689;
    }();
    G__10688 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__10688__0.call(this);
        case 1:
          return G__10688__1.call(this, x);
        case 2:
          return G__10688__2.call(this, x, y);
        case 3:
          return G__10688__3.call(this, x, y, z);
        default:
          var G__10692 = null;
          if (arguments.length > 3) {
            var G__10693__i = 0, G__10693__a = new Array(arguments.length - 3);
            while (G__10693__i < G__10693__a.length) {
              G__10693__a[G__10693__i] = arguments[G__10693__i + 3];
              ++G__10693__i;
            }
            G__10692 = new cljs.core.IndexedSeq(G__10693__a, 0);
          }
          return G__10688__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10692);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__10688.cljs$lang$maxFixedArity = 3;
    G__10688.cljs$lang$applyTo = G__10688__4.cljs$lang$applyTo;
    G__10688.cljs$core$IFn$_invoke$arity$0 = G__10688__0;
    G__10688.cljs$core$IFn$_invoke$arity$1 = G__10688__1;
    G__10688.cljs$core$IFn$_invoke$arity$2 = G__10688__2;
    G__10688.cljs$core$IFn$_invoke$arity$3 = G__10688__3;
    G__10688.cljs$core$IFn$_invoke$arity$variadic = G__10688__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10688;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__10694 = null;
    var G__10694__0 = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null), h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null)], null);
    };
    var G__10694__1 = function(x) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x), g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x), h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(x) : h.call(null, x)], null);
    };
    var G__10694__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y), g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y), h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(x, y) : h.call(null, x, y)], null);
    };
    var G__10694__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z), g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z), h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(x, y, z) : h.call(null, x, y, z)], null);
    };
    var G__10694__4 = function() {
      var G__10695__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
      };
      var G__10695 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__10696__i = 0, G__10696__a = new Array(arguments.length - 3);
          while (G__10696__i < G__10696__a.length) {
            G__10696__a[G__10696__i] = arguments[G__10696__i + 3];
            ++G__10696__i;
          }
          args = new cljs.core.IndexedSeq(G__10696__a, 0);
        }
        return G__10695__delegate.call(this, x, y, z, args);
      };
      G__10695.cljs$lang$maxFixedArity = 3;
      G__10695.cljs$lang$applyTo = function(arglist__10697) {
        var x = cljs.core.first(arglist__10697);
        arglist__10697 = cljs.core.next(arglist__10697);
        var y = cljs.core.first(arglist__10697);
        arglist__10697 = cljs.core.next(arglist__10697);
        var z = cljs.core.first(arglist__10697);
        var args = cljs.core.rest(arglist__10697);
        return G__10695__delegate(x, y, z, args);
      };
      G__10695.cljs$core$IFn$_invoke$arity$variadic = G__10695__delegate;
      return G__10695;
    }();
    G__10694 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__10694__0.call(this);
        case 1:
          return G__10694__1.call(this, x);
        case 2:
          return G__10694__2.call(this, x, y);
        case 3:
          return G__10694__3.call(this, x, y, z);
        default:
          var G__10698 = null;
          if (arguments.length > 3) {
            var G__10699__i = 0, G__10699__a = new Array(arguments.length - 3);
            while (G__10699__i < G__10699__a.length) {
              G__10699__a[G__10699__i] = arguments[G__10699__i + 3];
              ++G__10699__i;
            }
            G__10698 = new cljs.core.IndexedSeq(G__10699__a, 0);
          }
          return G__10694__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10698);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__10694.cljs$lang$maxFixedArity = 3;
    G__10694.cljs$lang$applyTo = G__10694__4.cljs$lang$applyTo;
    G__10694.cljs$core$IFn$_invoke$arity$0 = G__10694__0;
    G__10694.cljs$core$IFn$_invoke$arity$1 = G__10694__1;
    G__10694.cljs$core$IFn$_invoke$arity$2 = G__10694__2;
    G__10694.cljs$core$IFn$_invoke$arity$3 = G__10694__3;
    G__10694.cljs$core$IFn$_invoke$arity$variadic = G__10694__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10694;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic = function(f, g, h, fs) {
  var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs);
  return function(fs__$1) {
    return function() {
      var G__10700 = null;
      var G__10700__0 = function() {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__10661_SHARP_, p2__10662_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10661_SHARP_, p2__10662_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__10662_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__10662_SHARP_.call(null));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__10700__1 = function(x) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__10663_SHARP_, p2__10664_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10663_SHARP_, p2__10664_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__10664_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p2__10664_SHARP_.call(null, x));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__10700__2 = function(x, y) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__10665_SHARP_, p2__10666_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10665_SHARP_, p2__10666_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__10666_SHARP_.cljs$core$IFn$_invoke$arity$2(x, y) : p2__10666_SHARP_.call(null, x, y));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__10700__3 = function(x, y, z) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__10667_SHARP_, p2__10668_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10667_SHARP_, p2__10668_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__10668_SHARP_.cljs$core$IFn$_invoke$arity$3(x, y, z) : p2__10668_SHARP_.call(null, x, y, z));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__10700__4 = function() {
        var G__10701__delegate = function(x, y, z, args) {
          return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
            return function(p1__10669_SHARP_, p2__10670_SHARP_) {
              return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10669_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__10670_SHARP_, x, y, z, args));
            };
          }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__10701 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__10702__i = 0, G__10702__a = new Array(arguments.length - 3);
            while (G__10702__i < G__10702__a.length) {
              G__10702__a[G__10702__i] = arguments[G__10702__i + 3];
              ++G__10702__i;
            }
            args = new cljs.core.IndexedSeq(G__10702__a, 0);
          }
          return G__10701__delegate.call(this, x, y, z, args);
        };
        G__10701.cljs$lang$maxFixedArity = 3;
        G__10701.cljs$lang$applyTo = function(arglist__10703) {
          var x = cljs.core.first(arglist__10703);
          arglist__10703 = cljs.core.next(arglist__10703);
          var y = cljs.core.first(arglist__10703);
          arglist__10703 = cljs.core.next(arglist__10703);
          var z = cljs.core.first(arglist__10703);
          var args = cljs.core.rest(arglist__10703);
          return G__10701__delegate(x, y, z, args);
        };
        G__10701.cljs$core$IFn$_invoke$arity$variadic = G__10701__delegate;
        return G__10701;
      }();
      G__10700 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__10700__0.call(this);
          case 1:
            return G__10700__1.call(this, x);
          case 2:
            return G__10700__2.call(this, x, y);
          case 3:
            return G__10700__3.call(this, x, y, z);
          default:
            var G__10704 = null;
            if (arguments.length > 3) {
              var G__10705__i = 0, G__10705__a = new Array(arguments.length - 3);
              while (G__10705__i < G__10705__a.length) {
                G__10705__a[G__10705__i] = arguments[G__10705__i + 3];
                ++G__10705__i;
              }
              G__10704 = new cljs.core.IndexedSeq(G__10705__a, 0);
            }
            return G__10700__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10704);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__10700.cljs$lang$maxFixedArity = 3;
      G__10700.cljs$lang$applyTo = G__10700__4.cljs$lang$applyTo;
      G__10700.cljs$core$IFn$_invoke$arity$0 = G__10700__0;
      G__10700.cljs$core$IFn$_invoke$arity$1 = G__10700__1;
      G__10700.cljs$core$IFn$_invoke$arity$2 = G__10700__2;
      G__10700.cljs$core$IFn$_invoke$arity$3 = G__10700__3;
      G__10700.cljs$core$IFn$_invoke$arity$variadic = G__10700__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__10700;
    }();
  }(fs__$1);
};
cljs.core.juxt.cljs$lang$applyTo = function(seq10672) {
  var G__10673 = cljs.core.first(seq10672);
  var seq10672__$1 = cljs.core.next(seq10672);
  var G__10674 = cljs.core.first(seq10672__$1);
  var seq10672__$2 = cljs.core.next(seq10672__$1);
  var G__10675 = cljs.core.first(seq10672__$2);
  var seq10672__$3 = cljs.core.next(seq10672__$2);
  return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(G__10673, G__10674, G__10675, seq10672__$3);
};
cljs.core.juxt.cljs$lang$maxFixedArity = 3;
cljs.core.dorun = function cljs$core$dorun(var_args) {
  var args10706 = [];
  var len__7211__auto___10709 = arguments.length;
  var i__7212__auto___10710 = 0;
  while (true) {
    if (i__7212__auto___10710 < len__7211__auto___10709) {
      args10706.push(arguments[i__7212__auto___10710]);
      var G__10711 = i__7212__auto___10710 + 1;
      i__7212__auto___10710 = G__10711;
      continue;
    } else {
    }
    break;
  }
  var G__10708 = args10706.length;
  switch(G__10708) {
    case 1:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10706.length)].join(""));;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var G__10713 = cljs.core.next(coll);
      coll = G__10713;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  while (true) {
    if (cljs.core.seq(coll) && n > 0) {
      var G__10714 = n - 1;
      var G__10715 = cljs.core.next(coll);
      n = G__10714;
      coll = G__10715;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$lang$maxFixedArity = 2;
cljs.core.doall = function cljs$core$doall(var_args) {
  var args10716 = [];
  var len__7211__auto___10719 = arguments.length;
  var i__7212__auto___10720 = 0;
  while (true) {
    if (i__7212__auto___10720 < len__7211__auto___10719) {
      args10716.push(arguments[i__7212__auto___10720]);
      var G__10721 = i__7212__auto___10720 + 1;
      i__7212__auto___10720 = G__10721;
      continue;
    } else {
    }
    break;
  }
  var G__10718 = args10716.length;
  switch(G__10718) {
    case 1:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10716.length)].join(""));;
  }
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
  return coll;
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
  return coll;
};
cljs.core.doall.cljs$lang$maxFixedArity = 2;
cljs.core.regexp_QMARK_ = function cljs$core$regexp_QMARK_(x) {
  return x instanceof RegExp;
};
cljs.core.re_matches = function cljs$core$re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(matches), s)) {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function cljs$core$re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function cljs$core$re_seq(re, s) {
  var match_data = cljs.core.re_find(re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_(match_data) ? cljs.core.first(match_data) : match_data;
  var post_match = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, match_idx + cljs.core.count(match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons(match_data, cljs.core.seq(post_match) ? cljs$core$re_seq(re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function cljs$core$re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__10724 = cljs.core.re_find(/^\(\?([idmsux]*)\)/, s);
    var prefix = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10724, 0, null);
    var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10724, 1, null);
    var pattern = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, cljs.core.count(prefix));
    return new RegExp(pattern, function() {
      var or__6153__auto__ = flags;
      if (cljs.core.truth_(or__6153__auto__)) {
        return or__6153__auto__;
      } else {
        return "";
      }
    }());
  }
};
cljs.core.pr_sequential_writer = function cljs$core$pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_10732 = cljs.core._STAR_print_level_STAR_;
  cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
  try {
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write(writer, "#");
    } else {
      cljs.core._write(writer, begin);
      if ((new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) === 0) {
        if (cljs.core.seq(coll)) {
          cljs.core._write(writer, function() {
            var or__6153__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
            if (cljs.core.truth_(or__6153__auto__)) {
              return or__6153__auto__;
            } else {
              return "...";
            }
          }());
        } else {
        }
      } else {
        if (cljs.core.seq(coll)) {
          var G__10733_10739 = cljs.core.first(coll);
          var G__10734_10740 = writer;
          var G__10735_10741 = opts;
          print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10733_10739, G__10734_10740, G__10735_10741) : print_one.call(null, G__10733_10739, G__10734_10740, G__10735_10741);
        } else {
        }
        var coll_10742__$1 = cljs.core.next(coll);
        var n_10743 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
        while (true) {
          if (coll_10742__$1 && (n_10743 == null || !(n_10743 === 0))) {
            cljs.core._write(writer, sep);
            var G__10736_10744 = cljs.core.first(coll_10742__$1);
            var G__10737_10745 = writer;
            var G__10738_10746 = opts;
            print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10736_10744, G__10737_10745, G__10738_10746) : print_one.call(null, G__10736_10744, G__10737_10745, G__10738_10746);
            var G__10747 = cljs.core.next(coll_10742__$1);
            var G__10748 = n_10743 - 1;
            coll_10742__$1 = G__10747;
            n_10743 = G__10748;
            continue;
          } else {
            if (cljs.core.seq(coll_10742__$1) && n_10743 === 0) {
              cljs.core._write(writer, sep);
              cljs.core._write(writer, function() {
                var or__6153__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
                if (cljs.core.truth_(or__6153__auto__)) {
                  return or__6153__auto__;
                } else {
                  return "...";
                }
              }());
            } else {
            }
          }
          break;
        }
      }
      return cljs.core._write(writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_10732;
  }
};
cljs.core.write_all = function cljs$core$write_all(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___10755 = arguments.length;
  var i__7212__auto___10756 = 0;
  while (true) {
    if (i__7212__auto___10756 < len__7211__auto___10755) {
      args__7218__auto__.push(arguments[i__7212__auto___10756]);
      var G__10757 = i__7212__auto___10756 + 1;
      i__7212__auto___10756 = G__10757;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic = function(writer, ss) {
  var seq__10751 = cljs.core.seq(ss);
  var chunk__10752 = null;
  var count__10753 = 0;
  var i__10754 = 0;
  while (true) {
    if (i__10754 < count__10753) {
      var s = chunk__10752.cljs$core$IIndexed$_nth$arity$2(null, i__10754);
      cljs.core._write(writer, s);
      var G__10758 = seq__10751;
      var G__10759 = chunk__10752;
      var G__10760 = count__10753;
      var G__10761 = i__10754 + 1;
      seq__10751 = G__10758;
      chunk__10752 = G__10759;
      count__10753 = G__10760;
      i__10754 = G__10761;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__10751);
      if (temp__4657__auto__) {
        var seq__10751__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10751__$1)) {
          var c__6956__auto__ = cljs.core.chunk_first(seq__10751__$1);
          var G__10762 = cljs.core.chunk_rest(seq__10751__$1);
          var G__10763 = c__6956__auto__;
          var G__10764 = cljs.core.count(c__6956__auto__);
          var G__10765 = 0;
          seq__10751 = G__10762;
          chunk__10752 = G__10763;
          count__10753 = G__10764;
          i__10754 = G__10765;
          continue;
        } else {
          var s = cljs.core.first(seq__10751__$1);
          cljs.core._write(writer, s);
          var G__10766 = cljs.core.next(seq__10751__$1);
          var G__10767 = null;
          var G__10768 = 0;
          var G__10769 = 0;
          seq__10751 = G__10766;
          chunk__10752 = G__10767;
          count__10753 = G__10768;
          i__10754 = G__10769;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.write_all.cljs$lang$maxFixedArity = 1;
cljs.core.write_all.cljs$lang$applyTo = function(seq10749) {
  var G__10750 = cljs.core.first(seq10749);
  var seq10749__$1 = cljs.core.next(seq10749);
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(G__10750, seq10749__$1);
};
cljs.core.string_print = function cljs$core$string_print(x) {
  cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function cljs$core$flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj10771 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj10771;
}();
cljs.core.quote_string = function cljs$core$quote_string(s) {
  return [cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.print_meta_QMARK_ = function cljs$core$print_meta_QMARK_(opts, obj) {
  var and__6141__auto__ = cljs.core.boolean$(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964)));
  if (and__6141__auto__) {
    var and__6141__auto____$1 = !(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 131072 || obj.cljs$core$IMeta$ ? true : false : false;
    if (and__6141__auto____$1) {
      return !(cljs.core.meta(obj) == null);
    } else {
      return and__6141__auto____$1;
    }
  } else {
    return and__6141__auto__;
  }
};
cljs.core.pr_writer_impl = function cljs$core$pr_writer_impl(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write(writer, "nil");
  } else {
    if (cljs.core.print_meta_QMARK_(opts, obj)) {
      cljs.core._write(writer, "^");
      var G__10787_10796 = cljs.core.meta(obj);
      var G__10788_10797 = writer;
      var G__10789_10798 = opts;
      cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3(G__10787_10796, G__10788_10797, G__10789_10798) : cljs.core.pr_writer.call(null, G__10787_10796, G__10788_10797, G__10789_10798);
      cljs.core._write(writer, " ");
    } else {
    }
    if (obj.cljs$lang$type) {
      return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
    } else {
      if (!(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 2147483648 || obj.cljs$core$IPrintWithWriter$ ? true : false : false) {
        return obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, opts);
      } else {
        if (obj === true || obj === false || typeof obj === "number") {
          return cljs.core._write(writer, [cljs.core.str(obj)].join(""));
        } else {
          if (cljs.core.object_QMARK_(obj)) {
            cljs.core._write(writer, "#js ");
            var G__10791 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k), obj[k]], null);
            }, cljs.core.js_keys(obj));
            var G__10792 = cljs.core.pr_writer;
            var G__10793 = writer;
            var G__10794 = opts;
            return cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__10791, G__10792, G__10793, G__10794) : cljs.core.print_map.call(null, G__10791, G__10792, G__10793, G__10794);
          } else {
            if (cljs.core.array_QMARK_(obj)) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#js [", " ", "]", opts, obj);
            } else {
              if (goog.isString(obj)) {
                if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                  return cljs.core._write(writer, cljs.core.quote_string(obj));
                } else {
                  return cljs.core._write(writer, obj);
                }
              } else {
                if (goog.isFunction(obj)) {
                  var name = obj.name;
                  var name__$1 = cljs.core.truth_(function() {
                    var or__6153__auto__ = name == null;
                    if (or__6153__auto__) {
                      return or__6153__auto__;
                    } else {
                      return goog.string.isEmpty(name);
                    }
                  }()) ? "Function" : name;
                  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#object[", name__$1, ' "', [cljs.core.str(obj)].join(""), '"]'], 0));
                } else {
                  if (obj instanceof Date) {
                    var normalize = function(n, len) {
                      var ns = [cljs.core.str(n)].join("");
                      while (true) {
                        if (cljs.core.count(ns) < len) {
                          var G__10799 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                          ns = G__10799;
                          continue;
                        } else {
                          return ns;
                        }
                        break;
                      }
                    };
                    return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize(obj.getUTCMonth() + 1, 2), "-", normalize(obj.getUTCDate(), 2), "T", normalize(obj.getUTCHours(), 2), ":", normalize(obj.getUTCMinutes(), 2), ":", normalize(obj.getUTCSeconds(), 2), ".", normalize(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
                  } else {
                    if (cljs.core.regexp_QMARK_(obj)) {
                      return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#"', obj.source, '"'], 0));
                    } else {
                      if (!(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 2147483648 || obj.cljs$core$IPrintWithWriter$ ? true : false : false) {
                        return cljs.core._pr_writer(obj, writer, opts);
                      } else {
                        if (cljs.core.truth_(obj.constructor.cljs$lang$ctorStr)) {
                          return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#object[", obj.constructor.cljs$lang$ctorStr.replace(new RegExp("/", "g"), "."), "]"], 0));
                        } else {
                          var name = obj.constructor.name;
                          var name__$1 = cljs.core.truth_(function() {
                            var or__6153__auto__ = name == null;
                            if (or__6153__auto__) {
                              return or__6153__auto__;
                            } else {
                              return goog.string.isEmpty(name);
                            }
                          }()) ? "Object" : name;
                          return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#object[", name__$1, " ", [cljs.core.str(obj)].join(""), "]"], 0));
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_writer = function cljs$core$pr_writer(obj, writer, opts) {
  var temp__4655__auto__ = (new cljs.core.Keyword(null, "alt-impl", "alt-impl", 670969595)).cljs$core$IFn$_invoke$arity$1(opts);
  if (cljs.core.truth_(temp__4655__auto__)) {
    var alt_impl = temp__4655__auto__;
    var G__10803 = obj;
    var G__10804 = writer;
    var G__10805 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts, new cljs.core.Keyword(null, "fallback-impl", "fallback-impl", -1501286995), cljs.core.pr_writer_impl);
    return alt_impl.cljs$core$IFn$_invoke$arity$3 ? alt_impl.cljs$core$IFn$_invoke$arity$3(G__10803, G__10804, G__10805) : alt_impl.call(null, G__10803, G__10804, G__10805);
  } else {
    return cljs.core.pr_writer_impl(obj, writer, opts);
  }
};
cljs.core.pr_seq_writer = function cljs$core$pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
  var seq__10810 = cljs.core.seq(cljs.core.next(objs));
  var chunk__10811 = null;
  var count__10812 = 0;
  var i__10813 = 0;
  while (true) {
    if (i__10813 < count__10812) {
      var obj = chunk__10811.cljs$core$IIndexed$_nth$arity$2(null, i__10813);
      cljs.core._write(writer, " ");
      cljs.core.pr_writer(obj, writer, opts);
      var G__10814 = seq__10810;
      var G__10815 = chunk__10811;
      var G__10816 = count__10812;
      var G__10817 = i__10813 + 1;
      seq__10810 = G__10814;
      chunk__10811 = G__10815;
      count__10812 = G__10816;
      i__10813 = G__10817;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__10810);
      if (temp__4657__auto__) {
        var seq__10810__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10810__$1)) {
          var c__6956__auto__ = cljs.core.chunk_first(seq__10810__$1);
          var G__10818 = cljs.core.chunk_rest(seq__10810__$1);
          var G__10819 = c__6956__auto__;
          var G__10820 = cljs.core.count(c__6956__auto__);
          var G__10821 = 0;
          seq__10810 = G__10818;
          chunk__10811 = G__10819;
          count__10812 = G__10820;
          i__10813 = G__10821;
          continue;
        } else {
          var obj = cljs.core.first(seq__10810__$1);
          cljs.core._write(writer, " ");
          cljs.core.pr_writer(obj, writer, opts);
          var G__10822 = cljs.core.next(seq__10810__$1);
          var G__10823 = null;
          var G__10824 = 0;
          var G__10825 = 0;
          seq__10810 = G__10822;
          chunk__10811 = G__10823;
          count__10812 = G__10824;
          i__10813 = G__10825;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function cljs$core$pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer(objs, writer, opts);
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return sb;
};
cljs.core.pr_str_with_opts = function cljs$core$pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "";
  } else {
    return [cljs.core.str(cljs.core.pr_sb_with_opts(objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function cljs$core$prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts(objs, opts);
    sb.append("\n");
    return [cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function cljs$core$pr_with_opts(objs, opts) {
  return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
};
cljs.core.newline = function cljs$core$newline(var_args) {
  var args10826 = [];
  var len__7211__auto___10829 = arguments.length;
  var i__7212__auto___10830 = 0;
  while (true) {
    if (i__7212__auto___10830 < len__7211__auto___10829) {
      args10826.push(arguments[i__7212__auto___10830]);
      var G__10831 = i__7212__auto___10830 + 1;
      i__7212__auto___10830 = G__10831;
      continue;
    } else {
    }
    break;
  }
  var G__10828 = args10826.length;
  switch(G__10828) {
    case 0:
      return cljs.core.newline.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10826.length)].join(""));;
  }
};
cljs.core.newline.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(null);
};
cljs.core.newline.cljs$core$IFn$_invoke$arity$1 = function(opts) {
  cljs.core.string_print("\n");
  if (cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush();
  } else {
    return null;
  }
};
cljs.core.newline.cljs$lang$maxFixedArity = 1;
cljs.core.pr_str = function cljs$core$pr_str(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___10834 = arguments.length;
  var i__7212__auto___10835 = 0;
  while (true) {
    if (i__7212__auto___10835 < len__7211__auto___10834) {
      args__7218__auto__.push(arguments[i__7212__auto___10835]);
      var G__10836 = i__7212__auto___10835 + 1;
      i__7212__auto___10835 = G__10836;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr_str.cljs$lang$maxFixedArity = 0;
cljs.core.pr_str.cljs$lang$applyTo = function(seq10833) {
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10833));
};
cljs.core.prn_str = function cljs$core$prn_str(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___10838 = arguments.length;
  var i__7212__auto___10839 = 0;
  while (true) {
    if (i__7212__auto___10839 < len__7211__auto___10838) {
      args__7218__auto__.push(arguments[i__7212__auto___10839]);
      var G__10840 = i__7212__auto___10839 + 1;
      i__7212__auto___10839 = G__10840;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.prn_str.cljs$lang$maxFixedArity = 0;
cljs.core.prn_str.cljs$lang$applyTo = function(seq10837) {
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10837));
};
cljs.core.pr = function cljs$core$pr(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___10842 = arguments.length;
  var i__7212__auto___10843 = 0;
  while (true) {
    if (i__7212__auto___10843 < len__7211__auto___10842) {
      args__7218__auto__.push(arguments[i__7212__auto___10843]);
      var G__10844 = i__7212__auto___10843 + 1;
      i__7212__auto___10843 = G__10844;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr.cljs$lang$maxFixedArity = 0;
cljs.core.pr.cljs$lang$applyTo = function(seq10841) {
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10841));
};
cljs.core.print = function() {
  var cljs$core$cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10845__i = 0, G__10845__a = new Array(arguments.length - 0);
      while (G__10845__i < G__10845__a.length) {
        G__10845__a[G__10845__i] = arguments[G__10845__i + 0];
        ++G__10845__i;
      }
      objs = new cljs.core.IndexedSeq(G__10845__a, 0);
    }
    return cljs$core$cljs_core_print__delegate.call(this, objs);
  };
  cljs$core$cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs$core$cljs_core_print.cljs$lang$applyTo = function(arglist__10846) {
    var objs = cljs.core.seq(arglist__10846);
    return cljs$core$cljs_core_print__delegate(objs);
  };
  cljs$core$cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs$core$cljs_core_print__delegate;
  return cljs$core$cljs_core_print;
}();
cljs.core.print_str = function cljs$core$print_str(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___10848 = arguments.length;
  var i__7212__auto___10849 = 0;
  while (true) {
    if (i__7212__auto___10849 < len__7211__auto___10848) {
      args__7218__auto__.push(arguments[i__7212__auto___10849]);
      var G__10850 = i__7212__auto___10849 + 1;
      i__7212__auto___10849 = G__10850;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.print_str.cljs$lang$maxFixedArity = 0;
cljs.core.print_str.cljs$lang$applyTo = function(seq10847) {
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10847));
};
cljs.core.println = function cljs$core$println(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___10852 = arguments.length;
  var i__7212__auto___10853 = 0;
  while (true) {
    if (i__7212__auto___10853 < len__7211__auto___10852) {
      args__7218__auto__.push(arguments[i__7212__auto___10853]);
      var G__10854 = i__7212__auto___10853 + 1;
      i__7212__auto___10853 = G__10854;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
cljs.core.println.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.println.cljs$lang$maxFixedArity = 0;
cljs.core.println.cljs$lang$applyTo = function(seq10851) {
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10851));
};
cljs.core.println_str = function cljs$core$println_str(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___10856 = arguments.length;
  var i__7212__auto___10857 = 0;
  while (true) {
    if (i__7212__auto___10857 < len__7211__auto___10856) {
      args__7218__auto__.push(arguments[i__7212__auto___10857]);
      var G__10858 = i__7212__auto___10857 + 1;
      i__7212__auto___10857 = G__10858;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.println_str.cljs$lang$maxFixedArity = 0;
cljs.core.println_str.cljs$lang$applyTo = function(seq10855) {
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10855));
};
cljs.core.prn = function cljs$core$prn(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___10860 = arguments.length;
  var i__7212__auto___10861 = 0;
  while (true) {
    if (i__7212__auto___10861 < len__7211__auto___10860) {
      args__7218__auto__.push(arguments[i__7212__auto___10861]);
      var G__10862 = i__7212__auto___10861 + 1;
      i__7212__auto___10861 = G__10862;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.prn.cljs$lang$maxFixedArity = 0;
cljs.core.prn.cljs$lang$applyTo = function(seq10859) {
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10859));
};
cljs.core.print_map = function cljs$core$print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
    var G__10869_10875 = cljs.core.key(e);
    var G__10870_10876 = w;
    var G__10871_10877 = opts__$1;
    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10869_10875, G__10870_10876, G__10871_10877) : print_one.call(null, G__10869_10875, G__10870_10876, G__10871_10877);
    cljs.core._write(w, " ");
    var G__10872 = cljs.core.val(e);
    var G__10873 = w;
    var G__10874 = opts__$1;
    return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10872, G__10873, G__10874) : print_one.call(null, G__10872, G__10873, G__10874);
  }, "{", ", ", "}", opts, cljs.core.seq(m));
};
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#object [cljs.core.Volatile ");
  cljs.core.pr_writer(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "val", "val", 128701612), a__$1.state], null), writer, opts);
  return cljs.core._write(writer, "]");
};
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#'");
  return cljs.core.pr_writer(a__$1.sym, writer, opts);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#object [cljs.core.Atom ");
  cljs.core.pr_writer(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "val", "val", 128701612), a__$1.state], null), writer, opts);
  return cljs.core._write(writer, "]");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write(writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (y instanceof cljs.core.Symbol) {
    return cljs.core.compare_symbols(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (y instanceof cljs.core.Keyword) {
    return cljs.core.compare_keywords(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (cljs.core.vector_QMARK_(y)) {
    return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (cljs.core.vector_QMARK_(y)) {
    return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.alter_meta_BANG_ = function cljs$core$alter_meta_BANG_(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___10881 = arguments.length;
  var i__7212__auto___10882 = 0;
  while (true) {
    if (i__7212__auto___10882 < len__7211__auto___10881) {
      args__7218__auto__.push(arguments[i__7212__auto___10882]);
      var G__10883 = i__7212__auto___10882 + 1;
      i__7212__auto___10882 = G__10883;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 2 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(2), 0) : null;
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7219__auto__);
};
cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(iref, f, args) {
  return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
};
cljs.core.alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.alter_meta_BANG_.cljs$lang$applyTo = function(seq10878) {
  var G__10879 = cljs.core.first(seq10878);
  var seq10878__$1 = cljs.core.next(seq10878);
  var G__10880 = cljs.core.first(seq10878__$1);
  var seq10878__$2 = cljs.core.next(seq10878__$1);
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10879, G__10880, seq10878__$2);
};
cljs.core.reset_meta_BANG_ = function cljs$core$reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function cljs$core$add_watch(iref, key, f) {
  cljs.core._add_watch(iref, key, f);
  return iref;
};
cljs.core.remove_watch = function cljs$core$remove_watch(iref, key) {
  cljs.core._remove_watch(iref, key);
  return iref;
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function cljs$core$gensym(var_args) {
  var args10884 = [];
  var len__7211__auto___10887 = arguments.length;
  var i__7212__auto___10888 = 0;
  while (true) {
    if (i__7212__auto___10888 < len__7211__auto___10887) {
      args10884.push(arguments[i__7212__auto___10888]);
      var G__10889 = i__7212__auto___10888 + 1;
      i__7212__auto___10888 = G__10889;
      continue;
    } else {
    }
    break;
  }
  var G__10886 = args10884.length;
  switch(G__10886) {
    case 0:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10884.length)].join(""));;
  }
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1("G__");
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$1 = function(prefix_string) {
  if (cljs.core.gensym_counter == null) {
    cljs.core.gensym_counter = cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(0) : cljs.core.atom.call(null, 0);
  } else {
  }
  return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
};
cljs.core.gensym.cljs$lang$maxFixedArity = 1;
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 1;
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null);
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(x) {
  var self__ = this;
  var x__$1 = this;
  return cljs.core.not(self__.f);
};
cljs.core.Delay.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "value", "value", 1946509744, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function cljs$core$__GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function cljs$core$delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function cljs$core$force(x) {
  if (cljs.core.delay_QMARK_(x)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(x) : cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function cljs$core$realized_QMARK_(x) {
  return cljs.core._realized_QMARK_(x);
};
cljs.core.preserving_reduced = function cljs$core$preserving_reduced(rf) {
  return function(p1__10891_SHARP_, p2__10892_SHARP_) {
    var ret = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(p1__10891_SHARP_, p2__10892_SHARP_) : rf.call(null, p1__10891_SHARP_, p2__10892_SHARP_);
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.reduced(ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cljs$core$cat(rf) {
  var rf1 = cljs.core.preserving_reduced(rf);
  return function(rf1) {
    return function() {
      var G__10893 = null;
      var G__10893__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__10893__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__10893__2 = function(result, input) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
      };
      G__10893 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__10893__0.call(this);
          case 1:
            return G__10893__1.call(this, result);
          case 2:
            return G__10893__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__10893.cljs$core$IFn$_invoke$arity$0 = G__10893__0;
      G__10893.cljs$core$IFn$_invoke$arity$1 = G__10893__1;
      G__10893.cljs$core$IFn$_invoke$arity$2 = G__10893__2;
      return G__10893;
    }();
  }(rf1);
};
cljs.core.dedupe = function cljs$core$dedupe(var_args) {
  var args10894 = [];
  var len__7211__auto___10897 = arguments.length;
  var i__7212__auto___10898 = 0;
  while (true) {
    if (i__7212__auto___10898 < len__7211__auto___10897) {
      args10894.push(arguments[i__7212__auto___10898]);
      var G__10899 = i__7212__auto___10898 + 1;
      i__7212__auto___10898 = G__10899;
      continue;
    } else {
    }
    break;
  }
  var G__10896 = args10894.length;
  switch(G__10896) {
    case 0:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10894.length)].join(""));;
  }
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(pa) {
      return function() {
        var G__10901 = null;
        var G__10901__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10901__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__10901__2 = function(result, input) {
          var prior = cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(pa) : cljs.core.deref.call(null, pa);
          cljs.core.vreset_BANG_(pa, input);
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input)) {
            return result;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__10901 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10901__0.call(this);
            case 1:
              return G__10901__1.call(this, result);
            case 2:
              return G__10901__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10901.cljs$core$IFn$_invoke$arity$0 = G__10901__0;
        G__10901.cljs$core$IFn$_invoke$arity$1 = G__10901__1;
        G__10901.cljs$core$IFn$_invoke$arity$2 = G__10901__2;
        return G__10901;
      }();
    }(pa);
  };
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
};
cljs.core.dedupe.cljs$lang$maxFixedArity = 1;
cljs.core.random_sample = function cljs$core$random_sample(var_args) {
  var args10902 = [];
  var len__7211__auto___10905 = arguments.length;
  var i__7212__auto___10906 = 0;
  while (true) {
    if (i__7212__auto___10906 < len__7211__auto___10905) {
      args10902.push(arguments[i__7212__auto___10906]);
      var G__10907 = i__7212__auto___10906 + 1;
      i__7212__auto___10906 = G__10907;
      continue;
    } else {
    }
    break;
  }
  var G__10904 = args10902.length;
  switch(G__10904) {
    case 1:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10902.length)].join(""));;
  }
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1 = function(prob) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
    return (cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null)) < prob;
  });
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2 = function(prob, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
    return (cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null)) < prob;
  }, coll);
};
cljs.core.random_sample.cljs$lang$maxFixedArity = 2;
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform, self__.coll));
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$2 = function(_, f) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(self__.xform, cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f), self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform, cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f), init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "coll", "coll", -1006698606, null)], null);
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function cljs$core$__GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__7147__auto__ = this;
  return cljs.core.es6_iterator(this__7147__auto__);
};
cljs.core.eduction = function cljs$core$eduction(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___10910 = arguments.length;
  var i__7212__auto___10911 = 0;
  while (true) {
    if (i__7212__auto___10911 < len__7211__auto___10910) {
      args__7218__auto__.push(arguments[i__7212__auto___10911]);
      var G__10912 = i__7212__auto___10911 + 1;
      i__7212__auto___10911 = G__10912;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic = function(xforms) {
  return new cljs.core.Eduction(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.comp, cljs.core.butlast(xforms)), cljs.core.last(xforms));
};
cljs.core.eduction.cljs$lang$maxFixedArity = 0;
cljs.core.eduction.cljs$lang$applyTo = function(seq10909) {
  return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10909));
};
cljs.core.run_BANG_ = function cljs$core$run_BANG_(proc, coll) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__10914_SHARP_, p2__10913_SHARP_) {
    return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(p2__10913_SHARP_) : proc.call(null, p2__10913_SHARP_);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
};
cljs.core._clj__GT_js = function cljs$core$_clj__GT_js(x) {
  if (!(x == null) && !(x.cljs$core$IEncodeJS$_clj__GT_js$arity$1 == null)) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__6808__auto__ = x == null ? null : x;
    var m__6809__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__6809__auto__.call(null, x);
    } else {
      var m__6809__auto____$1 = cljs.core._clj__GT_js["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__6809__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("IEncodeJS.-clj-\x3ejs", x);
      }
    }
  }
};
cljs.core._key__GT_js = function cljs$core$_key__GT_js(x) {
  if (!(x == null) && !(x.cljs$core$IEncodeJS$_key__GT_js$arity$1 == null)) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__6808__auto__ = x == null ? null : x;
    var m__6809__auto__ = cljs.core._key__GT_js[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__6809__auto__.call(null, x);
    } else {
      var m__6809__auto____$1 = cljs.core._key__GT_js["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__6809__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("IEncodeJS.-key-\x3ejs", x);
      }
    }
  }
};
cljs.core.key__GT_js = function cljs$core$key__GT_js(k) {
  if (!(k == null) ? false || k.cljs$core$IEncodeJS$ ? true : !k.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, k) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, k)) {
    return cljs.core._clj__GT_js(k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(k) : cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([k], 0));
    }
  }
};
cljs.core.clj__GT_js = function cljs$core$clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (!(x == null) ? false || x.cljs$core$IEncodeJS$ ? true : !x.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, x) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, x)) {
      return cljs.core._clj__GT_js(x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name(x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return [cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_(x)) {
            var m = {};
            var seq__10933_10943 = cljs.core.seq(x);
            var chunk__10934_10944 = null;
            var count__10935_10945 = 0;
            var i__10936_10946 = 0;
            while (true) {
              if (i__10936_10946 < count__10935_10945) {
                var vec__10937_10947 = chunk__10934_10944.cljs$core$IIndexed$_nth$arity$2(null, i__10936_10946);
                var k_10948 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10937_10947, 0, null);
                var v_10949 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10937_10947, 1, null);
                m[cljs.core.key__GT_js(k_10948)] = cljs$core$clj__GT_js(v_10949);
                var G__10950 = seq__10933_10943;
                var G__10951 = chunk__10934_10944;
                var G__10952 = count__10935_10945;
                var G__10953 = i__10936_10946 + 1;
                seq__10933_10943 = G__10950;
                chunk__10934_10944 = G__10951;
                count__10935_10945 = G__10952;
                i__10936_10946 = G__10953;
                continue;
              } else {
                var temp__4657__auto___10954 = cljs.core.seq(seq__10933_10943);
                if (temp__4657__auto___10954) {
                  var seq__10933_10955__$1 = temp__4657__auto___10954;
                  if (cljs.core.chunked_seq_QMARK_(seq__10933_10955__$1)) {
                    var c__6956__auto___10956 = cljs.core.chunk_first(seq__10933_10955__$1);
                    var G__10957 = cljs.core.chunk_rest(seq__10933_10955__$1);
                    var G__10958 = c__6956__auto___10956;
                    var G__10959 = cljs.core.count(c__6956__auto___10956);
                    var G__10960 = 0;
                    seq__10933_10943 = G__10957;
                    chunk__10934_10944 = G__10958;
                    count__10935_10945 = G__10959;
                    i__10936_10946 = G__10960;
                    continue;
                  } else {
                    var vec__10938_10961 = cljs.core.first(seq__10933_10955__$1);
                    var k_10962 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10938_10961, 0, null);
                    var v_10963 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10938_10961, 1, null);
                    m[cljs.core.key__GT_js(k_10962)] = cljs$core$clj__GT_js(v_10963);
                    var G__10964 = cljs.core.next(seq__10933_10955__$1);
                    var G__10965 = null;
                    var G__10966 = 0;
                    var G__10967 = 0;
                    seq__10933_10943 = G__10964;
                    chunk__10934_10944 = G__10965;
                    count__10935_10945 = G__10966;
                    i__10936_10946 = G__10967;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_(x)) {
              var arr = [];
              var seq__10939_10968 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$clj__GT_js, x));
              var chunk__10940_10969 = null;
              var count__10941_10970 = 0;
              var i__10942_10971 = 0;
              while (true) {
                if (i__10942_10971 < count__10941_10970) {
                  var x_10972__$1 = chunk__10940_10969.cljs$core$IIndexed$_nth$arity$2(null, i__10942_10971);
                  arr.push(x_10972__$1);
                  var G__10973 = seq__10939_10968;
                  var G__10974 = chunk__10940_10969;
                  var G__10975 = count__10941_10970;
                  var G__10976 = i__10942_10971 + 1;
                  seq__10939_10968 = G__10973;
                  chunk__10940_10969 = G__10974;
                  count__10941_10970 = G__10975;
                  i__10942_10971 = G__10976;
                  continue;
                } else {
                  var temp__4657__auto___10977 = cljs.core.seq(seq__10939_10968);
                  if (temp__4657__auto___10977) {
                    var seq__10939_10978__$1 = temp__4657__auto___10977;
                    if (cljs.core.chunked_seq_QMARK_(seq__10939_10978__$1)) {
                      var c__6956__auto___10979 = cljs.core.chunk_first(seq__10939_10978__$1);
                      var G__10980 = cljs.core.chunk_rest(seq__10939_10978__$1);
                      var G__10981 = c__6956__auto___10979;
                      var G__10982 = cljs.core.count(c__6956__auto___10979);
                      var G__10983 = 0;
                      seq__10939_10968 = G__10980;
                      chunk__10940_10969 = G__10981;
                      count__10941_10970 = G__10982;
                      i__10942_10971 = G__10983;
                      continue;
                    } else {
                      var x_10984__$1 = cljs.core.first(seq__10939_10978__$1);
                      arr.push(x_10984__$1);
                      var G__10985 = cljs.core.next(seq__10939_10978__$1);
                      var G__10986 = null;
                      var G__10987 = 0;
                      var G__10988 = 0;
                      seq__10939_10968 = G__10985;
                      chunk__10940_10969 = G__10986;
                      count__10941_10970 = G__10987;
                      i__10942_10971 = G__10988;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
};
cljs.core._js__GT_clj = function cljs$core$_js__GT_clj(x, options) {
  if (!(x == null) && !(x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2 == null)) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__6808__auto__ = x == null ? null : x;
    var m__6809__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$2(x, options) : m__6809__auto__.call(null, x, options);
    } else {
      var m__6809__auto____$1 = cljs.core._js__GT_clj["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2(x, options) : m__6809__auto____$1.call(null, x, options);
      } else {
        throw cljs.core.missing_protocol("IEncodeClojure.-js-\x3eclj", x);
      }
    }
  }
};
cljs.core.js__GT_clj = function cljs$core$js__GT_clj(var_args) {
  var args10989 = [];
  var len__7211__auto___11014 = arguments.length;
  var i__7212__auto___11015 = 0;
  while (true) {
    if (i__7212__auto___11015 < len__7211__auto___11014) {
      args10989.push(arguments[i__7212__auto___11015]);
      var G__11016 = i__7212__auto___11015 + 1;
      i__7212__auto___11015 = G__11016;
      continue;
    } else {
    }
    break;
  }
  var G__10993 = args10989.length;
  switch(G__10993) {
    case 1:
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args10989.slice(1), 0);
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7230__auto__);
  }
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null)], 0));
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = function(x, opts) {
  var map__10994 = opts;
  var map__10994__$1 = (!(map__10994 == null) ? map__10994.cljs$lang$protocol_mask$partition0$ & 64 || map__10994.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__10994) : map__10994;
  var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10994__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
  var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
  var f = function(map__10994, map__10994__$1, keywordize_keys, keyfn) {
    return function cljs$core$thisfn(x__$1) {
      if (!(x__$1 == null) ? false || x__$1.cljs$core$IEncodeClojure$ ? true : !x__$1.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, x__$1) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, x__$1)) {
        return cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq_QMARK_(x__$1)) {
          return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
        } else {
          if (cljs.core.coll_QMARK_(x__$1)) {
            return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
          } else {
            if (cljs.core.array_QMARK_(x__$1)) {
              return cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
            } else {
              if (cljs.core.type(x__$1) === Object) {
                return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY, function() {
                  var iter__6925__auto__ = function(map__10994, map__10994__$1, keywordize_keys, keyfn) {
                    return function cljs$core$thisfn_$_iter__11008(s__11009) {
                      return new cljs.core.LazySeq(null, function(map__10994, map__10994__$1, keywordize_keys, keyfn) {
                        return function() {
                          var s__11009__$1 = s__11009;
                          while (true) {
                            var temp__4657__auto__ = cljs.core.seq(s__11009__$1);
                            if (temp__4657__auto__) {
                              var s__11009__$2 = temp__4657__auto__;
                              if (cljs.core.chunked_seq_QMARK_(s__11009__$2)) {
                                var c__6923__auto__ = cljs.core.chunk_first(s__11009__$2);
                                var size__6924__auto__ = cljs.core.count(c__6923__auto__);
                                var b__11011 = cljs.core.chunk_buffer(size__6924__auto__);
                                if (function() {
                                  var i__11010 = 0;
                                  while (true) {
                                    if (i__11010 < size__6924__auto__) {
                                      var k = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__6923__auto__, i__11010);
                                      cljs.core.chunk_append(b__11011, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(k) : keyfn.call(null, k), cljs$core$thisfn(x__$1[k])], null));
                                      var G__11018 = i__11010 + 1;
                                      i__11010 = G__11018;
                                      continue;
                                    } else {
                                      return true;
                                    }
                                    break;
                                  }
                                }()) {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__11011), cljs$core$thisfn_$_iter__11008(cljs.core.chunk_rest(s__11009__$2)));
                                } else {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__11011), null);
                                }
                              } else {
                                var k = cljs.core.first(s__11009__$2);
                                return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(k) : keyfn.call(null, k), cljs$core$thisfn(x__$1[k])], null), cljs$core$thisfn_$_iter__11008(cljs.core.rest(s__11009__$2)));
                              }
                            } else {
                              return null;
                            }
                            break;
                          }
                        };
                      }(map__10994, map__10994__$1, keywordize_keys, keyfn), null, null);
                    };
                  }(map__10994, map__10994__$1, keywordize_keys, keyfn);
                  return iter__6925__auto__(cljs.core.js_keys(x__$1));
                }());
              } else {
                return x__$1;
              }
            }
          }
        }
      }
    };
  }(map__10994, map__10994__$1, keywordize_keys, keyfn);
  return f(x);
};
cljs.core.js__GT_clj.cljs$lang$applyTo = function(seq10990) {
  var G__10991 = cljs.core.first(seq10990);
  var seq10990__$1 = cljs.core.next(seq10990);
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(G__10991, seq10990__$1);
};
cljs.core.js__GT_clj.cljs$lang$maxFixedArity = 1;
cljs.core.memoize = function cljs$core$memoize(f) {
  var mem = function() {
    var G__11020 = cljs.core.PersistentArrayMap.EMPTY;
    return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__11020) : cljs.core.atom.call(null, G__11020);
  }();
  return function(mem) {
    return function() {
      var G__11021__delegate = function(args) {
        var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(mem) : cljs.core.deref.call(null, mem), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
          cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__11021 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__11022__i = 0, G__11022__a = new Array(arguments.length - 0);
          while (G__11022__i < G__11022__a.length) {
            G__11022__a[G__11022__i] = arguments[G__11022__i + 0];
            ++G__11022__i;
          }
          args = new cljs.core.IndexedSeq(G__11022__a, 0);
        }
        return G__11021__delegate.call(this, args);
      };
      G__11021.cljs$lang$maxFixedArity = 0;
      G__11021.cljs$lang$applyTo = function(arglist__11023) {
        var args = cljs.core.seq(arglist__11023);
        return G__11021__delegate(args);
      };
      G__11021.cljs$core$IFn$_invoke$arity$variadic = G__11021__delegate;
      return G__11021;
    }();
  }(mem);
};
cljs.core.trampoline = function cljs$core$trampoline(var_args) {
  var args11024 = [];
  var len__7211__auto___11029 = arguments.length;
  var i__7212__auto___11030 = 0;
  while (true) {
    if (i__7212__auto___11030 < len__7211__auto___11029) {
      args11024.push(arguments[i__7212__auto___11030]);
      var G__11031 = i__7212__auto___11030 + 1;
      i__7212__auto___11030 = G__11031;
      continue;
    } else {
    }
    break;
  }
  var G__11028 = args11024.length;
  switch(G__11028) {
    case 1:
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__7230__auto__ = new cljs.core.IndexedSeq(args11024.slice(1), 0);
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7230__auto__);
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1 = function(f) {
  while (true) {
    var ret = f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    if (cljs.core.fn_QMARK_(ret)) {
      var G__11033 = ret;
      f = G__11033;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(function() {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
  });
};
cljs.core.trampoline.cljs$lang$applyTo = function(seq11025) {
  var G__11026 = cljs.core.first(seq11025);
  var seq11025__$1 = cljs.core.next(seq11025);
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(G__11026, seq11025__$1);
};
cljs.core.trampoline.cljs$lang$maxFixedArity = 1;
cljs.core.rand = function cljs$core$rand(var_args) {
  var args11034 = [];
  var len__7211__auto___11037 = arguments.length;
  var i__7212__auto___11038 = 0;
  while (true) {
    if (i__7212__auto___11038 < len__7211__auto___11037) {
      args11034.push(arguments[i__7212__auto___11038]);
      var G__11039 = i__7212__auto___11038 + 1;
      i__7212__auto___11038 = G__11039;
      continue;
    } else {
    }
    break;
  }
  var G__11036 = args11034.length;
  switch(G__11036) {
    case 0:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11034.length)].join(""));;
  }
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(1);
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return Math.random() * n;
};
cljs.core.rand.cljs$lang$maxFixedArity = 1;
cljs.core.rand_int = function cljs$core$rand_int(n) {
  var G__11042 = Math.random() * n;
  return Math.floor(G__11042);
};
cljs.core.rand_nth = function cljs$core$rand_nth(coll) {
  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
};
cljs.core.group_by = function cljs$core$group_by(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
    var k = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x);
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function cljs$core$make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function cljs$core$get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = function() {
      var G__11044 = cljs.core.make_hierarchy();
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__11044) : cljs.core.atom.call(null, G__11044);
    }();
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function cljs$core$swap_global_hierarchy_BANG_(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___11047 = arguments.length;
  var i__7212__auto___11048 = 0;
  while (true) {
    if (i__7212__auto___11048 < len__7211__auto___11047) {
      args__7218__auto__.push(arguments[i__7212__auto___11048]);
      var G__11049 = i__7212__auto___11048 + 1;
      i__7212__auto___11048 = G__11049;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(seq11045) {
  var G__11046 = cljs.core.first(seq11045);
  var seq11045__$1 = cljs.core.next(seq11045);
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__11046, seq11045__$1);
};
cljs.core.isa_QMARK_ = function cljs$core$isa_QMARK_(var_args) {
  var args11050 = [];
  var len__7211__auto___11054 = arguments.length;
  var i__7212__auto___11055 = 0;
  while (true) {
    if (i__7212__auto___11055 < len__7211__auto___11054) {
      args11050.push(arguments[i__7212__auto___11055]);
      var G__11056 = i__7212__auto___11055 + 1;
      i__7212__auto___11055 = G__11056;
      continue;
    } else {
    }
    break;
  }
  var G__11052 = args11050.length;
  switch(G__11052) {
    case 2:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11050.length)].join(""));;
  }
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(child, parent) {
  return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
    var G__11053 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11053) : cljs.core.deref.call(null, G__11053);
  }(), child, parent);
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = function(h, child, parent) {
  var or__6153__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
  if (or__6153__auto__) {
    return or__6153__auto__;
  } else {
    var or__6153__auto____$1 = cljs.core.contains_QMARK_((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
    if (or__6153__auto____$1) {
      return or__6153__auto____$1;
    } else {
      var and__6141__auto__ = cljs.core.vector_QMARK_(parent);
      if (and__6141__auto__) {
        var and__6141__auto____$1 = cljs.core.vector_QMARK_(child);
        if (and__6141__auto____$1) {
          var and__6141__auto____$2 = cljs.core.count(parent) === cljs.core.count(child);
          if (and__6141__auto____$2) {
            var ret = true;
            var i = 0;
            while (true) {
              if (!ret || i === cljs.core.count(parent)) {
                return ret;
              } else {
                var G__11058 = cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(i) : child.call(null, i), parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(i) : parent.call(null, i));
                var G__11059 = i + 1;
                ret = G__11058;
                i = G__11059;
                continue;
              }
              break;
            }
          } else {
            return and__6141__auto____$2;
          }
        } else {
          return and__6141__auto____$1;
        }
      } else {
        return and__6141__auto__;
      }
    }
  }
};
cljs.core.isa_QMARK_.cljs$lang$maxFixedArity = 3;
cljs.core.parents = function cljs$core$parents(var_args) {
  var args11060 = [];
  var len__7211__auto___11064 = arguments.length;
  var i__7212__auto___11065 = 0;
  while (true) {
    if (i__7212__auto___11065 < len__7211__auto___11064) {
      args11060.push(arguments[i__7212__auto___11065]);
      var G__11066 = i__7212__auto___11065 + 1;
      i__7212__auto___11065 = G__11066;
      continue;
    } else {
    }
    break;
  }
  var G__11062 = args11060.length;
  switch(G__11062) {
    case 1:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11060.length)].join(""));;
  }
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(function() {
    var G__11063 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11063) : cljs.core.deref.call(null, G__11063);
  }(), tag);
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.parents.cljs$lang$maxFixedArity = 2;
cljs.core.ancestors = function cljs$core$ancestors(var_args) {
  var args11068 = [];
  var len__7211__auto___11072 = arguments.length;
  var i__7212__auto___11073 = 0;
  while (true) {
    if (i__7212__auto___11073 < len__7211__auto___11072) {
      args11068.push(arguments[i__7212__auto___11073]);
      var G__11074 = i__7212__auto___11073 + 1;
      i__7212__auto___11073 = G__11074;
      continue;
    } else {
    }
    break;
  }
  var G__11070 = args11068.length;
  switch(G__11070) {
    case 1:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11068.length)].join(""));;
  }
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(function() {
    var G__11071 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11071) : cljs.core.deref.call(null, G__11071);
  }(), tag);
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.ancestors.cljs$lang$maxFixedArity = 2;
cljs.core.descendants = function cljs$core$descendants(var_args) {
  var args11076 = [];
  var len__7211__auto___11080 = arguments.length;
  var i__7212__auto___11081 = 0;
  while (true) {
    if (i__7212__auto___11081 < len__7211__auto___11080) {
      args11076.push(arguments[i__7212__auto___11081]);
      var G__11082 = i__7212__auto___11081 + 1;
      i__7212__auto___11081 = G__11082;
      continue;
    } else {
    }
    break;
  }
  var G__11078 = args11076.length;
  switch(G__11078) {
    case 1:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11076.length)].join(""));;
  }
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(function() {
    var G__11079 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11079) : cljs.core.deref.call(null, G__11079);
  }(), tag);
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.descendants.cljs$lang$maxFixedArity = 2;
cljs.core.derive = function cljs$core$derive(var_args) {
  var args11084 = [];
  var len__7211__auto___11087 = arguments.length;
  var i__7212__auto___11088 = 0;
  while (true) {
    if (i__7212__auto___11088 < len__7211__auto___11087) {
      args11084.push(arguments[i__7212__auto___11088]);
      var G__11089 = i__7212__auto___11088 + 1;
      i__7212__auto___11088 = G__11089;
      continue;
    } else {
    }
    break;
  }
  var G__11086 = args11084.length;
  switch(G__11086) {
    case 2:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11084.length)].join(""));;
  }
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  if (cljs.core.truth_(cljs.core.namespace(parent))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
  }
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.derive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag, parent)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
  }
  var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
  var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
  var tf = function(tp, td, ta) {
    return function(m, source, sources, target, targets) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(tp, td, ta) {
        return function(ret, k) {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(target) : targets.call(null, target))));
        };
      }(tp, td, ta), m, cljs.core.cons(source, sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(source) : sources.call(null, source)));
    };
  }(tp, td, ta);
  var or__6153__auto__ = cljs.core.contains_QMARK_(tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(tag) : tp.call(null, tag), parent) ? null : function() {
    if (cljs.core.contains_QMARK_(ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(tag) : ta.call(null, tag), parent)) {
      throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    if (cljs.core.contains_QMARK_(ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(parent) : ta.call(null, parent), tag)) {
      throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf((new cljs.core.Keyword(null, 
    "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
  }();
  if (cljs.core.truth_(or__6153__auto__)) {
    return or__6153__auto__;
  } else {
    return h;
  }
};
cljs.core.derive.cljs$lang$maxFixedArity = 3;
cljs.core.underive = function cljs$core$underive(var_args) {
  var args11094 = [];
  var len__7211__auto___11097 = arguments.length;
  var i__7212__auto___11098 = 0;
  while (true) {
    if (i__7212__auto___11098 < len__7211__auto___11097) {
      args11094.push(arguments[i__7212__auto___11098]);
      var G__11099 = i__7212__auto___11098 + 1;
      i__7212__auto___11098 = G__11099;
      continue;
    } else {
    }
    break;
  }
  var G__11096 = args11094.length;
  switch(G__11096) {
    case 2:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11094.length)].join(""));;
  }
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.underive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var childsParents = cljs.core.truth_(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag)) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
  var newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag);
  var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(parentMap, childsParents, newParents) {
    return function(p1__11091_SHARP_) {
      return cljs.core.cons(cljs.core.first(p1__11091_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__11091_SHARP_), cljs.core.second(p1__11091_SHARP_)));
    };
  }(parentMap, childsParents, newParents), cljs.core.seq(newParents)));
  if (cljs.core.contains_QMARK_(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag), parent)) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(parentMap, childsParents, newParents, deriv_seq) {
      return function(p1__11092_SHARP_, p2__11093_SHARP_) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__11092_SHARP_, p2__11093_SHARP_);
      };
    }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq));
  } else {
    return h;
  }
};
cljs.core.underive.cljs$lang$maxFixedArity = 3;
cljs.core.reset_cache = function cljs$core$reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(method_table) : cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function cljs$core$prefers_STAR_(x, y, prefer_table) {
  var xprefs = (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(prefer_table) : cljs.core.deref.call(null, prefer_table)).call(null, x);
  var or__6153__auto__ = cljs.core.truth_(function() {
    var and__6141__auto__ = xprefs;
    if (cljs.core.truth_(and__6141__auto__)) {
      return xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(y) : xprefs.call(null, y);
    } else {
      return and__6141__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__6153__auto__)) {
    return or__6153__auto__;
  } else {
    var or__6153__auto____$1 = function() {
      var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
      while (true) {
        if (cljs.core.count(ps) > 0) {
          if (cljs.core.truth_(cljs$core$prefers_STAR_(x, cljs.core.first(ps), prefer_table))) {
          } else {
          }
          var G__11113 = cljs.core.rest(ps);
          ps = G__11113;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__6153__auto____$1)) {
      return or__6153__auto____$1;
    } else {
      var or__6153__auto____$2 = function() {
        var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
        while (true) {
          if (cljs.core.count(ps) > 0) {
            if (cljs.core.truth_(cljs$core$prefers_STAR_(cljs.core.first(ps), y, prefer_table))) {
            } else {
            }
            var G__11114 = cljs.core.rest(ps);
            ps = G__11114;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__6153__auto____$2)) {
        return or__6153__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function cljs$core$dominates(x, y, prefer_table) {
  var or__6153__auto__ = cljs.core.prefers_STAR_(x, y, prefer_table);
  if (cljs.core.truth_(or__6153__auto__)) {
    return or__6153__auto__;
  } else {
    return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(x, y);
  }
};
cljs.core.find_and_cache_best_method = function cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__11117) {
    var vec__11118 = p__11117;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11118, 0, null);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11118, 1, null);
    var e = vec__11118;
    if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__6153__auto__ = be == null;
        if (or__6153__auto__) {
          return or__6153__auto__;
        } else {
          return cljs.core.dominates(k, cljs.core.first(be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates(cljs.core.first(be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first(be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(method_table) : cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cached_hierarchy) : cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry));
      return cljs.core.second(best_entry);
    } else {
      cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
      return cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
};
cljs.core._reset = function cljs$core$_reset(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_reset$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__6808__auto__ = mf == null ? null : mf;
    var m__6809__auto__ = cljs.core._reset[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__6809__auto__.call(null, mf);
    } else {
      var m__6809__auto____$1 = cljs.core._reset["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__6809__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
      }
    }
  }
};
cljs.core._add_method = function cljs$core$_add_method(mf, dispatch_val, method) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_add_method$arity$3 == null)) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__6808__auto__ = mf == null ? null : mf;
    var m__6809__auto__ = cljs.core._add_method[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, method) : m__6809__auto__.call(null, mf, dispatch_val, method);
    } else {
      var m__6809__auto____$1 = cljs.core._add_method["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, method) : m__6809__auto____$1.call(null, mf, dispatch_val, method);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
      }
    }
  }
};
cljs.core._remove_method = function cljs$core$_remove_method(mf, dispatch_val) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_remove_method$arity$2 == null)) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__6808__auto__ = mf == null ? null : mf;
    var m__6809__auto__ = cljs.core._remove_method[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__6809__auto__.call(null, mf, dispatch_val);
    } else {
      var m__6809__auto____$1 = cljs.core._remove_method["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__6809__auto____$1.call(null, mf, dispatch_val);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
      }
    }
  }
};
cljs.core._prefer_method = function cljs$core$_prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_prefer_method$arity$3 == null)) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__6808__auto__ = mf == null ? null : mf;
    var m__6809__auto__ = cljs.core._prefer_method[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, dispatch_val_y) : m__6809__auto__.call(null, mf, dispatch_val, dispatch_val_y);
    } else {
      var m__6809__auto____$1 = cljs.core._prefer_method["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, dispatch_val_y) : m__6809__auto____$1.call(null, mf, dispatch_val, dispatch_val_y);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
      }
    }
  }
};
cljs.core._get_method = function cljs$core$_get_method(mf, dispatch_val) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_get_method$arity$2 == null)) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__6808__auto__ = mf == null ? null : mf;
    var m__6809__auto__ = cljs.core._get_method[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__6809__auto__.call(null, mf, dispatch_val);
    } else {
      var m__6809__auto____$1 = cljs.core._get_method["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__6809__auto____$1.call(null, mf, dispatch_val);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
      }
    }
  }
};
cljs.core._methods = function cljs$core$_methods(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_methods$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__6808__auto__ = mf == null ? null : mf;
    var m__6809__auto__ = cljs.core._methods[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__6809__auto__.call(null, mf);
    } else {
      var m__6809__auto____$1 = cljs.core._methods["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__6809__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
      }
    }
  }
};
cljs.core._prefers = function cljs$core$_prefers(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_prefers$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__6808__auto__ = mf == null ? null : mf;
    var m__6809__auto__ = cljs.core._prefers[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__6809__auto__.call(null, mf);
    } else {
      var m__6809__auto____$1 = cljs.core._prefers["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__6809__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
      }
    }
  }
};
cljs.core._default_dispatch_val = function cljs$core$_default_dispatch_val(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1(mf);
  } else {
    var x__6808__auto__ = mf == null ? null : mf;
    var m__6809__auto__ = cljs.core._default_dispatch_val[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__6809__auto__.call(null, mf);
    } else {
      var m__6809__auto____$1 = cljs.core._default_dispatch_val["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__6809__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-default-dispatch-val", mf);
      }
    }
  }
};
cljs.core._dispatch_fn = function cljs$core$_dispatch_fn(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_dispatch_fn$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_dispatch_fn$arity$1(mf);
  } else {
    var x__6808__auto__ = mf == null ? null : mf;
    var m__6809__auto__ = cljs.core._dispatch_fn[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__6809__auto__.call(null, mf);
    } else {
      var m__6809__auto____$1 = cljs.core._dispatch_fn["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__6809__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__6809__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-dispatch-fn", mf);
      }
    }
  }
};
cljs.core.throw_no_method_error = function cljs$core$throw_no_method_error(name, dispatch_val) {
  throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.call = function() {
  var G__11120 = null;
  var G__11120__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
  };
  var G__11120__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(a) : self__.dispatch_fn.call(null, a);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(a) : target_fn.call(null, a);
  };
  var G__11120__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.dispatch_fn.call(null, a, b);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(a, b) : target_fn.call(null, a, b);
  };
  var G__11120__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.dispatch_fn.call(null, a, b, c);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : target_fn.call(null, a, b, c);
  };
  var G__11120__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : target_fn.call(null, a, b, c, d);
  };
  var G__11120__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : target_fn.call(null, a, b, c, d, e);
  };
  var G__11120__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : target_fn.call(null, a, b, c, d, e, f);
  };
  var G__11120__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__11120__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__11120__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__11120__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__11120__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__11120__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__11120__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__11120__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__11120__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__11120__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__11120__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__11120__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__11120__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__11120__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__11120__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__11120 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__11120__1.call(this, self__);
      case 2:
        return G__11120__2.call(this, self__, a);
      case 3:
        return G__11120__3.call(this, self__, a, b);
      case 4:
        return G__11120__4.call(this, self__, a, b, c);
      case 5:
        return G__11120__5.call(this, self__, a, b, c, d);
      case 6:
        return G__11120__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__11120__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__11120__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__11120__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__11120__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__11120__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__11120__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__11120__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__11120__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__11120__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__11120__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__11120__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__11120__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__11120__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__11120__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__11120__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__11120__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__11120.cljs$core$IFn$_invoke$arity$1 = G__11120__1;
  G__11120.cljs$core$IFn$_invoke$arity$2 = G__11120__2;
  G__11120.cljs$core$IFn$_invoke$arity$3 = G__11120__3;
  G__11120.cljs$core$IFn$_invoke$arity$4 = G__11120__4;
  G__11120.cljs$core$IFn$_invoke$arity$5 = G__11120__5;
  G__11120.cljs$core$IFn$_invoke$arity$6 = G__11120__6;
  G__11120.cljs$core$IFn$_invoke$arity$7 = G__11120__7;
  G__11120.cljs$core$IFn$_invoke$arity$8 = G__11120__8;
  G__11120.cljs$core$IFn$_invoke$arity$9 = G__11120__9;
  G__11120.cljs$core$IFn$_invoke$arity$10 = G__11120__10;
  G__11120.cljs$core$IFn$_invoke$arity$11 = G__11120__11;
  G__11120.cljs$core$IFn$_invoke$arity$12 = G__11120__12;
  G__11120.cljs$core$IFn$_invoke$arity$13 = G__11120__13;
  G__11120.cljs$core$IFn$_invoke$arity$14 = G__11120__14;
  G__11120.cljs$core$IFn$_invoke$arity$15 = G__11120__15;
  G__11120.cljs$core$IFn$_invoke$arity$16 = G__11120__16;
  G__11120.cljs$core$IFn$_invoke$arity$17 = G__11120__17;
  G__11120.cljs$core$IFn$_invoke$arity$18 = G__11120__18;
  G__11120.cljs$core$IFn$_invoke$arity$19 = G__11120__19;
  G__11120.cljs$core$IFn$_invoke$arity$20 = G__11120__20;
  G__11120.cljs$core$IFn$_invoke$arity$21 = G__11120__21;
  G__11120.cljs$core$IFn$_invoke$arity$22 = G__11120__22;
  return G__11120;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args11119) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args11119)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(a) : self__.dispatch_fn.call(null, a);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(a) : target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.dispatch_fn.call(null, a, b);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(a, b) : target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.dispatch_fn.call(null, a, b, c);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_default_dispatch_val$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.default_dispatch_val;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_table) : cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.prefer_table) : cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch_fn$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.dispatch_fn;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.cached_hierarchy) : cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.hierarchy) : cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4655__auto__ = (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_cache) : cljs.core.deref.call(null, self__.method_cache)).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4655__auto__)) {
    var target_fn = temp__4655__auto__;
    return target_fn;
  } else {
    var temp__4655__auto____$1 = cljs.core.find_and_cache_best_method(self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4655__auto____$1)) {
      var target_fn = temp__4655__auto____$1;
      return target_fn;
    } else {
      return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_table) : cljs.core.deref.call(null, self__.method_table)).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.getBasis = function() {
  return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "dispatch-fn", "dispatch-fn", -1401088155, null), new cljs.core.Symbol(null, "default-dispatch-val", "default-dispatch-val", -1231201266, null), new cljs.core.Symbol(null, "hierarchy", "hierarchy", 587061186, null), new cljs.core.Symbol(null, "method-table", "method-table", -1878263165, null), new cljs.core.Symbol(null, 
  "prefer-table", "prefer-table", 462168584, null), new cljs.core.Symbol(null, "method-cache", "method-cache", 1230193905, null), new cljs.core.Symbol(null, "cached-hierarchy", "cached-hierarchy", -1085460203, null)], null);
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function cljs$core$__GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function cljs$core$remove_all_methods(multifn) {
  return cljs.core._reset(multifn);
};
cljs.core.remove_method = function cljs$core$remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method(multifn, dispatch_val);
};
cljs.core.prefer_method = function cljs$core$prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function cljs$core$methods(multifn) {
  return cljs.core._methods(multifn);
};
cljs.core.get_method = function cljs$core$get_method(multifn, dispatch_val) {
  return cljs.core._get_method(multifn, dispatch_val);
};
cljs.core.prefers = function cljs$core$prefers(multifn) {
  return cljs.core._prefers(multifn);
};
cljs.core.default_dispatch_val = function cljs$core$default_dispatch_val(multifn) {
  return cljs.core._default_dispatch_val(multifn);
};
cljs.core.dispatch_fn = function cljs$core$dispatch_fn(multifn) {
  return cljs.core._dispatch_fn(multifn);
};
cljs.core.UUID = function(uuid, __hash) {
  this.uuid = uuid;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
  this.cljs$lang$protocol_mask$partition1$ = 2048;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write(writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.__hash == null) {
    self__.__hash = cljs.core.hash(self__.uuid);
  } else {
  }
  return self__.__hash;
};
cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  var G__11121 = self__.uuid;
  var G__11122 = other.uuid;
  return goog.array.defaultCompare(G__11121, G__11122);
};
cljs.core.UUID.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "uuid", "uuid", -504564192, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function cljs$core$__GT_UUID(uuid, __hash) {
  return new cljs.core.UUID(uuid, __hash);
};
cljs.core.uuid = function cljs$core$uuid(s) {
  return new cljs.core.UUID(s, null);
};
cljs.core.random_uuid = function cljs$core$random_uuid() {
  var hex = function cljs$core$random_uuid_$_hex() {
    return cljs.core.rand_int(16).toString(16);
  };
  var rhex = (8 | 3 & cljs.core.rand_int(16)).toString(16);
  return cljs.core.uuid([cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str("-"), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str("-"), cljs.core.str("4"), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str("-"), cljs.core.str(rhex), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), 
  cljs.core.str("-"), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex())].join(""));
};
cljs.core.pr_writer_ex_info = function cljs$core$pr_writer_ex_info(obj, writer, opts) {
  cljs.core._write(writer, "#error {:message ");
  cljs.core.pr_writer(obj.message, writer, opts);
  if (cljs.core.truth_(obj.data)) {
    cljs.core._write(writer, ", :data ");
    cljs.core.pr_writer(obj.data, writer, opts);
  } else {
  }
  if (cljs.core.truth_(obj.cause)) {
    cljs.core._write(writer, ", :cause ");
    cljs.core.pr_writer(obj.cause, writer, opts);
  } else {
  }
  return cljs.core._write(writer, "}");
};
cljs.core.ExceptionInfo = function cljs$core$ExceptionInfo(message, data, cause) {
  var e = new Error(message);
  var this$ = this;
  this$.message = message;
  this$.data = data;
  this$.cause = cause;
  this$.name = e.name;
  this$.description = e.description;
  this$.number = e.number;
  this$.fileName = e.fileName;
  this$.lineNumber = e.lineNumber;
  this$.columnNumber = e.columnNumber;
  this$.stack = e.stack;
  return this$;
};
cljs.core.ExceptionInfo.prototype.__proto__ = Error.prototype;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
  var obj__$1 = this;
  return cljs.core.pr_writer_ex_info(obj__$1, writer, opts);
};
cljs.core.ExceptionInfo.prototype.toString = function() {
  var this$ = this;
  return cljs.core.pr_str_STAR_(this$);
};
cljs.core.ex_info = function cljs$core$ex_info(var_args) {
  var args11123 = [];
  var len__7211__auto___11126 = arguments.length;
  var i__7212__auto___11127 = 0;
  while (true) {
    if (i__7212__auto___11127 < len__7211__auto___11126) {
      args11123.push(arguments[i__7212__auto___11127]);
      var G__11128 = i__7212__auto___11127 + 1;
      i__7212__auto___11127 = G__11128;
      continue;
    } else {
    }
    break;
  }
  var G__11125 = args11123.length;
  switch(G__11125) {
    case 2:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11123.length)].join(""));;
  }
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2 = function(msg, data) {
  return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3 = function(msg, data, cause) {
  return new cljs.core.ExceptionInfo(msg, data, cause);
};
cljs.core.ex_info.cljs$lang$maxFixedArity = 3;
cljs.core.ex_data = function cljs$core$ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function cljs$core$ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function cljs$core$ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function cljs$core$comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(x, y) : pred.call(null, x, y))) {
      return -1;
    } else {
      if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(y, x) : pred.call(null, y, x))) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function cljs$core$special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, "letfn*", 
  "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), 
  null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
cljs.core.test = function cljs$core$test(v) {
  var f = v.cljs$lang$test;
  if (cljs.core.truth_(f)) {
    f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    return new cljs.core.Keyword(null, "ok", "ok", 967785236);
  } else {
    return new cljs.core.Keyword(null, "no-test", "no-test", -1679482642);
  }
};
cljs.core.TaggedLiteral = function(tag, form) {
  this.tag = tag;
  this.form = form;
  this.cljs$lang$protocol_mask$partition0$ = 2153775360;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.TaggedLiteral.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.TaggedLiteral.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  return other instanceof cljs.core.TaggedLiteral && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.tag, other.tag) && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.form, other.form);
};
cljs.core.TaggedLiteral.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return 31 * cljs.core.hash(self__.tag) + cljs.core.hash(self__.form);
};
cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, v) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(this$__$1, v, null);
};
cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, v, not_found) {
  var self__ = this;
  var this$__$1 = this;
  var G__11130 = v instanceof cljs.core.Keyword ? v.fqn : null;
  switch(G__11130) {
    case "tag":
      return self__.tag;
      break;
    case "form":
      return self__.form;
      break;
    default:
      return not_found;
  }
};
cljs.core.TaggedLiteral.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, opts) {
  var self__ = this;
  var o__$1 = this;
  cljs.core._write(writer, [cljs.core.str("#"), cljs.core.str(self__.tag), cljs.core.str(" ")].join(""));
  return cljs.core.pr_writer(self__.form, writer, opts);
};
cljs.core.TaggedLiteral.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "form", "form", 16469056, null)], null);
};
cljs.core.TaggedLiteral.cljs$lang$type = true;
cljs.core.TaggedLiteral.cljs$lang$ctorStr = "cljs.core/TaggedLiteral";
cljs.core.TaggedLiteral.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/TaggedLiteral");
};
cljs.core.__GT_TaggedLiteral = function cljs$core$__GT_TaggedLiteral(tag, form) {
  return new cljs.core.TaggedLiteral(tag, form);
};
cljs.core.tagged_literal_QMARK_ = function cljs$core$tagged_literal_QMARK_(value) {
  return value instanceof cljs.core.TaggedLiteral;
};
cljs.core.tagged_literal = function cljs$core$tagged_literal(tag, form) {
  if (tag instanceof cljs.core.Symbol) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "symbol?", "symbol?", 1820680511, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null))], 0)))].join(""));
  }
  return new cljs.core.TaggedLiteral(tag, form);
};
cljs.core.js_reserved_arr = ["abstract", "boolean", "break", "byte", "case", "catch", "char", "class", "const", "continue", "debugger", "default", "delete", "do", "double", "else", "enum", "export", "extends", "final", "finally", "float", "for", "function", "goto", "if", "implements", "import", "in", "instanceof", "int", "interface", "let", "long", "native", "new", "package", "private", "protected", "public", "return", "short", "static", "super", "switch", "synchronized", "this", "throw", "throws", 
"transient", "try", "typeof", "var", "void", "volatile", "while", "with", "yield", "methods", "null"];
cljs.core.js_reserved = null;
cljs.core.js_reserved_QMARK_ = function cljs$core$js_reserved_QMARK_(x) {
  if (cljs.core.js_reserved == null) {
    cljs.core.js_reserved = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__11132_SHARP_, p2__11133_SHARP_) {
      goog.object.set(p1__11132_SHARP_, p2__11133_SHARP_, true);
      return p1__11132_SHARP_;
    }, {}, cljs.core.js_reserved_arr);
  } else {
  }
  return cljs.core.js_reserved.hasOwnProperty(x);
};
cljs.core.demunge_pattern = function cljs$core$demunge_pattern() {
  if (cljs.core.truth_(cljs.core.DEMUNGE_PATTERN)) {
  } else {
    cljs.core.DEMUNGE_PATTERN = function() {
      var ks = cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(a, b) {
        return b.length - a.length;
      }, cljs.core.js_keys(cljs.core.DEMUNGE_MAP));
      var ks__$1 = ks;
      var ret = "";
      while (true) {
        if (cljs.core.seq(ks__$1)) {
          var G__11136 = cljs.core.next(ks__$1);
          var G__11137 = [cljs.core.str(function() {
            var G__11135 = ret;
            if (!(ret === "")) {
              return [cljs.core.str(G__11135), cljs.core.str("|")].join("");
            } else {
              return G__11135;
            }
          }()), cljs.core.str(cljs.core.first(ks__$1))].join("");
          ks__$1 = G__11136;
          ret = G__11137;
          continue;
        } else {
          return [cljs.core.str(ret), cljs.core.str("|\\$")].join("");
        }
        break;
      }
    }();
  }
  return cljs.core.DEMUNGE_PATTERN;
};
cljs.core.munge_str = function cljs$core$munge_str(name) {
  var sb = new goog.string.StringBuffer;
  var i_11138 = 0;
  while (true) {
    if (i_11138 < name.length) {
      var c_11139 = name.charAt(i_11138);
      var sub_11140 = goog.object.get(cljs.core.CHAR_MAP, c_11139);
      if (!(sub_11140 == null)) {
        sb.append(sub_11140);
      } else {
        sb.append(c_11139);
      }
      var G__11141 = i_11138 + 1;
      i_11138 = G__11141;
      continue;
    } else {
    }
    break;
  }
  return sb.toString();
};
cljs.core.munge = function cljs$core$munge(name) {
  var name_SINGLEQUOTE_ = cljs.core.munge_str([cljs.core.str(name)].join(""));
  var name_SINGLEQUOTE___$1 = name_SINGLEQUOTE_ === ".." ? "_DOT__DOT_" : cljs.core.truth_(cljs.core.js_reserved_QMARK_(name_SINGLEQUOTE_)) ? [cljs.core.str(name_SINGLEQUOTE_), cljs.core.str("$")].join("") : name_SINGLEQUOTE_;
  if (name instanceof cljs.core.Symbol) {
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(name_SINGLEQUOTE___$1);
  } else {
    return [cljs.core.str(name_SINGLEQUOTE___$1)].join("");
  }
};
cljs.core.demunge_str = function cljs$core$demunge_str(munged_name) {
  var r = new RegExp(cljs.core.demunge_pattern(), "g");
  var munged_name__$1 = cljs.core.truth_(goog.string.endsWith(munged_name, "$")) ? munged_name.substring(0, munged_name.length - 1) : munged_name;
  var ret = "";
  var last_match_end = 0;
  while (true) {
    var temp__4655__auto__ = r.exec(munged_name__$1);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var match = temp__4655__auto__;
      var vec__11143 = match;
      var x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11143, 0, null);
      var G__11144 = [cljs.core.str(ret), cljs.core.str(munged_name__$1.substring(last_match_end, r.lastIndex - x.length)), cljs.core.str(x === "$" ? "/" : goog.object.get(cljs.core.DEMUNGE_MAP, x))].join("");
      var G__11145 = r.lastIndex;
      ret = G__11144;
      last_match_end = G__11145;
      continue;
    } else {
      return [cljs.core.str(ret), cljs.core.str(munged_name__$1.substring(last_match_end, munged_name__$1.length))].join("");
    }
    break;
  }
};
cljs.core.demunge = function cljs$core$demunge(name) {
  return (name instanceof cljs.core.Symbol ? cljs.core.symbol : cljs.core.str).call(null, function() {
    var name_SINGLEQUOTE_ = [cljs.core.str(name)].join("");
    if (name_SINGLEQUOTE_ === "_DOT__DOT_") {
      return "..";
    } else {
      return cljs.core.demunge_str([cljs.core.str(name)].join(""));
    }
  }());
};
cljs.core.ns_lookup = function cljs$core$ns_lookup(ns_obj, k) {
  return function() {
    return goog.object.get(ns_obj, k);
  };
};
cljs.core.Namespace = function(obj, name) {
  this.obj = obj;
  this.name = name;
  this.cljs$lang$protocol_mask$partition0$ = 6291456;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Namespace.prototype.findInternedVar = function(sym) {
  var self__ = this;
  var this$ = this;
  var k = cljs.core.munge([cljs.core.str(sym)].join(""));
  if (goog.object.containsKey(self__.obj, k)) {
    var var_sym = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2([cljs.core.str(self__.name)].join(""), [cljs.core.str(sym)].join(""));
    var var_meta = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ns", "ns", 441598760), this$], null);
    return new cljs.core.Var(cljs.core.ns_lookup(self__.obj, k), var_sym, var_meta);
  } else {
    return null;
  }
};
cljs.core.Namespace.prototype.getName = function() {
  var self__ = this;
  var _ = this;
  return self__.name;
};
cljs.core.Namespace.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return [cljs.core.str(self__.name)].join("");
};
cljs.core.Namespace.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Namespace) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.name, other.name);
  } else {
    return false;
  }
};
cljs.core.Namespace.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash(self__.name);
};
cljs.core.Namespace.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "obj", "obj", -1672671807, null), new cljs.core.Symbol(null, "name", "name", -810760592, null)], null);
};
cljs.core.Namespace.cljs$lang$type = true;
cljs.core.Namespace.cljs$lang$ctorStr = "cljs.core/Namespace";
cljs.core.Namespace.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write(writer__6752__auto__, "cljs.core/Namespace");
};
cljs.core.__GT_Namespace = function cljs$core$__GT_Namespace(obj, name) {
  return new cljs.core.Namespace(obj, name);
};
cljs.core.NS_CACHE = null;
cljs.core.find_ns_obj_STAR_ = function cljs$core$find_ns_obj_STAR_(ctxt, xs) {
  while (true) {
    if (ctxt == null) {
      return null;
    } else {
      if (xs == null) {
        return ctxt;
      } else {
        var G__11150 = function() {
          var G__11148 = ctxt;
          var G__11149 = cljs.core.first(xs);
          return goog.object.get(G__11148, G__11149);
        }();
        var G__11151 = cljs.core.next(xs);
        ctxt = G__11150;
        xs = G__11151;
        continue;
      }
    }
    break;
  }
};
cljs.core.find_ns_obj = function cljs$core$find_ns_obj(ns) {
  var munged_ns = cljs.core.munge([cljs.core.str(ns)].join(""));
  var segs = munged_ns.split(".");
  var G__11155 = cljs.core._STAR_target_STAR_;
  switch(G__11155) {
    case "nodejs":
      if (COMPILED) {
        return cljs.core.find_ns_obj_STAR_(function() {
          try {
            var G__11157 = cljs.core.first(segs);
            return eval(G__11157);
          } catch (e11156) {
            if (e11156 instanceof ReferenceError) {
              var e = e11156;
              return null;
            } else {
              throw e11156;
            }
          }
        }(), cljs.core.next(segs));
      } else {
        return cljs.core.find_ns_obj_STAR_(global, segs);
      }
      break;
    case "default":
      return cljs.core.find_ns_obj_STAR_(goog.global, segs);
      break;
    default:
      throw new Error([cljs.core.str("find-ns-obj not supported for target "), cljs.core.str(cljs.core._STAR_target_STAR_)].join(""));;
  }
};
cljs.core.ns_interns_STAR_ = function cljs$core$ns_interns_STAR_(sym) {
  var ns_obj = cljs.core.find_ns_obj(sym);
  var ns = new cljs.core.Namespace(ns_obj, sym);
  var step = function(ns_obj, ns) {
    return function cljs$core$ns_interns_STAR__$_step(ret, k) {
      var var_sym = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.demunge(k));
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, var_sym, new cljs.core.Var(function(var_sym, ns_obj, ns) {
        return function() {
          return goog.object.get(ns_obj, k);
        };
      }(var_sym, ns_obj, ns), cljs.core.symbol.cljs$core$IFn$_invoke$arity$2([cljs.core.str(sym)].join(""), [cljs.core.str(var_sym)].join("")), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ns", "ns", 441598760), ns], null)));
    };
  }(ns_obj, ns);
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(step, cljs.core.PersistentArrayMap.EMPTY, cljs.core.js_keys(ns_obj));
};
cljs.core.create_ns = function cljs$core$create_ns(var_args) {
  var args11159 = [];
  var len__7211__auto___11162 = arguments.length;
  var i__7212__auto___11163 = 0;
  while (true) {
    if (i__7212__auto___11163 < len__7211__auto___11162) {
      args11159.push(arguments[i__7212__auto___11163]);
      var G__11164 = i__7212__auto___11163 + 1;
      i__7212__auto___11163 = G__11164;
      continue;
    } else {
    }
    break;
  }
  var G__11161 = args11159.length;
  switch(G__11161) {
    case 1:
      return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args11159.length)].join(""));;
  }
};
cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1 = function(sym) {
  return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(sym, cljs.core.find_ns_obj(sym));
};
cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2 = function(sym, ns_obj) {
  return new cljs.core.Namespace(ns_obj, sym);
};
cljs.core.create_ns.cljs$lang$maxFixedArity = 2;
cljs.core.find_ns = function cljs$core$find_ns(ns) {
  if (cljs.core.NS_CACHE == null) {
    cljs.core.NS_CACHE = function() {
      var G__11167 = cljs.core.PersistentArrayMap.EMPTY;
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__11167) : cljs.core.atom.call(null, G__11167);
    }();
  } else {
  }
  var the_ns = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cljs.core.NS_CACHE) : cljs.core.deref.call(null, cljs.core.NS_CACHE), ns);
  if (!(the_ns == null)) {
    return the_ns;
  } else {
    var ns_obj = cljs.core.find_ns_obj(ns);
    if (ns_obj == null) {
      return null;
    } else {
      var new_ns = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(ns, ns_obj);
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(cljs.core.NS_CACHE, cljs.core.assoc, ns, new_ns);
      return new_ns;
    }
  }
};
cljs.core.find_macros_ns = function cljs$core$find_macros_ns(ns) {
  if (cljs.core.NS_CACHE == null) {
    cljs.core.NS_CACHE = function() {
      var G__11169 = cljs.core.PersistentArrayMap.EMPTY;
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__11169) : cljs.core.atom.call(null, G__11169);
    }();
  } else {
  }
  var the_ns = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cljs.core.NS_CACHE) : cljs.core.deref.call(null, cljs.core.NS_CACHE), ns);
  if (!(the_ns == null)) {
    return the_ns;
  } else {
    var ns_str = [cljs.core.str(ns)].join("");
    var ns__$1 = !goog.string.contains(ns_str, "$macros") ? cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(ns_str), cljs.core.str("$macros")].join("")) : ns;
    var ns_obj = cljs.core.find_ns_obj(ns__$1);
    if (ns_obj == null) {
      return null;
    } else {
      var new_ns = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(ns__$1, ns_obj);
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(cljs.core.NS_CACHE, cljs.core.assoc, ns__$1, new_ns);
      return new_ns;
    }
  }
};
cljs.core.ns_name = function cljs$core$ns_name(ns_obj) {
  return ns_obj.name;
};
goog.provide("goog.html.SafeScript");
goog.require("goog.asserts");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeScript = function() {
  this.privateDoNotAccessOrElseSafeScriptWrappedValue_ = "";
  this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeScript.prototype.implementsGoogStringTypedString = true;
goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeScript.fromConstant = function(script) {
  var scriptString = goog.string.Const.unwrap(script);
  if (scriptString.length === 0) {
    return goog.html.SafeScript.EMPTY;
  }
  return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(scriptString);
};
goog.html.SafeScript.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeScriptWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeScript.prototype.toString = function() {
    return "SafeScript{" + this.privateDoNotAccessOrElseSafeScriptWrappedValue_ + "}";
  };
}
goog.html.SafeScript.unwrap = function(safeScript) {
  if (safeScript instanceof goog.html.SafeScript && safeScript.constructor === goog.html.SafeScript && safeScript.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeScript.privateDoNotAccessOrElseSafeScriptWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeScript, got '" + safeScript + "'");
    return "type_error:SafeScript";
  }
};
goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse = function(script) {
  return (new goog.html.SafeScript).initSecurityPrivateDoNotAccessOrElse_(script);
};
goog.html.SafeScript.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(script) {
  this.privateDoNotAccessOrElseSafeScriptWrappedValue_ = script;
  return this;
};
goog.html.SafeScript.EMPTY = goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("");
goog.provide("goog.html.uncheckedconversions");
goog.require("goog.asserts");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeScript");
goog.require("goog.html.SafeStyle");
goog.require("goog.html.SafeStyleSheet");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract = function(justification, html, opt_dir) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(html, opt_dir || null);
};
goog.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract = function(justification, script) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmpty(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(script);
};
goog.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract = function(justification, style) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.html.uncheckedconversions.safeStyleSheetFromStringKnownToSatisfyTypeContract = function(justification, styleSheet) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheet);
};
goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract = function(justification, url) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.uncheckedconversions.trustedResourceUrlFromStringKnownToSatisfyTypeContract = function(justification, url) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (col.getCount && typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (col.getValues && typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (col.getKeys && typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (col.getValues && typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (col.contains && typeof col.contains == "function") {
    return col.contains(val);
  }
  if (col.containsValue && typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (col.isEmpty && typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (col.clear && typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (col.forEach && typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.equalTo = function(value, opt_useLooseComparison) {
  return function(other) {
    return opt_useLooseComparison ? value == other : value === other;
  };
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return !f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.functions.once = function(f) {
  var inner = f;
  return function() {
    if (inner) {
      var tmp = inner;
      inner = null;
      tmp();
    }
  };
};
goog.functions.debounce = function(f, interval, opt_scope) {
  if (opt_scope) {
    f = goog.bind(f, opt_scope);
  }
  var timeout = null;
  return (function(var_args) {
    goog.global.clearTimeout(timeout);
    var args = arguments;
    timeout = goog.global.setTimeout(function() {
      f.apply(null, args);
    }, interval);
  });
};
goog.functions.throttle = function(f, interval, opt_scope) {
  if (opt_scope) {
    f = goog.bind(f, opt_scope);
  }
  var timeout = null;
  var shouldFire = false;
  var args = [];
  var handleTimeout = function() {
    timeout = null;
    if (shouldFire) {
      shouldFire = false;
      fire();
    }
  };
  var fire = function() {
    timeout = goog.global.setTimeout(handleTimeout, interval);
    f.apply(null, args);
  };
  return (function(var_args) {
    args = arguments;
    if (!timeout) {
      fire();
    } else {
      shouldFire = true;
    }
  });
};
goog.provide("goog.iter");
goog.provide("goog.iter.Iterable");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.functions");
goog.require("goog.math");
goog.iter.Iterable;
goog.iter.StopIteration = "StopIteration" in goog.global ? goog.global["StopIteration"] : {message:"StopIteration", stack:""};
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.filterFalse = function(iterable, f, opt_obj) {
  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  return goog.iter.chainFromIterable(arguments);
};
goog.iter.chainFromIterable = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var current = null;
  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };
  return iter;
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var val = iterator.next();
    if (f.call(opt_obj, val, undefined, iterator)) {
      return val;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2, opt_equalsFn) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  return goog.iter.every(pairs, function(pair) {
    return equalsFn(pair[0], pair[1]);
  });
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return !arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = goog.isDef(opt_step) ? opt_step : 1;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };
  return iter;
};
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator;
  iter.next = goog.functions.constant(value);
  return iter;
};
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    total += iterator.next();
    return total;
  };
  return iter;
};
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }
  return iter;
};
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var iteratorsHaveValues = false;
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });
      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }
  return iter;
};
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);
  return goog.iter.filter(iterable, function() {
    return !!selectorIterator.next();
  });
};
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
  this.iterator = goog.iter.toIterator(iterable);
  this.keyFunc = opt_keyFunc || goog.functions.identity;
  this.targetKey;
  this.currentKey;
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return [this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.starMap = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var args = goog.iter.toArray(iterator.next());
    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));
  };
  return iter;
};
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = goog.isNumber(opt_num) ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return [];
  });
  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };
  var createIterator = function(buffer) {
    var iter = new goog.iter.Iterator;
    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };
    return iter;
  };
  return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var remaining = limitSize;
  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);
  var iterator = goog.iter.toIterator(iterable);
  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }
  return iterator;
};
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);
  var iterator = goog.iter.consume(iterable, start);
  if (goog.isNumber(opt_end)) {
    goog.asserts.assert(goog.math.isInt(opt_end) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start);
  }
  return iterator;
};
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = goog.isNumber(opt_length) ? opt_length : elements.length;
  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);
  return goog.iter.filter(product, function(arr) {
    return !goog.iter.hasDuplicates_(arr);
  });
};
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map(sortedIndexIterator.next(), getIndexFromElements);
  };
  return iter;
};
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  this.count_ = 0;
  this.version_ = 0;
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return (this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push((key));
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.forEach = function(f, opt_obj) {
  var keys = this.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = this.get(key);
    f.call(opt_obj, value, key, this);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (version != selfObj.version_) {
      throw Error("The map has changed since the iterator was created");
    }
    if (i >= selfObj.keys_.length) {
      throw goog.iter.StopIteration;
    }
    var key = selfObj.keys_[i++];
    return opt_keys ? key : selfObj.map_[key];
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.uncheckedconversions");
goog.require("goog.string.Const");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.define("goog.debug.LOGGING_ENABLED", goog.DEBUG);
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersionOrHigher("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line, opt_col, opt_error) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line, opt_col, opt_error);
    }
    logFunc({message:message, fileName:url, line:line, col:opt_col, error:opt_error});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var str = [];
  var helper = function(obj, space, parentSeen) {
    var nestspace = space + "  ";
    var seen = new goog.structs.Set(parentSeen);
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (seen.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  seen.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace, seen);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "", new goog.structs.Set);
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  var html = goog.debug.exposeExceptionAsHtml(err, opt_fn);
  return goog.html.SafeHtml.unwrap(html);
};
goog.debug.exposeExceptionAsHtml = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var viewSourceUrl = goog.debug.createViewSourceUrl_(e.fileName);
    var error = goog.html.SafeHtml.concat(goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces("Message: " + e.message + "\nUrl: "), goog.html.SafeHtml.create("a", {href:viewSourceUrl, target:"_new"}, e.fileName), goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces("\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + e.stack + "-\x3e " + "[end]\n\nJS stack traversal:\n" + goog.debug.getStacktrace(opt_fn) + "-\x3e "));
    return error;
  } catch (e2) {
    return goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces("Exception trying to expose exception! You win, we lose. " + e2);
  }
};
goog.debug.createViewSourceUrl_ = function(opt_fileName) {
  if (!goog.isDefAndNotNull(opt_fileName)) {
    opt_fileName = "";
  }
  if (!/^https?:\/\//i.test(opt_fileName)) {
    return goog.html.SafeUrl.fromConstant(goog.string.Const.from("sanitizedviewsrc"));
  }
  var sanitizedFileName = goog.html.SafeUrl.sanitize(opt_fileName);
  return goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("view-source scheme plus HTTP/HTTPS URL"), "view-source:" + goog.html.SafeUrl.unwrap(sanitizedFileName));
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return {"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || err.line || "Not available";
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || err.filename || err.sourceURL || goog.global["$googDebugFname"] || href;
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || !err.lineNumber || !err.fileName || !err.stack || !err.message || !err.name) {
    return {"message":err.message || "Not available", "name":err.name || "UnknownError", "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error;
  if (typeof err == "string") {
    error = Error(err);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(error, goog.debug.enhanceError);
    }
  } else {
    error = err;
  }
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(goog.debug.enhanceError);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  if (goog.STRICT_MODE_COMPATIBLE) {
    var stack = goog.debug.getNativeStackTrace_(goog.debug.getStacktraceSimple);
    if (stack) {
      return stack;
    }
  }
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getNativeStackTrace_ = function(fn) {
  var tempErr = new Error;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(tempErr, fn);
    return String(tempErr.stack);
  } else {
    try {
      throw tempErr;
    } catch (e) {
      tempErr = e;
    }
    var stack = tempErr.stack;
    if (stack) {
      return String(stack);
    }
  }
  return null;
};
goog.debug.getStacktrace = function(opt_fn) {
  var stack;
  if (goog.STRICT_MODE_COMPATIBLE) {
    var contextFn = opt_fn || goog.debug.getStacktrace;
    stack = goog.debug.getNativeStackTrace_(contextFn);
  }
  if (!stack) {
    stack = goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
  }
  return stack;
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;args && i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.runtimeType = function(value) {
  if (value instanceof Function) {
    return value.displayName || value.name || "unknown type name";
  } else {
    if (value instanceof Object) {
      return value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value);
    } else {
      return value === null ? "null" : typeof value;
    }
  }
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.define("goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS", true);
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.define("goog.debug.LogBuffer.CAPACITY", 0);
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Loggable");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Loggable;
goog.debug.Logger = function(name) {
  this.name_ = name;
  this.parent_ = null;
  this.level_ = null;
  this.children_ = null;
  this.handlers_ = null;
};
goog.debug.Logger.ROOT_LOGGER_NAME = "";
goog.define("goog.debug.Logger.ENABLE_HIERARCHY", true);
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      if (!this.handlers_) {
        this.handlers_ = [];
      }
      this.handlers_.push(handler);
    } else {
      goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootHandlers_.push(handler);
    }
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
    return !!handlers && goog.array.remove(handlers, handler);
  } else {
    return false;
  }
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      this.level_ = level;
    } else {
      goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootLevel_ = level;
    }
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.LOGGING_ENABLED) {
    return goog.debug.Logger.Level.OFF;
  }
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return goog.debug.LOGGING_ENABLED && level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {
    if (goog.isFunction(msg)) {
      msg = msg();
    }
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    logRecord.setException(opt_exception);
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);
    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return (goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.log");
goog.provide("goog.log.Level");
goog.provide("goog.log.LogRecord");
goog.provide("goog.log.Logger");
goog.require("goog.debug");
goog.require("goog.debug.LogManager");
goog.require("goog.debug.LogRecord");
goog.require("goog.debug.Logger");
goog.define("goog.log.ENABLED", goog.debug.LOGGING_ENABLED);
goog.log.ROOT_LOGGER_NAME = goog.debug.Logger.ROOT_LOGGER_NAME;
goog.log.Logger = goog.debug.Logger;
goog.log.Level = goog.debug.Logger.Level;
goog.log.LogRecord = goog.debug.LogRecord;
goog.log.getLogger = function(name, opt_level) {
  if (goog.log.ENABLED) {
    var logger = goog.debug.LogManager.getLogger(name);
    if (opt_level && logger) {
      logger.setLevel(opt_level);
    }
    return logger;
  } else {
    return null;
  }
};
goog.log.addHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    logger.addHandler(handler);
  }
};
goog.log.removeHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    return logger.removeHandler(handler);
  } else {
    return false;
  }
};
goog.log.log = function(logger, level, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.log(level, msg, opt_exception);
  }
};
goog.log.error = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.severe(msg, opt_exception);
  }
};
goog.log.warning = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.warning(msg, opt_exception);
  }
};
goog.log.info = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.info(msg, opt_exception);
  }
};
goog.log.fine = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.fine(msg, opt_exception);
  }
};
goog.provide("goog.net.xpc");
goog.provide("goog.net.xpc.CfgFields");
goog.provide("goog.net.xpc.ChannelStates");
goog.provide("goog.net.xpc.TransportNames");
goog.provide("goog.net.xpc.TransportTypes");
goog.provide("goog.net.xpc.UriCfgFields");
goog.require("goog.log");
goog.net.xpc.TransportTypes = {NATIVE_MESSAGING:1, FRAME_ELEMENT_METHOD:2, IFRAME_RELAY:3, IFRAME_POLLING:4, FLASH:5, NIX:6, DIRECT:7};
goog.net.xpc.TransportNames = {1:"NativeMessagingTransport", 2:"FrameElementMethodTransport", 3:"IframeRelayTransport", 4:"IframePollingTransport", 5:"FlashTransport", 6:"NixTransport", 7:"DirectTransport"};
goog.net.xpc.CfgFields = {CHANNEL_NAME:"cn", AUTH_TOKEN:"at", REMOTE_AUTH_TOKEN:"rat", PEER_URI:"pu", IFRAME_ID:"ifrid", TRANSPORT:"tp", LOCAL_RELAY_URI:"lru", PEER_RELAY_URI:"pru", LOCAL_POLL_URI:"lpu", PEER_POLL_URI:"ppu", PEER_HOSTNAME:"ph", ONE_SIDED_HANDSHAKE:"osh", ROLE:"role", NATIVE_TRANSPORT_PROTOCOL_VERSION:"nativeProtocolVersion", DIRECT_TRANSPORT_SYNC_MODE:"directSyncMode"};
goog.net.xpc.UriCfgFields = [goog.net.xpc.CfgFields.PEER_URI, goog.net.xpc.CfgFields.LOCAL_RELAY_URI, goog.net.xpc.CfgFields.PEER_RELAY_URI, goog.net.xpc.CfgFields.LOCAL_POLL_URI, goog.net.xpc.CfgFields.PEER_POLL_URI];
goog.net.xpc.ChannelStates = {NOT_CONNECTED:1, CONNECTED:2, CLOSED:3};
goog.net.xpc.TRANSPORT_SERVICE_ = "tp";
goog.net.xpc.SETUP = "SETUP";
goog.net.xpc.SETUP_NTPV2 = "SETUP_NTPV2";
goog.net.xpc.SETUP_ACK_ = "SETUP_ACK";
goog.net.xpc.SETUP_ACK_NTPV2 = "SETUP_ACK_NTPV2";
goog.net.xpc.channels = {};
goog.net.xpc.getRandomString = function(length, opt_characters) {
  var chars = opt_characters || goog.net.xpc.randomStringCharacters_;
  var charsLength = chars.length;
  var s = "";
  while (length-- > 0) {
    s += chars.charAt(Math.floor(Math.random() * charsLength));
  }
  return s;
};
goog.net.xpc.randomStringCharacters_ = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
goog.net.xpc.logger = goog.log.getLogger("goog.net.xpc");
goog.provide("goog.Thenable");
goog.Thenable = function() {
};
goog.Thenable.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
};
goog.Thenable.IMPLEMENTED_BY_PROP = "$goog_Thenable";
goog.Thenable.addImplementation = function(ctor) {
  goog.exportProperty(ctor.prototype, "then", ctor.prototype.then);
  if (COMPILED) {
    ctor.prototype[goog.Thenable.IMPLEMENTED_BY_PROP] = true;
  } else {
    ctor.prototype.$goog_Thenable = true;
  }
};
goog.Thenable.isImplementedBy = function(object) {
  if (!object) {
    return false;
  }
  try {
    if (COMPILED) {
      return !!object[goog.Thenable.IMPLEMENTED_BY_PROP];
    }
    return !!object.$goog_Thenable;
  } catch (e) {
    return false;
  }
};
goog.provide("goog.async.FreeList");
goog.async.FreeList = goog.defineClass(null, {constructor:function(create, reset, limit) {
  this.limit_ = limit;
  this.create_ = create;
  this.reset_ = reset;
  this.occupants_ = 0;
  this.head_ = null;
}, get:function() {
  var item;
  if (this.occupants_ > 0) {
    this.occupants_--;
    item = this.head_;
    this.head_ = item.next;
    item.next = null;
  } else {
    item = this.create_();
  }
  return item;
}, put:function(item) {
  this.reset_(item);
  if (this.occupants_ < this.limit_) {
    this.occupants_++;
    item.next = this.head_;
    this.head_ = item;
  }
}, occupants:function() {
  return this.occupants_;
}});
goog.provide("goog.async.WorkItem");
goog.provide("goog.async.WorkQueue");
goog.require("goog.asserts");
goog.require("goog.async.FreeList");
goog.async.WorkQueue = function() {
  this.workHead_ = null;
  this.workTail_ = null;
};
goog.define("goog.async.WorkQueue.DEFAULT_MAX_UNUSED", 100);
goog.async.WorkQueue.freelist_ = new goog.async.FreeList(function() {
  return new goog.async.WorkItem;
}, function(item) {
  item.reset();
}, goog.async.WorkQueue.DEFAULT_MAX_UNUSED);
goog.async.WorkQueue.prototype.add = function(fn, scope) {
  var item = this.getUnusedItem_();
  item.set(fn, scope);
  if (this.workTail_) {
    this.workTail_.next = item;
    this.workTail_ = item;
  } else {
    goog.asserts.assert(!this.workHead_);
    this.workHead_ = item;
    this.workTail_ = item;
  }
};
goog.async.WorkQueue.prototype.remove = function() {
  var item = null;
  if (this.workHead_) {
    item = this.workHead_;
    this.workHead_ = this.workHead_.next;
    if (!this.workHead_) {
      this.workTail_ = null;
    }
    item.next = null;
  }
  return item;
};
goog.async.WorkQueue.prototype.returnUnused = function(item) {
  goog.async.WorkQueue.freelist_.put(item);
};
goog.async.WorkQueue.prototype.getUnusedItem_ = function() {
  return goog.async.WorkQueue.freelist_.get();
};
goog.async.WorkItem = function() {
  this.fn = null;
  this.scope = null;
  this.next = null;
};
goog.async.WorkItem.prototype.set = function(fn, scope) {
  this.fn = fn;
  this.scope = scope;
  this.next = null;
};
goog.async.WorkItem.prototype.reset = function() {
  this.fn = null;
  this.scope = null;
  this.next = null;
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.async.nextTick");
goog.provide("goog.async.throwException");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.dom.TagName");
goog.require("goog.functions");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.async.throwException = function(exception) {
  goog.global.setTimeout(function() {
    throw exception;
  }, 0);
};
goog.async.nextTick = function(callback, opt_context, opt_useSetImmediate) {
  var cb = callback;
  if (opt_context) {
    cb = goog.bind(callback, opt_context);
  }
  cb = goog.async.nextTick.wrapCallback_(cb);
  if (goog.isFunction(goog.global.setImmediate) && (opt_useSetImmediate || !goog.global.Window || !goog.global.Window.prototype || goog.global.Window.prototype.setImmediate != goog.global.setImmediate)) {
    goog.global.setImmediate(cb);
    return;
  }
  if (!goog.async.nextTick.setImmediate_) {
    goog.async.nextTick.setImmediate_ = goog.async.nextTick.getSetImmediateEmulator_();
  }
  goog.async.nextTick.setImmediate_(cb);
};
goog.async.nextTick.setImmediate_;
goog.async.nextTick.getSetImmediateEmulator_ = function() {
  var Channel = goog.global["MessageChannel"];
  if (typeof Channel === "undefined" && typeof window !== "undefined" && window.postMessage && window.addEventListener && !goog.labs.userAgent.engine.isPresto()) {
    Channel = function() {
      var iframe = document.createElement(goog.dom.TagName.IFRAME);
      iframe.style.display = "none";
      iframe.src = "";
      document.documentElement.appendChild(iframe);
      var win = iframe.contentWindow;
      var doc = win.document;
      doc.open();
      doc.write("");
      doc.close();
      var message = "callImmediate" + Math.random();
      var origin = win.location.protocol == "file:" ? "*" : win.location.protocol + "//" + win.location.host;
      var onmessage = goog.bind(function(e) {
        if (origin != "*" && e.origin != origin || e.data != message) {
          return;
        }
        this["port1"].onmessage();
      }, this);
      win.addEventListener("message", onmessage, false);
      this["port1"] = {};
      this["port2"] = {postMessage:function() {
        win.postMessage(message, origin);
      }};
    };
  }
  if (typeof Channel !== "undefined" && !goog.labs.userAgent.browser.isIE()) {
    var channel = new Channel;
    var head = {};
    var tail = head;
    channel["port1"].onmessage = function() {
      if (goog.isDef(head.next)) {
        head = head.next;
        var cb = head.cb;
        head.cb = null;
        cb();
      }
    };
    return function(cb) {
      tail.next = {cb:cb};
      tail = tail.next;
      channel["port2"].postMessage(0);
    };
  }
  if (typeof document !== "undefined" && "onreadystatechange" in document.createElement(goog.dom.TagName.SCRIPT)) {
    return function(cb) {
      var script = document.createElement(goog.dom.TagName.SCRIPT);
      script.onreadystatechange = function() {
        script.onreadystatechange = null;
        script.parentNode.removeChild(script);
        script = null;
        cb();
        cb = null;
      };
      document.documentElement.appendChild(script);
    };
  }
  return function(cb) {
    goog.global.setTimeout(cb, 0);
  };
};
goog.async.nextTick.wrapCallback_ = goog.functions.identity;
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.async.nextTick.wrapCallback_ = transformer;
});
goog.provide("goog.async.run");
goog.require("goog.async.WorkQueue");
goog.require("goog.async.nextTick");
goog.require("goog.async.throwException");
goog.async.run = function(callback, opt_context) {
  if (!goog.async.run.schedule_) {
    goog.async.run.initializeRunner_();
  }
  if (!goog.async.run.workQueueScheduled_) {
    goog.async.run.schedule_();
    goog.async.run.workQueueScheduled_ = true;
  }
  goog.async.run.workQueue_.add(callback, opt_context);
};
goog.async.run.initializeRunner_ = function() {
  if (goog.global.Promise && goog.global.Promise.resolve) {
    var promise = goog.global.Promise.resolve(undefined);
    goog.async.run.schedule_ = function() {
      promise.then(goog.async.run.processWorkQueue);
    };
  } else {
    goog.async.run.schedule_ = function() {
      goog.async.nextTick(goog.async.run.processWorkQueue);
    };
  }
};
goog.async.run.forceNextTick = function(opt_realSetTimeout) {
  goog.async.run.schedule_ = function() {
    goog.async.nextTick(goog.async.run.processWorkQueue);
    if (opt_realSetTimeout) {
      opt_realSetTimeout(goog.async.run.processWorkQueue);
    }
  };
};
goog.async.run.schedule_;
goog.async.run.workQueueScheduled_ = false;
goog.async.run.workQueue_ = new goog.async.WorkQueue;
if (goog.DEBUG) {
  goog.async.run.resetQueue = function() {
    goog.async.run.workQueueScheduled_ = false;
    goog.async.run.workQueue_ = new goog.async.WorkQueue;
  };
}
goog.async.run.processWorkQueue = function() {
  var item = null;
  while (item = goog.async.run.workQueue_.remove()) {
    try {
      item.fn.call(item.scope);
    } catch (e) {
      goog.async.throwException(e);
    }
    goog.async.run.workQueue_.returnUnused(item);
  }
  goog.async.run.workQueueScheduled_ = false;
};
goog.provide("goog.promise.Resolver");
goog.promise.Resolver = function() {
};
goog.promise.Resolver.prototype.promise;
goog.promise.Resolver.prototype.resolve;
goog.promise.Resolver.prototype.reject;
goog.provide("goog.Promise");
goog.require("goog.Thenable");
goog.require("goog.asserts");
goog.require("goog.async.FreeList");
goog.require("goog.async.run");
goog.require("goog.async.throwException");
goog.require("goog.debug.Error");
goog.require("goog.promise.Resolver");
goog.Promise = function(resolver, opt_context) {
  this.state_ = goog.Promise.State_.PENDING;
  this.result_ = undefined;
  this.parent_ = null;
  this.callbackEntries_ = null;
  this.callbackEntriesTail_ = null;
  this.executing_ = false;
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    this.unhandledRejectionId_ = 0;
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      this.hadUnhandledRejection_ = false;
    }
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.stack_ = [];
    this.addStackTrace_(new Error("created"));
    this.currentStep_ = 0;
  }
  if (resolver != goog.nullFunction) {
    try {
      var self = this;
      resolver.call(opt_context, function(value) {
        self.resolve_(goog.Promise.State_.FULFILLED, value);
      }, function(reason) {
        if (goog.DEBUG && !(reason instanceof goog.Promise.CancellationError)) {
          try {
            if (reason instanceof Error) {
              throw reason;
            } else {
              throw new Error("Promise rejected.");
            }
          } catch (e) {
          }
        }
        self.resolve_(goog.Promise.State_.REJECTED, reason);
      });
    } catch (e) {
      this.resolve_(goog.Promise.State_.REJECTED, e);
    }
  }
};
goog.define("goog.Promise.LONG_STACK_TRACES", false);
goog.define("goog.Promise.UNHANDLED_REJECTION_DELAY", 0);
goog.Promise.State_ = {PENDING:0, BLOCKED:1, FULFILLED:2, REJECTED:3};
goog.Promise.CallbackEntry_ = function() {
  this.child = null;
  this.onFulfilled = null;
  this.onRejected = null;
  this.context = null;
  this.next = null;
  this.always = false;
};
goog.Promise.CallbackEntry_.prototype.reset = function() {
  this.child = null;
  this.onFulfilled = null;
  this.onRejected = null;
  this.context = null;
  this.always = false;
};
goog.define("goog.Promise.DEFAULT_MAX_UNUSED", 100);
goog.Promise.freelist_ = new goog.async.FreeList(function() {
  return new goog.Promise.CallbackEntry_;
}, function(item) {
  item.reset();
}, goog.Promise.DEFAULT_MAX_UNUSED);
goog.Promise.getCallbackEntry_ = function(onFulfilled, onRejected, context) {
  var entry = goog.Promise.freelist_.get();
  entry.onFulfilled = onFulfilled;
  entry.onRejected = onRejected;
  entry.context = context;
  return entry;
};
goog.Promise.returnEntry_ = function(entry) {
  goog.Promise.freelist_.put(entry);
};
goog.Promise.resolve = function(opt_value) {
  if (opt_value instanceof goog.Promise) {
    return opt_value;
  }
  var promise = new goog.Promise(goog.nullFunction);
  promise.resolve_(goog.Promise.State_.FULFILLED, opt_value);
  return promise;
};
goog.Promise.reject = function(opt_reason) {
  return new goog.Promise(function(resolve, reject) {
    reject(opt_reason);
  });
};
goog.Promise.resolveThen_ = function(value, onFulfilled, onRejected) {
  var isThenable = goog.Promise.maybeThen_(value, onFulfilled, onRejected, null);
  if (!isThenable) {
    goog.async.run(goog.partial(onFulfilled, value));
  }
};
goog.Promise.race = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    if (!promises.length) {
      resolve(undefined);
    }
    for (var i = 0, promise;i < promises.length;i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(promise, resolve, reject);
    }
  });
};
goog.Promise.all = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toFulfill = promises.length;
    var values = [];
    if (!toFulfill) {
      resolve(values);
      return;
    }
    var onFulfill = function(index, value) {
      toFulfill--;
      values[index] = value;
      if (toFulfill == 0) {
        resolve(values);
      }
    };
    var onReject = function(reason) {
      reject(reason);
    };
    for (var i = 0, promise;i < promises.length;i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(promise, goog.partial(onFulfill, i), onReject);
    }
  });
};
goog.Promise.allSettled = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toSettle = promises.length;
    var results = [];
    if (!toSettle) {
      resolve(results);
      return;
    }
    var onSettled = function(index, fulfilled, result) {
      toSettle--;
      results[index] = fulfilled ? {fulfilled:true, value:result} : {fulfilled:false, reason:result};
      if (toSettle == 0) {
        resolve(results);
      }
    };
    for (var i = 0, promise;i < promises.length;i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(promise, goog.partial(onSettled, i, true), goog.partial(onSettled, i, false));
    }
  });
};
goog.Promise.firstFulfilled = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toReject = promises.length;
    var reasons = [];
    if (!toReject) {
      resolve(undefined);
      return;
    }
    var onFulfill = function(value) {
      resolve(value);
    };
    var onReject = function(index, reason) {
      toReject--;
      reasons[index] = reason;
      if (toReject == 0) {
        reject(reasons);
      }
    };
    for (var i = 0, promise;i < promises.length;i++) {
      promise = promises[i];
      goog.Promise.resolveThen_(promise, onFulfill, goog.partial(onReject, i));
    }
  });
};
goog.Promise.withResolver = function() {
  var resolve, reject;
  var promise = new goog.Promise(function(rs, rj) {
    resolve = rs;
    reject = rj;
  });
  return new goog.Promise.Resolver_(promise, resolve, reject);
};
goog.Promise.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
  if (opt_onFulfilled != null) {
    goog.asserts.assertFunction(opt_onFulfilled, "opt_onFulfilled should be a function.");
  }
  if (opt_onRejected != null) {
    goog.asserts.assertFunction(opt_onRejected, "opt_onRejected should be a function. Did you pass opt_context " + "as the second argument instead of the third?");
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("then"));
  }
  return this.addChildPromise_(goog.isFunction(opt_onFulfilled) ? opt_onFulfilled : null, goog.isFunction(opt_onRejected) ? opt_onRejected : null, opt_context);
};
goog.Thenable.addImplementation(goog.Promise);
goog.Promise.prototype.thenVoid = function(opt_onFulfilled, opt_onRejected, opt_context) {
  if (opt_onFulfilled != null) {
    goog.asserts.assertFunction(opt_onFulfilled, "opt_onFulfilled should be a function.");
  }
  if (opt_onRejected != null) {
    goog.asserts.assertFunction(opt_onRejected, "opt_onRejected should be a function. Did you pass opt_context " + "as the second argument instead of the third?");
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("then"));
  }
  this.addCallbackEntry_(goog.Promise.getCallbackEntry_(opt_onFulfilled || goog.nullFunction, opt_onRejected || null, opt_context));
};
goog.Promise.prototype.thenAlways = function(onSettled, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("thenAlways"));
  }
  var entry = goog.Promise.getCallbackEntry_(onSettled, onSettled, opt_context);
  entry.always = true;
  this.addCallbackEntry_(entry);
  return this;
};
goog.Promise.prototype.thenCatch = function(onRejected, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("thenCatch"));
  }
  return this.addChildPromise_(null, onRejected, opt_context);
};
goog.Promise.prototype.cancel = function(opt_message) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    goog.async.run(function() {
      var err = new goog.Promise.CancellationError(opt_message);
      this.cancelInternal_(err);
    }, this);
  }
};
goog.Promise.prototype.cancelInternal_ = function(err) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    if (this.parent_) {
      this.parent_.cancelChild_(this, err);
      this.parent_ = null;
    } else {
      this.resolve_(goog.Promise.State_.REJECTED, err);
    }
  }
};
goog.Promise.prototype.cancelChild_ = function(childPromise, err) {
  if (!this.callbackEntries_) {
    return;
  }
  var childCount = 0;
  var childEntry = null;
  var beforeChildEntry = null;
  for (var entry = this.callbackEntries_;entry;entry = entry.next) {
    if (!entry.always) {
      childCount++;
      if (entry.child == childPromise) {
        childEntry = entry;
      }
      if (childEntry && childCount > 1) {
        break;
      }
    }
    if (!childEntry) {
      beforeChildEntry = entry;
    }
  }
  if (childEntry) {
    if (this.state_ == goog.Promise.State_.PENDING && childCount == 1) {
      this.cancelInternal_(err);
    } else {
      if (beforeChildEntry) {
        this.removeEntryAfter_(beforeChildEntry);
      } else {
        this.popEntry_();
      }
      this.executeCallback_(childEntry, goog.Promise.State_.REJECTED, err);
    }
  }
};
goog.Promise.prototype.addCallbackEntry_ = function(callbackEntry) {
  if (!this.hasEntry_() && (this.state_ == goog.Promise.State_.FULFILLED || this.state_ == goog.Promise.State_.REJECTED)) {
    this.scheduleCallbacks_();
  }
  this.queueEntry_(callbackEntry);
};
goog.Promise.prototype.addChildPromise_ = function(onFulfilled, onRejected, opt_context) {
  var callbackEntry = goog.Promise.getCallbackEntry_(null, null, null);
  callbackEntry.child = new goog.Promise(function(resolve, reject) {
    callbackEntry.onFulfilled = onFulfilled ? function(value) {
      try {
        var result = onFulfilled.call(opt_context, value);
        resolve(result);
      } catch (err) {
        reject(err);
      }
    } : resolve;
    callbackEntry.onRejected = onRejected ? function(reason) {
      try {
        var result = onRejected.call(opt_context, reason);
        if (!goog.isDef(result) && reason instanceof goog.Promise.CancellationError) {
          reject(reason);
        } else {
          resolve(result);
        }
      } catch (err) {
        reject(err);
      }
    } : reject;
  });
  callbackEntry.child.parent_ = this;
  this.addCallbackEntry_(callbackEntry);
  return callbackEntry.child;
};
goog.Promise.prototype.unblockAndFulfill_ = function(value) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.FULFILLED, value);
};
goog.Promise.prototype.unblockAndReject_ = function(reason) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.REJECTED, reason);
};
goog.Promise.prototype.resolve_ = function(state, x) {
  if (this.state_ != goog.Promise.State_.PENDING) {
    return;
  }
  if (this == x) {
    state = goog.Promise.State_.REJECTED;
    x = new TypeError("Promise cannot resolve to itself");
  }
  this.state_ = goog.Promise.State_.BLOCKED;
  var isThenable = goog.Promise.maybeThen_(x, this.unblockAndFulfill_, this.unblockAndReject_, this);
  if (isThenable) {
    return;
  }
  this.result_ = x;
  this.state_ = state;
  this.parent_ = null;
  this.scheduleCallbacks_();
  if (state == goog.Promise.State_.REJECTED && !(x instanceof goog.Promise.CancellationError)) {
    goog.Promise.addUnhandledRejection_(this, x);
  }
};
goog.Promise.maybeThen_ = function(value, onFulfilled, onRejected, context) {
  if (value instanceof goog.Promise) {
    value.thenVoid(onFulfilled, onRejected, context);
    return true;
  } else {
    if (goog.Thenable.isImplementedBy(value)) {
      value = (value);
      value.then(onFulfilled, onRejected, context);
      return true;
    } else {
      if (goog.isObject(value)) {
        try {
          var then = value["then"];
          if (goog.isFunction(then)) {
            goog.Promise.tryThen_(value, then, onFulfilled, onRejected, context);
            return true;
          }
        } catch (e) {
          onRejected.call(context, e);
          return true;
        }
      }
    }
  }
  return false;
};
goog.Promise.tryThen_ = function(thenable, then, onFulfilled, onRejected, context) {
  var called = false;
  var resolve = function(value) {
    if (!called) {
      called = true;
      onFulfilled.call(context, value);
    }
  };
  var reject = function(reason) {
    if (!called) {
      called = true;
      onRejected.call(context, reason);
    }
  };
  try {
    then.call(thenable, resolve, reject);
  } catch (e) {
    reject(e);
  }
};
goog.Promise.prototype.scheduleCallbacks_ = function() {
  if (!this.executing_) {
    this.executing_ = true;
    goog.async.run(this.executeCallbacks_, this);
  }
};
goog.Promise.prototype.hasEntry_ = function() {
  return !!this.callbackEntries_;
};
goog.Promise.prototype.queueEntry_ = function(entry) {
  goog.asserts.assert(entry.onFulfilled != null);
  if (this.callbackEntriesTail_) {
    this.callbackEntriesTail_.next = entry;
    this.callbackEntriesTail_ = entry;
  } else {
    this.callbackEntries_ = entry;
    this.callbackEntriesTail_ = entry;
  }
};
goog.Promise.prototype.popEntry_ = function() {
  var entry = null;
  if (this.callbackEntries_) {
    entry = this.callbackEntries_;
    this.callbackEntries_ = entry.next;
    entry.next = null;
  }
  if (!this.callbackEntries_) {
    this.callbackEntriesTail_ = null;
  }
  if (entry != null) {
    goog.asserts.assert(entry.onFulfilled != null);
  }
  return entry;
};
goog.Promise.prototype.removeEntryAfter_ = function(previous) {
  goog.asserts.assert(this.callbackEntries_);
  goog.asserts.assert(previous != null);
  if (previous.next == this.callbackEntriesTail_) {
    this.callbackEntriesTail_ = previous;
  }
  previous.next = previous.next.next;
};
goog.Promise.prototype.executeCallbacks_ = function() {
  var entry = null;
  while (entry = this.popEntry_()) {
    if (goog.Promise.LONG_STACK_TRACES) {
      this.currentStep_++;
    }
    this.executeCallback_(entry, this.state_, this.result_);
  }
  this.executing_ = false;
};
goog.Promise.prototype.executeCallback_ = function(callbackEntry, state, result) {
  if (state == goog.Promise.State_.REJECTED && callbackEntry.onRejected && !callbackEntry.always) {
    this.removeUnhandledRejection_();
  }
  if (callbackEntry.child) {
    callbackEntry.child.parent_ = null;
    goog.Promise.invokeCallback_(callbackEntry, state, result);
  } else {
    try {
      callbackEntry.always ? callbackEntry.onFulfilled.call(callbackEntry.context) : goog.Promise.invokeCallback_(callbackEntry, state, result);
    } catch (err) {
      goog.Promise.handleRejection_.call(null, err);
    }
  }
  goog.Promise.returnEntry_(callbackEntry);
};
goog.Promise.invokeCallback_ = function(callbackEntry, state, result) {
  if (state == goog.Promise.State_.FULFILLED) {
    callbackEntry.onFulfilled.call(callbackEntry.context, result);
  } else {
    if (callbackEntry.onRejected) {
      callbackEntry.onRejected.call(callbackEntry.context, result);
    }
  }
};
goog.Promise.prototype.addStackTrace_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES && goog.isString(err.stack)) {
    var trace = err.stack.split("\n", 4)[3];
    var message = err.message;
    message += Array(11 - message.length).join(" ");
    this.stack_.push(message + trace);
  }
};
goog.Promise.prototype.appendLongStack_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES && err && goog.isString(err.stack) && this.stack_.length) {
    var longTrace = ["Promise trace:"];
    for (var promise = this;promise;promise = promise.parent_) {
      for (var i = this.currentStep_;i >= 0;i--) {
        longTrace.push(promise.stack_[i]);
      }
      longTrace.push("Value: " + "[" + (promise.state_ == goog.Promise.State_.REJECTED ? "REJECTED" : "FULFILLED") + "] " + "\x3c" + String(promise.result_) + "\x3e");
    }
    err.stack += "\n\n" + longTrace.join("\n");
  }
};
goog.Promise.prototype.removeUnhandledRejection_ = function() {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    for (var p = this;p && p.unhandledRejectionId_;p = p.parent_) {
      goog.global.clearTimeout(p.unhandledRejectionId_);
      p.unhandledRejectionId_ = 0;
    }
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      for (var p = this;p && p.hadUnhandledRejection_;p = p.parent_) {
        p.hadUnhandledRejection_ = false;
      }
    }
  }
};
goog.Promise.addUnhandledRejection_ = function(promise, reason) {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    promise.unhandledRejectionId_ = goog.global.setTimeout(function() {
      promise.appendLongStack_(reason);
      goog.Promise.handleRejection_.call(null, reason);
    }, goog.Promise.UNHANDLED_REJECTION_DELAY);
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      promise.hadUnhandledRejection_ = true;
      goog.async.run(function() {
        if (promise.hadUnhandledRejection_) {
          promise.appendLongStack_(reason);
          goog.Promise.handleRejection_.call(null, reason);
        }
      });
    }
  }
};
goog.Promise.handleRejection_ = goog.async.throwException;
goog.Promise.setUnhandledRejectionHandler = function(handler) {
  goog.Promise.handleRejection_ = handler;
};
goog.Promise.CancellationError = function(opt_message) {
  goog.Promise.CancellationError.base(this, "constructor", opt_message);
};
goog.inherits(goog.Promise.CancellationError, goog.debug.Error);
goog.Promise.CancellationError.prototype.name = "cancel";
goog.Promise.Resolver_ = function(promise, resolve, reject) {
  this.promise = promise;
  this.resolve = resolve;
  this.reject = reject;
};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
  this.disposed_ = this.disposed_;
  this.onDisposeCallbacks_ = this.onDisposeCallbacks_;
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (this.disposed_) {
    callback.call(opt_scope);
    return;
  }
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || goog.userAgent.IE && 
goog.userAgent.isVersionOrHigher("8") || goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !!(goog.global["document"] && document.documentElement && "ontouchstart" in document.documentElement) || !!(goog.global["navigator"] && 
goog.global["navigator"]["msMaxTouchPoints"])};
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", RIGHTCLICK:"rightclick", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", SELECTSTART:"selectstart", WHEEL:"wheel", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", 
CHANGE:"change", RESET:"reset", SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", 
LOSECAPTURE:"losecapture", ORIENTATIONCHANGE:"orientationchange", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), 
ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", 
MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXT:"text", 
TEXTINPUT:"textInput", COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage", DOMSUBTREEMODIFIED:"DOMSubtreeModified", DOMNODEINSERTED:"DOMNodeInserted", DOMNODEREMOVED:"DOMNodeRemoved", 
DOMNODEREMOVEDFROMDOCUMENT:"DOMNodeRemovedFromDocument", DOMNODEINSERTEDINTODOCUMENT:"DOMNodeInsertedIntoDocument", DOMATTRMODIFIED:"DOMAttrModified", DOMCHARACTERDATAMODIFIED:"DOMCharacterDataModified", BEFOREPRINT:"beforeprint", AFTERPRINT:"afterprint"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  var relevantTouch = e.changedTouches ? e.changedTouches[0] : null;
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  if (!goog.isNull(relevantTouch)) {
    this.clientX = relevantTouch.clientX !== undefined ? relevantTouch.clientX : relevantTouch.pageX;
    this.clientY = relevantTouch.clientY !== undefined ? relevantTouch.clientY : relevantTouch.pageY;
    this.screenX = relevantTouch.screenX || 0;
    this.screenY = relevantTouch.screenY || 0;
  } else {
    this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
    this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
    this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
    this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
    this.screenX = e.screenX || 0;
    this.screenY = e.screenY || 0;
  }
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return !!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventId");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1E6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return !!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return ++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0;i < listenerArray.length;i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = goog.isDef(opt_capture);
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0;i < listenerArray.length;++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0;i < listenerArray.length;++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return -1;
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.forwardDeclare("goog.debug.ErrorHandler");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1E6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, false, opt_capt, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, opt_capt, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    src.addEventListener(type.toString(), proxy, capture);
  } else {
    if (src.attachEvent) {
      src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
    } else {
      throw Error("addEventListener and attachEvent are unavailable.");
    }
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, true, opt_capt, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), listener, opt_capt, opt_handler);
  }
  if (!src) {
    return false;
  }
  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (goog.isNumber(key)) {
    return false;
  }
  var listener = key;
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(obj, opt_type) {
  if (!obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0;i < listeners.length;++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      return [];
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  return !!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = true;
  var listenerMap = goog.events.getListenerMap_((obj));
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0;i < listenerArray.length;i++) {
        var listener = listenerArray[i];
        if (listener && listener.capture == capture && !listener.removed) {
          var result = goog.events.fireListener(listener, eventObject);
          retval = retval && result !== false;
        }
      }
    }
  }
  return retval;
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0;i--) {
          evt.currentTarget = ancestors[i];
          var result = goog.events.fireListeners_(ancestors[i], type, true, evt);
          retval = retval && result;
        }
        for (var i = 0;!evt.propagationStopped_ && i < ancestors.length;i++) {
          evt.currentTarget = ancestors[i];
          var result = goog.events.fireListeners_(ancestors[i], type, false, evt);
          retval = retval && result;
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
      return listener.handleEvent(e);
    };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.asserts");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  this.eventTargetListeners_ = new goog.events.ListenerMap(this);
  this.actualEventTarget_ = this;
  this.parentEventTarget_ = null;
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  this.assertInitialized_();
  var ancestorsTree, ancestor = this.getParentEventTarget();
  if (ancestor) {
    ancestorsTree = [];
    var ancestorCount = 1;
    for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
      ancestorsTree.push(ancestor);
      goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
    }
  }
  return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  this.removeAllListeners();
  this.parentEventTarget_ = null;
};
goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
  this.assertInitialized_();
  return this.eventTargetListeners_.add(String(type), listener, false, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.add(String(type), listener, true, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.remove(String(type), listener, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlistenByKey = function(key) {
  return this.eventTargetListeners_.removeByKey(key);
};
goog.events.EventTarget.prototype.removeAllListeners = function(opt_type) {
  if (!this.eventTargetListeners_) {
    return 0;
  }
  return this.eventTargetListeners_.removeAll(opt_type);
};
goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
  var listenerArray = this.eventTargetListeners_.listeners[String(type)];
  if (!listenerArray) {
    return true;
  }
  listenerArray = listenerArray.concat();
  var rv = true;
  for (var i = 0;i < listenerArray.length;++i) {
    var listener = listenerArray[i];
    if (listener && !listener.removed && listener.capture == capture) {
      var listenerFn = listener.listener;
      var listenerHandler = listener.handler || listener.src;
      if (listener.callOnce) {
        this.unlistenByKey(listener);
      }
      rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
    }
  }
  return rv && eventObject.returnValue_ != false;
};
goog.events.EventTarget.prototype.getListeners = function(type, capture) {
  return this.eventTargetListeners_.getListeners(String(type), capture);
};
goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  return this.eventTargetListeners_.getListener(String(type), listener, capture, opt_listenerScope);
};
goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
  var id = goog.isDef(opt_type) ? String(opt_type) : undefined;
  return this.eventTargetListeners_.hasListener(id, opt_capture);
};
goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
  this.actualEventTarget_ = target;
};
goog.events.EventTarget.prototype.assertInitialized_ = function() {
  goog.asserts.assert(this.eventTargetListeners_, "Event target is not initialized. Did you call the superclass " + "(goog.events.EventTarget) constructor?");
};
goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
  var type = e.type || (e);
  if (goog.isString(e)) {
    e = new goog.events.Event(e, target);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event(type, target);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || target;
    }
  }
  var rv = true, currentTarget;
  if (opt_ancestorsTree) {
    for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, true, e) && rv;
    }
  }
  if (!e.propagationStopped_) {
    currentTarget = e.currentTarget = target;
    rv = currentTarget.fireListeners(type, true, e) && rv;
    if (!e.propagationStopped_) {
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  if (opt_ancestorsTree) {
    for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  return rv;
};
goog.provide("goog.Timer");
goog.require("goog.Promise");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.INVALID_TIMEOUT_ID_ = -1;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = .8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    if (this.timer_) {
      this.timerObject_.clearTimeout(this.timer_);
      this.timer_ = null;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return goog.Timer.INVALID_TIMEOUT_ID_;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.Timer.promise = function(delay, opt_result) {
  var timerKey = null;
  return (new goog.Promise(function(resolve, reject) {
    timerKey = goog.Timer.callOnce(function() {
      resolve(opt_result);
    }, delay);
    if (timerKey == goog.Timer.INVALID_TIMEOUT_ID_) {
      reject(new Error("Failed to schedule timer."));
    }
  })).thenCatch(function(error) {
    goog.Timer.clear(timerKey);
    throw error;
  });
};
goog.provide("goog.json");
goog.provide("goog.json.Replacer");
goog.provide("goog.json.Reviver");
goog.provide("goog.json.Serializer");
goog.define("goog.json.USE_NATIVE_JSON", false);
goog.json.isValid = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  var o = String(s);
  if (goog.json.isValid(o)) {
    try {
      return (eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  return (eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["stringify"]) : function(object, opt_replacer) {
  return (new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serializeInternal(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serializeInternal = function(object, sb) {
  if (object == null) {
    sb.push("null");
    return;
  }
  if (typeof object == "object") {
    if (goog.isArray(object)) {
      this.serializeArray(object, sb);
      return;
    } else {
      if (object instanceof String || object instanceof Number || object instanceof Boolean) {
        object = object.valueOf();
      } else {
        this.serializeObject_((object), sb);
        return;
      }
    }
  }
  switch(typeof object) {
    case "string":
      this.serializeString_(object, sb);
      break;
    case "number":
      this.serializeNumber_(object, sb);
      break;
    case "boolean":
      sb.push(String(object));
      break;
    case "function":
      sb.push("null");
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    var rv = goog.json.Serializer.charToJsonCharCache_[c];
    if (!rv) {
      rv = "\\u" + (c.charCodeAt(0) | 65536).toString(16).substr(1);
      goog.json.Serializer.charToJsonCharCache_[c] = rv;
    }
    return rv;
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? String(n) : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serializeInternal(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serializeInternal(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress", DOWNLOAD_PROGRESS:"downloadprogress", UPLOAD_PROGRESS:"uploadprogress"};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, PRECONDITION_REQUIRED:428, TOO_MANY_REQUESTS:429, REQUEST_HEADER_FIELDS_TOO_LARGE:431, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, NETWORK_AUTHENTICATION_REQUIRED:511, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XhrLike");
goog.net.XhrLike = function() {
};
goog.net.XhrLike.OrNative;
goog.net.XhrLike.prototype.onreadystatechange;
goog.net.XhrLike.prototype.responseText;
goog.net.XhrLike.prototype.responseXML;
goog.net.XhrLike.prototype.readyState;
goog.net.XhrLike.prototype.status;
goog.net.XhrLike.prototype.statusText;
goog.net.XhrLike.prototype.open = function(method, url, opt_async, opt_user, opt_password) {
};
goog.net.XhrLike.prototype.send = function(opt_data) {
};
goog.net.XhrLike.prototype.abort = function() {
};
goog.net.XhrLike.prototype.setRequestHeader = function(header, value) {
};
goog.net.XhrLike.prototype.getResponseHeader = function(header) {
};
goog.net.XhrLike.prototype.getAllResponseHeaders = function() {
};
goog.provide("goog.net.XmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.provide("goog.net.XmlHttpDefines");
goog.require("goog.asserts");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.define("goog.net.XmlHttp.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttpDefines = {};
goog.define("goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory(goog.asserts.assert(factory), goog.asserts.assert(optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR || goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined") {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return (this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  return (uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.decodeIfPossible_ = function(uri, opt_preserveReserved) {
  if (!uri) {
    return uri;
  }
  return opt_preserveReserved ? decodeURI(uri) : decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && goog.global.self && goog.global.self.location) {
    var protocol = goog.global.self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri), true);
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri), true);
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.parseQueryData = function(encodedQuery, callback) {
  if (!encodedQuery) {
    return;
  }
  var pairs = encodedQuery.split("\x26");
  for (var i = 0;i < pairs.length;i++) {
    var indexOfEquals = pairs[i].indexOf("\x3d");
    var name = null;
    var value = null;
    if (indexOfEquals >= 0) {
      name = pairs[i].substring(0, indexOfEquals);
      value = pairs[i].substring(indexOfEquals + 1);
    } else {
      name = pairs[i];
    }
    callback(name, value ? goog.string.urlDecode(value) : "");
  }
};
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, opt_value) {
  var paramArr = [uri, "\x26", key];
  if (goog.isDefAndNotNull(opt_value)) {
    paramArr.push("\x3d", goog.string.urlEncode(opt_value));
  }
  return goog.uri.utils.appendQueryData_(paramArr);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || followingChar == goog.uri.utils.CharCode_.EQUAL || followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return -1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.setPath = function(uri, path) {
  if (!goog.string.startsWith(path, "/")) {
    path = "/" + path;
  }
  var parts = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(parts[goog.uri.utils.ComponentIndex.SCHEME], parts[goog.uri.utils.ComponentIndex.USER_INFO], parts[goog.uri.utils.ComponentIndex.DOMAIN], parts[goog.uri.utils.ComponentIndex.PORT], path, parts[goog.uri.utils.ComponentIndex.QUERY_DATA], parts[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.forwardDeclare("goog.Uri");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.net.XhrIo.base(this, "constructor");
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
  this.active_ = false;
  this.xhr_ = null;
  this.xhrOptions_ = null;
  this.lastUri_ = "";
  this.lastMethod_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastError_ = "";
  this.errorDispatched_ = false;
  this.inSend_ = false;
  this.inOpen_ = false;
  this.inAbort_ = false;
  this.timeoutInterval_ = 0;
  this.timeoutId_ = null;
  this.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
  this.withCredentials_ = false;
  this.progressEventsEnabled_ = false;
  this.useXhr2Timeout_ = false;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.log.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.METHODS_WITH_FORM_DATA = ["POST", "PUT"];
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.XHR2_TIMEOUT_ = "timeout";
goog.net.XhrIo.XHR2_ON_TIMEOUT_ = "ontimeout";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    x.listen(goog.net.EventType.COMPLETE, opt_callback);
  }
  x.listenOnce(goog.net.EventType.READY, x.cleanupSend_);
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
  return x;
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.prototype.cleanupSend_ = function() {
  this.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, this);
};
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.setProgressEventsEnabled = function(enabled) {
  this.progressEventsEnabled_ = enabled;
};
goog.net.XhrIo.prototype.getProgressEventsEnabled = function() {
  return this.progressEventsEnabled_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  if (this.getProgressEventsEnabled() && "onprogress" in this.xhr_) {
    this.xhr_.onprogress = goog.bind(function(e) {
      this.onProgressHandler_(e, true);
    }, this);
    if (this.xhr_.upload) {
      this.xhr_.upload.onprogress = goog.bind(this.onProgressHandler_, this);
    }
  }
  try {
    goog.log.fine(this.logger_, this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, String(url), true);
    this.inOpen_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentTypeKey = goog.array.find(headers.getKeys(), goog.net.XhrIo.isContentTypeHeader_);
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (goog.array.contains(goog.net.XhrIo.METHODS_WITH_FORM_DATA, method) && !contentTypeKey && !contentIsFormData) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  headers.forEach(function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    this.cleanUpTimeoutTimer_();
    if (this.timeoutInterval_ > 0) {
      this.useXhr2Timeout_ = goog.net.XhrIo.shouldUseXhr2Timeout_(this.xhr_);
      goog.log.fine(this.logger_, this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete, xhr2 " + this.useXhr2Timeout_));
      if (this.useXhr2Timeout_) {
        this.xhr_[goog.net.XhrIo.XHR2_TIMEOUT_] = this.timeoutInterval_;
        this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = goog.bind(this.timeout_, this);
      } else {
        this.timeoutId_ = goog.Timer.callOnce(this.timeout_, this.timeoutInterval_, this);
      }
    }
    goog.log.fine(this.logger_, this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.shouldUseXhr2Timeout_ = function(xhr) {
  return goog.userAgent.IE && goog.userAgent.isVersionOrHigher(9) && goog.isNumber(xhr[goog.net.XhrIo.XHR2_TIMEOUT_]) && goog.isDef(xhr[goog.net.XhrIo.XHR2_ON_TIMEOUT_]);
};
goog.net.XhrIo.isContentTypeHeader_ = function(header) {
  return goog.string.caseInsensitiveEquals(goog.net.XhrIo.CONTENT_TYPE_HEADER, header);
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      goog.log.fine(this.logger_, this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    goog.log.fine(this.logger_, this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.base(this, "disposeInternal");
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (this.isDisposed()) {
    return;
  }
  if (!this.inOpen_ && !this.inSend_ && !this.inAbort_) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2) {
      goog.log.fine(this.logger_, this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.callOnce(this.onReadyStateChange_, 0, this);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        goog.log.fine(this.logger_, this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.onProgressHandler_ = function(e, opt_isDownload) {
  goog.asserts.assert(e.type === goog.net.EventType.PROGRESS, "goog.net.EventType.PROGRESS is of the same type as raw XHR progress.");
  this.dispatchEvent(goog.net.XhrIo.buildProgressEvent_(e, goog.net.EventType.PROGRESS));
  this.dispatchEvent(goog.net.XhrIo.buildProgressEvent_(e, opt_isDownload ? goog.net.EventType.DOWNLOAD_PROGRESS : goog.net.EventType.UPLOAD_PROGRESS));
};
goog.net.XhrIo.buildProgressEvent_ = function(e, eventType) {
  return ({type:eventType, lengthComputable:e.lengthComputable, loaded:e.loaded, total:e.total});
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    this.cleanUpTimeoutTimer_();
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      goog.log.error(this.logger_, "Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.cleanUpTimeoutTimer_ = function() {
  if (this.xhr_ && this.useXhr2Timeout_) {
    this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = null;
  }
  if (goog.isNumber(this.timeoutId_)) {
    goog.Timer.clear(this.timeoutId_);
    this.timeoutId_ = null;
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return !!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    return -1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    goog.log.error(this.logger_, "Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getResponseHeaders = function() {
  var headersObject = {};
  var headersArray = this.getAllResponseHeaders().split("\r\n");
  for (var i = 0;i < headersArray.length;i++) {
    if (goog.string.isEmptyOrWhitespace(headersArray[i])) {
      continue;
    }
    var keyValue = goog.string.splitLimit(headersArray[i], ": ", 2);
    if (headersObject[keyValue[0]]) {
      headersObject[keyValue[0]] += ", " + keyValue[1];
    } else {
      headersObject[keyValue[0]] = keyValue[1];
    }
  }
  return headersObject;
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.require("goog.uri.utils.StandardQueryParam");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  this.scheme_ = "";
  this.userInfo_ = "";
  this.domain_ = "";
  this.port_ = null;
  this.path_ = "";
  this.fragment_ = "";
  this.isReadOnly_ = false;
  this.ignoreCase_ = false;
  this.queryData_;
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_, true), ":");
  }
  var domain = this.getDomain();
  if (domain || scheme == "file") {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_, true), "@");
    }
    out.push(goog.Uri.removeDoubleEncoding_(goog.string.urlEncode(domain)));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_, true));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme, true) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return !!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return !!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain, true) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return !!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath, true) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return !!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, values);
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return (this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return !!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return (!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val, opt_preserveReserved) {
  if (!val) {
    return "";
  }
  return opt_preserveReserved ? decodeURI(val.replace(/%25/g, "%2525")) : decodeURIComponent(val);
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra, opt_removeDoubleEncoding) {
  if (goog.isString(unescapedPart)) {
    var encoded = encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
    if (opt_removeDoubleEncoding) {
      encoded = goog.Uri.removeDoubleEncoding_(encoded);
    }
    return encoded;
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.removeDoubleEncoding_ = function(doubleEncodedString) {
  return doubleEncodedString.replace(/%25([0-9a-fA-F]{2})/g, "%$1");
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.keyMap_ = null;
  this.count_ = null;
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var self = this;
      goog.uri.utils.parseQueryData(this.encodedQuery_, function(name, value) {
        self.add(goog.string.urlDecode(name), value);
      });
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (goog.isString(opt_key)) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = this.keyMap_.getValues();
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  this.keyMap_.forEach(function(value, key) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    this.keyMap_.forEach(function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
/*
 Portions of this code are from MochiKit, received by
 The Closure Authors under the MIT license. All other code is Copyright
 2005-2009 The Closure Authors. All Rights Reserved.
*/
goog.provide("goog.async.Deferred");
goog.provide("goog.async.Deferred.AlreadyCalledError");
goog.provide("goog.async.Deferred.CanceledError");
goog.require("goog.Promise");
goog.require("goog.Thenable");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug.Error");
goog.async.Deferred = function(opt_onCancelFunction, opt_defaultScope) {
  this.sequence_ = [];
  this.onCancelFunction_ = opt_onCancelFunction;
  this.defaultScope_ = opt_defaultScope || null;
  this.fired_ = false;
  this.hadError_ = false;
  this.result_ = undefined;
  this.blocked_ = false;
  this.blocking_ = false;
  this.silentlyCanceled_ = false;
  this.unhandledErrorId_ = 0;
  this.parent_ = null;
  this.branches_ = 0;
  if (goog.async.Deferred.LONG_STACK_TRACES) {
    this.constructorStack_ = null;
    if (Error.captureStackTrace) {
      var target = {stack:""};
      Error.captureStackTrace(target, goog.async.Deferred);
      if (typeof target.stack == "string") {
        this.constructorStack_ = target.stack.replace(/^[^\n]*\n/, "");
      }
    }
  }
};
goog.define("goog.async.Deferred.STRICT_ERRORS", false);
goog.define("goog.async.Deferred.LONG_STACK_TRACES", false);
goog.async.Deferred.prototype.cancel = function(opt_deepCancel) {
  if (!this.hasFired()) {
    if (this.parent_) {
      var parent = this.parent_;
      delete this.parent_;
      if (opt_deepCancel) {
        parent.cancel(opt_deepCancel);
      } else {
        parent.branchCancel_();
      }
    }
    if (this.onCancelFunction_) {
      this.onCancelFunction_.call(this.defaultScope_, this);
    } else {
      this.silentlyCanceled_ = true;
    }
    if (!this.hasFired()) {
      this.errback(new goog.async.Deferred.CanceledError(this));
    }
  } else {
    if (this.result_ instanceof goog.async.Deferred) {
      this.result_.cancel();
    }
  }
};
goog.async.Deferred.prototype.branchCancel_ = function() {
  this.branches_--;
  if (this.branches_ <= 0) {
    this.cancel();
  }
};
goog.async.Deferred.prototype.continue_ = function(isSuccess, res) {
  this.blocked_ = false;
  this.updateResult_(isSuccess, res);
};
goog.async.Deferred.prototype.updateResult_ = function(isSuccess, res) {
  this.fired_ = true;
  this.result_ = res;
  this.hadError_ = !isSuccess;
  this.fire_();
};
goog.async.Deferred.prototype.check_ = function() {
  if (this.hasFired()) {
    if (!this.silentlyCanceled_) {
      throw new goog.async.Deferred.AlreadyCalledError(this);
    }
    this.silentlyCanceled_ = false;
  }
};
goog.async.Deferred.prototype.callback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.updateResult_(true, opt_result);
};
goog.async.Deferred.prototype.errback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.makeStackTraceLong_(opt_result);
  this.updateResult_(false, opt_result);
};
goog.async.Deferred.prototype.makeStackTraceLong_ = function(error) {
  if (!goog.async.Deferred.LONG_STACK_TRACES) {
    return;
  }
  if (this.constructorStack_ && goog.isObject(error) && error.stack && /^[^\n]+(\n   [^\n]+)+/.test(error.stack)) {
    error.stack = error.stack + "\nDEFERRED OPERATION:\n" + this.constructorStack_;
  }
};
goog.async.Deferred.prototype.assertNotDeferred_ = function(obj) {
  goog.asserts.assert(!(obj instanceof goog.async.Deferred), "An execution sequence may not be initiated with a blocking Deferred.");
};
goog.async.Deferred.prototype.addCallback = function(cb, opt_scope) {
  return this.addCallbacks(cb, null, opt_scope);
};
goog.async.Deferred.prototype.addErrback = function(eb, opt_scope) {
  return this.addCallbacks(null, eb, opt_scope);
};
goog.async.Deferred.prototype.addBoth = function(f, opt_scope) {
  return this.addCallbacks(f, f, opt_scope);
};
goog.async.Deferred.prototype.addFinally = function(f, opt_scope) {
  var self = this;
  return this.addCallbacks(f, function(err) {
    var result = f.call(self, err);
    if (!goog.isDef(result)) {
      throw err;
    }
    return result;
  }, opt_scope);
};
goog.async.Deferred.prototype.addCallbacks = function(cb, eb, opt_scope) {
  goog.asserts.assert(!this.blocking_, "Blocking Deferreds can not be re-used");
  this.sequence_.push([cb, eb, opt_scope]);
  if (this.hasFired()) {
    this.fire_();
  }
  return this;
};
goog.async.Deferred.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
  var resolve, reject;
  var promise = new goog.Promise(function(res, rej) {
    resolve = res;
    reject = rej;
  });
  this.addCallbacks(resolve, function(reason) {
    if (reason instanceof goog.async.Deferred.CanceledError) {
      promise.cancel();
    } else {
      reject(reason);
    }
  });
  return promise.then(opt_onFulfilled, opt_onRejected, opt_context);
};
goog.Thenable.addImplementation(goog.async.Deferred);
goog.async.Deferred.prototype.chainDeferred = function(otherDeferred) {
  this.addCallbacks(otherDeferred.callback, otherDeferred.errback, otherDeferred);
  return this;
};
goog.async.Deferred.prototype.awaitDeferred = function(otherDeferred) {
  if (!(otherDeferred instanceof goog.async.Deferred)) {
    return this.addCallback(function() {
      return otherDeferred;
    });
  }
  return this.addCallback(goog.bind(otherDeferred.branch, otherDeferred));
};
goog.async.Deferred.prototype.branch = function(opt_propagateCancel) {
  var d = new goog.async.Deferred;
  this.chainDeferred(d);
  if (opt_propagateCancel) {
    d.parent_ = this;
    this.branches_++;
  }
  return d;
};
goog.async.Deferred.prototype.hasFired = function() {
  return this.fired_;
};
goog.async.Deferred.prototype.isError = function(res) {
  return res instanceof Error;
};
goog.async.Deferred.prototype.hasErrback_ = function() {
  return goog.array.some(this.sequence_, function(sequenceRow) {
    return goog.isFunction(sequenceRow[1]);
  });
};
goog.async.Deferred.prototype.fire_ = function() {
  if (this.unhandledErrorId_ && this.hasFired() && this.hasErrback_()) {
    goog.async.Deferred.unscheduleError_(this.unhandledErrorId_);
    this.unhandledErrorId_ = 0;
  }
  if (this.parent_) {
    this.parent_.branches_--;
    delete this.parent_;
  }
  var res = this.result_;
  var unhandledException = false;
  var isNewlyBlocked = false;
  while (this.sequence_.length && !this.blocked_) {
    var sequenceEntry = this.sequence_.shift();
    var callback = sequenceEntry[0];
    var errback = sequenceEntry[1];
    var scope = sequenceEntry[2];
    var f = this.hadError_ ? errback : callback;
    if (f) {
      try {
        var ret = f.call(scope || this.defaultScope_, res);
        if (goog.isDef(ret)) {
          this.hadError_ = this.hadError_ && (ret == res || this.isError(ret));
          this.result_ = res = ret;
        }
        if (goog.Thenable.isImplementedBy(res) || typeof goog.global["Promise"] === "function" && res instanceof goog.global["Promise"]) {
          isNewlyBlocked = true;
          this.blocked_ = true;
        }
      } catch (ex) {
        res = ex;
        this.hadError_ = true;
        this.makeStackTraceLong_(res);
        if (!this.hasErrback_()) {
          unhandledException = true;
        }
      }
    }
  }
  this.result_ = res;
  if (isNewlyBlocked) {
    var onCallback = goog.bind(this.continue_, this, true);
    var onErrback = goog.bind(this.continue_, this, false);
    if (res instanceof goog.async.Deferred) {
      res.addCallbacks(onCallback, onErrback);
      res.blocking_ = true;
    } else {
      res.then(onCallback, onErrback);
    }
  } else {
    if (goog.async.Deferred.STRICT_ERRORS && this.isError(res) && !(res instanceof goog.async.Deferred.CanceledError)) {
      this.hadError_ = true;
      unhandledException = true;
    }
  }
  if (unhandledException) {
    this.unhandledErrorId_ = goog.async.Deferred.scheduleError_(res);
  }
};
goog.async.Deferred.succeed = function(opt_result) {
  var d = new goog.async.Deferred;
  d.callback(opt_result);
  return d;
};
goog.async.Deferred.fromPromise = function(promise) {
  var d = new goog.async.Deferred;
  d.callback();
  d.addCallback(function() {
    return promise;
  });
  return d;
};
goog.async.Deferred.fail = function(res) {
  var d = new goog.async.Deferred;
  d.errback(res);
  return d;
};
goog.async.Deferred.canceled = function() {
  var d = new goog.async.Deferred;
  d.cancel();
  return d;
};
goog.async.Deferred.when = function(value, callback, opt_scope) {
  if (value instanceof goog.async.Deferred) {
    return value.branch(true).addCallback(callback, opt_scope);
  } else {
    return goog.async.Deferred.succeed(value).addCallback(callback, opt_scope);
  }
};
goog.async.Deferred.AlreadyCalledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.AlreadyCalledError, goog.debug.Error);
goog.async.Deferred.AlreadyCalledError.prototype.message = "Deferred has already fired";
goog.async.Deferred.AlreadyCalledError.prototype.name = "AlreadyCalledError";
goog.async.Deferred.CanceledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.CanceledError, goog.debug.Error);
goog.async.Deferred.CanceledError.prototype.message = "Deferred was canceled";
goog.async.Deferred.CanceledError.prototype.name = "CanceledError";
goog.async.Deferred.Error_ = function(error) {
  this.id_ = goog.global.setTimeout(goog.bind(this.throwError, this), 0);
  this.error_ = error;
};
goog.async.Deferred.Error_.prototype.throwError = function() {
  goog.asserts.assert(goog.async.Deferred.errorMap_[this.id_], "Cannot throw an error that is not scheduled.");
  delete goog.async.Deferred.errorMap_[this.id_];
  throw this.error_;
};
goog.async.Deferred.Error_.prototype.resetTimer = function() {
  goog.global.clearTimeout(this.id_);
};
goog.async.Deferred.errorMap_ = {};
goog.async.Deferred.scheduleError_ = function(error) {
  var deferredError = new goog.async.Deferred.Error_(error);
  goog.async.Deferred.errorMap_[deferredError.id_] = deferredError;
  return deferredError.id_;
};
goog.async.Deferred.unscheduleError_ = function(id) {
  var error = goog.async.Deferred.errorMap_[id];
  if (error) {
    error.resetTimer();
    delete goog.async.Deferred.errorMap_[id];
  }
};
goog.async.Deferred.assertNoErrors = function() {
  var map = goog.async.Deferred.errorMap_;
  for (var key in map) {
    var error = map[key];
    error.resetTimer();
    error.throwError();
  }
};
goog.provide("goog.Delay");
goog.provide("goog.async.Delay");
goog.require("goog.Disposable");
goog.require("goog.Timer");
goog.async.Delay = function(listener, opt_interval, opt_handler) {
  goog.async.Delay.base(this, "constructor");
  this.listener_ = listener;
  this.interval_ = opt_interval || 0;
  this.handler_ = opt_handler;
  this.callback_ = goog.bind(this.doAction_, this);
};
goog.inherits(goog.async.Delay, goog.Disposable);
goog.Delay = goog.async.Delay;
goog.async.Delay.prototype.id_ = 0;
goog.async.Delay.prototype.disposeInternal = function() {
  goog.async.Delay.base(this, "disposeInternal");
  this.stop();
  delete this.listener_;
  delete this.handler_;
};
goog.async.Delay.prototype.start = function(opt_interval) {
  this.stop();
  this.id_ = goog.Timer.callOnce(this.callback_, goog.isDef(opt_interval) ? opt_interval : this.interval_);
};
goog.async.Delay.prototype.startIfNotActive = function(opt_interval) {
  if (!this.isActive()) {
    this.start(opt_interval);
  }
};
goog.async.Delay.prototype.stop = function() {
  if (this.isActive()) {
    goog.Timer.clear(this.id_);
  }
  this.id_ = 0;
};
goog.async.Delay.prototype.fire = function() {
  this.stop();
  this.doAction_();
};
goog.async.Delay.prototype.fireIfActive = function() {
  if (this.isActive()) {
    this.fire();
  }
};
goog.async.Delay.prototype.isActive = function() {
  return this.id_ != 0;
};
goog.async.Delay.prototype.doAction_ = function() {
  this.id_ = 0;
  if (this.listener_) {
    this.listener_.call(this.handler_);
  }
};
goog.provide("goog.events.EventHandler");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.object");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.EventHandler = function(opt_scope) {
  goog.Disposable.call(this);
  this.handler_ = opt_scope;
  this.keys_ = {};
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function(src, type, opt_fn, opt_capture) {
  return this.listen_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenWithScope = function(src, type, fn, capture, scope) {
  return this.listen_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listen_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (!goog.isArray(type)) {
    if (type) {
      goog.events.EventHandler.typeArray_[0] = type.toString();
    }
    type = goog.events.EventHandler.typeArray_;
  }
  for (var i = 0;i < type.length;i++) {
    var listenerObj = goog.events.listen(src, type[i], opt_fn || this.handleEvent, opt_capture || false, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenOnce = function(src, type, opt_fn, opt_capture) {
  return this.listenOnce_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenOnceWithScope = function(src, type, fn, capture, scope) {
  return this.listenOnce_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listenOnce_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.listenOnce_(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listenerObj = goog.events.listenOnce(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenWithWrapper = function(src, wrapper, listener, opt_capt) {
  return this.listenWithWrapper_(src, wrapper, listener, opt_capt);
};
goog.events.EventHandler.prototype.listenWithWrapperAndScope = function(src, wrapper, listener, capture, scope) {
  return this.listenWithWrapper_(src, wrapper, listener, capture, scope);
};
goog.events.EventHandler.prototype.listenWithWrapper_ = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.listen(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.getListenerCount = function() {
  var count = 0;
  for (var key in this.keys_) {
    if (Object.prototype.hasOwnProperty.call(this.keys_, key)) {
      count++;
    }
  }
  return count;
};
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.unlisten(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listener = goog.events.getListener(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (listener) {
      goog.events.unlistenByKey(listener);
      delete this.keys_[listener.key];
    }
  }
  return this;
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.unlisten(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.removeAll = function() {
  goog.object.forEach(this.keys_, function(listenerObj, key) {
    if (this.keys_.hasOwnProperty(key)) {
      goog.events.unlistenByKey(listenerObj);
    }
  }, this);
  this.keys_ = {};
};
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll();
};
goog.events.EventHandler.prototype.handleEvent = function(e) {
  throw Error("EventHandler.handleEvent not implemented");
};
goog.provide("goog.messaging.MessageChannel");
goog.messaging.MessageChannel = function() {
};
goog.messaging.MessageChannel.prototype.connect = function(opt_connectCb) {
};
goog.messaging.MessageChannel.prototype.isConnected = function() {
};
goog.messaging.MessageChannel.prototype.registerService = function(serviceName, callback, opt_objectPayload) {
};
goog.messaging.MessageChannel.prototype.registerDefaultService = function(callback) {
};
goog.messaging.MessageChannel.prototype.send = function(serviceName, payload) {
};
goog.provide("goog.messaging.AbstractChannel");
goog.require("goog.Disposable");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.messaging.MessageChannel");
goog.messaging.AbstractChannel = function() {
  goog.messaging.AbstractChannel.base(this, "constructor");
  this.services_ = {};
};
goog.inherits(goog.messaging.AbstractChannel, goog.Disposable);
goog.messaging.AbstractChannel.prototype.defaultService_;
goog.messaging.AbstractChannel.prototype.logger = goog.log.getLogger("goog.messaging.AbstractChannel");
goog.messaging.AbstractChannel.prototype.connect = function(opt_connectCb) {
  if (opt_connectCb) {
    opt_connectCb();
  }
};
goog.messaging.AbstractChannel.prototype.isConnected = function() {
  return true;
};
goog.messaging.AbstractChannel.prototype.registerService = function(serviceName, callback, opt_objectPayload) {
  this.services_[serviceName] = {callback:callback, objectPayload:!!opt_objectPayload};
};
goog.messaging.AbstractChannel.prototype.registerDefaultService = function(callback) {
  this.defaultService_ = callback;
};
goog.messaging.AbstractChannel.prototype.send = goog.abstractMethod;
goog.messaging.AbstractChannel.prototype.deliver = function(serviceName, payload) {
  var service = this.getService(serviceName, payload);
  if (!service) {
    return;
  }
  var decodedPayload = this.decodePayload(serviceName, payload, service.objectPayload);
  if (goog.isDefAndNotNull(decodedPayload)) {
    service.callback(decodedPayload);
  }
};
goog.messaging.AbstractChannel.prototype.getService = function(serviceName, payload) {
  var service = this.services_[serviceName];
  if (service) {
    return service;
  } else {
    if (this.defaultService_) {
      var callback = goog.partial(this.defaultService_, serviceName);
      var objectPayload = goog.isObject(payload);
      return {callback:callback, objectPayload:objectPayload};
    }
  }
  goog.log.warning(this.logger, 'Unknown service name "' + serviceName + '"');
  return null;
};
goog.messaging.AbstractChannel.prototype.decodePayload = function(serviceName, payload, objectPayload) {
  if (objectPayload && goog.isString(payload)) {
    try {
      return goog.json.parse(payload);
    } catch (err) {
      goog.log.warning(this.logger, "Expected JSON payload for " + serviceName + ', was "' + payload + '"');
      return null;
    }
  } else {
    if (!objectPayload && !goog.isString(payload)) {
      return goog.json.serialize(payload);
    }
  }
  return payload;
};
goog.messaging.AbstractChannel.prototype.disposeInternal = function() {
  goog.messaging.AbstractChannel.base(this, "disposeInternal");
  delete this.logger;
  delete this.services_;
  delete this.defaultService_;
};
goog.provide("goog.net.xpc.CrossPageChannelRole");
goog.net.xpc.CrossPageChannelRole = {OUTER:0, INNER:1};
goog.provide("goog.net.xpc.Transport");
goog.require("goog.Disposable");
goog.require("goog.dom");
goog.require("goog.net.xpc.TransportNames");
goog.net.xpc.Transport = function(opt_domHelper) {
  goog.Disposable.call(this);
  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper();
};
goog.inherits(goog.net.xpc.Transport, goog.Disposable);
goog.net.xpc.Transport.prototype.transportType = 0;
goog.net.xpc.Transport.prototype.getType = function() {
  return this.transportType;
};
goog.net.xpc.Transport.prototype.getWindow = function() {
  return this.domHelper_.getWindow();
};
goog.net.xpc.Transport.prototype.getName = function() {
  return goog.net.xpc.TransportNames[String(this.transportType)] || "";
};
goog.net.xpc.Transport.prototype.transportServiceHandler = goog.abstractMethod;
goog.net.xpc.Transport.prototype.connect = goog.abstractMethod;
goog.net.xpc.Transport.prototype.send = goog.abstractMethod;
goog.provide("goog.net.xpc.DirectTransport");
goog.require("goog.Timer");
goog.require("goog.async.Deferred");
goog.require("goog.events.EventHandler");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.object");
goog.scope(function() {
  var CfgFields = goog.net.xpc.CfgFields;
  var CrossPageChannelRole = goog.net.xpc.CrossPageChannelRole;
  var Deferred = goog.async.Deferred;
  var EventHandler = goog.events.EventHandler;
  var Timer = goog.Timer;
  var Transport = goog.net.xpc.Transport;
  goog.net.xpc.DirectTransport = function(channel, opt_domHelper) {
    goog.net.xpc.DirectTransport.base(this, "constructor", opt_domHelper);
    this.channel_ = channel;
    this.eventHandler_ = new EventHandler(this);
    this.registerDisposable(this.eventHandler_);
    this.maybeAttemptToConnectTimer_ = new Timer(DirectTransport.CONNECTION_ATTEMPT_INTERVAL_MS_, this.getWindow());
    this.registerDisposable(this.maybeAttemptToConnectTimer_);
    this.setupAckReceived_ = new Deferred;
    this.setupAckSent_ = new Deferred;
    this.connected_ = new Deferred;
    this.endpointId_ = goog.net.xpc.getRandomString(10);
    this.peerEndpointId_ = null;
    this.asyncSendsMap_ = {};
    this.originalChannelName_ = this.channel_.name;
    this.channel_.updateChannelNameAndCatalog(DirectTransport.getRoledChannelName_(this.channel_.name, this.channel_.getRole()));
    this.initialized_ = false;
    this.connected_.awaitDeferred(this.setupAckReceived_);
    this.connected_.awaitDeferred(this.setupAckSent_);
    this.connected_.addCallback(this.notifyConnected_, this);
    this.connected_.callback(true);
    this.eventHandler_.listen(this.maybeAttemptToConnectTimer_, Timer.TICK, this.maybeAttemptToConnect_);
    goog.log.info(goog.net.xpc.logger, "DirectTransport created. role\x3d" + this.channel_.getRole());
  };
  goog.inherits(goog.net.xpc.DirectTransport, Transport);
  var DirectTransport = goog.net.xpc.DirectTransport;
  DirectTransport.CONNECTION_ATTEMPT_INTERVAL_MS_ = 100;
  DirectTransport.CONNECTION_DELAY_INTERVAL_MS_ = 0;
  DirectTransport.isSupported = function(peerWindow) {
    try {
      return window.document.domain == peerWindow.document.domain;
    } catch (e) {
      return false;
    }
  };
  DirectTransport.activeCount_ = {};
  DirectTransport.GLOBAL_TRANPORT_PATH_ = "crosswindowmessaging.channel";
  DirectTransport.MESSAGE_DELIMITER_ = ",";
  DirectTransport.initialize_ = function(listenWindow) {
    var uid = goog.getUid(listenWindow);
    var value = DirectTransport.activeCount_[uid] || 0;
    if (value == 0) {
      var globalProxy = goog.getObjectByName(DirectTransport.GLOBAL_TRANPORT_PATH_, listenWindow);
      if (globalProxy == null) {
        goog.exportSymbol(DirectTransport.GLOBAL_TRANPORT_PATH_, DirectTransport.messageReceivedHandler_, listenWindow);
      }
    }
    DirectTransport.activeCount_[uid]++;
  };
  DirectTransport.getRoledChannelName_ = function(channelName, role) {
    return channelName + "_" + role;
  };
  DirectTransport.messageReceivedHandler_ = function(literal) {
    var msg = DirectTransport.Message_.fromLiteral(literal);
    var channelName = msg.channelName;
    var service = msg.service;
    var payload = msg.payload;
    goog.log.fine(goog.net.xpc.logger, "messageReceived: channel\x3d" + channelName + ", service\x3d" + service + ", payload\x3d" + payload);
    var channel = goog.net.xpc.channels[channelName];
    if (channel) {
      channel.xpcDeliver(service, payload);
      return true;
    }
    var transportMessageType = DirectTransport.parseTransportPayload_(payload)[0];
    for (var staleChannelName in goog.net.xpc.channels) {
      var staleChannel = goog.net.xpc.channels[staleChannelName];
      if (staleChannel.getRole() == CrossPageChannelRole.INNER && !staleChannel.isConnected() && service == goog.net.xpc.TRANSPORT_SERVICE_ && transportMessageType == goog.net.xpc.SETUP) {
        staleChannel.updateChannelNameAndCatalog(channelName);
        staleChannel.xpcDeliver(service, payload);
        return true;
      }
    }
    goog.log.info(goog.net.xpc.logger, "channel name mismatch; message ignored.");
    return false;
  };
  DirectTransport.prototype.transportType = goog.net.xpc.TransportTypes.DIRECT;
  DirectTransport.prototype.transportServiceHandler = function(payload) {
    var transportParts = DirectTransport.parseTransportPayload_(payload);
    var transportMessageType = transportParts[0];
    var peerEndpointId = transportParts[1];
    switch(transportMessageType) {
      case goog.net.xpc.SETUP_ACK_:
        if (!this.setupAckReceived_.hasFired()) {
          this.setupAckReceived_.callback(true);
        }
        break;
      case goog.net.xpc.SETUP:
        this.sendSetupAckMessage_();
        if (this.peerEndpointId_ != null && this.peerEndpointId_ != peerEndpointId) {
          goog.log.info(goog.net.xpc.logger, "Sending SETUP and changing peer ID to: " + peerEndpointId);
          this.sendSetupMessage_();
        }
        this.peerEndpointId_ = peerEndpointId;
        break;
    }
  };
  DirectTransport.prototype.sendSetupMessage_ = function() {
    var payload = goog.net.xpc.SETUP;
    payload += DirectTransport.MESSAGE_DELIMITER_;
    payload += this.endpointId_;
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, payload);
  };
  DirectTransport.prototype.sendSetupAckMessage_ = function() {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    if (!this.setupAckSent_.hasFired()) {
      this.setupAckSent_.callback(true);
    }
  };
  DirectTransport.prototype.connect = function() {
    var win = this.getWindow();
    if (win) {
      DirectTransport.initialize_(win);
      this.initialized_ = true;
      this.maybeAttemptToConnect_();
    } else {
      goog.log.fine(goog.net.xpc.logger, "connect(): no window to initialize.");
    }
  };
  DirectTransport.prototype.maybeAttemptToConnect_ = function() {
    var outerRole = this.channel_.getRole() == CrossPageChannelRole.OUTER;
    if (this.channel_.isConnected()) {
      this.maybeAttemptToConnectTimer_.stop();
      return;
    }
    this.maybeAttemptToConnectTimer_.start();
    this.sendSetupMessage_();
  };
  DirectTransport.prototype.send = function(service, payload) {
    if (!this.channel_.getPeerWindowObject()) {
      goog.log.fine(goog.net.xpc.logger, "send(): window not ready");
      return;
    }
    var channelName = DirectTransport.getRoledChannelName_(this.originalChannelName_, this.getPeerRole_());
    var message = new DirectTransport.Message_(channelName, service, payload);
    if (this.channel_.getConfig()[CfgFields.DIRECT_TRANSPORT_SYNC_MODE]) {
      this.executeScheduledSend_(message);
    } else {
      this.asyncSendsMap_[goog.getUid(message)] = Timer.callOnce(goog.bind(this.executeScheduledSend_, this, message), 0);
    }
  };
  DirectTransport.prototype.executeScheduledSend_ = function(message) {
    var messageId = goog.getUid(message);
    if (this.asyncSendsMap_[messageId]) {
      delete this.asyncSendsMap_[messageId];
    }
    try {
      var peerProxy = goog.getObjectByName(DirectTransport.GLOBAL_TRANPORT_PATH_, this.channel_.getPeerWindowObject());
    } catch (error) {
      goog.log.warning(goog.net.xpc.logger, "Can't access other window, ignoring.", error);
      return;
    }
    if (goog.isNull(peerProxy)) {
      goog.log.warning(goog.net.xpc.logger, "Peer window had no global function.");
      return;
    }
    try {
      peerProxy(message.toLiteral());
      goog.log.info(goog.net.xpc.logger, "send(): channelName\x3d" + message.channelName + " service\x3d" + message.service + " payload\x3d" + message.payload);
    } catch (error) {
      goog.log.warning(goog.net.xpc.logger, "Error performing call, ignoring.", error);
    }
  };
  DirectTransport.prototype.getPeerRole_ = function() {
    var role = this.channel_.getRole();
    return role == goog.net.xpc.CrossPageChannelRole.OUTER ? goog.net.xpc.CrossPageChannelRole.INNER : goog.net.xpc.CrossPageChannelRole.OUTER;
  };
  DirectTransport.prototype.notifyConnected_ = function() {
    this.channel_.notifyConnected(this.channel_.getConfig()[CfgFields.DIRECT_TRANSPORT_SYNC_MODE] ? DirectTransport.CONNECTION_DELAY_INTERVAL_MS_ : 0);
  };
  DirectTransport.prototype.disposeInternal = function() {
    if (this.initialized_) {
      var listenWindow = this.getWindow();
      var uid = goog.getUid(listenWindow);
      var value = --DirectTransport.activeCount_[uid];
      if (value == 1) {
        goog.exportSymbol(DirectTransport.GLOBAL_TRANPORT_PATH_, null, listenWindow);
      }
    }
    if (this.asyncSendsMap_) {
      goog.object.forEach(this.asyncSendsMap_, function(timerId) {
        Timer.clear(timerId);
      });
      this.asyncSendsMap_ = null;
    }
    if (this.setupAckReceived_) {
      this.setupAckReceived_.cancel();
      delete this.setupAckReceived_;
    }
    if (this.setupAckSent_) {
      this.setupAckSent_.cancel();
      delete this.setupAckSent_;
    }
    if (this.connected_) {
      this.connected_.cancel();
      delete this.connected_;
    }
    DirectTransport.base(this, "disposeInternal");
  };
  DirectTransport.parseTransportPayload_ = function(payload) {
    var transportParts = (payload.split(DirectTransport.MESSAGE_DELIMITER_));
    transportParts[1] = transportParts[1] || null;
    return transportParts;
  };
  DirectTransport.Message_ = function(channelName, service, payload) {
    this.channelName = channelName;
    this.service = service;
    this.payload = payload;
  };
  DirectTransport.Message_.prototype.toLiteral = function() {
    return {"channelName":this.channelName, "service":this.service, "payload":this.payload};
  };
  DirectTransport.Message_.fromLiteral = function(literal) {
    return new DirectTransport.Message_(literal["channelName"], literal["service"], literal["payload"]);
  };
});
goog.provide("goog.net.xpc.FrameElementMethodTransport");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.net.xpc.FrameElementMethodTransport = function(channel, opt_domHelper) {
  goog.net.xpc.FrameElementMethodTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.queue_ = [];
  this.deliverQueuedCb_ = goog.bind(this.deliverQueued_, this);
};
goog.inherits(goog.net.xpc.FrameElementMethodTransport, goog.net.xpc.Transport);
goog.net.xpc.FrameElementMethodTransport.prototype.transportType = goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD;
goog.net.xpc.FrameElementMethodTransport.prototype.attemptSetupCb_;
goog.net.xpc.FrameElementMethodTransport.prototype.outgoing_;
goog.net.xpc.FrameElementMethodTransport.prototype.iframeElm_;
goog.net.xpc.FrameElementMethodTransport.prototype.recursive_ = false;
goog.net.xpc.FrameElementMethodTransport.prototype.timer_ = 0;
goog.net.xpc.FrameElementMethodTransport.outgoing_ = null;
goog.net.xpc.FrameElementMethodTransport.prototype.connect = function() {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
    this.iframeElm_ = this.channel_.getIframeElement();
    this.iframeElm_["XPC_toOuter"] = goog.bind(this.incoming_, this);
  } else {
    this.attemptSetup_();
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.attemptSetup_ = function() {
  var retry = true;
  try {
    if (!this.iframeElm_) {
      this.iframeElm_ = this.getWindow().frameElement;
    }
    if (this.iframeElm_ && this.iframeElm_["XPC_toOuter"]) {
      this.outgoing_ = this.iframeElm_["XPC_toOuter"];
      this.iframeElm_["XPC_toOuter"]["XPC_toInner"] = goog.bind(this.incoming_, this);
      retry = false;
      this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
      this.channel_.notifyConnected();
    }
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting setup: " + e);
  }
  if (retry) {
    if (!this.attemptSetupCb_) {
      this.attemptSetupCb_ = goog.bind(this.attemptSetup_, this);
    }
    this.getWindow().setTimeout(this.attemptSetupCb_, 100);
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.transportServiceHandler = function(payload) {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER && !this.channel_.isConnected() && payload == goog.net.xpc.SETUP_ACK_) {
    this.outgoing_ = this.iframeElm_["XPC_toOuter"]["XPC_toInner"];
    this.channel_.notifyConnected();
  } else {
    throw Error("Got unexpected transport message.");
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.incoming_ = function(serviceName, payload) {
  if (!this.recursive_ && this.queue_.length == 0) {
    this.channel_.xpcDeliver(serviceName, payload);
  } else {
    this.queue_.push({serviceName:serviceName, payload:payload});
    if (this.queue_.length == 1) {
      this.timer_ = this.getWindow().setTimeout(this.deliverQueuedCb_, 1);
    }
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.deliverQueued_ = function() {
  while (this.queue_.length) {
    var msg = this.queue_.shift();
    this.channel_.xpcDeliver(msg.serviceName, msg.payload);
  }
};
goog.net.xpc.FrameElementMethodTransport.prototype.send = function(service, payload) {
  this.recursive_ = true;
  this.outgoing_(service, payload);
  this.recursive_ = false;
};
goog.net.xpc.FrameElementMethodTransport.prototype.disposeInternal = function() {
  goog.net.xpc.FrameElementMethodTransport.superClass_.disposeInternal.call(this);
  this.outgoing_ = null;
  this.iframeElm_ = null;
};
goog.provide("goog.net.xpc.IframePollingTransport");
goog.provide("goog.net.xpc.IframePollingTransport.Receiver");
goog.provide("goog.net.xpc.IframePollingTransport.Sender");
goog.require("goog.array");
goog.require("goog.dom");
goog.require("goog.dom.TagName");
goog.require("goog.log");
goog.require("goog.log.Level");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.userAgent");
goog.net.xpc.IframePollingTransport = function(channel, opt_domHelper) {
  goog.net.xpc.IframePollingTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.sendUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.PEER_POLL_URI];
  this.rcvUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.LOCAL_POLL_URI];
  this.sendQueue_ = [];
};
goog.inherits(goog.net.xpc.IframePollingTransport, goog.net.xpc.Transport);
goog.net.xpc.IframePollingTransport.prototype.pollsBeforeReconnect_ = 5;
goog.net.xpc.IframePollingTransport.prototype.transportType = goog.net.xpc.TransportTypes.IFRAME_POLLING;
goog.net.xpc.IframePollingTransport.prototype.sequence_ = 0;
goog.net.xpc.IframePollingTransport.prototype.waitForAck_ = false;
goog.net.xpc.IframePollingTransport.prototype.initialized_ = false;
goog.net.xpc.IframePollingTransport.prototype.reconnectFrame_ = null;
goog.net.xpc.IframePollingTransport.prototype.ackReceiver_;
goog.net.xpc.IframePollingTransport.prototype.ackSender_;
goog.net.xpc.IframePollingTransport.prototype.ackIframeElm_;
goog.net.xpc.IframePollingTransport.prototype.ackWinObj_;
goog.net.xpc.IframePollingTransport.prototype.checkLocalFramesPresentCb_;
goog.net.xpc.IframePollingTransport.prototype.deliveryQueue_;
goog.net.xpc.IframePollingTransport.prototype.msgIframeElm_;
goog.net.xpc.IframePollingTransport.prototype.msgReceiver_;
goog.net.xpc.IframePollingTransport.prototype.msgSender_;
goog.net.xpc.IframePollingTransport.prototype.msgWinObj_;
goog.net.xpc.IframePollingTransport.prototype.rcvdConnectionSetupAck_;
goog.net.xpc.IframePollingTransport.prototype.sentConnectionSetupAck_;
goog.net.xpc.IframePollingTransport.prototype.sentConnectionSetup_;
goog.net.xpc.IframePollingTransport.prototype.parts_;
goog.net.xpc.IframePollingTransport.IFRAME_PREFIX = "googlexpc";
goog.net.xpc.IframePollingTransport.prototype.getMsgFrameName_ = function() {
  return goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_" + this.channel_.name + "_msg";
};
goog.net.xpc.IframePollingTransport.prototype.getAckFrameName_ = function() {
  return goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_" + this.channel_.name + "_ack";
};
goog.net.xpc.IframePollingTransport.prototype.isChannelAvailable = function() {
  return !this.isDisposed() && this.channel_.isPeerAvailable();
};
goog.net.xpc.IframePollingTransport.prototype.getPeerFrames_ = function() {
  try {
    if (this.isChannelAvailable()) {
      return this.channel_.getPeerWindowObject().frames || {};
    }
  } catch (e) {
    goog.log.fine(goog.net.xpc.logger, "error retrieving peer frames");
  }
  return {};
};
goog.net.xpc.IframePollingTransport.prototype.getPeerFrame_ = function(frameName) {
  return this.getPeerFrames_()[frameName];
};
goog.net.xpc.IframePollingTransport.prototype.connect = function() {
  if (!this.isChannelAvailable()) {
    return;
  }
  goog.log.fine(goog.net.xpc.logger, "transport connect called");
  if (!this.initialized_) {
    goog.log.fine(goog.net.xpc.logger, "initializing...");
    this.constructSenderFrames_();
    this.initialized_ = true;
  }
  this.checkForeignFramesReady_();
};
goog.net.xpc.IframePollingTransport.prototype.constructSenderFrames_ = function() {
  var name = this.getMsgFrameName_();
  this.msgIframeElm_ = this.constructSenderFrame_(name);
  this.msgWinObj_ = this.getWindow().frames[name];
  name = this.getAckFrameName_();
  this.ackIframeElm_ = this.constructSenderFrame_(name);
  this.ackWinObj_ = this.getWindow().frames[name];
};
goog.net.xpc.IframePollingTransport.prototype.constructSenderFrame_ = function(id) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "constructing sender frame: " + id);
  var ifr = goog.dom.createElement(goog.dom.TagName.IFRAME);
  var s = ifr.style;
  s.position = "absolute";
  s.top = "-10px";
  s.left = "10px";
  s.width = "1px";
  s.height = "1px";
  ifr.id = ifr.name = id;
  ifr.src = this.sendUri_ + "#INITIAL";
  this.getWindow().document.body.appendChild(ifr);
  return ifr;
};
goog.net.xpc.IframePollingTransport.prototype.maybeInnerPeerReconnect_ = function() {
  if (this.reconnectFrame_ || this.pollsBeforeReconnect_-- > 0) {
    return;
  }
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "Inner peer reconnect triggered.");
  this.channel_.updateChannelNameAndCatalog(goog.net.xpc.getRandomString(10));
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "switching channels: " + this.channel_.name);
  this.deconstructSenderFrames_();
  this.initialized_ = false;
  this.reconnectFrame_ = this.constructSenderFrame_(goog.net.xpc.IframePollingTransport.IFRAME_PREFIX + "_reconnect_" + this.channel_.name);
};
goog.net.xpc.IframePollingTransport.prototype.outerPeerReconnect_ = function() {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "outerPeerReconnect called");
  var frames = this.getPeerFrames_();
  var length = frames.length;
  for (var i = 0;i < length;i++) {
    var frameName;
    try {
      if (frames[i] && frames[i].name) {
        frameName = frames[i].name;
      }
    } catch (e) {
    }
    if (!frameName) {
      continue;
    }
    var message = frameName.split("_");
    if (message.length == 3 && message[0] == goog.net.xpc.IframePollingTransport.IFRAME_PREFIX && message[1] == "reconnect") {
      this.channel_.name = message[2];
      this.deconstructSenderFrames_();
      this.initialized_ = false;
      break;
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.deconstructSenderFrames_ = function() {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "deconstructSenderFrames called");
  if (this.msgIframeElm_) {
    this.msgIframeElm_.parentNode.removeChild(this.msgIframeElm_);
    this.msgIframeElm_ = null;
    this.msgWinObj_ = null;
  }
  if (this.ackIframeElm_) {
    this.ackIframeElm_.parentNode.removeChild(this.ackIframeElm_);
    this.ackIframeElm_ = null;
    this.ackWinObj_ = null;
  }
};
goog.net.xpc.IframePollingTransport.prototype.checkForeignFramesReady_ = function() {
  if (!(this.isRcvFrameReady_(this.getMsgFrameName_()) && this.isRcvFrameReady_(this.getAckFrameName_()))) {
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "foreign frames not (yet) present");
    if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.INNER) {
      this.maybeInnerPeerReconnect_();
    } else {
      if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
        this.outerPeerReconnect_();
      }
    }
    this.getWindow().setTimeout(goog.bind(this.connect, this), 100);
  } else {
    goog.log.fine(goog.net.xpc.logger, "foreign frames present");
    this.msgReceiver_ = new goog.net.xpc.IframePollingTransport.Receiver(this, this.getPeerFrame_(this.getMsgFrameName_()), goog.bind(this.processIncomingMsg, this));
    this.ackReceiver_ = new goog.net.xpc.IframePollingTransport.Receiver(this, this.getPeerFrame_(this.getAckFrameName_()), goog.bind(this.processIncomingAck, this));
    this.checkLocalFramesPresent_();
  }
};
goog.net.xpc.IframePollingTransport.prototype.isRcvFrameReady_ = function(frameName) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "checking for receive frame: " + frameName);
  try {
    var winObj = this.getPeerFrame_(frameName);
    if (!winObj || winObj.location.href.indexOf(this.rcvUri_) != 0) {
      return false;
    }
  } catch (e) {
    return false;
  }
  return true;
};
goog.net.xpc.IframePollingTransport.prototype.checkLocalFramesPresent_ = function() {
  var frames = this.getPeerFrames_();
  if (!(frames[this.getAckFrameName_()] && frames[this.getMsgFrameName_()])) {
    if (!this.checkLocalFramesPresentCb_) {
      this.checkLocalFramesPresentCb_ = goog.bind(this.checkLocalFramesPresent_, this);
    }
    this.getWindow().setTimeout(this.checkLocalFramesPresentCb_, 100);
    goog.log.fine(goog.net.xpc.logger, "local frames not (yet) present");
  } else {
    this.msgSender_ = new goog.net.xpc.IframePollingTransport.Sender(this.sendUri_, this.msgWinObj_);
    this.ackSender_ = new goog.net.xpc.IframePollingTransport.Sender(this.sendUri_, this.ackWinObj_);
    goog.log.fine(goog.net.xpc.logger, "local frames ready");
    this.getWindow().setTimeout(goog.bind(function() {
      this.msgSender_.send(goog.net.xpc.SETUP);
      this.sentConnectionSetup_ = true;
      this.waitForAck_ = true;
      goog.log.fine(goog.net.xpc.logger, "SETUP sent");
    }, this), 100);
  }
};
goog.net.xpc.IframePollingTransport.prototype.checkIfConnected_ = function() {
  if (this.sentConnectionSetupAck_ && this.rcvdConnectionSetupAck_) {
    this.channel_.notifyConnected();
    if (this.deliveryQueue_) {
      goog.log.fine(goog.net.xpc.logger, "delivering queued messages " + "(" + this.deliveryQueue_.length + ")");
      for (var i = 0, m;i < this.deliveryQueue_.length;i++) {
        m = this.deliveryQueue_[i];
        this.channel_.xpcDeliver(m.service, m.payload);
      }
      delete this.deliveryQueue_;
    }
  } else {
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "checking if connected: " + "ack sent:" + this.sentConnectionSetupAck_ + ", ack rcvd: " + this.rcvdConnectionSetupAck_);
  }
};
goog.net.xpc.IframePollingTransport.prototype.processIncomingMsg = function(raw) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "msg received: " + raw);
  if (raw == goog.net.xpc.SETUP) {
    if (!this.ackSender_) {
      return;
    }
    this.ackSender_.send(goog.net.xpc.SETUP_ACK_);
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "SETUP_ACK sent");
    this.sentConnectionSetupAck_ = true;
    this.checkIfConnected_();
  } else {
    if (this.channel_.isConnected() || this.sentConnectionSetupAck_) {
      var pos = raw.indexOf("|");
      var head = raw.substring(0, pos);
      var frame = raw.substring(pos + 1);
      pos = head.indexOf(",");
      if (pos == -1) {
        var seq = head;
        this.ackSender_.send("ACK:" + seq);
        this.deliverPayload_(frame);
      } else {
        var seq = head.substring(0, pos);
        this.ackSender_.send("ACK:" + seq);
        var partInfo = head.substring(pos + 1).split("/");
        var part0 = parseInt(partInfo[0], 10);
        var part1 = parseInt(partInfo[1], 10);
        if (part0 == 1) {
          this.parts_ = [];
        }
        this.parts_.push(frame);
        if (part0 == part1) {
          this.deliverPayload_(this.parts_.join(""));
          delete this.parts_;
        }
      }
    } else {
      goog.log.warning(goog.net.xpc.logger, "received msg, but channel is not connected");
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.processIncomingAck = function(msgStr) {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "ack received: " + msgStr);
  if (msgStr == goog.net.xpc.SETUP_ACK_) {
    this.waitForAck_ = false;
    this.rcvdConnectionSetupAck_ = true;
    this.checkIfConnected_();
  } else {
    if (this.channel_.isConnected()) {
      if (!this.waitForAck_) {
        goog.log.warning(goog.net.xpc.logger, "got unexpected ack");
        return;
      }
      var seq = parseInt(msgStr.split(":")[1], 10);
      if (seq == this.sequence_) {
        this.waitForAck_ = false;
        this.sendNextFrame_();
      } else {
        goog.log.warning(goog.net.xpc.logger, "got ack with wrong sequence");
      }
    } else {
      goog.log.warning(goog.net.xpc.logger, "received ack, but channel not connected");
    }
  }
};
goog.net.xpc.IframePollingTransport.prototype.sendNextFrame_ = function() {
  if (this.waitForAck_ || !this.sendQueue_.length) {
    return;
  }
  var s = this.sendQueue_.shift();
  ++this.sequence_;
  this.msgSender_.send(this.sequence_ + s);
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "msg sent: " + this.sequence_ + s);
  this.waitForAck_ = true;
};
goog.net.xpc.IframePollingTransport.prototype.deliverPayload_ = function(s) {
  var pos = s.indexOf(":");
  var service = s.substr(0, pos);
  var payload = s.substring(pos + 1);
  if (!this.channel_.isConnected()) {
    (this.deliveryQueue_ || (this.deliveryQueue_ = [])).push({service:service, payload:payload});
    goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "queued delivery");
  } else {
    this.channel_.xpcDeliver(service, payload);
  }
};
goog.net.xpc.IframePollingTransport.prototype.MAX_FRAME_LENGTH_ = 3800;
goog.net.xpc.IframePollingTransport.prototype.send = function(service, payload) {
  var frame = service + ":" + payload;
  if (!goog.userAgent.IE || payload.length <= this.MAX_FRAME_LENGTH_) {
    this.sendQueue_.push("|" + frame);
  } else {
    var l = payload.length;
    var num = Math.ceil(l / this.MAX_FRAME_LENGTH_);
    var pos = 0;
    var i = 1;
    while (pos < l) {
      this.sendQueue_.push("," + i + "/" + num + "|" + frame.substr(pos, this.MAX_FRAME_LENGTH_));
      i++;
      pos += this.MAX_FRAME_LENGTH_;
    }
  }
  this.sendNextFrame_();
};
goog.net.xpc.IframePollingTransport.prototype.disposeInternal = function() {
  goog.net.xpc.IframePollingTransport.base(this, "disposeInternal");
  var receivers = goog.net.xpc.IframePollingTransport.receivers_;
  goog.array.remove(receivers, this.msgReceiver_);
  goog.array.remove(receivers, this.ackReceiver_);
  this.msgReceiver_ = this.ackReceiver_ = null;
  goog.dom.removeNode(this.msgIframeElm_);
  goog.dom.removeNode(this.ackIframeElm_);
  this.msgIframeElm_ = this.ackIframeElm_ = null;
  this.msgWinObj_ = this.ackWinObj_ = null;
};
goog.net.xpc.IframePollingTransport.receivers_ = [];
goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_ = 10;
goog.net.xpc.IframePollingTransport.TIME_POLL_LONG_ = 100;
goog.net.xpc.IframePollingTransport.TIME_SHORT_POLL_AFTER_ACTIVITY_ = 1E3;
goog.net.xpc.IframePollingTransport.receive_ = function() {
  var receivers = goog.net.xpc.IframePollingTransport.receivers_;
  var receiver;
  var rcvd = false;
  try {
    for (var i = 0;receiver = receivers[i];i++) {
      rcvd = rcvd || receiver.receive();
    }
  } catch (e) {
    goog.log.info(goog.net.xpc.logger, "receive_() failed: " + e);
    receiver.transport_.channel_.notifyTransportError();
    if (!receivers.length) {
      return;
    }
  }
  var now = goog.now();
  if (rcvd) {
    goog.net.xpc.IframePollingTransport.lastActivity_ = now;
  }
  var t = now - goog.net.xpc.IframePollingTransport.lastActivity_ < goog.net.xpc.IframePollingTransport.TIME_SHORT_POLL_AFTER_ACTIVITY_ ? goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_ : goog.net.xpc.IframePollingTransport.TIME_POLL_LONG_;
  goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, t);
};
goog.net.xpc.IframePollingTransport.receiveCb_ = goog.bind(goog.net.xpc.IframePollingTransport.receive_, goog.net.xpc.IframePollingTransport);
goog.net.xpc.IframePollingTransport.startRcvTimer_ = function() {
  goog.log.fine(goog.net.xpc.logger, "starting receive-timer");
  goog.net.xpc.IframePollingTransport.lastActivity_ = goog.now();
  if (goog.net.xpc.IframePollingTransport.rcvTimer_) {
    window.clearTimeout(goog.net.xpc.IframePollingTransport.rcvTimer_);
  }
  goog.net.xpc.IframePollingTransport.rcvTimer_ = window.setTimeout(goog.net.xpc.IframePollingTransport.receiveCb_, goog.net.xpc.IframePollingTransport.TIME_POLL_SHORT_);
};
goog.net.xpc.IframePollingTransport.Sender = function(url, windowObj) {
  if (!/^https?:\/\//.test(url)) {
    throw Error("URL " + url + " is invalid");
  }
  this.sanitizedSendUri_ = url;
  this.sendFrame_ = (windowObj);
  this.cycle_ = 0;
};
goog.net.xpc.IframePollingTransport.Sender.prototype.send = function(payload) {
  this.cycle_ = ++this.cycle_ % 2;
  var url = this.sanitizedSendUri_ + "#" + this.cycle_ + encodeURIComponent(payload);
  try {
    if (goog.userAgent.WEBKIT) {
      this.sendFrame_.location.href = url;
    } else {
      this.sendFrame_.location.replace(url);
    }
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "sending failed", e);
  }
  goog.net.xpc.IframePollingTransport.startRcvTimer_();
};
goog.net.xpc.IframePollingTransport.Receiver = function(transport, windowObj, callback) {
  this.transport_ = transport;
  this.rcvFrame_ = windowObj;
  this.cb_ = callback;
  this.currentLoc_ = this.rcvFrame_.location.href.split("#")[0] + "#INITIAL";
  goog.net.xpc.IframePollingTransport.receivers_.push(this);
  goog.net.xpc.IframePollingTransport.startRcvTimer_();
};
goog.net.xpc.IframePollingTransport.Receiver.prototype.receive = function() {
  var loc = this.rcvFrame_.location.href;
  if (loc != this.currentLoc_) {
    this.currentLoc_ = loc;
    var payload = loc.split("#")[1];
    if (payload) {
      payload = payload.substr(1);
      this.cb_(decodeURIComponent(payload));
    }
    return true;
  } else {
    return false;
  }
};
goog.provide("goog.net.xpc.IframeRelayTransport");
goog.require("goog.dom");
goog.require("goog.dom.TagName");
goog.require("goog.dom.safe");
goog.require("goog.events");
goog.require("goog.html.SafeHtml");
goog.require("goog.log");
goog.require("goog.log.Level");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.userAgent");
goog.net.xpc.IframeRelayTransport = function(channel, opt_domHelper) {
  goog.net.xpc.IframeRelayTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.peerRelayUri_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.PEER_RELAY_URI];
  this.peerIframeId_ = this.channel_.getConfig()[goog.net.xpc.CfgFields.IFRAME_ID];
  if (goog.userAgent.WEBKIT) {
    goog.net.xpc.IframeRelayTransport.startCleanupTimer_();
  }
};
goog.inherits(goog.net.xpc.IframeRelayTransport, goog.net.xpc.Transport);
if (goog.userAgent.WEBKIT) {
  goog.net.xpc.IframeRelayTransport.iframeRefs_ = [];
  goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_ = 1E3;
  goog.net.xpc.IframeRelayTransport.IFRAME_MAX_AGE_ = 3E3;
  goog.net.xpc.IframeRelayTransport.cleanupTimer_ = 0;
  goog.net.xpc.IframeRelayTransport.startCleanupTimer_ = function() {
    if (!goog.net.xpc.IframeRelayTransport.cleanupTimer_) {
      goog.net.xpc.IframeRelayTransport.cleanupTimer_ = window.setTimeout(function() {
        goog.net.xpc.IframeRelayTransport.cleanup_();
      }, goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_);
    }
  };
  goog.net.xpc.IframeRelayTransport.cleanup_ = function(opt_maxAge) {
    var now = goog.now();
    var maxAge = opt_maxAge || goog.net.xpc.IframeRelayTransport.IFRAME_MAX_AGE_;
    while (goog.net.xpc.IframeRelayTransport.iframeRefs_.length && now - goog.net.xpc.IframeRelayTransport.iframeRefs_[0].timestamp >= maxAge) {
      var ifr = goog.net.xpc.IframeRelayTransport.iframeRefs_.shift().iframeElement;
      goog.dom.removeNode(ifr);
      goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "iframe removed");
    }
    goog.net.xpc.IframeRelayTransport.cleanupTimer_ = window.setTimeout(goog.net.xpc.IframeRelayTransport.cleanupCb_, goog.net.xpc.IframeRelayTransport.CLEANUP_INTERVAL_);
  };
  goog.net.xpc.IframeRelayTransport.cleanupCb_ = function() {
    goog.net.xpc.IframeRelayTransport.cleanup_();
  };
}
goog.net.xpc.IframeRelayTransport.IE_PAYLOAD_MAX_SIZE_ = 1800;
goog.net.xpc.IframeRelayTransport.FragmentInfo;
goog.net.xpc.IframeRelayTransport.fragmentMap_ = {};
goog.net.xpc.IframeRelayTransport.prototype.transportType = goog.net.xpc.TransportTypes.IFRAME_RELAY;
goog.net.xpc.IframeRelayTransport.prototype.connect = function() {
  if (!this.getWindow()["xpcRelay"]) {
    this.getWindow()["xpcRelay"] = goog.net.xpc.IframeRelayTransport.receiveMessage_;
  }
  this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP);
};
goog.net.xpc.IframeRelayTransport.receiveMessage_ = function(channelName, frame) {
  var pos = frame.indexOf(":");
  var header = frame.substr(0, pos);
  var payload = frame.substr(pos + 1);
  if (!goog.userAgent.IE || (pos = header.indexOf("|")) == -1) {
    var service = header
  } else {
    var service = header.substr(0, pos);
    var fragmentIdStr = header.substr(pos + 1);
    pos = fragmentIdStr.indexOf("+");
    var messageIdStr = fragmentIdStr.substr(0, pos);
    var fragmentNum = parseInt(fragmentIdStr.substr(pos + 1), 10);
    var fragmentInfo = goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr];
    if (!fragmentInfo) {
      fragmentInfo = goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr] = {fragments:[], received:0, expected:0};
    }
    if (goog.string.contains(fragmentIdStr, "++")) {
      fragmentInfo.expected = fragmentNum + 1;
    }
    fragmentInfo.fragments[fragmentNum] = payload;
    fragmentInfo.received++;
    if (fragmentInfo.received != fragmentInfo.expected) {
      return;
    }
    payload = fragmentInfo.fragments.join("");
    delete goog.net.xpc.IframeRelayTransport.fragmentMap_[messageIdStr];
  }
  goog.net.xpc.channels[channelName].xpcDeliver(service, decodeURIComponent(payload));
};
goog.net.xpc.IframeRelayTransport.prototype.transportServiceHandler = function(payload) {
  if (payload == goog.net.xpc.SETUP) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    this.channel_.notifyConnected();
  } else {
    if (payload == goog.net.xpc.SETUP_ACK_) {
      this.channel_.notifyConnected();
    }
  }
};
goog.net.xpc.IframeRelayTransport.prototype.send = function(service, payload) {
  var encodedPayload = encodeURIComponent(payload);
  var encodedLen = encodedPayload.length;
  var maxSize = goog.net.xpc.IframeRelayTransport.IE_PAYLOAD_MAX_SIZE_;
  if (goog.userAgent.IE && encodedLen > maxSize) {
    var messageIdStr = goog.string.getRandomString();
    for (var startIndex = 0, fragmentNum = 0;startIndex < encodedLen;fragmentNum++) {
      var payloadFragment = encodedPayload.substr(startIndex, maxSize);
      startIndex += maxSize;
      var fragmentIdStr = messageIdStr + (startIndex >= encodedLen ? "++" : "+") + fragmentNum;
      this.send_(service, payloadFragment, fragmentIdStr);
    }
  } else {
    this.send_(service, encodedPayload);
  }
};
goog.net.xpc.IframeRelayTransport.prototype.send_ = function(service, encodedPayload, opt_fragmentIdStr) {
  if (goog.userAgent.IE) {
    var div = this.getWindow().document.createElement(goog.dom.TagName.DIV);
    goog.dom.safe.setInnerHtml(div, goog.html.SafeHtml.createIframe(null, null, {"onload":goog.string.Const.from("this.xpcOnload()"), "sandbox":null}));
    var ifr = div.childNodes[0];
    div = null;
    ifr["xpcOnload"] = goog.net.xpc.IframeRelayTransport.iframeLoadHandler_;
  } else {
    var ifr = this.getWindow().document.createElement(goog.dom.TagName.IFRAME);
    if (goog.userAgent.WEBKIT) {
      goog.net.xpc.IframeRelayTransport.iframeRefs_.push({timestamp:goog.now(), iframeElement:ifr});
    } else {
      goog.events.listen(ifr, "load", goog.net.xpc.IframeRelayTransport.iframeLoadHandler_);
    }
  }
  var style = ifr.style;
  style.visibility = "hidden";
  style.width = ifr.style.height = "0px";
  style.position = "absolute";
  var url = this.peerRelayUri_;
  url += "#" + this.channel_.name;
  if (this.peerIframeId_) {
    url += "," + this.peerIframeId_;
  }
  url += "|" + service;
  if (opt_fragmentIdStr) {
    url += "|" + opt_fragmentIdStr;
  }
  url += ":" + encodedPayload;
  ifr.src = url;
  this.getWindow().document.body.appendChild(ifr);
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "msg sent: " + url);
};
goog.net.xpc.IframeRelayTransport.iframeLoadHandler_ = function() {
  goog.log.log(goog.net.xpc.logger, goog.log.Level.FINEST, "iframe-load");
  goog.dom.removeNode(this);
  this.xpcOnload = null;
};
goog.net.xpc.IframeRelayTransport.prototype.disposeInternal = function() {
  goog.net.xpc.IframeRelayTransport.base(this, "disposeInternal");
  if (goog.userAgent.WEBKIT) {
    goog.net.xpc.IframeRelayTransport.cleanup_(0);
  }
};
goog.provide("goog.net.xpc.NativeMessagingTransport");
goog.require("goog.Timer");
goog.require("goog.asserts");
goog.require("goog.async.Deferred");
goog.require("goog.events");
goog.require("goog.events.EventHandler");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.net.xpc.NativeMessagingTransport = function(channel, peerHostname, opt_domHelper, opt_oneSidedHandshake, opt_protocolVersion) {
  goog.net.xpc.NativeMessagingTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.protocolVersion_ = opt_protocolVersion || 2;
  goog.asserts.assert(this.protocolVersion_ >= 1);
  goog.asserts.assert(this.protocolVersion_ <= 2);
  this.peerHostname_ = peerHostname || "*";
  this.eventHandler_ = new goog.events.EventHandler(this);
  this.maybeAttemptToConnectTimer_ = new goog.Timer(100, this.getWindow());
  this.oneSidedHandshake_ = !!opt_oneSidedHandshake;
  this.setupAckReceived_ = new goog.async.Deferred;
  this.setupAckSent_ = new goog.async.Deferred;
  this.connected_ = new goog.async.Deferred;
  this.endpointId_ = goog.net.xpc.getRandomString(10);
  this.peerEndpointId_ = null;
  if (this.oneSidedHandshake_) {
    if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.INNER) {
      this.connected_.awaitDeferred(this.setupAckReceived_);
    } else {
      this.connected_.awaitDeferred(this.setupAckSent_);
    }
  } else {
    this.connected_.awaitDeferred(this.setupAckReceived_);
    if (this.protocolVersion_ == 2) {
      this.connected_.awaitDeferred(this.setupAckSent_);
    }
  }
  this.connected_.addCallback(this.notifyConnected_, this);
  this.connected_.callback(true);
  this.eventHandler_.listen(this.maybeAttemptToConnectTimer_, goog.Timer.TICK, this.maybeAttemptToConnect_);
  goog.log.info(goog.net.xpc.logger, "NativeMessagingTransport created.  " + "protocolVersion\x3d" + this.protocolVersion_ + ", oneSidedHandshake\x3d" + this.oneSidedHandshake_ + ", role\x3d" + this.channel_.getRole());
};
goog.inherits(goog.net.xpc.NativeMessagingTransport, goog.net.xpc.Transport);
goog.net.xpc.NativeMessagingTransport.CONNECTION_DELAY_MS_ = 200;
goog.net.xpc.NativeMessagingTransport.prototype.peerProtocolVersion_ = null;
goog.net.xpc.NativeMessagingTransport.prototype.initialized_ = false;
goog.net.xpc.NativeMessagingTransport.prototype.transportType = goog.net.xpc.TransportTypes.NATIVE_MESSAGING;
goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_ = ",";
goog.net.xpc.NativeMessagingTransport.activeCount_ = {};
goog.net.xpc.NativeMessagingTransport.prototype.sendTimerId_ = 0;
goog.net.xpc.NativeMessagingTransport.prototype.couldPeerVersionBe_ = function(version) {
  return this.peerProtocolVersion_ == null || this.peerProtocolVersion_ == version;
};
goog.net.xpc.NativeMessagingTransport.initialize_ = function(listenWindow) {
  var uid = goog.getUid(listenWindow);
  var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];
  if (!goog.isNumber(value)) {
    value = 0;
  }
  if (value == 0) {
    goog.events.listen(listenWindow.postMessage ? listenWindow : listenWindow.document, "message", goog.net.xpc.NativeMessagingTransport.messageReceived_, false, goog.net.xpc.NativeMessagingTransport);
  }
  goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value + 1;
};
goog.net.xpc.NativeMessagingTransport.messageReceived_ = function(msgEvt) {
  var data = msgEvt.getBrowserEvent().data;
  if (!goog.isString(data)) {
    return false;
  }
  var headDelim = data.indexOf("|");
  var serviceDelim = data.indexOf(":");
  if (headDelim == -1 || serviceDelim == -1) {
    return false;
  }
  var channelName = data.substring(0, headDelim);
  var service = data.substring(headDelim + 1, serviceDelim);
  var payload = data.substring(serviceDelim + 1);
  goog.log.fine(goog.net.xpc.logger, "messageReceived: channel\x3d" + channelName + ", service\x3d" + service + ", payload\x3d" + payload);
  var channel = goog.net.xpc.channels[channelName];
  if (channel) {
    channel.xpcDeliver(service, payload, (msgEvt.getBrowserEvent()).origin);
    return true;
  }
  var transportMessageType = goog.net.xpc.NativeMessagingTransport.parseTransportPayload_(payload)[0];
  for (var staleChannelName in goog.net.xpc.channels) {
    var staleChannel = goog.net.xpc.channels[staleChannelName];
    if (staleChannel.getRole() == goog.net.xpc.CrossPageChannelRole.INNER && !staleChannel.isConnected() && service == goog.net.xpc.TRANSPORT_SERVICE_ && (transportMessageType == goog.net.xpc.SETUP || transportMessageType == goog.net.xpc.SETUP_NTPV2)) {
      staleChannel.updateChannelNameAndCatalog(channelName);
      staleChannel.xpcDeliver(service, payload);
      return true;
    }
  }
  goog.log.info(goog.net.xpc.logger, 'channel name mismatch; message ignored"');
  return false;
};
goog.net.xpc.NativeMessagingTransport.prototype.transportServiceHandler = function(payload) {
  var transportParts = goog.net.xpc.NativeMessagingTransport.parseTransportPayload_(payload);
  var transportMessageType = transportParts[0];
  var peerEndpointId = transportParts[1];
  switch(transportMessageType) {
    case goog.net.xpc.SETUP_ACK_:
      this.setPeerProtocolVersion_(1);
      if (!this.setupAckReceived_.hasFired()) {
        this.setupAckReceived_.callback(true);
      }
      break;
    case goog.net.xpc.SETUP_ACK_NTPV2:
      if (this.protocolVersion_ == 2) {
        this.setPeerProtocolVersion_(2);
        if (!this.setupAckReceived_.hasFired()) {
          this.setupAckReceived_.callback(true);
        }
      }
      break;
    case goog.net.xpc.SETUP:
      this.setPeerProtocolVersion_(1);
      this.sendSetupAckMessage_(1);
      break;
    case goog.net.xpc.SETUP_NTPV2:
      if (this.protocolVersion_ == 2) {
        var prevPeerProtocolVersion = this.peerProtocolVersion_;
        this.setPeerProtocolVersion_(2);
        this.sendSetupAckMessage_(2);
        if ((prevPeerProtocolVersion == 1 || this.peerEndpointId_ != null) && this.peerEndpointId_ != peerEndpointId) {
          goog.log.info(goog.net.xpc.logger, "Sending SETUP and changing peer ID to: " + peerEndpointId);
          this.sendSetupMessage_();
        }
        this.peerEndpointId_ = peerEndpointId;
      }
      break;
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.sendSetupMessage_ = function() {
  goog.asserts.assert(!(this.protocolVersion_ == 1 && this.peerProtocolVersion_ == 2));
  if (this.protocolVersion_ == 2 && this.couldPeerVersionBe_(2)) {
    var payload = goog.net.xpc.SETUP_NTPV2;
    payload += goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_;
    payload += this.endpointId_;
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, payload);
  }
  if (this.couldPeerVersionBe_(1)) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP);
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.sendSetupAckMessage_ = function(protocolVersion) {
  goog.asserts.assert(this.protocolVersion_ != 1 || protocolVersion != 2, "Shouldn't try to send a v2 setup ack in v1 mode.");
  if (this.protocolVersion_ == 2 && this.couldPeerVersionBe_(2) && protocolVersion == 2) {
    this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_NTPV2);
  } else {
    if (this.couldPeerVersionBe_(1) && protocolVersion == 1) {
      this.send(goog.net.xpc.TRANSPORT_SERVICE_, goog.net.xpc.SETUP_ACK_);
    } else {
      return;
    }
  }
  if (!this.setupAckSent_.hasFired()) {
    this.setupAckSent_.callback(true);
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.setPeerProtocolVersion_ = function(version) {
  if (version > this.peerProtocolVersion_) {
    this.peerProtocolVersion_ = version;
  }
  if (this.peerProtocolVersion_ == 1) {
    if (!this.setupAckSent_.hasFired() && !this.oneSidedHandshake_) {
      this.setupAckSent_.callback(true);
    }
    this.peerEndpointId_ = null;
  }
};
goog.net.xpc.NativeMessagingTransport.prototype.connect = function() {
  goog.net.xpc.NativeMessagingTransport.initialize_(this.getWindow());
  this.initialized_ = true;
  this.maybeAttemptToConnect_();
};
goog.net.xpc.NativeMessagingTransport.prototype.maybeAttemptToConnect_ = function() {
  var outerFrame = this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER;
  if (this.oneSidedHandshake_ && outerFrame || this.channel_.isConnected() || this.isDisposed()) {
    this.maybeAttemptToConnectTimer_.stop();
    return;
  }
  this.maybeAttemptToConnectTimer_.start();
  this.sendSetupMessage_();
};
goog.net.xpc.NativeMessagingTransport.prototype.send = function(service, payload) {
  var win = this.channel_.getPeerWindowObject();
  if (!win) {
    goog.log.fine(goog.net.xpc.logger, "send(): window not ready");
    return;
  }
  this.send = function(service, payload) {
    var transport = this;
    var channelName = this.channel_.name;
    var sendFunctor = function() {
      transport.sendTimerId_ = 0;
      try {
        var obj = win.postMessage ? win : win.document;
        if (!obj.postMessage) {
          goog.log.warning(goog.net.xpc.logger, "Peer window had no postMessage function.");
          return;
        }
        obj.postMessage(channelName + "|" + service + ":" + payload, transport.peerHostname_);
        goog.log.fine(goog.net.xpc.logger, "send(): service\x3d" + service + " payload\x3d" + payload + " to hostname\x3d" + transport.peerHostname_);
      } catch (error) {
        goog.log.warning(goog.net.xpc.logger, "Error performing postMessage, ignoring.", error);
      }
    };
    this.sendTimerId_ = goog.Timer.callOnce(sendFunctor, 0);
  };
  this.send(service, payload);
};
goog.net.xpc.NativeMessagingTransport.prototype.notifyConnected_ = function() {
  var delay = this.protocolVersion_ == 1 || this.peerProtocolVersion_ == 1 ? goog.net.xpc.NativeMessagingTransport.CONNECTION_DELAY_MS_ : undefined;
  this.channel_.notifyConnected(delay);
};
goog.net.xpc.NativeMessagingTransport.prototype.disposeInternal = function() {
  if (this.initialized_) {
    var listenWindow = this.getWindow();
    var uid = goog.getUid(listenWindow);
    var value = goog.net.xpc.NativeMessagingTransport.activeCount_[uid];
    goog.net.xpc.NativeMessagingTransport.activeCount_[uid] = value - 1;
    if (value == 1) {
      goog.events.unlisten(listenWindow.postMessage ? listenWindow : listenWindow.document, "message", goog.net.xpc.NativeMessagingTransport.messageReceived_, false, goog.net.xpc.NativeMessagingTransport);
    }
  }
  if (this.sendTimerId_) {
    goog.Timer.clear(this.sendTimerId_);
    this.sendTimerId_ = 0;
  }
  goog.dispose(this.eventHandler_);
  delete this.eventHandler_;
  goog.dispose(this.maybeAttemptToConnectTimer_);
  delete this.maybeAttemptToConnectTimer_;
  this.setupAckReceived_.cancel();
  delete this.setupAckReceived_;
  this.setupAckSent_.cancel();
  delete this.setupAckSent_;
  this.connected_.cancel();
  delete this.connected_;
  delete this.send;
  goog.net.xpc.NativeMessagingTransport.base(this, "disposeInternal");
};
goog.net.xpc.NativeMessagingTransport.parseTransportPayload_ = function(payload) {
  var transportParts = (payload.split(goog.net.xpc.NativeMessagingTransport.MESSAGE_DELIMITER_));
  transportParts[1] = transportParts[1] || null;
  return transportParts;
};
goog.provide("goog.net.xpc.NixTransport");
goog.require("goog.log");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.Transport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.reflect");
goog.net.xpc.NixTransport = function(channel, opt_domHelper) {
  goog.net.xpc.NixTransport.base(this, "constructor", opt_domHelper);
  this.channel_ = channel;
  this.authToken_ = channel[goog.net.xpc.CfgFields.AUTH_TOKEN] || "";
  this.remoteAuthToken_ = channel[goog.net.xpc.CfgFields.REMOTE_AUTH_TOKEN] || "";
  goog.net.xpc.NixTransport.conductGlobalSetup_(this.getWindow());
  this[goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE] = this.handleMessage_;
  this[goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL] = this.createChannel_;
};
goog.inherits(goog.net.xpc.NixTransport, goog.net.xpc.Transport);
goog.net.xpc.NixTransport.NIX_WRAPPER = "GCXPC____NIXVBS_wrapper";
goog.net.xpc.NixTransport.NIX_GET_WRAPPER = "GCXPC____NIXVBS_get_wrapper";
goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE = "GCXPC____NIXJS_handle_message";
goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL = "GCXPC____NIXJS_create_channel";
goog.net.xpc.NixTransport.NIX_ID_FIELD = "GCXPC____NIXVBS_container";
goog.net.xpc.NixTransport.isNixSupported = function() {
  var isSupported = false;
  try {
    var oldOpener = window.opener;
    window.opener = ({});
    isSupported = goog.reflect.canAccessProperty(window, "opener");
    window.opener = oldOpener;
  } catch (e) {
  }
  return isSupported;
};
goog.net.xpc.NixTransport.conductGlobalSetup_ = function(listenWindow) {
  if (listenWindow["nix_setup_complete"]) {
    return;
  }
  var vbscript = "Class " + goog.net.xpc.NixTransport.NIX_WRAPPER + "\n " + "Private m_Transport\n" + "Private m_Auth\n" + "Public Sub SetTransport(transport)\n" + "If isEmpty(m_Transport) Then\n" + "Set m_Transport \x3d transport\n" + "End If\n" + "End Sub\n" + "Public Sub SetAuth(auth)\n" + "If isEmpty(m_Auth) Then\n" + "m_Auth \x3d auth\n" + "End If\n" + "End Sub\n" + "Public Function GetAuthToken()\n " + "GetAuthToken \x3d m_Auth\n" + "End Function\n" + "Public Sub SendMessage(service, payload)\n " + 
  "Call m_Transport." + goog.net.xpc.NixTransport.NIX_HANDLE_MESSAGE + "(service, payload)\n" + "End Sub\n" + "Public Sub CreateChannel(channel)\n " + "Call m_Transport." + goog.net.xpc.NixTransport.NIX_CREATE_CHANNEL + "(channel)\n" + "End Sub\n" + "Public Sub " + goog.net.xpc.NixTransport.NIX_ID_FIELD + "()\n " + "End Sub\n" + "End Class\n " + "Function " + goog.net.xpc.NixTransport.NIX_GET_WRAPPER + "(transport, auth)\n" + "Dim wrap\n" + "Set wrap \x3d New " + goog.net.xpc.NixTransport.NIX_WRAPPER + 
  "\n" + "wrap.SetTransport transport\n" + "wrap.SetAuth auth\n" + "Set " + goog.net.xpc.NixTransport.NIX_GET_WRAPPER + " \x3d wrap\n" + "End Function";
  try {
    listenWindow.execScript(vbscript, "vbscript");
    listenWindow["nix_setup_complete"] = true;
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting global setup: " + e);
  }
};
goog.net.xpc.NixTransport.prototype.transportType = goog.net.xpc.TransportTypes.NIX;
goog.net.xpc.NixTransport.prototype.localSetupCompleted_ = false;
goog.net.xpc.NixTransport.prototype.nixChannel_ = null;
goog.net.xpc.NixTransport.prototype.connect = function() {
  if (this.channel_.getRole() == goog.net.xpc.CrossPageChannelRole.OUTER) {
    this.attemptOuterSetup_();
  } else {
    this.attemptInnerSetup_();
  }
};
goog.net.xpc.NixTransport.prototype.attemptOuterSetup_ = function() {
  if (this.localSetupCompleted_) {
    return;
  }
  var innerFrame = this.channel_.getIframeElement();
  try {
    var theWindow = this.getWindow();
    var getWrapper = theWindow[goog.net.xpc.NixTransport.NIX_GET_WRAPPER];
    innerFrame.contentWindow.opener = getWrapper(this, this.authToken_);
    this.localSetupCompleted_ = true;
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting setup: " + e);
  }
  if (!this.localSetupCompleted_) {
    this.getWindow().setTimeout(goog.bind(this.attemptOuterSetup_, this), 100);
  }
};
goog.net.xpc.NixTransport.prototype.attemptInnerSetup_ = function() {
  if (this.localSetupCompleted_) {
    return;
  }
  try {
    var opener = this.getWindow().opener;
    if (opener && goog.net.xpc.NixTransport.NIX_ID_FIELD in opener) {
      this.nixChannel_ = opener;
      var remoteAuthToken = this.nixChannel_["GetAuthToken"]();
      if (remoteAuthToken != this.remoteAuthToken_) {
        goog.log.error(goog.net.xpc.logger, "Invalid auth token from other party");
        return;
      }
      var theWindow = this.getWindow();
      var getWrapper = theWindow[goog.net.xpc.NixTransport.NIX_GET_WRAPPER];
      this.nixChannel_["CreateChannel"](getWrapper(this, this.authToken_));
      this.localSetupCompleted_ = true;
      this.channel_.notifyConnected();
    }
  } catch (e) {
    goog.log.error(goog.net.xpc.logger, "exception caught while attempting setup: " + e);
    return;
  }
  if (!this.localSetupCompleted_) {
    this.getWindow().setTimeout(goog.bind(this.attemptInnerSetup_, this), 100);
  }
};
goog.net.xpc.NixTransport.prototype.createChannel_ = function(channel) {
  if (typeof channel != "unknown" || !(goog.net.xpc.NixTransport.NIX_ID_FIELD in channel)) {
    goog.log.error(goog.net.xpc.logger, "Invalid NIX channel given to createChannel_");
  }
  this.nixChannel_ = channel;
  var remoteAuthToken = this.nixChannel_["GetAuthToken"]();
  if (remoteAuthToken != this.remoteAuthToken_) {
    goog.log.error(goog.net.xpc.logger, "Invalid auth token from other party");
    return;
  }
  this.channel_.notifyConnected();
};
goog.net.xpc.NixTransport.prototype.handleMessage_ = function(serviceName, payload) {
  var deliveryHandler = function() {
    this.channel_.xpcDeliver(serviceName, payload);
  };
  this.getWindow().setTimeout(goog.bind(deliveryHandler, this), 1);
};
goog.net.xpc.NixTransport.prototype.send = function(service, payload) {
  if (typeof this.nixChannel_ !== "unknown") {
    goog.log.error(goog.net.xpc.logger, "NIX channel not connected");
  }
  this.nixChannel_["SendMessage"](service, payload);
};
goog.net.xpc.NixTransport.prototype.disposeInternal = function() {
  goog.net.xpc.NixTransport.base(this, "disposeInternal");
  this.nixChannel_ = null;
};
goog.provide("goog.net.xpc.CrossPageChannel");
goog.require("goog.Uri");
goog.require("goog.async.Deferred");
goog.require("goog.async.Delay");
goog.require("goog.dispose");
goog.require("goog.dom");
goog.require("goog.dom.TagName");
goog.require("goog.events");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventType");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.messaging.AbstractChannel");
goog.require("goog.net.xpc");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.xpc.ChannelStates");
goog.require("goog.net.xpc.CrossPageChannelRole");
goog.require("goog.net.xpc.DirectTransport");
goog.require("goog.net.xpc.FrameElementMethodTransport");
goog.require("goog.net.xpc.IframePollingTransport");
goog.require("goog.net.xpc.IframeRelayTransport");
goog.require("goog.net.xpc.NativeMessagingTransport");
goog.require("goog.net.xpc.NixTransport");
goog.require("goog.net.xpc.TransportTypes");
goog.require("goog.net.xpc.UriCfgFields");
goog.require("goog.string");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.net.xpc.CrossPageChannel = function(cfg, opt_domHelper) {
  goog.net.xpc.CrossPageChannel.base(this, "constructor");
  for (var i = 0, uriField;uriField = goog.net.xpc.UriCfgFields[i];i++) {
    if (uriField in cfg && !/^https?:\/\//.test(cfg[uriField])) {
      throw Error("URI " + cfg[uriField] + " is invalid for field " + uriField);
    }
  }
  this.cfg_ = cfg;
  this.name = this.cfg_[goog.net.xpc.CfgFields.CHANNEL_NAME] || goog.net.xpc.getRandomString(10);
  this.domHelper_ = opt_domHelper || goog.dom.getDomHelper();
  this.deferredDeliveries_ = [];
  this.peerLoadHandler_ = new goog.events.EventHandler(this);
  cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] = cfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] || goog.uri.utils.getHost(this.domHelper_.getWindow().location.href) + "/robots.txt";
  cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] = cfg[goog.net.xpc.CfgFields.PEER_POLL_URI] || goog.uri.utils.getHost(cfg[goog.net.xpc.CfgFields.PEER_URI] || "") + "/robots.txt";
  goog.net.xpc.channels[this.name] = this;
  if (!goog.events.getListener(window, goog.events.EventType.UNLOAD, goog.net.xpc.CrossPageChannel.disposeAll_)) {
    goog.events.listenOnce(window, goog.events.EventType.UNLOAD, goog.net.xpc.CrossPageChannel.disposeAll_);
  }
  goog.log.info(goog.net.xpc.logger, "CrossPageChannel created: " + this.name);
};
goog.inherits(goog.net.xpc.CrossPageChannel, goog.messaging.AbstractChannel);
goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_ = new RegExp("^%*" + goog.net.xpc.TRANSPORT_SERVICE_ + "$");
goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_ = new RegExp("^%+" + goog.net.xpc.TRANSPORT_SERVICE_ + "$");
goog.net.xpc.CrossPageChannel.prototype.connectionDelay_ = null;
goog.net.xpc.CrossPageChannel.prototype.peerWindowDeferred_ = null;
goog.net.xpc.CrossPageChannel.prototype.transport_ = null;
goog.net.xpc.CrossPageChannel.prototype.state_ = goog.net.xpc.ChannelStates.NOT_CONNECTED;
goog.net.xpc.CrossPageChannel.prototype.isConnected = function() {
  return this.state_ == goog.net.xpc.ChannelStates.CONNECTED;
};
goog.net.xpc.CrossPageChannel.prototype.peerWindowObject_ = null;
goog.net.xpc.CrossPageChannel.prototype.iframeElement_ = null;
goog.net.xpc.CrossPageChannel.prototype.getConfig = function() {
  return this.cfg_;
};
goog.net.xpc.CrossPageChannel.prototype.getIframeElement = function() {
  return this.iframeElement_;
};
goog.net.xpc.CrossPageChannel.prototype.setPeerWindowObject = function(peerWindowObject) {
  this.peerWindowObject_ = peerWindowObject;
};
goog.net.xpc.CrossPageChannel.prototype.getPeerWindowObject = function() {
  return this.peerWindowObject_;
};
goog.net.xpc.CrossPageChannel.prototype.isPeerAvailable = function() {
  try {
    return !!this.peerWindowObject_ && !Boolean(this.peerWindowObject_.closed);
  } catch (e) {
    return false;
  }
};
goog.net.xpc.CrossPageChannel.prototype.determineTransportType_ = function() {
  var transportType;
  if (goog.isFunction(document.postMessage) || goog.isFunction(window.postMessage) || goog.userAgent.IE && window.postMessage) {
    transportType = goog.net.xpc.TransportTypes.NATIVE_MESSAGING;
  } else {
    if (goog.userAgent.GECKO) {
      transportType = goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD;
    } else {
      if (goog.userAgent.IE && this.cfg_[goog.net.xpc.CfgFields.PEER_RELAY_URI]) {
        transportType = goog.net.xpc.TransportTypes.IFRAME_RELAY;
      } else {
        if (goog.userAgent.IE && goog.net.xpc.NixTransport.isNixSupported()) {
          transportType = goog.net.xpc.TransportTypes.NIX;
        } else {
          transportType = goog.net.xpc.TransportTypes.IFRAME_POLLING;
        }
      }
    }
  }
  return transportType;
};
goog.net.xpc.CrossPageChannel.prototype.createTransport_ = function() {
  if (this.transport_) {
    return;
  }
  var CfgFields = goog.net.xpc.CfgFields;
  if (!this.cfg_[CfgFields.TRANSPORT]) {
    this.cfg_[CfgFields.TRANSPORT] = this.determineTransportType_();
  }
  switch(this.cfg_[CfgFields.TRANSPORT]) {
    case goog.net.xpc.TransportTypes.NATIVE_MESSAGING:
      var protocolVersion = this.cfg_[CfgFields.NATIVE_TRANSPORT_PROTOCOL_VERSION] || 2;
      this.transport_ = new goog.net.xpc.NativeMessagingTransport(this, this.cfg_[CfgFields.PEER_HOSTNAME], this.domHelper_, !!this.cfg_[CfgFields.ONE_SIDED_HANDSHAKE], protocolVersion);
      break;
    case goog.net.xpc.TransportTypes.NIX:
      this.transport_ = new goog.net.xpc.NixTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.FRAME_ELEMENT_METHOD:
      this.transport_ = new goog.net.xpc.FrameElementMethodTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.IFRAME_RELAY:
      this.transport_ = new goog.net.xpc.IframeRelayTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.IFRAME_POLLING:
      this.transport_ = new goog.net.xpc.IframePollingTransport(this, this.domHelper_);
      break;
    case goog.net.xpc.TransportTypes.DIRECT:
      if (this.peerWindowObject_ && goog.net.xpc.DirectTransport.isSupported((this.peerWindowObject_))) {
        this.transport_ = new goog.net.xpc.DirectTransport(this, this.domHelper_);
      } else {
        goog.log.info(goog.net.xpc.logger, "DirectTransport not supported for this window, peer window in" + " different security context or not set yet.");
      }
      break;
  }
  if (this.transport_) {
    goog.log.info(goog.net.xpc.logger, "Transport created: " + this.transport_.getName());
  } else {
    throw Error("CrossPageChannel: No suitable transport found!");
  }
};
goog.net.xpc.CrossPageChannel.prototype.getTransportType = function() {
  return this.transport_.getType();
};
goog.net.xpc.CrossPageChannel.prototype.getTransportName = function() {
  return this.transport_.getName();
};
goog.net.xpc.CrossPageChannel.prototype.getPeerConfiguration = function() {
  var peerCfg = {};
  peerCfg[goog.net.xpc.CfgFields.CHANNEL_NAME] = this.name;
  peerCfg[goog.net.xpc.CfgFields.TRANSPORT] = this.cfg_[goog.net.xpc.CfgFields.TRANSPORT];
  peerCfg[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE] = this.cfg_[goog.net.xpc.CfgFields.ONE_SIDED_HANDSHAKE];
  if (this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI]) {
    peerCfg[goog.net.xpc.CfgFields.PEER_RELAY_URI] = this.cfg_[goog.net.xpc.CfgFields.LOCAL_RELAY_URI];
  }
  if (this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI]) {
    peerCfg[goog.net.xpc.CfgFields.PEER_POLL_URI] = this.cfg_[goog.net.xpc.CfgFields.LOCAL_POLL_URI];
  }
  if (this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI]) {
    peerCfg[goog.net.xpc.CfgFields.LOCAL_POLL_URI] = this.cfg_[goog.net.xpc.CfgFields.PEER_POLL_URI];
  }
  var role = this.cfg_[goog.net.xpc.CfgFields.ROLE];
  if (role) {
    peerCfg[goog.net.xpc.CfgFields.ROLE] = role == goog.net.xpc.CrossPageChannelRole.INNER ? goog.net.xpc.CrossPageChannelRole.OUTER : goog.net.xpc.CrossPageChannelRole.INNER;
  }
  return peerCfg;
};
goog.net.xpc.CrossPageChannel.prototype.createPeerIframe = function(parentElm, opt_configureIframeCb, opt_addCfgParam) {
  goog.log.info(goog.net.xpc.logger, "createPeerIframe()");
  var iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID];
  if (!iframeId) {
    iframeId = this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID] = "xpcpeer" + goog.net.xpc.getRandomString(4);
  }
  var iframeElm = goog.dom.getDomHelper(parentElm).createElement(goog.dom.TagName.IFRAME);
  iframeElm.id = iframeElm.name = iframeId;
  if (opt_configureIframeCb) {
    opt_configureIframeCb(iframeElm);
  } else {
    iframeElm.style.width = iframeElm.style.height = "100%";
  }
  this.cleanUpIncompleteConnection_();
  this.peerWindowDeferred_ = new goog.async.Deferred(undefined, this);
  var peerUri = this.getPeerUri(opt_addCfgParam);
  this.peerLoadHandler_.listenOnceWithScope(iframeElm, "load", this.peerWindowDeferred_.callback, false, this.peerWindowDeferred_);
  if (goog.userAgent.GECKO || goog.userAgent.WEBKIT) {
    window.setTimeout(goog.bind(function() {
      parentElm.appendChild(iframeElm);
      iframeElm.src = peerUri.toString();
      goog.log.info(goog.net.xpc.logger, "peer iframe created (" + iframeId + ")");
    }, this), 1);
  } else {
    iframeElm.src = peerUri.toString();
    parentElm.appendChild(iframeElm);
    goog.log.info(goog.net.xpc.logger, "peer iframe created (" + iframeId + ")");
  }
  return (iframeElm);
};
goog.net.xpc.CrossPageChannel.prototype.cleanUpIncompleteConnection_ = function() {
  if (this.peerWindowDeferred_) {
    this.peerWindowDeferred_.cancel();
    this.peerWindowDeferred_ = null;
  }
  this.deferredDeliveries_.length = 0;
  this.peerLoadHandler_.removeAll();
};
goog.net.xpc.CrossPageChannel.prototype.getPeerUri = function(opt_addCfgParam) {
  var peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI];
  if (goog.isString(peerUri)) {
    peerUri = this.cfg_[goog.net.xpc.CfgFields.PEER_URI] = new goog.Uri(peerUri);
  }
  if (opt_addCfgParam !== false) {
    peerUri.setParameterValue("xpc", goog.json.serialize(this.getPeerConfiguration()));
  }
  return peerUri;
};
goog.net.xpc.CrossPageChannel.prototype.connect = function(opt_connectCb) {
  this.connectCb_ = opt_connectCb || goog.nullFunction;
  if (this.state_ == goog.net.xpc.ChannelStates.CLOSED) {
    this.state_ = goog.net.xpc.ChannelStates.NOT_CONNECTED;
  }
  if (this.peerWindowDeferred_) {
    this.peerWindowDeferred_.addCallback(this.continueConnection_);
  } else {
    this.continueConnection_();
  }
};
goog.net.xpc.CrossPageChannel.prototype.continueConnection_ = function() {
  goog.log.info(goog.net.xpc.logger, "continueConnection_()");
  this.peerWindowDeferred_ = null;
  if (this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]) {
    this.iframeElement_ = this.domHelper_.getElement(this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]);
  }
  if (this.iframeElement_) {
    var winObj = this.iframeElement_.contentWindow;
    if (!winObj) {
      winObj = window.frames[this.cfg_[goog.net.xpc.CfgFields.IFRAME_ID]];
    }
    this.setPeerWindowObject(winObj);
  }
  if (!this.peerWindowObject_) {
    if (window == window.top) {
      throw Error("CrossPageChannel: Can't connect, peer window-object not set.");
    } else {
      this.setPeerWindowObject(window.parent);
    }
  }
  this.createTransport_();
  this.transport_.connect();
  while (this.deferredDeliveries_.length > 0) {
    this.deferredDeliveries_.shift()();
  }
};
goog.net.xpc.CrossPageChannel.prototype.close = function() {
  this.cleanUpIncompleteConnection_();
  this.state_ = goog.net.xpc.ChannelStates.CLOSED;
  goog.dispose(this.transport_);
  this.transport_ = null;
  this.connectCb_ = null;
  goog.dispose(this.connectionDelay_);
  this.connectionDelay_ = null;
  goog.log.info(goog.net.xpc.logger, 'Channel "' + this.name + '" closed');
};
goog.net.xpc.CrossPageChannel.prototype.notifyConnected = function(opt_delay) {
  if (this.isConnected() || this.connectionDelay_ && this.connectionDelay_.isActive()) {
    return;
  }
  this.state_ = goog.net.xpc.ChannelStates.CONNECTED;
  goog.log.info(goog.net.xpc.logger, 'Channel "' + this.name + '" connected');
  goog.dispose(this.connectionDelay_);
  if (goog.isDef(opt_delay)) {
    this.connectionDelay_ = new goog.async.Delay(this.connectCb_, opt_delay);
    this.connectionDelay_.start();
  } else {
    this.connectionDelay_ = null;
    this.connectCb_();
  }
};
goog.net.xpc.CrossPageChannel.prototype.notifyTransportError = function() {
  goog.log.info(goog.net.xpc.logger, "Transport Error");
  this.close();
};
goog.net.xpc.CrossPageChannel.prototype.send = function(serviceName, payload) {
  if (!this.isConnected()) {
    goog.log.error(goog.net.xpc.logger, "Can't send. Channel not connected.");
    return;
  }
  if (!this.isPeerAvailable()) {
    goog.log.error(goog.net.xpc.logger, "Peer has disappeared.");
    this.close();
    return;
  }
  if (goog.isObject(payload)) {
    payload = goog.json.serialize(payload);
  }
  this.transport_.send(this.escapeServiceName_(serviceName), payload);
};
goog.net.xpc.CrossPageChannel.prototype.xpcDeliver = function(serviceName, payload, opt_origin) {
  if (this.peerWindowDeferred_) {
    this.deferredDeliveries_.push(goog.bind(this.xpcDeliver, this, serviceName, payload, opt_origin));
    return;
  }
  if (!this.isMessageOriginAcceptable_(opt_origin)) {
    goog.log.warning(goog.net.xpc.logger, 'Message received from unapproved origin "' + opt_origin + '" - rejected.');
    return;
  }
  if (this.isDisposed() || this.state_ == goog.net.xpc.ChannelStates.CLOSED) {
    goog.log.warning(goog.net.xpc.logger, "CrossPageChannel::xpcDeliver(): Channel closed.");
  } else {
    if (!serviceName || serviceName == goog.net.xpc.TRANSPORT_SERVICE_) {
      this.transport_.transportServiceHandler(payload);
    } else {
      if (this.isConnected()) {
        this.deliver(this.unescapeServiceName_(serviceName), payload);
      } else {
        goog.log.info(goog.net.xpc.logger, "CrossPageChannel::xpcDeliver(): Not connected.");
      }
    }
  }
};
goog.net.xpc.CrossPageChannel.prototype.escapeServiceName_ = function(name) {
  if (goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_ESCAPE_RE_.test(name)) {
    name = "%" + name;
  }
  return name.replace(/[%:|]/g, encodeURIComponent);
};
goog.net.xpc.CrossPageChannel.prototype.unescapeServiceName_ = function(name) {
  name = name.replace(/%[0-9a-f]{2}/gi, decodeURIComponent);
  if (goog.net.xpc.CrossPageChannel.TRANSPORT_SERVICE_UNESCAPE_RE_.test(name)) {
    return name.substring(1);
  } else {
    return name;
  }
};
goog.net.xpc.CrossPageChannel.prototype.getRole = function() {
  var role = this.cfg_[goog.net.xpc.CfgFields.ROLE];
  if (goog.isNumber(role)) {
    return role;
  } else {
    return window.parent == this.peerWindowObject_ ? goog.net.xpc.CrossPageChannelRole.INNER : goog.net.xpc.CrossPageChannelRole.OUTER;
  }
};
goog.net.xpc.CrossPageChannel.prototype.updateChannelNameAndCatalog = function(name) {
  goog.log.fine(goog.net.xpc.logger, "changing channel name to " + name);
  delete goog.net.xpc.channels[this.name];
  this.name = name;
  goog.net.xpc.channels[name] = this;
};
goog.net.xpc.CrossPageChannel.prototype.isMessageOriginAcceptable_ = function(opt_origin) {
  var peerHostname = this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME];
  return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(opt_origin)) || goog.string.isEmptyOrWhitespace(goog.string.makeSafe(peerHostname)) || opt_origin == this.cfg_[goog.net.xpc.CfgFields.PEER_HOSTNAME];
};
goog.net.xpc.CrossPageChannel.prototype.disposeInternal = function() {
  this.close();
  this.peerWindowObject_ = null;
  this.iframeElement_ = null;
  delete goog.net.xpc.channels[this.name];
  goog.dispose(this.peerLoadHandler_);
  delete this.peerLoadHandler_;
  goog.net.xpc.CrossPageChannel.base(this, "disposeInternal");
};
goog.net.xpc.CrossPageChannel.disposeAll_ = function() {
  for (var name in goog.net.xpc.channels) {
    goog.dispose(goog.net.xpc.channels[name]);
  }
};
goog.provide("goog.net.WebSocket");
goog.provide("goog.net.WebSocket.ErrorEvent");
goog.provide("goog.net.WebSocket.EventType");
goog.provide("goog.net.WebSocket.MessageEvent");
goog.require("goog.Timer");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.EventTarget");
goog.require("goog.log");
goog.net.WebSocket = function(opt_autoReconnect, opt_getNextReconnect) {
  goog.net.WebSocket.base(this, "constructor");
  this.autoReconnect_ = goog.isDef(opt_autoReconnect) ? opt_autoReconnect : true;
  this.getNextReconnect_ = opt_getNextReconnect || goog.net.WebSocket.EXPONENTIAL_BACKOFF_;
  this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_);
};
goog.inherits(goog.net.WebSocket, goog.events.EventTarget);
goog.net.WebSocket.prototype.webSocket_ = null;
goog.net.WebSocket.prototype.url_ = null;
goog.net.WebSocket.prototype.protocol_ = undefined;
goog.net.WebSocket.prototype.closeExpected_ = false;
goog.net.WebSocket.prototype.reconnectAttempt_ = 0;
goog.net.WebSocket.prototype.reconnectTimer_ = null;
goog.net.WebSocket.prototype.logger_ = goog.log.getLogger("goog.net.WebSocket");
goog.net.WebSocket.EventType = {CLOSED:goog.events.getUniqueId("closed"), ERROR:goog.events.getUniqueId("error"), MESSAGE:goog.events.getUniqueId("message"), OPENED:goog.events.getUniqueId("opened")};
goog.net.WebSocket.ReadyState_ = {CONNECTING:0, OPEN:1, CLOSING:2, CLOSED:3};
goog.net.WebSocket.EXPONENTIAL_BACKOFF_CEILING_ = 60 * 1E3;
goog.net.WebSocket.EXPONENTIAL_BACKOFF_ = function(attempt) {
  var time = Math.pow(2, attempt) * 1E3;
  return Math.min(time, goog.net.WebSocket.EXPONENTIAL_BACKOFF_CEILING_);
};
goog.net.WebSocket.protectEntryPoints = function(errorHandler) {
  goog.net.WebSocket.prototype.onOpen_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onOpen_);
  goog.net.WebSocket.prototype.onClose_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onClose_);
  goog.net.WebSocket.prototype.onMessage_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onMessage_);
  goog.net.WebSocket.prototype.onError_ = errorHandler.protectEntryPoint(goog.net.WebSocket.prototype.onError_);
};
goog.net.WebSocket.prototype.open = function(url, opt_protocol) {
  goog.asserts.assert(goog.global["WebSocket"], "This browser does not support WebSocket");
  goog.asserts.assert(!this.isOpen(), "The WebSocket is already open");
  this.clearReconnectTimer_();
  this.url_ = url;
  this.protocol_ = opt_protocol;
  if (this.protocol_) {
    goog.log.info(this.logger_, "Opening the WebSocket on " + this.url_ + " with protocol " + this.protocol_);
    this.webSocket_ = new WebSocket(this.url_, this.protocol_);
  } else {
    goog.log.info(this.logger_, "Opening the WebSocket on " + this.url_);
    this.webSocket_ = new WebSocket(this.url_);
  }
  this.webSocket_.onopen = goog.bind(this.onOpen_, this);
  this.webSocket_.onclose = goog.bind(this.onClose_, this);
  this.webSocket_.onmessage = goog.bind(this.onMessage_, this);
  this.webSocket_.onerror = goog.bind(this.onError_, this);
};
goog.net.WebSocket.prototype.close = function() {
  this.clearReconnectTimer_();
  if (this.webSocket_) {
    goog.log.info(this.logger_, "Closing the WebSocket.");
    this.closeExpected_ = true;
    this.webSocket_.close();
    this.webSocket_ = null;
  }
};
goog.net.WebSocket.prototype.send = function(message) {
  goog.asserts.assert(this.isOpen(), "Cannot send without an open socket");
  this.webSocket_.send(message);
};
goog.net.WebSocket.prototype.isOpen = function() {
  return !!this.webSocket_ && this.webSocket_.readyState == goog.net.WebSocket.ReadyState_.OPEN;
};
goog.net.WebSocket.prototype.getBufferedAmount = function() {
  return this.webSocket_.bufferedAmount;
};
goog.net.WebSocket.prototype.onOpen_ = function() {
  goog.log.info(this.logger_, "WebSocket opened on " + this.url_);
  this.dispatchEvent(goog.net.WebSocket.EventType.OPENED);
  this.reconnectAttempt_ = 0;
  this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_);
};
goog.net.WebSocket.prototype.onClose_ = function(event) {
  goog.log.info(this.logger_, "The WebSocket on " + this.url_ + " closed.");
  this.dispatchEvent(goog.net.WebSocket.EventType.CLOSED);
  this.webSocket_ = null;
  if (this.closeExpected_) {
    goog.log.info(this.logger_, "The WebSocket closed normally.");
    this.url_ = null;
    this.protocol_ = undefined;
  } else {
    goog.log.error(this.logger_, "The WebSocket disconnected unexpectedly: " + event.data);
    if (this.autoReconnect_) {
      var seconds = Math.floor(this.nextReconnect_ / 1E3);
      goog.log.info(this.logger_, "Seconds until next reconnect attempt: " + seconds);
      this.reconnectTimer_ = goog.Timer.callOnce(goog.bind(this.open, this, this.url_, this.protocol_), this.nextReconnect_, this);
      this.reconnectAttempt_++;
      this.nextReconnect_ = this.getNextReconnect_(this.reconnectAttempt_);
    }
  }
  this.closeExpected_ = false;
};
goog.net.WebSocket.prototype.onMessage_ = function(event) {
  var message = event.data;
  this.dispatchEvent(new goog.net.WebSocket.MessageEvent(message));
};
goog.net.WebSocket.prototype.onError_ = function(event) {
  var data = (event.data);
  goog.log.error(this.logger_, "An error occurred: " + data);
  this.dispatchEvent(new goog.net.WebSocket.ErrorEvent(data));
};
goog.net.WebSocket.prototype.clearReconnectTimer_ = function() {
  if (goog.isDefAndNotNull(this.reconnectTimer_)) {
    goog.Timer.clear(this.reconnectTimer_);
  }
  this.reconnectTimer_ = null;
};
goog.net.WebSocket.prototype.disposeInternal = function() {
  goog.net.WebSocket.base(this, "disposeInternal");
  this.close();
};
goog.net.WebSocket.MessageEvent = function(message) {
  goog.net.WebSocket.MessageEvent.base(this, "constructor", goog.net.WebSocket.EventType.MESSAGE);
  this.message = message;
};
goog.inherits(goog.net.WebSocket.MessageEvent, goog.events.Event);
goog.net.WebSocket.ErrorEvent = function(data) {
  goog.net.WebSocket.ErrorEvent.base(this, "constructor", goog.net.WebSocket.EventType.ERROR);
  this.data = data;
};
goog.inherits(goog.net.WebSocket.ErrorEvent, goog.events.Event);
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.WebSocket.prototype.onOpen_ = transformer(goog.net.WebSocket.prototype.onOpen_);
  goog.net.WebSocket.prototype.onClose_ = transformer(goog.net.WebSocket.prototype.onClose_);
  goog.net.WebSocket.prototype.onMessage_ = transformer(goog.net.WebSocket.prototype.onMessage_);
  goog.net.WebSocket.prototype.onError_ = transformer(goog.net.WebSocket.prototype.onError_);
});
goog.provide("clojure.browser.event");
goog.require("cljs.core");
goog.require("goog.events");
goog.require("goog.events.EventTarget");
goog.require("goog.events.EventType");
clojure.browser.event.IEventType = function() {
};
clojure.browser.event.event_types = function clojure$browser$event$event_types(this$) {
  if (!(this$ == null) && !(this$.clojure$browser$event$IEventType$event_types$arity$1 == null)) {
    return this$.clojure$browser$event$IEventType$event_types$arity$1(this$);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = clojure.browser.event.event_types[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, this$);
    } else {
      var m__6809__auto____$1 = clojure.browser.event.event_types["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "IEventType.event-types", this$);
      }
    }
  }
};
goog.events.EventTarget.prototype.clojure$browser$event$IEventType$ = true;
goog.events.EventTarget.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
    return function(p__8262) {
      var vec__8263 = p__8262;
      var k = cljs.core.nth.call(null, vec__8263, 0, null);
      var v = cljs.core.nth.call(null, vec__8263, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
    };
  }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.events.EventType))));
};
if (typeof Element !== "undefined") {
  Element.prototype.clojure$browser$event$IEventType$ = true;
  Element.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
    var this$__$1 = this;
    return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
      return function(p__8264) {
        var vec__8265 = p__8264;
        var k = cljs.core.nth.call(null, vec__8265, 0, null);
        var v = cljs.core.nth.call(null, vec__8265, 1, null);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
      };
    }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.events.EventType))));
  };
} else {
}
clojure.browser.event.listen = function clojure$browser$event$listen(var_args) {
  var args8266 = [];
  var len__7211__auto___8269 = arguments.length;
  var i__7212__auto___8270 = 0;
  while (true) {
    if (i__7212__auto___8270 < len__7211__auto___8269) {
      args8266.push(arguments[i__7212__auto___8270]);
      var G__8271 = i__7212__auto___8270 + 1;
      i__7212__auto___8270 = G__8271;
      continue;
    } else {
    }
    break;
  }
  var G__8268 = args8266.length;
  switch(G__8268) {
    case 3:
      return clojure.browser.event.listen.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.event.listen.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8266.length)].join(""));;
  }
};
clojure.browser.event.listen.cljs$core$IFn$_invoke$arity$3 = function(src, type, fn) {
  return clojure.browser.event.listen.call(null, src, type, fn, false);
};
clojure.browser.event.listen.cljs$core$IFn$_invoke$arity$4 = function(src, type, fn, capture_QMARK_) {
  return goog.events.listen(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
};
clojure.browser.event.listen.cljs$lang$maxFixedArity = 4;
clojure.browser.event.listen_once = function clojure$browser$event$listen_once(var_args) {
  var args8273 = [];
  var len__7211__auto___8276 = arguments.length;
  var i__7212__auto___8277 = 0;
  while (true) {
    if (i__7212__auto___8277 < len__7211__auto___8276) {
      args8273.push(arguments[i__7212__auto___8277]);
      var G__8278 = i__7212__auto___8277 + 1;
      i__7212__auto___8277 = G__8278;
      continue;
    } else {
    }
    break;
  }
  var G__8275 = args8273.length;
  switch(G__8275) {
    case 3:
      return clojure.browser.event.listen_once.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.event.listen_once.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8273.length)].join(""));;
  }
};
clojure.browser.event.listen_once.cljs$core$IFn$_invoke$arity$3 = function(src, type, fn) {
  return clojure.browser.event.listen_once.call(null, src, type, fn, false);
};
clojure.browser.event.listen_once.cljs$core$IFn$_invoke$arity$4 = function(src, type, fn, capture_QMARK_) {
  return goog.events.listenOnce(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
};
clojure.browser.event.listen_once.cljs$lang$maxFixedArity = 4;
clojure.browser.event.unlisten = function clojure$browser$event$unlisten(var_args) {
  var args8280 = [];
  var len__7211__auto___8283 = arguments.length;
  var i__7212__auto___8284 = 0;
  while (true) {
    if (i__7212__auto___8284 < len__7211__auto___8283) {
      args8280.push(arguments[i__7212__auto___8284]);
      var G__8285 = i__7212__auto___8284 + 1;
      i__7212__auto___8284 = G__8285;
      continue;
    } else {
    }
    break;
  }
  var G__8282 = args8280.length;
  switch(G__8282) {
    case 3:
      return clojure.browser.event.unlisten.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.event.unlisten.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8280.length)].join(""));;
  }
};
clojure.browser.event.unlisten.cljs$core$IFn$_invoke$arity$3 = function(src, type, fn) {
  return clojure.browser.event.unlisten.call(null, src, type, fn, false);
};
clojure.browser.event.unlisten.cljs$core$IFn$_invoke$arity$4 = function(src, type, fn, capture_QMARK_) {
  return goog.events.unlisten(src, cljs.core.get.call(null, clojure.browser.event.event_types.call(null, src), type, type), fn, capture_QMARK_);
};
clojure.browser.event.unlisten.cljs$lang$maxFixedArity = 4;
clojure.browser.event.unlisten_by_key = function clojure$browser$event$unlisten_by_key(key) {
  return goog.events.unlistenByKey(key);
};
clojure.browser.event.dispatch_event = function clojure$browser$event$dispatch_event(src, event) {
  return goog.events.dispatchEvent(src, event);
};
clojure.browser.event.expose = function clojure$browser$event$expose(e) {
  return goog.events.expose(e);
};
clojure.browser.event.fire_listeners = function clojure$browser$event$fire_listeners(obj, type, capture, event) {
  return null;
};
clojure.browser.event.total_listener_count = function clojure$browser$event$total_listener_count() {
  return goog.events.getTotalListenerCount();
};
clojure.browser.event.get_listener = function clojure$browser$event$get_listener(src, type, listener, opt_capt, opt_handler) {
  return null;
};
clojure.browser.event.all_listeners = function clojure$browser$event$all_listeners(obj, type, capture) {
  return null;
};
clojure.browser.event.unique_event_id = function clojure$browser$event$unique_event_id(event_type) {
  return null;
};
clojure.browser.event.has_listener = function clojure$browser$event$has_listener(obj, opt_type, opt_capture) {
  return null;
};
clojure.browser.event.remove_all = function clojure$browser$event$remove_all(opt_obj, opt_type, opt_capt) {
  return null;
};
goog.provide("clojure.browser.net");
goog.require("cljs.core");
goog.require("goog.Uri");
goog.require("goog.net.WebSocket");
goog.require("goog.net.EventType");
goog.require("goog.json");
goog.require("goog.net.xpc.CfgFields");
goog.require("goog.net.XhrIo");
goog.require("clojure.browser.event");
goog.require("goog.net.xpc.CrossPageChannel");
clojure.browser.net._STAR_timeout_STAR_ = 1E4;
clojure.browser.net.event_types = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__8289) {
  var vec__8290 = p__8289;
  var k = cljs.core.nth.call(null, vec__8290, 0, null);
  var v = cljs.core.nth.call(null, vec__8290, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
}, cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.EventType))));
clojure.browser.net.IConnection = function() {
};
clojure.browser.net.connect = function clojure$browser$net$connect(var_args) {
  var args8291 = [];
  var len__7211__auto___8297 = arguments.length;
  var i__7212__auto___8298 = 0;
  while (true) {
    if (i__7212__auto___8298 < len__7211__auto___8297) {
      args8291.push(arguments[i__7212__auto___8298]);
      var G__8299 = i__7212__auto___8298 + 1;
      i__7212__auto___8298 = G__8299;
      continue;
    } else {
    }
    break;
  }
  var G__8293 = args8291.length;
  switch(G__8293) {
    case 1:
      return clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8291.length)].join(""));;
  }
};
clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$connect$arity$1 == null)) {
    return this$.clojure$browser$net$IConnection$connect$arity$1(this$);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = clojure.browser.net.connect[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, this$);
    } else {
      var m__6809__auto____$1 = clojure.browser.net.connect["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
      }
    }
  }
};
clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$2 = function(this$, opt1) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$connect$arity$2 == null)) {
    return this$.clojure$browser$net$IConnection$connect$arity$2(this$, opt1);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = clojure.browser.net.connect[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, this$, opt1);
    } else {
      var m__6809__auto____$1 = clojure.browser.net.connect["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, this$, opt1);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
      }
    }
  }
};
clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$3 = function(this$, opt1, opt2) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$connect$arity$3 == null)) {
    return this$.clojure$browser$net$IConnection$connect$arity$3(this$, opt1, opt2);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = clojure.browser.net.connect[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, this$, opt1, opt2);
    } else {
      var m__6809__auto____$1 = clojure.browser.net.connect["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, this$, opt1, opt2);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
      }
    }
  }
};
clojure.browser.net.connect.cljs$core$IFn$_invoke$arity$4 = function(this$, opt1, opt2, opt3) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$connect$arity$4 == null)) {
    return this$.clojure$browser$net$IConnection$connect$arity$4(this$, opt1, opt2, opt3);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = clojure.browser.net.connect[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, this$, opt1, opt2, opt3);
    } else {
      var m__6809__auto____$1 = clojure.browser.net.connect["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, this$, opt1, opt2, opt3);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.connect", this$);
      }
    }
  }
};
clojure.browser.net.connect.cljs$lang$maxFixedArity = 4;
clojure.browser.net.transmit = function clojure$browser$net$transmit(var_args) {
  var args8294 = [];
  var len__7211__auto___8301 = arguments.length;
  var i__7212__auto___8302 = 0;
  while (true) {
    if (i__7212__auto___8302 < len__7211__auto___8301) {
      args8294.push(arguments[i__7212__auto___8302]);
      var G__8303 = i__7212__auto___8302 + 1;
      i__7212__auto___8302 = G__8303;
      continue;
    } else {
    }
    break;
  }
  var G__8296 = args8294.length;
  switch(G__8296) {
    case 2:
      return clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8294.length)].join(""));;
  }
};
clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$2 = function(this$, opt) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$transmit$arity$2 == null)) {
    return this$.clojure$browser$net$IConnection$transmit$arity$2(this$, opt);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = clojure.browser.net.transmit[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, this$, opt);
    } else {
      var m__6809__auto____$1 = clojure.browser.net.transmit["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, this$, opt);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
      }
    }
  }
};
clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$3 = function(this$, opt, opt2) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$transmit$arity$3 == null)) {
    return this$.clojure$browser$net$IConnection$transmit$arity$3(this$, opt, opt2);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = clojure.browser.net.transmit[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, this$, opt, opt2);
    } else {
      var m__6809__auto____$1 = clojure.browser.net.transmit["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, this$, opt, opt2);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
      }
    }
  }
};
clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$4 = function(this$, opt, opt2, opt3) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$transmit$arity$4 == null)) {
    return this$.clojure$browser$net$IConnection$transmit$arity$4(this$, opt, opt2, opt3);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = clojure.browser.net.transmit[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, this$, opt, opt2, opt3);
    } else {
      var m__6809__auto____$1 = clojure.browser.net.transmit["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, this$, opt, opt2, opt3);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
      }
    }
  }
};
clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$5 = function(this$, opt, opt2, opt3, opt4) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$transmit$arity$5 == null)) {
    return this$.clojure$browser$net$IConnection$transmit$arity$5(this$, opt, opt2, opt3, opt4);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = clojure.browser.net.transmit[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, this$, opt, opt2, opt3, opt4);
    } else {
      var m__6809__auto____$1 = clojure.browser.net.transmit["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, this$, opt, opt2, opt3, opt4);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
      }
    }
  }
};
clojure.browser.net.transmit.cljs$core$IFn$_invoke$arity$6 = function(this$, opt, opt2, opt3, opt4, opt5) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$transmit$arity$6 == null)) {
    return this$.clojure$browser$net$IConnection$transmit$arity$6(this$, opt, opt2, opt3, opt4, opt5);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = clojure.browser.net.transmit[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, this$, opt, opt2, opt3, opt4, opt5);
    } else {
      var m__6809__auto____$1 = clojure.browser.net.transmit["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, this$, opt, opt2, opt3, opt4, opt5);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.transmit", this$);
      }
    }
  }
};
clojure.browser.net.transmit.cljs$lang$maxFixedArity = 6;
clojure.browser.net.close = function clojure$browser$net$close(this$) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IConnection$close$arity$1 == null)) {
    return this$.clojure$browser$net$IConnection$close$arity$1(this$);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = clojure.browser.net.close[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, this$);
    } else {
      var m__6809__auto____$1 = clojure.browser.net.close["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "IConnection.close", this$);
      }
    }
  }
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$ = true;
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$2 = function(this$, uri) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, "GET", null, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$3 = function(this$, uri, method) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, null, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$4 = function(this$, uri, method, content) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, content, null, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$5 = function(this$, uri, method, content, headers) {
  var this$__$1 = this;
  return clojure.browser.net.transmit.call(null, this$__$1, uri, method, content, headers, clojure.browser.net._STAR_timeout_STAR_);
};
goog.net.XhrIo.prototype.clojure$browser$net$IConnection$transmit$arity$6 = function(this$, uri, method, content, headers, timeout) {
  var this$__$1 = this;
  this$__$1.setTimeoutInterval(timeout);
  return this$__$1.send(uri, method, content, headers);
};
goog.net.XhrIo.prototype.clojure$browser$event$IEventType$ = true;
goog.net.XhrIo.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
    return function(p__8305) {
      var vec__8306 = p__8305;
      var k = cljs.core.nth.call(null, vec__8306, 0, null);
      var v = cljs.core.nth.call(null, vec__8306, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
    };
  }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.EventType))));
};
clojure.browser.net.xpc_config_fields = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__8307) {
  var vec__8308 = p__8307;
  var k = cljs.core.nth.call(null, vec__8308, 0, null);
  var v = cljs.core.nth.call(null, vec__8308, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
}, cljs.core.js__GT_clj.call(null, goog.net.xpc.CfgFields)));
clojure.browser.net.xhr_connection = function clojure$browser$net$xhr_connection() {
  return new goog.net.XhrIo;
};
clojure.browser.net.ICrossPageChannel = function() {
};
clojure.browser.net.register_service = function clojure$browser$net$register_service(var_args) {
  var args8309 = [];
  var len__7211__auto___8312 = arguments.length;
  var i__7212__auto___8313 = 0;
  while (true) {
    if (i__7212__auto___8313 < len__7211__auto___8312) {
      args8309.push(arguments[i__7212__auto___8313]);
      var G__8314 = i__7212__auto___8313 + 1;
      i__7212__auto___8313 = G__8314;
      continue;
    } else {
    }
    break;
  }
  var G__8311 = args8309.length;
  switch(G__8311) {
    case 3:
      return clojure.browser.net.register_service.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return clojure.browser.net.register_service.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8309.length)].join(""));;
  }
};
clojure.browser.net.register_service.cljs$core$IFn$_invoke$arity$3 = function(this$, service_name, fn) {
  if (!(this$ == null) && !(this$.clojure$browser$net$ICrossPageChannel$register_service$arity$3 == null)) {
    return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$3(this$, service_name, fn);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = clojure.browser.net.register_service[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, this$, service_name, fn);
    } else {
      var m__6809__auto____$1 = clojure.browser.net.register_service["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, this$, service_name, fn);
      } else {
        throw cljs.core.missing_protocol.call(null, "ICrossPageChannel.register-service", this$);
      }
    }
  }
};
clojure.browser.net.register_service.cljs$core$IFn$_invoke$arity$4 = function(this$, service_name, fn, encode_json_QMARK_) {
  if (!(this$ == null) && !(this$.clojure$browser$net$ICrossPageChannel$register_service$arity$4 == null)) {
    return this$.clojure$browser$net$ICrossPageChannel$register_service$arity$4(this$, service_name, fn, encode_json_QMARK_);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = clojure.browser.net.register_service[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, this$, service_name, fn, encode_json_QMARK_);
    } else {
      var m__6809__auto____$1 = clojure.browser.net.register_service["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, this$, service_name, fn, encode_json_QMARK_);
      } else {
        throw cljs.core.missing_protocol.call(null, "ICrossPageChannel.register-service", this$);
      }
    }
  }
};
clojure.browser.net.register_service.cljs$lang$maxFixedArity = 4;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$ = true;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$register_service$arity$3 = function(this$, service_name, fn) {
  var this$__$1 = this;
  return clojure.browser.net.register_service.call(null, this$__$1, service_name, fn, false);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$ICrossPageChannel$register_service$arity$4 = function(this$, service_name, fn, encode_json_QMARK_) {
  var this$__$1 = this;
  return this$__$1.registerService(cljs.core.name.call(null, service_name), fn, encode_json_QMARK_);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$ = true;
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$1 = function(this$) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, null);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$2 = function(this$, on_connect_fn) {
  var this$__$1 = this;
  return this$__$1.connect(on_connect_fn);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$3 = function(this$, on_connect_fn, config_iframe_fn) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, on_connect_fn, config_iframe_fn, document.body);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$connect$arity$4 = function(this$, on_connect_fn, config_iframe_fn, iframe_parent) {
  var this$__$1 = this;
  this$__$1.createPeerIframe(iframe_parent, config_iframe_fn);
  return this$__$1.connect(on_connect_fn);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$transmit$arity$3 = function(this$, service_name, payload) {
  var this$__$1 = this;
  return this$__$1.send(cljs.core.name.call(null, service_name), payload);
};
goog.net.xpc.CrossPageChannel.prototype.clojure$browser$net$IConnection$close$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.close();
};
clojure.browser.net.xpc_connection = function clojure$browser$net$xpc_connection(var_args) {
  var args8316 = [];
  var len__7211__auto___8324 = arguments.length;
  var i__7212__auto___8325 = 0;
  while (true) {
    if (i__7212__auto___8325 < len__7211__auto___8324) {
      args8316.push(arguments[i__7212__auto___8325]);
      var G__8326 = i__7212__auto___8325 + 1;
      i__7212__auto___8325 = G__8326;
      continue;
    } else {
    }
    break;
  }
  var G__8318 = args8316.length;
  switch(G__8318) {
    case 0:
      return clojure.browser.net.xpc_connection.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return clojure.browser.net.xpc_connection.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8316.length)].join(""));;
  }
};
clojure.browser.net.xpc_connection.cljs$core$IFn$_invoke$arity$0 = function() {
  var temp__4657__auto__ = (new goog.Uri(window.location.href)).getParameterValue("xpc");
  if (cljs.core.truth_(temp__4657__auto__)) {
    var config = temp__4657__auto__;
    return new goog.net.xpc.CrossPageChannel(goog.json.parse(config));
  } else {
    return null;
  }
};
clojure.browser.net.xpc_connection.cljs$core$IFn$_invoke$arity$1 = function(config) {
  return new goog.net.xpc.CrossPageChannel(cljs.core.reduce.call(null, function(sum, p__8319) {
    var vec__8320 = p__8319;
    var k = cljs.core.nth.call(null, vec__8320, 0, null);
    var v = cljs.core.nth.call(null, vec__8320, 1, null);
    var temp__4655__auto__ = cljs.core.get.call(null, clojure.browser.net.xpc_config_fields, k);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var field = temp__4655__auto__;
      var G__8321 = sum;
      G__8321[field] = v;
      return G__8321;
    } else {
      return sum;
    }
  }, {}, config));
};
clojure.browser.net.xpc_connection.cljs$lang$maxFixedArity = 1;
clojure.browser.net.IWebSocket = function() {
};
clojure.browser.net.open_QMARK_ = function clojure$browser$net$open_QMARK_(this$) {
  if (!(this$ == null) && !(this$.clojure$browser$net$IWebSocket$open_QMARK_$arity$1 == null)) {
    return this$.clojure$browser$net$IWebSocket$open_QMARK_$arity$1(this$);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = clojure.browser.net.open_QMARK_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, this$);
    } else {
      var m__6809__auto____$1 = clojure.browser.net.open_QMARK_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "IWebSocket.open?", this$);
      }
    }
  }
};
goog.net.WebSocket.prototype.clojure$browser$net$IWebSocket$ = true;
goog.net.WebSocket.prototype.clojure$browser$net$IWebSocket$open_QMARK_$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.isOpen(cljs.core.List.EMPTY);
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$ = true;
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$connect$arity$2 = function(this$, url) {
  var this$__$1 = this;
  return clojure.browser.net.connect.call(null, this$__$1, url, null);
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$connect$arity$3 = function(this$, url, protocol) {
  var this$__$1 = this;
  return this$__$1.open(url, protocol);
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$transmit$arity$2 = function(this$, message) {
  var this$__$1 = this;
  return this$__$1.send(message);
};
goog.net.WebSocket.prototype.clojure$browser$net$IConnection$close$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.close(cljs.core.List.EMPTY);
};
goog.net.WebSocket.prototype.clojure$browser$event$IEventType$ = true;
goog.net.WebSocket.prototype.clojure$browser$event$IEventType$event_types$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(this$__$1) {
    return function(p__8328) {
      var vec__8329 = p__8328;
      var k = cljs.core.nth.call(null, vec__8329, 0, null);
      var v = cljs.core.nth.call(null, vec__8329, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k.toLowerCase()), v], null);
    };
  }(this$__$1), cljs.core.merge.call(null, cljs.core.js__GT_clj.call(null, goog.net.WebSocket.EventType))));
};
clojure.browser.net.websocket_connection = function clojure$browser$net$websocket_connection(var_args) {
  var args8330 = [];
  var len__7211__auto___8333 = arguments.length;
  var i__7212__auto___8334 = 0;
  while (true) {
    if (i__7212__auto___8334 < len__7211__auto___8333) {
      args8330.push(arguments[i__7212__auto___8334]);
      var G__8335 = i__7212__auto___8334 + 1;
      i__7212__auto___8334 = G__8335;
      continue;
    } else {
    }
    break;
  }
  var G__8332 = args8330.length;
  switch(G__8332) {
    case 0:
      return clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8330.length)].join(""));;
  }
};
clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$0 = function() {
  return clojure.browser.net.websocket_connection.call(null, null, null);
};
clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$1 = function(auto_reconnect_QMARK_) {
  return clojure.browser.net.websocket_connection.call(null, auto_reconnect_QMARK_, null);
};
clojure.browser.net.websocket_connection.cljs$core$IFn$_invoke$arity$2 = function(auto_reconnect_QMARK_, next_reconnect_fn) {
  return new goog.net.WebSocket(auto_reconnect_QMARK_, next_reconnect_fn);
};
clojure.browser.net.websocket_connection.cljs$lang$maxFixedArity = 2;
goog.provide("cljs.repl");
goog.require("cljs.core");
cljs.repl.print_doc = function cljs$repl$print_doc(m) {
  cljs.core.println.call(null, "-------------------------");
  cljs.core.println.call(null, [cljs.core.str(function() {
    var temp__4657__auto__ = (new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(m);
    if (cljs.core.truth_(temp__4657__auto__)) {
      var ns = temp__4657__auto__;
      return [cljs.core.str(ns), cljs.core.str("/")].join("");
    } else {
      return null;
    }
  }()), cljs.core.str((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(m))].join(""));
  if (cljs.core.truth_((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(m))) {
    cljs.core.println.call(null, "Protocol");
  } else {
  }
  if (cljs.core.truth_((new cljs.core.Keyword(null, "forms", "forms", 2045992350)).cljs$core$IFn$_invoke$arity$1(m))) {
    var seq__9011_9025 = cljs.core.seq.call(null, (new cljs.core.Keyword(null, "forms", "forms", 2045992350)).cljs$core$IFn$_invoke$arity$1(m));
    var chunk__9012_9026 = null;
    var count__9013_9027 = 0;
    var i__9014_9028 = 0;
    while (true) {
      if (i__9014_9028 < count__9013_9027) {
        var f_9029 = cljs.core._nth.call(null, chunk__9012_9026, i__9014_9028);
        cljs.core.println.call(null, "  ", f_9029);
        var G__9030 = seq__9011_9025;
        var G__9031 = chunk__9012_9026;
        var G__9032 = count__9013_9027;
        var G__9033 = i__9014_9028 + 1;
        seq__9011_9025 = G__9030;
        chunk__9012_9026 = G__9031;
        count__9013_9027 = G__9032;
        i__9014_9028 = G__9033;
        continue;
      } else {
        var temp__4657__auto___9034 = cljs.core.seq.call(null, seq__9011_9025);
        if (temp__4657__auto___9034) {
          var seq__9011_9035__$1 = temp__4657__auto___9034;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__9011_9035__$1)) {
            var c__6956__auto___9036 = cljs.core.chunk_first.call(null, seq__9011_9035__$1);
            var G__9037 = cljs.core.chunk_rest.call(null, seq__9011_9035__$1);
            var G__9038 = c__6956__auto___9036;
            var G__9039 = cljs.core.count.call(null, c__6956__auto___9036);
            var G__9040 = 0;
            seq__9011_9025 = G__9037;
            chunk__9012_9026 = G__9038;
            count__9013_9027 = G__9039;
            i__9014_9028 = G__9040;
            continue;
          } else {
            var f_9041 = cljs.core.first.call(null, seq__9011_9035__$1);
            cljs.core.println.call(null, "  ", f_9041);
            var G__9042 = cljs.core.next.call(null, seq__9011_9035__$1);
            var G__9043 = null;
            var G__9044 = 0;
            var G__9045 = 0;
            seq__9011_9025 = G__9042;
            chunk__9012_9026 = G__9043;
            count__9013_9027 = G__9044;
            i__9014_9028 = G__9045;
            continue;
          }
        } else {
        }
      }
      break;
    }
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "arglists", "arglists", 1661989754)).cljs$core$IFn$_invoke$arity$1(m))) {
      var arglists_9046 = (new cljs.core.Keyword(null, "arglists", "arglists", 1661989754)).cljs$core$IFn$_invoke$arity$1(m);
      if (cljs.core.truth_(function() {
        var or__6153__auto__ = (new cljs.core.Keyword(null, "macro", "macro", -867863404)).cljs$core$IFn$_invoke$arity$1(m);
        if (cljs.core.truth_(or__6153__auto__)) {
          return or__6153__auto__;
        } else {
          return (new cljs.core.Keyword(null, "repl-special-function", "repl-special-function", 1262603725)).cljs$core$IFn$_invoke$arity$1(m);
        }
      }())) {
        cljs.core.prn.call(null, arglists_9046);
      } else {
        cljs.core.prn.call(null, cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.first.call(null, arglists_9046)) ? cljs.core.second.call(null, arglists_9046) : arglists_9046);
      }
    } else {
    }
  }
  if (cljs.core.truth_((new cljs.core.Keyword(null, "special-form", "special-form", -1326536374)).cljs$core$IFn$_invoke$arity$1(m))) {
    cljs.core.println.call(null, "Special Form");
    cljs.core.println.call(null, " ", (new cljs.core.Keyword(null, "doc", "doc", 1913296891)).cljs$core$IFn$_invoke$arity$1(m));
    if (cljs.core.contains_QMARK_.call(null, m, new cljs.core.Keyword(null, "url", "url", 276297046))) {
      if (cljs.core.truth_((new cljs.core.Keyword(null, "url", "url", 276297046)).cljs$core$IFn$_invoke$arity$1(m))) {
        return cljs.core.println.call(null, [cljs.core.str("\n  Please see http://clojure.org/"), cljs.core.str((new cljs.core.Keyword(null, "url", "url", 276297046)).cljs$core$IFn$_invoke$arity$1(m))].join(""));
      } else {
        return null;
      }
    } else {
      return cljs.core.println.call(null, [cljs.core.str("\n  Please see http://clojure.org/special_forms#"), cljs.core.str((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(m))].join(""));
    }
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "macro", "macro", -867863404)).cljs$core$IFn$_invoke$arity$1(m))) {
      cljs.core.println.call(null, "Macro");
    } else {
    }
    if (cljs.core.truth_((new cljs.core.Keyword(null, "repl-special-function", "repl-special-function", 1262603725)).cljs$core$IFn$_invoke$arity$1(m))) {
      cljs.core.println.call(null, "REPL Special Function");
    } else {
    }
    cljs.core.println.call(null, " ", (new cljs.core.Keyword(null, "doc", "doc", 1913296891)).cljs$core$IFn$_invoke$arity$1(m));
    if (cljs.core.truth_((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(m))) {
      var seq__9015 = cljs.core.seq.call(null, (new cljs.core.Keyword(null, "methods", "methods", 453930866)).cljs$core$IFn$_invoke$arity$1(m));
      var chunk__9016 = null;
      var count__9017 = 0;
      var i__9018 = 0;
      while (true) {
        if (i__9018 < count__9017) {
          var vec__9019 = cljs.core._nth.call(null, chunk__9016, i__9018);
          var name = cljs.core.nth.call(null, vec__9019, 0, null);
          var map__9020 = cljs.core.nth.call(null, vec__9019, 1, null);
          var map__9020__$1 = (!(map__9020 == null) ? map__9020.cljs$lang$protocol_mask$partition0$ & 64 || map__9020.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9020) : map__9020;
          var doc = cljs.core.get.call(null, map__9020__$1, new cljs.core.Keyword(null, "doc", "doc", 1913296891));
          var arglists = cljs.core.get.call(null, map__9020__$1, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754));
          cljs.core.println.call(null);
          cljs.core.println.call(null, " ", name);
          cljs.core.println.call(null, " ", arglists);
          if (cljs.core.truth_(doc)) {
            cljs.core.println.call(null, " ", doc);
          } else {
          }
          var G__9047 = seq__9015;
          var G__9048 = chunk__9016;
          var G__9049 = count__9017;
          var G__9050 = i__9018 + 1;
          seq__9015 = G__9047;
          chunk__9016 = G__9048;
          count__9017 = G__9049;
          i__9018 = G__9050;
          continue;
        } else {
          var temp__4657__auto__ = cljs.core.seq.call(null, seq__9015);
          if (temp__4657__auto__) {
            var seq__9015__$1 = temp__4657__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__9015__$1)) {
              var c__6956__auto__ = cljs.core.chunk_first.call(null, seq__9015__$1);
              var G__9051 = cljs.core.chunk_rest.call(null, seq__9015__$1);
              var G__9052 = c__6956__auto__;
              var G__9053 = cljs.core.count.call(null, c__6956__auto__);
              var G__9054 = 0;
              seq__9015 = G__9051;
              chunk__9016 = G__9052;
              count__9017 = G__9053;
              i__9018 = G__9054;
              continue;
            } else {
              var vec__9022 = cljs.core.first.call(null, seq__9015__$1);
              var name = cljs.core.nth.call(null, vec__9022, 0, null);
              var map__9023 = cljs.core.nth.call(null, vec__9022, 1, null);
              var map__9023__$1 = (!(map__9023 == null) ? map__9023.cljs$lang$protocol_mask$partition0$ & 64 || map__9023.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__9023) : map__9023;
              var doc = cljs.core.get.call(null, map__9023__$1, new cljs.core.Keyword(null, "doc", "doc", 1913296891));
              var arglists = cljs.core.get.call(null, map__9023__$1, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754));
              cljs.core.println.call(null);
              cljs.core.println.call(null, " ", name);
              cljs.core.println.call(null, " ", arglists);
              if (cljs.core.truth_(doc)) {
                cljs.core.println.call(null, " ", doc);
              } else {
              }
              var G__9055 = cljs.core.next.call(null, seq__9015__$1);
              var G__9056 = null;
              var G__9057 = 0;
              var G__9058 = 0;
              seq__9015 = G__9055;
              chunk__9016 = G__9056;
              count__9017 = G__9057;
              i__9018 = G__9058;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    } else {
      return null;
    }
  }
};
goog.provide("clojure.browser.repl");
goog.require("cljs.core");
goog.require("goog.dom");
goog.require("goog.userAgent.product");
goog.require("goog.array");
goog.require("goog.object");
goog.require("clojure.browser.net");
goog.require("clojure.browser.event");
goog.require("cljs.repl");
clojure.browser.repl.xpc_connection = cljs.core.atom.call(null, null);
clojure.browser.repl.print_queue = [];
clojure.browser.repl.flush_print_queue_BANG_ = function clojure$browser$repl$flush_print_queue_BANG_(conn) {
  var seq__9065_9069 = cljs.core.seq.call(null, clojure.browser.repl.print_queue);
  var chunk__9066_9070 = null;
  var count__9067_9071 = 0;
  var i__9068_9072 = 0;
  while (true) {
    if (i__9068_9072 < count__9067_9071) {
      var str_9073 = cljs.core._nth.call(null, chunk__9066_9070, i__9068_9072);
      clojure.browser.net.transmit.call(null, conn, new cljs.core.Keyword(null, "print", "print", 1299562414), str_9073);
      var G__9074 = seq__9065_9069;
      var G__9075 = chunk__9066_9070;
      var G__9076 = count__9067_9071;
      var G__9077 = i__9068_9072 + 1;
      seq__9065_9069 = G__9074;
      chunk__9066_9070 = G__9075;
      count__9067_9071 = G__9076;
      i__9068_9072 = G__9077;
      continue;
    } else {
      var temp__4657__auto___9078 = cljs.core.seq.call(null, seq__9065_9069);
      if (temp__4657__auto___9078) {
        var seq__9065_9079__$1 = temp__4657__auto___9078;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__9065_9079__$1)) {
          var c__6956__auto___9080 = cljs.core.chunk_first.call(null, seq__9065_9079__$1);
          var G__9081 = cljs.core.chunk_rest.call(null, seq__9065_9079__$1);
          var G__9082 = c__6956__auto___9080;
          var G__9083 = cljs.core.count.call(null, c__6956__auto___9080);
          var G__9084 = 0;
          seq__9065_9069 = G__9081;
          chunk__9066_9070 = G__9082;
          count__9067_9071 = G__9083;
          i__9068_9072 = G__9084;
          continue;
        } else {
          var str_9085 = cljs.core.first.call(null, seq__9065_9079__$1);
          clojure.browser.net.transmit.call(null, conn, new cljs.core.Keyword(null, "print", "print", 1299562414), str_9085);
          var G__9086 = cljs.core.next.call(null, seq__9065_9079__$1);
          var G__9087 = null;
          var G__9088 = 0;
          var G__9089 = 0;
          seq__9065_9069 = G__9086;
          chunk__9066_9070 = G__9087;
          count__9067_9071 = G__9088;
          i__9068_9072 = G__9089;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return goog.array.clear(clojure.browser.repl.print_queue);
};
clojure.browser.repl.repl_print = function clojure$browser$repl$repl_print(data) {
  clojure.browser.repl.print_queue.push(cljs.core.pr_str.call(null, data));
  var temp__4657__auto__ = cljs.core.deref.call(null, clojure.browser.repl.xpc_connection);
  if (cljs.core.truth_(temp__4657__auto__)) {
    var conn = temp__4657__auto__;
    return clojure.browser.repl.flush_print_queue_BANG_.call(null, conn);
  } else {
    return null;
  }
};
cljs.core._STAR_print_fn_STAR_ = clojure.browser.repl.repl_print;
cljs.core._STAR_print_err_fn_STAR_ = clojure.browser.repl.repl_print;
cljs.core._STAR_print_newline_STAR_ = true;
clojure.browser.repl.get_ua_product = function clojure$browser$repl$get_ua_product() {
  if (cljs.core.truth_(goog.userAgent.product.SAFARI)) {
    return new cljs.core.Keyword(null, "safari", "safari", 497115653);
  } else {
    if (cljs.core.truth_(goog.userAgent.product.CHROME)) {
      return new cljs.core.Keyword(null, "chrome", "chrome", 1718738387);
    } else {
      if (cljs.core.truth_(goog.userAgent.product.FIREFOX)) {
        return new cljs.core.Keyword(null, "firefox", "firefox", 1283768880);
      } else {
        if (cljs.core.truth_(goog.userAgent.product.IE)) {
          return new cljs.core.Keyword(null, "ie", "ie", 2038473780);
        } else {
          return null;
        }
      }
    }
  }
};
clojure.browser.repl.evaluate_javascript = function clojure$browser$repl$evaluate_javascript(conn, block) {
  var result = function() {
    try {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "success", "success", 1890645906), new cljs.core.Keyword(null, "value", "value", 305978217), [cljs.core.str(eval(block))].join("")], null);
    } catch (e9091) {
      var e = e9091;
      return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "status", "status", -1997798413), new cljs.core.Keyword(null, "exception", "exception", -335277064), new cljs.core.Keyword(null, "ua-product", "ua-product", 938384227), clojure.browser.repl.get_ua_product.call(null), new cljs.core.Keyword(null, "value", "value", 305978217), [cljs.core.str(e)].join(""), new cljs.core.Keyword(null, "stacktrace", "stacktrace", -95588394), cljs.core.truth_(e.hasOwnProperty("stack")) ? 
      e.stack : "No stacktrace available."], null);
    }
  }();
  return cljs.core.pr_str.call(null, result);
};
clojure.browser.repl.send_result = function clojure$browser$repl$send_result(connection, url, data) {
  return clojure.browser.net.transmit.call(null, connection, url, "POST", data, null, 0);
};
clojure.browser.repl.send_print = function clojure$browser$repl$send_print(var_args) {
  var args9092 = [];
  var len__7211__auto___9095 = arguments.length;
  var i__7212__auto___9096 = 0;
  while (true) {
    if (i__7212__auto___9096 < len__7211__auto___9095) {
      args9092.push(arguments[i__7212__auto___9096]);
      var G__9097 = i__7212__auto___9096 + 1;
      i__7212__auto___9096 = G__9097;
      continue;
    } else {
    }
    break;
  }
  var G__9094 = args9092.length;
  switch(G__9094) {
    case 2:
      return clojure.browser.repl.send_print.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.browser.repl.send_print.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9092.length)].join(""));;
  }
};
clojure.browser.repl.send_print.cljs$core$IFn$_invoke$arity$2 = function(url, data) {
  return clojure.browser.repl.send_print.call(null, url, data, 0);
};
clojure.browser.repl.send_print.cljs$core$IFn$_invoke$arity$3 = function(url, data, n) {
  var conn = clojure.browser.net.xhr_connection.call(null);
  clojure.browser.event.listen.call(null, conn, new cljs.core.Keyword(null, "error", "error", -978969032), function(conn) {
    return function(_) {
      if (n < 10) {
        return clojure.browser.repl.send_print.call(null, url, data, n + 1);
      } else {
        return console.log([cljs.core.str("Could not send "), cljs.core.str(data), cljs.core.str(" after "), cljs.core.str(n), cljs.core.str(" attempts.")].join(""));
      }
    };
  }(conn));
  return clojure.browser.net.transmit.call(null, conn, url, "POST", data, null, 0);
};
clojure.browser.repl.send_print.cljs$lang$maxFixedArity = 3;
clojure.browser.repl.order = cljs.core.atom.call(null, 0);
clojure.browser.repl.wrap_message = function clojure$browser$repl$wrap_message(t, data) {
  return cljs.core.pr_str.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), t, new cljs.core.Keyword(null, "content", "content", 15833224), data, new cljs.core.Keyword(null, "order", "order", -1254677256), cljs.core.swap_BANG_.call(null, clojure.browser.repl.order, cljs.core.inc)], null));
};
clojure.browser.repl.start_evaluator = function clojure$browser$repl$start_evaluator(url) {
  var temp__4655__auto__ = clojure.browser.net.xpc_connection.call(null);
  if (cljs.core.truth_(temp__4655__auto__)) {
    var repl_connection = temp__4655__auto__;
    var connection = clojure.browser.net.xhr_connection.call(null);
    clojure.browser.event.listen.call(null, connection, new cljs.core.Keyword(null, "success", "success", 1890645906), function(connection, repl_connection, temp__4655__auto__) {
      return function(e) {
        return clojure.browser.net.transmit.call(null, repl_connection, new cljs.core.Keyword(null, "evaluate-javascript", "evaluate-javascript", -315749780), e.currentTarget.getResponseText(cljs.core.List.EMPTY));
      };
    }(connection, repl_connection, temp__4655__auto__));
    clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "send-result", "send-result", 35388249), function(connection, repl_connection, temp__4655__auto__) {
      return function(data) {
        return clojure.browser.repl.send_result.call(null, connection, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "result", "result", 1415092211), data));
      };
    }(connection, repl_connection, temp__4655__auto__));
    clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "print", "print", 1299562414), function(connection, repl_connection, temp__4655__auto__) {
      return function(data) {
        return clojure.browser.repl.send_print.call(null, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "print", "print", 1299562414), data));
      };
    }(connection, repl_connection, temp__4655__auto__));
    clojure.browser.net.connect.call(null, repl_connection, cljs.core.constantly.call(null, null));
    return setTimeout(function(connection, repl_connection, temp__4655__auto__) {
      return function() {
        return clojure.browser.repl.send_result.call(null, connection, url, clojure.browser.repl.wrap_message.call(null, new cljs.core.Keyword(null, "ready", "ready", 1086465795), "ready"));
      };
    }(connection, repl_connection, temp__4655__auto__), 50);
  } else {
    return alert("No 'xpc' param provided to child iframe.");
  }
};
clojure.browser.repl.load_queue = null;
clojure.browser.repl.bootstrap = function clojure$browser$repl$bootstrap() {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    goog.require__ = goog.require;
    goog.isProvided_ = function(name) {
      return false;
    };
    goog.constructNamespace_("cljs.user");
    goog.writeScriptTag__ = function(src, opt_sourceText) {
      var loaded = cljs.core.atom.call(null, false);
      var onload = function(loaded) {
        return function() {
          if (cljs.core.truth_(function() {
            var and__6141__auto__ = clojure.browser.repl.load_queue;
            if (cljs.core.truth_(and__6141__auto__)) {
              return cljs.core.deref.call(null, loaded) === false;
            } else {
              return and__6141__auto__;
            }
          }())) {
            cljs.core.swap_BANG_.call(null, loaded, cljs.core.not);
            if (clojure.browser.repl.load_queue.length === 0) {
              return clojure.browser.repl.load_queue = null;
            } else {
              return goog.writeScriptTag__.apply(null, clojure.browser.repl.load_queue.shift());
            }
          } else {
            return null;
          }
        };
      }(loaded);
      return document.body.appendChild(function() {
        var script = document.createElement("script");
        var script__$1 = function() {
          var G__9102 = script;
          goog.object.set(G__9102, "type", "text/javascript");
          goog.object.set(G__9102, "onload", onload);
          goog.object.set(G__9102, "onreadystatechange", onload);
          return G__9102;
        }();
        if (opt_sourceText == null) {
          var G__9103 = script__$1;
          goog.object.set(G__9103, "src", src);
          return G__9103;
        } else {
          var G__9104 = script__$1;
          goog.dom.setTextContext(G__9104, opt_sourceText);
          return G__9104;
        }
      }());
    };
    goog.writeScriptTag_ = function(src, opt_sourceText) {
      if (cljs.core.truth_(clojure.browser.repl.load_queue)) {
        return clojure.browser.repl.load_queue.push([src, opt_sourceText]);
      } else {
        clojure.browser.repl.load_queue = [];
        return goog.writeScriptTag__(src, opt_sourceText);
      }
    };
    return goog.require = function(src, reload) {
      if (cljs.core._EQ_.call(null, reload, "reload-all")) {
        goog.cljsReloadAll_ = true;
      } else {
      }
      var reload_QMARK_ = function() {
        var or__6153__auto__ = reload;
        if (cljs.core.truth_(or__6153__auto__)) {
          return or__6153__auto__;
        } else {
          return goog.cljsReloadAll__;
        }
      }();
      if (cljs.core.truth_(reload_QMARK_)) {
        var path_9105 = goog.dependencies_.nameToPath[src];
        goog.object.remove(goog.dependencies_.visited, path_9105);
        goog.object.remove(goog.dependencies_.written, path_9105);
        goog.object.remove(goog.dependencies_.written, [cljs.core.str(goog.basePath), cljs.core.str(path_9105)].join(""));
      } else {
      }
      var ret = goog.require__(src);
      if (cljs.core._EQ_.call(null, reload, "reload-all")) {
        goog.cljsReloadAll_ = false;
      } else {
      }
      return ret;
    };
  }
};
clojure.browser.repl.connect = function clojure$browser$repl$connect(repl_server_url) {
  var repl_connection = clojure.browser.net.xpc_connection.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "peer_uri", "peer_uri", 910305997), repl_server_url], null));
  cljs.core.swap_BANG_.call(null, clojure.browser.repl.xpc_connection, cljs.core.constantly.call(null, repl_connection));
  clojure.browser.net.register_service.call(null, repl_connection, new cljs.core.Keyword(null, "evaluate-javascript", "evaluate-javascript", -315749780), function(repl_connection) {
    return function(js) {
      return clojure.browser.net.transmit.call(null, repl_connection, new cljs.core.Keyword(null, "send-result", "send-result", 35388249), clojure.browser.repl.evaluate_javascript.call(null, repl_connection, js));
    };
  }(repl_connection));
  clojure.browser.net.connect.call(null, repl_connection, cljs.core.constantly.call(null, null), function(repl_connection) {
    return function(iframe) {
      return iframe.style.display = "none";
    };
  }(repl_connection));
  clojure.browser.repl.bootstrap.call(null);
  return repl_connection;
};
goog.provide("goog.net.jsloader");
goog.provide("goog.net.jsloader.Error");
goog.provide("goog.net.jsloader.ErrorCode");
goog.provide("goog.net.jsloader.Options");
goog.require("goog.array");
goog.require("goog.async.Deferred");
goog.require("goog.debug.Error");
goog.require("goog.dom");
goog.require("goog.dom.TagName");
goog.require("goog.object");
goog.net.jsloader.GLOBAL_VERIFY_OBJS_ = "closure_verification";
goog.net.jsloader.DEFAULT_TIMEOUT = 5E3;
goog.net.jsloader.Options;
goog.net.jsloader.scriptsToLoad_ = [];
goog.net.jsloader.scriptLoadingDeferred_;
goog.net.jsloader.loadMany = function(uris, opt_options) {
  if (!uris.length) {
    return goog.async.Deferred.succeed(null);
  }
  var isAnotherModuleLoading = goog.net.jsloader.scriptsToLoad_.length;
  goog.array.extend(goog.net.jsloader.scriptsToLoad_, uris);
  if (isAnotherModuleLoading) {
    return goog.net.jsloader.scriptLoadingDeferred_;
  }
  uris = goog.net.jsloader.scriptsToLoad_;
  var popAndLoadNextScript = function() {
    var uri = uris.shift();
    var deferred = goog.net.jsloader.load(uri, opt_options);
    if (uris.length) {
      deferred.addBoth(popAndLoadNextScript);
    }
    return deferred;
  };
  goog.net.jsloader.scriptLoadingDeferred_ = popAndLoadNextScript();
  return goog.net.jsloader.scriptLoadingDeferred_;
};
goog.net.jsloader.load = function(uri, opt_options) {
  var options = opt_options || {};
  var doc = options.document || document;
  var script = goog.dom.createElement(goog.dom.TagName.SCRIPT);
  var request = {script_:script, timeout_:undefined};
  var deferred = new goog.async.Deferred(goog.net.jsloader.cancel_, request);
  var timeout = null;
  var timeoutDuration = goog.isDefAndNotNull(options.timeout) ? options.timeout : goog.net.jsloader.DEFAULT_TIMEOUT;
  if (timeoutDuration > 0) {
    timeout = window.setTimeout(function() {
      goog.net.jsloader.cleanup_(script, true);
      deferred.errback(new goog.net.jsloader.Error(goog.net.jsloader.ErrorCode.TIMEOUT, "Timeout reached for loading script " + uri));
    }, timeoutDuration);
    request.timeout_ = timeout;
  }
  script.onload = script.onreadystatechange = function() {
    if (!script.readyState || script.readyState == "loaded" || script.readyState == "complete") {
      var removeScriptNode = options.cleanupWhenDone || false;
      goog.net.jsloader.cleanup_(script, removeScriptNode, timeout);
      deferred.callback(null);
    }
  };
  script.onerror = function() {
    goog.net.jsloader.cleanup_(script, true, timeout);
    deferred.errback(new goog.net.jsloader.Error(goog.net.jsloader.ErrorCode.LOAD_ERROR, "Error while loading script " + uri));
  };
  var properties = options.attributes || {};
  goog.object.extend(properties, {"type":"text/javascript", "charset":"UTF-8", "src":uri});
  goog.dom.setProperties(script, properties);
  var scriptParent = goog.net.jsloader.getScriptParentElement_(doc);
  scriptParent.appendChild(script);
  return deferred;
};
goog.net.jsloader.loadAndVerify = function(uri, verificationObjName, options) {
  if (!goog.global[goog.net.jsloader.GLOBAL_VERIFY_OBJS_]) {
    goog.global[goog.net.jsloader.GLOBAL_VERIFY_OBJS_] = {};
  }
  var verifyObjs = goog.global[goog.net.jsloader.GLOBAL_VERIFY_OBJS_];
  if (goog.isDef(verifyObjs[verificationObjName])) {
    return goog.async.Deferred.fail(new goog.net.jsloader.Error(goog.net.jsloader.ErrorCode.VERIFY_OBJECT_ALREADY_EXISTS, "Verification object " + verificationObjName + " already defined."));
  }
  var sendDeferred = goog.net.jsloader.load(uri, options);
  var deferred = new goog.async.Deferred(goog.bind(sendDeferred.cancel, sendDeferred));
  sendDeferred.addCallback(function() {
    var result = verifyObjs[verificationObjName];
    if (goog.isDef(result)) {
      deferred.callback(result);
      delete verifyObjs[verificationObjName];
    } else {
      deferred.errback(new goog.net.jsloader.Error(goog.net.jsloader.ErrorCode.VERIFY_ERROR, "Script " + uri + " loaded, but verification object " + verificationObjName + " was not defined."));
    }
  });
  sendDeferred.addErrback(function(error) {
    if (goog.isDef(verifyObjs[verificationObjName])) {
      delete verifyObjs[verificationObjName];
    }
    deferred.errback(error);
  });
  return deferred;
};
goog.net.jsloader.getScriptParentElement_ = function(doc) {
  var headElements = doc.getElementsByTagName(goog.dom.TagName.HEAD);
  if (!headElements || goog.array.isEmpty(headElements)) {
    return doc.documentElement;
  } else {
    return headElements[0];
  }
};
goog.net.jsloader.cancel_ = function() {
  var request = this;
  if (request && request.script_) {
    var scriptNode = request.script_;
    if (scriptNode && scriptNode.tagName == goog.dom.TagName.SCRIPT) {
      goog.net.jsloader.cleanup_(scriptNode, true, request.timeout_);
    }
  }
};
goog.net.jsloader.cleanup_ = function(scriptNode, removeScriptNode, opt_timeout) {
  if (goog.isDefAndNotNull(opt_timeout)) {
    goog.global.clearTimeout(opt_timeout);
  }
  scriptNode.onload = goog.nullFunction;
  scriptNode.onerror = goog.nullFunction;
  scriptNode.onreadystatechange = goog.nullFunction;
  if (removeScriptNode) {
    window.setTimeout(function() {
      goog.dom.removeNode(scriptNode);
    }, 0);
  }
};
goog.net.jsloader.ErrorCode = {LOAD_ERROR:0, TIMEOUT:1, VERIFY_ERROR:2, VERIFY_OBJECT_ALREADY_EXISTS:3};
goog.net.jsloader.Error = function(code, opt_message) {
  var msg = "Jsloader error (code #" + code + ")";
  if (opt_message) {
    msg += ": " + opt_message;
  }
  goog.net.jsloader.Error.base(this, "constructor", msg);
  this.code = code;
};
goog.inherits(goog.net.jsloader.Error, goog.debug.Error);
goog.provide("goog.net.Jsonp");
goog.require("goog.Uri");
goog.require("goog.net.jsloader");
goog.net.Jsonp = function(uri, opt_callbackParamName) {
  this.uri_ = new goog.Uri(uri);
  this.callbackParamName_ = opt_callbackParamName ? opt_callbackParamName : "callback";
  this.timeout_ = 5E3;
};
goog.net.Jsonp.CALLBACKS = "_callbacks_";
goog.net.Jsonp.scriptCounter_ = 0;
goog.net.Jsonp.prototype.setRequestTimeout = function(timeout) {
  this.timeout_ = timeout;
};
goog.net.Jsonp.prototype.getRequestTimeout = function() {
  return this.timeout_;
};
goog.net.Jsonp.prototype.send = function(opt_payload, opt_replyCallback, opt_errorCallback, opt_callbackParamValue) {
  var payload = opt_payload || null;
  var id = opt_callbackParamValue || "_" + (goog.net.Jsonp.scriptCounter_++).toString(36) + goog.now().toString(36);
  if (!goog.global[goog.net.Jsonp.CALLBACKS]) {
    goog.global[goog.net.Jsonp.CALLBACKS] = {};
  }
  var uri = this.uri_.clone();
  if (payload) {
    goog.net.Jsonp.addPayloadToUri_(payload, uri);
  }
  if (opt_replyCallback) {
    var reply = goog.net.Jsonp.newReplyHandler_(id, opt_replyCallback);
    goog.global[goog.net.Jsonp.CALLBACKS][id] = reply;
    uri.setParameterValues(this.callbackParamName_, goog.net.Jsonp.CALLBACKS + "." + id);
  }
  var deferred = goog.net.jsloader.load(uri.toString(), {timeout:this.timeout_, cleanupWhenDone:true});
  var error = goog.net.Jsonp.newErrorHandler_(id, payload, opt_errorCallback);
  deferred.addErrback(error);
  return {id_:id, deferred_:deferred};
};
goog.net.Jsonp.prototype.cancel = function(request) {
  if (request) {
    if (request.deferred_) {
      request.deferred_.cancel();
    }
    if (request.id_) {
      goog.net.Jsonp.cleanup_(request.id_, false);
    }
  }
};
goog.net.Jsonp.newErrorHandler_ = function(id, payload, opt_errorCallback) {
  return function() {
    goog.net.Jsonp.cleanup_(id, false);
    if (opt_errorCallback) {
      opt_errorCallback(payload);
    }
  };
};
goog.net.Jsonp.newReplyHandler_ = function(id, replyCallback) {
  var handler = function(var_args) {
    goog.net.Jsonp.cleanup_(id, true);
    replyCallback.apply(undefined, arguments);
  };
  return handler;
};
goog.net.Jsonp.cleanup_ = function(id, deleteReplyHandler) {
  if (goog.global[goog.net.Jsonp.CALLBACKS][id]) {
    if (deleteReplyHandler) {
      delete goog.global[goog.net.Jsonp.CALLBACKS][id];
    } else {
      goog.global[goog.net.Jsonp.CALLBACKS][id] = goog.nullFunction;
    }
  }
};
goog.net.Jsonp.addPayloadToUri_ = function(payload, uri) {
  for (var name in payload) {
    if (!payload.hasOwnProperty || payload.hasOwnProperty(name)) {
      uri.setParameterValues(name, payload[name]);
    }
  }
  return uri;
};
goog.provide("goog.crypt");
goog.require("goog.array");
goog.require("goog.asserts");
goog.crypt.stringToByteArray = function(str) {
  var output = [], p = 0;
  for (var i = 0;i < str.length;i++) {
    var c = str.charCodeAt(i);
    while (c > 255) {
      output[p++] = c & 255;
      c >>= 8;
    }
    output[p++] = c;
  }
  return output;
};
goog.crypt.byteArrayToString = function(bytes) {
  var CHUNK_SIZE = 8192;
  if (bytes.length <= CHUNK_SIZE) {
    return String.fromCharCode.apply(null, bytes);
  }
  var str = "";
  for (var i = 0;i < bytes.length;i += CHUNK_SIZE) {
    var chunk = goog.array.slice(bytes, i, i + CHUNK_SIZE);
    str += String.fromCharCode.apply(null, chunk);
  }
  return str;
};
goog.crypt.byteArrayToHex = function(array) {
  return goog.array.map(array, function(numByte) {
    var hexByte = numByte.toString(16);
    return hexByte.length > 1 ? hexByte : "0" + hexByte;
  }).join("");
};
goog.crypt.hexToByteArray = function(hexString) {
  goog.asserts.assert(hexString.length % 2 == 0, "Key string length must be multiple of 2");
  var arr = [];
  for (var i = 0;i < hexString.length;i += 2) {
    arr.push(parseInt(hexString.substring(i, i + 2), 16));
  }
  return arr;
};
goog.crypt.stringToUtf8ByteArray = function(str) {
  var out = [], p = 0;
  for (var i = 0;i < str.length;i++) {
    var c = str.charCodeAt(i);
    if (c < 128) {
      out[p++] = c;
    } else {
      if (c < 2048) {
        out[p++] = c >> 6 | 192;
        out[p++] = c & 63 | 128;
      } else {
        out[p++] = c >> 12 | 224;
        out[p++] = c >> 6 & 63 | 128;
        out[p++] = c & 63 | 128;
      }
    }
  }
  return out;
};
goog.crypt.utf8ByteArrayToString = function(bytes) {
  var out = [], pos = 0, c = 0;
  while (pos < bytes.length) {
    var c1 = bytes[pos++];
    if (c1 < 128) {
      out[c++] = String.fromCharCode(c1);
    } else {
      if (c1 > 191 && c1 < 224) {
        var c2 = bytes[pos++];
        out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
      } else {
        var c2 = bytes[pos++];
        var c3 = bytes[pos++];
        out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
      }
    }
  }
  return out.join("");
};
goog.crypt.xorByteArray = function(bytes1, bytes2) {
  goog.asserts.assert(bytes1.length == bytes2.length, "XOR array lengths must match");
  var result = [];
  for (var i = 0;i < bytes1.length;i++) {
    result.push(bytes1[i] ^ bytes2[i]);
  }
  return result;
};
goog.provide("goog.crypt.base64");
goog.require("goog.asserts");
goog.require("goog.crypt");
goog.require("goog.userAgent");
goog.crypt.base64.byteToCharMap_ = null;
goog.crypt.base64.charToByteMap_ = null;
goog.crypt.base64.byteToCharMapWebSafe_ = null;
goog.crypt.base64.charToByteMapWebSafe_ = null;
goog.crypt.base64.ENCODED_VALS_BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" + "abcdefghijklmnopqrstuvwxyz" + "0123456789";
goog.crypt.base64.ENCODED_VALS = goog.crypt.base64.ENCODED_VALS_BASE + "+/\x3d";
goog.crypt.base64.ENCODED_VALS_WEBSAFE = goog.crypt.base64.ENCODED_VALS_BASE + "-_.";
goog.crypt.base64.HAS_NATIVE_SUPPORT = goog.userAgent.GECKO || goog.userAgent.WEBKIT || goog.userAgent.OPERA || typeof goog.global.atob == "function";
goog.crypt.base64.encodeByteArray = function(input, opt_webSafe) {
  goog.asserts.assert(goog.isArrayLike(input), "encodeByteArray takes an array as a parameter");
  goog.crypt.base64.init_();
  var byteToCharMap = opt_webSafe ? goog.crypt.base64.byteToCharMapWebSafe_ : goog.crypt.base64.byteToCharMap_;
  var output = [];
  for (var i = 0;i < input.length;i += 3) {
    var byte1 = input[i];
    var haveByte2 = i + 1 < input.length;
    var byte2 = haveByte2 ? input[i + 1] : 0;
    var haveByte3 = i + 2 < input.length;
    var byte3 = haveByte3 ? input[i + 2] : 0;
    var outByte1 = byte1 >> 2;
    var outByte2 = (byte1 & 3) << 4 | byte2 >> 4;
    var outByte3 = (byte2 & 15) << 2 | byte3 >> 6;
    var outByte4 = byte3 & 63;
    if (!haveByte3) {
      outByte4 = 64;
      if (!haveByte2) {
        outByte3 = 64;
      }
    }
    output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
  }
  return output.join("");
};
goog.crypt.base64.encodeString = function(input, opt_webSafe) {
  if (goog.crypt.base64.HAS_NATIVE_SUPPORT && !opt_webSafe) {
    return goog.global.btoa(input);
  }
  return goog.crypt.base64.encodeByteArray(goog.crypt.stringToByteArray(input), opt_webSafe);
};
goog.crypt.base64.decodeString = function(input, opt_webSafe) {
  if (goog.crypt.base64.HAS_NATIVE_SUPPORT && !opt_webSafe) {
    return goog.global.atob(input);
  }
  return goog.crypt.byteArrayToString(goog.crypt.base64.decodeStringToByteArray(input, opt_webSafe));
};
goog.crypt.base64.decodeStringToByteArray = function(input, opt_webSafe) {
  goog.crypt.base64.init_();
  var charToByteMap = opt_webSafe ? goog.crypt.base64.charToByteMapWebSafe_ : goog.crypt.base64.charToByteMap_;
  var output = [];
  for (var i = 0;i < input.length;) {
    var byte1 = charToByteMap[input.charAt(i++)];
    var haveByte2 = i < input.length;
    var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
    ++i;
    var haveByte3 = i < input.length;
    var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
    ++i;
    var haveByte4 = i < input.length;
    var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
    ++i;
    if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
      throw Error();
    }
    var outByte1 = byte1 << 2 | byte2 >> 4;
    output.push(outByte1);
    if (byte3 != 64) {
      var outByte2 = byte2 << 4 & 240 | byte3 >> 2;
      output.push(outByte2);
      if (byte4 != 64) {
        var outByte3 = byte3 << 6 & 192 | byte4;
        output.push(outByte3);
      }
    }
  }
  return output;
};
goog.crypt.base64.init_ = function() {
  if (!goog.crypt.base64.byteToCharMap_) {
    goog.crypt.base64.byteToCharMap_ = {};
    goog.crypt.base64.charToByteMap_ = {};
    goog.crypt.base64.byteToCharMapWebSafe_ = {};
    goog.crypt.base64.charToByteMapWebSafe_ = {};
    for (var i = 0;i < goog.crypt.base64.ENCODED_VALS.length;i++) {
      goog.crypt.base64.byteToCharMap_[i] = goog.crypt.base64.ENCODED_VALS.charAt(i);
      goog.crypt.base64.charToByteMap_[goog.crypt.base64.byteToCharMap_[i]] = i;
      goog.crypt.base64.byteToCharMapWebSafe_[i] = goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(i);
      goog.crypt.base64.charToByteMapWebSafe_[goog.crypt.base64.byteToCharMapWebSafe_[i]] = i;
      if (i >= goog.crypt.base64.ENCODED_VALS_BASE.length) {
        goog.crypt.base64.charToByteMap_[goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
        goog.crypt.base64.charToByteMapWebSafe_[goog.crypt.base64.ENCODED_VALS.charAt(i)] = i;
      }
    }
  }
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string.StringBuffer");
clojure.string.seq_reverse = function clojure$string$seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.re_surrogate_pair = new RegExp("([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])", "g");
clojure.string.reverse = function clojure$string$reverse(s) {
  return s.replace(clojure.string.re_surrogate_pair, "$2$1").split("").reverse().join("");
};
clojure.string.replace_all = function clojure$string$replace_all(s, re, replacement) {
  return s.replace(new RegExp(re.source, "g"), replacement);
};
clojure.string.replace_with = function clojure$string$replace_with(f) {
  return function() {
    var G__13087__delegate = function(args) {
      var matches = cljs.core.drop_last.call(null, 2, args);
      if (cljs.core._EQ_.call(null, cljs.core.count.call(null, matches), 1)) {
        return f.call(null, cljs.core.first.call(null, matches));
      } else {
        return f.call(null, cljs.core.vec.call(null, matches));
      }
    };
    var G__13087 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__13088__i = 0, G__13088__a = new Array(arguments.length - 0);
        while (G__13088__i < G__13088__a.length) {
          G__13088__a[G__13088__i] = arguments[G__13088__i + 0];
          ++G__13088__i;
        }
        args = new cljs.core.IndexedSeq(G__13088__a, 0);
      }
      return G__13087__delegate.call(this, args);
    };
    G__13087.cljs$lang$maxFixedArity = 0;
    G__13087.cljs$lang$applyTo = function(arglist__13089) {
      var args = cljs.core.seq(arglist__13089);
      return G__13087__delegate(args);
    };
    G__13087.cljs$core$IFn$_invoke$arity$variadic = G__13087__delegate;
    return G__13087;
  }();
};
clojure.string.replace = function clojure$string$replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (match instanceof RegExp) {
      if (typeof replacement === "string") {
        return clojure.string.replace_all.call(null, s, match, replacement);
      } else {
        return clojure.string.replace_all.call(null, s, match, clojure.string.replace_with.call(null, replacement));
      }
    } else {
      throw [cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
    }
  }
};
clojure.string.replace_first = function clojure$string$replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function clojure$string$join(var_args) {
  var args13090 = [];
  var len__7211__auto___13093 = arguments.length;
  var i__7212__auto___13094 = 0;
  while (true) {
    if (i__7212__auto___13094 < len__7211__auto___13093) {
      args13090.push(arguments[i__7212__auto___13094]);
      var G__13095 = i__7212__auto___13094 + 1;
      i__7212__auto___13094 = G__13095;
      continue;
    } else {
    }
    break;
  }
  var G__13092 = args13090.length;
  switch(G__13092) {
    case 1:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13090.length)].join(""));;
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__13097 = sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
      var G__13098 = cljs.core.next.call(null, coll__$1);
      sb = G__13097;
      coll__$1 = G__13098;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$2 = function(separator, coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
      var coll__$2 = cljs.core.next.call(null, coll__$1);
      if (coll__$2 == null) {
      } else {
        sb.append(separator);
      }
      var G__13099 = sb;
      var G__13100 = coll__$2;
      sb = G__13099;
      coll__$1 = G__13100;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$lang$maxFixedArity = 2;
clojure.string.upper_case = function clojure$string$upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function clojure$string$lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function clojure$string$capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return [cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function clojure$string$pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if ("" === cljs.core.peek.call(null, v__$1)) {
      var G__13101 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__13101;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function clojure$string$discard_trailing_if_needed(limit, v) {
  if (0 === limit) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function clojure$string$split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__13105 = cljs.core._EQ__EQ_;
    var expr__13106 = limit;
    if (cljs.core.truth_(pred__13105.call(null, 1, expr__13106))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__13105.call(null, 2, expr__13106))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function clojure$string$split(var_args) {
  var args13108 = [];
  var len__7211__auto___13111 = arguments.length;
  var i__7212__auto___13112 = 0;
  while (true) {
    if (i__7212__auto___13112 < len__7211__auto___13111) {
      args13108.push(arguments[i__7212__auto___13112]);
      var G__13113 = i__7212__auto___13112 + 1;
      i__7212__auto___13112 = G__13113;
      continue;
    } else {
    }
    break;
  }
  var G__13110 = args13108.length;
  switch(G__13110) {
    case 2:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13108.length)].join(""));;
  }
};
clojure.string.split.cljs$core$IFn$_invoke$arity$2 = function(s, re) {
  return clojure.string.split.call(null, s, re, 0);
};
clojure.string.split.cljs$core$IFn$_invoke$arity$3 = function(s, re, limit) {
  return clojure.string.discard_trailing_if_needed.call(null, limit, "/(?:)/" === [cljs.core.str(re)].join("") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
    var s__$1 = s;
    var limit__$1 = limit;
    var parts = cljs.core.PersistentVector.EMPTY;
    while (true) {
      if (1 === limit__$1) {
        return cljs.core.conj.call(null, parts, s__$1);
      } else {
        var m = cljs.core.re_find.call(null, re, s__$1);
        if (!(m == null)) {
          var index = s__$1.indexOf(m);
          var G__13115 = s__$1.substring(index + cljs.core.count.call(null, m));
          var G__13116 = limit__$1 - 1;
          var G__13117 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
          s__$1 = G__13115;
          limit__$1 = G__13116;
          parts = G__13117;
          continue;
        } else {
          return cljs.core.conj.call(null, parts, s__$1);
        }
      }
      break;
    }
  }());
};
clojure.string.split.cljs$lang$maxFixedArity = 3;
clojure.string.split_lines = function clojure$string$split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function clojure$string$trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function clojure$string$triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function clojure$string$trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function clojure$string$trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if ("\n" === ch || "\r" === ch) {
        var G__13118 = index - 1;
        index = G__13118;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function clojure$string$blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function clojure$string$escape(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (length === index) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var replacement = cljs.core.get.call(null, cmap, ch);
      if (!(replacement == null)) {
        buffer.append([cljs.core.str(replacement)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__13119 = index + 1;
      index = G__13119;
      continue;
    }
    break;
  }
};
clojure.string.index_of = function clojure$string$index_of(var_args) {
  var args13120 = [];
  var len__7211__auto___13123 = arguments.length;
  var i__7212__auto___13124 = 0;
  while (true) {
    if (i__7212__auto___13124 < len__7211__auto___13123) {
      args13120.push(arguments[i__7212__auto___13124]);
      var G__13125 = i__7212__auto___13124 + 1;
      i__7212__auto___13124 = G__13125;
      continue;
    } else {
    }
    break;
  }
  var G__13122 = args13120.length;
  switch(G__13122) {
    case 2:
      return clojure.string.index_of.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.index_of.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13120.length)].join(""));;
  }
};
clojure.string.index_of.cljs$core$IFn$_invoke$arity$2 = function(s, value) {
  var result = s.indexOf(value);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.index_of.cljs$core$IFn$_invoke$arity$3 = function(s, value, from_index) {
  var result = s.indexOf(value, from_index);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.index_of.cljs$lang$maxFixedArity = 3;
clojure.string.last_index_of = function clojure$string$last_index_of(var_args) {
  var args13127 = [];
  var len__7211__auto___13130 = arguments.length;
  var i__7212__auto___13131 = 0;
  while (true) {
    if (i__7212__auto___13131 < len__7211__auto___13130) {
      args13127.push(arguments[i__7212__auto___13131]);
      var G__13132 = i__7212__auto___13131 + 1;
      i__7212__auto___13131 = G__13132;
      continue;
    } else {
    }
    break;
  }
  var G__13129 = args13127.length;
  switch(G__13129) {
    case 2:
      return clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13127.length)].join(""));;
  }
};
clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$2 = function(s, value) {
  var result = s.lastIndexOf(value);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$3 = function(s, value, from_index) {
  var result = s.lastIndexOf(value, from_index);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.last_index_of.cljs$lang$maxFixedArity = 3;
clojure.string.starts_with_QMARK_ = function clojure$string$starts_with_QMARK_(s, substr) {
  return goog.string.startsWith(s, substr);
};
clojure.string.ends_with_QMARK_ = function clojure$string$ends_with_QMARK_(s, substr) {
  return goog.string.endsWith(s, substr);
};
clojure.string.includes_QMARK_ = function clojure$string$includes_QMARK_(s, substr) {
  return goog.string.contains(s, substr);
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string.StringBuffer");
cljs.reader.PushbackReader = function() {
};
cljs.reader.read_char = function cljs$reader$read_char(reader) {
  if (!(reader == null) && !(reader.cljs$reader$PushbackReader$read_char$arity$1 == null)) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__6808__auto__ = reader == null ? null : reader;
    var m__6809__auto__ = cljs.reader.read_char[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, reader);
    } else {
      var m__6809__auto____$1 = cljs.reader.read_char["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, reader);
      } else {
        throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
      }
    }
  }
};
cljs.reader.unread = function cljs$reader$unread(reader, ch) {
  if (!(reader == null) && !(reader.cljs$reader$PushbackReader$unread$arity$2 == null)) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__6808__auto__ = reader == null ? null : reader;
    var m__6809__auto__ = cljs.reader.unread[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, reader, ch);
    } else {
      var m__6809__auto____$1 = cljs.reader.unread["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, reader, ch);
      } else {
        throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
      }
    }
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.StringPushbackReader.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.Symbol(null, "buffer", "buffer", -2037140571, null), cljs.core.with_meta(new cljs.core.Symbol(null, "idx", "idx", -1600747296, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write.call(null, writer__6752__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.__GT_StringPushbackReader = function cljs$reader$__GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function cljs$reader$push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function cljs$reader$whitespace_QMARK_(ch) {
  var or__6153__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__6153__auto__)) {
    return or__6153__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function cljs$reader$numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function cljs$reader$comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function cljs$reader$number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function cljs$reader$reader_error(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___13138 = arguments.length;
  var i__7212__auto___13139 = 0;
  while (true) {
    if (i__7212__auto___13139 < len__7211__auto___13138) {
      args__7218__auto__.push(arguments[i__7212__auto___13139]);
      var G__13140 = i__7212__auto___13139 + 1;
      i__7212__auto___13139 = G__13140;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic = function(rdr, msg) {
  throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
};
cljs.reader.reader_error.cljs$lang$maxFixedArity = 1;
cljs.reader.reader_error.cljs$lang$applyTo = function(seq13136) {
  var G__13137 = cljs.core.first.call(null, seq13136);
  var seq13136__$1 = cljs.core.next.call(null, seq13136);
  return cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic(G__13137, seq13136__$1);
};
cljs.reader.macro_terminating_QMARK_ = function cljs$reader$macro_terminating_QMARK_(ch) {
  var and__6141__auto__ = !(ch === "#");
  if (and__6141__auto__) {
    var and__6141__auto____$1 = !(ch === "'");
    if (and__6141__auto____$1) {
      var and__6141__auto____$2 = !(ch === ":");
      if (and__6141__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__6141__auto____$2;
      }
    } else {
      return and__6141__auto____$1;
    }
  } else {
    return and__6141__auto__;
  }
};
cljs.reader.read_token = function cljs$reader$read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__13141 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__13142 = cljs.reader.read_char.call(null, rdr);
      sb = G__13141;
      ch = G__13142;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function cljs$reader$skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function cljs$reader$re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function cljs$reader$match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return -parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function cljs$reader$match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function cljs$reader$match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function cljs$reader$match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function cljs$reader$escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return '"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function cljs$reader$read_2_chars(reader) {
  return (new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function cljs$reader$read_4_chars(reader) {
  return (new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function cljs$reader$validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function cljs$reader$make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function cljs$reader$escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function cljs$reader$read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__13143 = cljs.reader.read_char.call(null, rdr);
      ch = G__13143;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function cljs$reader$read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4655__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4655__auto__)) {
        var macrofn = temp__4655__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__13144 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__13144;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__13145 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__13145;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function cljs$reader$not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function cljs$reader$read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4655__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var obj = temp__4655__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function cljs$reader$read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmatched delimiter ", ch);
};
cljs.reader.read_list = function cljs$reader$read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function cljs$reader$read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function cljs$reader$read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function cljs$reader$read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__6153__auto__ = ch == null;
      if (or__6153__auto__) {
        return or__6153__auto__;
      } else {
        var or__6153__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__6153__auto____$1) {
          return or__6153__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__6153__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__6153__auto__)) {
        return or__6153__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__13146 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__13147 = cljs.reader.read_char.call(null, reader);
      buffer = G__13146;
      ch = G__13147;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function cljs$reader$read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__13148 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__13149 = cljs.reader.read_char.call(null, reader);
        buffer = G__13148;
        ch = G__13149;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__13150 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__13151 = cljs.reader.read_char.call(null, reader);
          buffer = G__13150;
          ch = G__13151;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function cljs$reader$read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__13156 = function() {
            var G__13154 = buffer;
            G__13154.append(nch);
            return G__13154;
          }();
          var G__13157 = cljs.reader.read_char.call(null, reader);
          buffer = G__13156;
          ch = G__13157;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__13158 = function() {
            var G__13155 = buffer;
            G__13155.append(ch);
            return G__13155;
          }();
          var G__13159 = cljs.reader.read_char.call(null, reader);
          buffer = G__13158;
          ch = G__13159;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function cljs$reader$special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (t === "/") {
          return new cljs.core.Symbol(null, "/", "/", -1371932971, null);
        } else {
          return not_found;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function cljs$reader$read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(function() {
    var and__6141__auto__ = goog.string.contains(token, "/");
    if (cljs.core.truth_(and__6141__auto__)) {
      return !(token.length === 1);
    } else {
      return and__6141__auto__;
    }
  }())) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_literal = function cljs$reader$read_literal(rdr, ch) {
  var token = cljs.reader.read_token.call(null, rdr, ch);
  var chars = cljs.core.subs.call(null, token, 1);
  if (chars.length === 1) {
    return chars;
  } else {
    if (chars === "tab") {
      return "\t";
    } else {
      if (chars === "return") {
        return "\r";
      } else {
        if (chars === "newline") {
          return "\n";
        } else {
          if (chars === "space") {
            return " ";
          } else {
            if (chars === "backspace") {
              return "\b";
            } else {
              if (chars === "formfeed") {
                return "\f";
              } else {
                if (chars.charAt(0) === "u") {
                  return cljs.reader.make_unicode_char.call(null, cljs.core.subs.call(null, chars, 1));
                } else {
                  if (chars.charAt(0) === "o") {
                    return cljs.reader.not_implemented.call(null, rdr, token);
                  } else {
                    return cljs.reader.reader_error.call(null, rdr, "Unknown character literal: ", token);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_keyword = function cljs$reader$read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function cljs$reader$desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function cljs$reader$wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function cljs$reader$throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function cljs$reader$read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 262144 || o.cljs$core$IWithMeta$ ? true : !o.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, o) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, o)) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function cljs$reader$read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function cljs$reader$read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function cljs$reader$read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function cljs$reader$macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_literal;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function cljs$reader$dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function cljs$reader$read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__13162 = reader;
        var G__13163 = eof_is_error;
        var G__13164 = sentinel;
        var G__13165 = is_recursive;
        reader = G__13162;
        eof_is_error = G__13163;
        sentinel = G__13164;
        is_recursive = G__13165;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__13166 = cljs.reader.read_comment.call(null, reader, ch);
          var G__13167 = eof_is_error;
          var G__13168 = sentinel;
          var G__13169 = is_recursive;
          reader = G__13166;
          eof_is_error = G__13167;
          sentinel = G__13168;
          is_recursive = G__13169;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__13170 = reader;
            var G__13171 = eof_is_error;
            var G__13172 = sentinel;
            var G__13173 = is_recursive;
            reader = G__13170;
            eof_is_error = G__13171;
            sentinel = G__13172;
            is_recursive = G__13173;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function cljs$reader$read_string(s) {
  if (typeof s === "string") {
  } else {
    throw new Error("Cannot read from non-string object.");
  }
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function cljs$reader$zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__13174 = b.append("0");
          b = G__13174;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function cljs$reader$divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function cljs$reader$indivisible_QMARK_(num, div) {
  return cljs.core.not.call(null, cljs.reader.divisible_QMARK_.call(null, num, div));
};
cljs.reader.leap_year_QMARK_ = function cljs$reader$leap_year_QMARK_(year) {
  var and__6141__auto__ = cljs.reader.divisible_QMARK_.call(null, year, 4);
  if (cljs.core.truth_(and__6141__auto__)) {
    var or__6153__auto__ = cljs.reader.indivisible_QMARK_.call(null, year, 100);
    if (cljs.core.truth_(or__6153__auto__)) {
      return or__6153__auto__;
    } else {
      return cljs.reader.divisible_QMARK_.call(null, year, 400);
    }
  } else {
    return and__6141__auto__;
  }
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function cljs$reader$parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function cljs$reader$check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function cljs$reader$parse_and_validate_timestamp(s) {
  var vec__13176 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__13176, 0, null);
  var years = cljs.core.nth.call(null, vec__13176, 1, null);
  var months = cljs.core.nth.call(null, vec__13176, 2, null);
  var days = cljs.core.nth.call(null, vec__13176, 3, null);
  var hours = cljs.core.nth.call(null, vec__13176, 4, null);
  var minutes = cljs.core.nth.call(null, vec__13176, 5, null);
  var seconds = cljs.core.nth.call(null, vec__13176, 6, null);
  var fraction = cljs.core.nth.call(null, vec__13176, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__13176, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__13176, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__13176, 10, null);
  var v = vec__13176;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__6153__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__6153__auto__)) {
        return or__6153__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__6153__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__6153__auto__)) {
        return or__6153__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__6153__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__6153__auto__)) {
        return or__6153__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__6153__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__6153__auto__)) {
        return or__6153__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__6153__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__6153__auto__)) {
        return or__6153__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__6153__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__6153__auto__)) {
        return or__6153__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__6153__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__6153__auto__)) {
        return or__6153__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__6153__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__6153__auto__)) {
        return or__6153__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function cljs$reader$parse_timestamp(ts) {
  var temp__4655__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4655__auto__)) {
    var vec__13178 = temp__4655__auto__;
    var years = cljs.core.nth.call(null, vec__13178, 0, null);
    var months = cljs.core.nth.call(null, vec__13178, 1, null);
    var days = cljs.core.nth.call(null, vec__13178, 2, null);
    var hours = cljs.core.nth.call(null, vec__13178, 3, null);
    var minutes = cljs.core.nth.call(null, vec__13178, 4, null);
    var seconds = cljs.core.nth.call(null, vec__13178, 5, null);
    var ms = cljs.core.nth.call(null, vec__13178, 6, null);
    var offset = cljs.core.nth.call(null, vec__13178, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function cljs$reader$read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function cljs$reader$read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function cljs$reader$read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__13191_13203 = cljs.core.seq.call(null, form);
    var chunk__13192_13204 = null;
    var count__13193_13205 = 0;
    var i__13194_13206 = 0;
    while (true) {
      if (i__13194_13206 < count__13193_13205) {
        var x_13207 = cljs.core._nth.call(null, chunk__13192_13204, i__13194_13206);
        arr.push(x_13207);
        var G__13208 = seq__13191_13203;
        var G__13209 = chunk__13192_13204;
        var G__13210 = count__13193_13205;
        var G__13211 = i__13194_13206 + 1;
        seq__13191_13203 = G__13208;
        chunk__13192_13204 = G__13209;
        count__13193_13205 = G__13210;
        i__13194_13206 = G__13211;
        continue;
      } else {
        var temp__4657__auto___13212 = cljs.core.seq.call(null, seq__13191_13203);
        if (temp__4657__auto___13212) {
          var seq__13191_13213__$1 = temp__4657__auto___13212;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__13191_13213__$1)) {
            var c__6956__auto___13214 = cljs.core.chunk_first.call(null, seq__13191_13213__$1);
            var G__13215 = cljs.core.chunk_rest.call(null, seq__13191_13213__$1);
            var G__13216 = c__6956__auto___13214;
            var G__13217 = cljs.core.count.call(null, c__6956__auto___13214);
            var G__13218 = 0;
            seq__13191_13203 = G__13215;
            chunk__13192_13204 = G__13216;
            count__13193_13205 = G__13217;
            i__13194_13206 = G__13218;
            continue;
          } else {
            var x_13219 = cljs.core.first.call(null, seq__13191_13213__$1);
            arr.push(x_13219);
            var G__13220 = cljs.core.next.call(null, seq__13191_13213__$1);
            var G__13221 = null;
            var G__13222 = 0;
            var G__13223 = 0;
            seq__13191_13203 = G__13220;
            chunk__13192_13204 = G__13221;
            count__13193_13205 = G__13222;
            i__13194_13206 = G__13223;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = {};
      var seq__13197_13224 = cljs.core.seq.call(null, form);
      var chunk__13198_13225 = null;
      var count__13199_13226 = 0;
      var i__13200_13227 = 0;
      while (true) {
        if (i__13200_13227 < count__13199_13226) {
          var vec__13201_13228 = cljs.core._nth.call(null, chunk__13198_13225, i__13200_13227);
          var k_13229 = cljs.core.nth.call(null, vec__13201_13228, 0, null);
          var v_13230 = cljs.core.nth.call(null, vec__13201_13228, 1, null);
          obj[cljs.core.name.call(null, k_13229)] = v_13230;
          var G__13231 = seq__13197_13224;
          var G__13232 = chunk__13198_13225;
          var G__13233 = count__13199_13226;
          var G__13234 = i__13200_13227 + 1;
          seq__13197_13224 = G__13231;
          chunk__13198_13225 = G__13232;
          count__13199_13226 = G__13233;
          i__13200_13227 = G__13234;
          continue;
        } else {
          var temp__4657__auto___13235 = cljs.core.seq.call(null, seq__13197_13224);
          if (temp__4657__auto___13235) {
            var seq__13197_13236__$1 = temp__4657__auto___13235;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__13197_13236__$1)) {
              var c__6956__auto___13237 = cljs.core.chunk_first.call(null, seq__13197_13236__$1);
              var G__13238 = cljs.core.chunk_rest.call(null, seq__13197_13236__$1);
              var G__13239 = c__6956__auto___13237;
              var G__13240 = cljs.core.count.call(null, c__6956__auto___13237);
              var G__13241 = 0;
              seq__13197_13224 = G__13238;
              chunk__13198_13225 = G__13239;
              count__13199_13226 = G__13240;
              i__13200_13227 = G__13241;
              continue;
            } else {
              var vec__13202_13242 = cljs.core.first.call(null, seq__13197_13236__$1);
              var k_13243 = cljs.core.nth.call(null, vec__13202_13242, 0, null);
              var v_13244 = cljs.core.nth.call(null, vec__13202_13242, 1, null);
              obj[cljs.core.name.call(null, k_13243)] = v_13244;
              var G__13245 = cljs.core.next.call(null, seq__13197_13236__$1);
              var G__13246 = null;
              var G__13247 = 0;
              var G__13248 = 0;
              seq__13197_13224 = G__13245;
              chunk__13198_13225 = G__13246;
              count__13199_13226 = G__13247;
              i__13200_13227 = G__13248;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
    }
  }
};
cljs.reader.read_uuid = function cljs$reader$read_uuid(uuid) {
  if (typeof uuid === "string") {
    return cljs.core.uuid.call(null, uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function cljs$reader$maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function cljs$reader$register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function cljs$reader$deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function cljs$reader$register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function cljs$reader$deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("no.en.core");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("cljs.reader");
goog.require("goog.crypt.base64");
no.en.core.port_number = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "http", "http", 382524695), 80, new cljs.core.Keyword(null, "https", "https", -1983909665), 443, new cljs.core.Keyword(null, "mysql", "mysql", -1431590210), 3306, new cljs.core.Keyword(null, "postgresql", "postgresql", -1568339962), 5432, new cljs.core.Keyword(null, "rabbitmq", "rabbitmq", 1046897371), 5672], null);
no.en.core.url_regex = /([^:]+):\/\/(([^:]+):([^@]+)@)?(([^:\/]+)(:([0-9]+))?((\/[^?]*)(\?([^#]*))?)?)(\#(.*))?/;
no.en.core.split_by_regex = function no$en$core$split_by_regex(s, pattern) {
  if (cljs.core.sequential_QMARK_.call(null, s)) {
    return s;
  } else {
    if (!clojure.string.blank_QMARK_.call(null, s)) {
      return clojure.string.split.call(null, s, pattern);
    } else {
      return null;
    }
  }
};
no.en.core.split_by_comma = function no$en$core$split_by_comma(s) {
  return no.en.core.split_by_regex.call(null, s, /\s*,\s*/);
};
no.en.core.utf8_string = function no$en$core$utf8_string(bytes) {
  throw cljs.core.ex_info.call(null, "utf8-string not implemented yet", bytes);
};
no.en.core.base64_encode = function no$en$core$base64_encode(bytes) {
  if (cljs.core.truth_(bytes)) {
    return goog.crypt.base64.encodeString(bytes, false);
  } else {
    return null;
  }
};
no.en.core.base64_decode = function no$en$core$base64_decode(s) {
  if (cljs.core.truth_(s)) {
    return goog.crypt.base64.decodeString(s, false);
  } else {
    return null;
  }
};
no.en.core.compact_map = function no$en$core$compact_map(m) {
  return cljs.core.reduce.call(null, function(m__$1, k) {
    var v = cljs.core.get.call(null, m__$1, k);
    if (v == null || (cljs.core.map_QMARK_.call(null, v) || cljs.core.sequential_QMARK_.call(null, v)) && cljs.core.empty_QMARK_.call(null, v)) {
      return cljs.core.dissoc.call(null, m__$1, k);
    } else {
      return m__$1;
    }
  }, m, cljs.core.keys.call(null, m));
};
no.en.core.url_encode = function no$en$core$url_encode(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___13255 = arguments.length;
  var i__7212__auto___13256 = 0;
  while (true) {
    if (i__7212__auto___13256 < len__7211__auto___13255) {
      args__7218__auto__.push(arguments[i__7212__auto___13256]);
      var G__13257 = i__7212__auto___13256 + 1;
      i__7212__auto___13256 = G__13257;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return no.en.core.url_encode.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
no.en.core.url_encode.cljs$core$IFn$_invoke$arity$variadic = function(s, p__13253) {
  var vec__13254 = p__13253;
  var encoding = cljs.core.nth.call(null, vec__13254, 0, null);
  if (cljs.core.truth_(s)) {
    return clojure.string.replace.call(null, encodeURIComponent([cljs.core.str(s)].join("")), "*", "%2A");
  } else {
    return null;
  }
};
no.en.core.url_encode.cljs$lang$maxFixedArity = 1;
no.en.core.url_encode.cljs$lang$applyTo = function(seq13251) {
  var G__13252 = cljs.core.first.call(null, seq13251);
  var seq13251__$1 = cljs.core.next.call(null, seq13251);
  return no.en.core.url_encode.cljs$core$IFn$_invoke$arity$variadic(G__13252, seq13251__$1);
};
no.en.core.url_decode = function no$en$core$url_decode(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___13262 = arguments.length;
  var i__7212__auto___13263 = 0;
  while (true) {
    if (i__7212__auto___13263 < len__7211__auto___13262) {
      args__7218__auto__.push(arguments[i__7212__auto___13263]);
      var G__13264 = i__7212__auto___13263 + 1;
      i__7212__auto___13263 = G__13264;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return no.en.core.url_decode.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
no.en.core.url_decode.cljs$core$IFn$_invoke$arity$variadic = function(s, p__13260) {
  var vec__13261 = p__13260;
  var encoding = cljs.core.nth.call(null, vec__13261, 0, null);
  if (cljs.core.truth_(s)) {
    return decodeURIComponent(s);
  } else {
    return null;
  }
};
no.en.core.url_decode.cljs$lang$maxFixedArity = 1;
no.en.core.url_decode.cljs$lang$applyTo = function(seq13258) {
  var G__13259 = cljs.core.first.call(null, seq13258);
  var seq13258__$1 = cljs.core.next.call(null, seq13258);
  return no.en.core.url_decode.cljs$core$IFn$_invoke$arity$variadic(G__13259, seq13258__$1);
};
no.en.core.pow = function no$en$core$pow(n, x) {
  return Math.pow(n, x);
};
no.en.core.byte_scale = cljs.core.PersistentHashMap.fromArrays(["T", "K", "G", "M", "Y", "Z", "E", "B", "P"], [no.en.core.pow.call(null, 1024, 4), no.en.core.pow.call(null, 1024, 1), no.en.core.pow.call(null, 1024, 3), no.en.core.pow.call(null, 1024, 2), no.en.core.pow.call(null, 1024, 8), no.en.core.pow.call(null, 1024, 7), no.en.core.pow.call(null, 1024, 6), no.en.core.pow.call(null, 1024, 0), no.en.core.pow.call(null, 1024, 5)]);
no.en.core.apply_unit = function no$en$core$apply_unit(number, unit) {
  if (typeof unit === "string") {
    var G__13267 = clojure.string.upper_case.call(null, unit);
    switch(G__13267) {
      default:
        var G__13268 = unit;
        switch(G__13268) {
          case "M":
            return number * 1E6;
            break;
          case "B":
            return number * 1E9;
            break;
          default:
            throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(unit)].join(""));;
        }
      ;
    }
  } else {
    return number;
  }
};
no.en.core.parse_number = function no$en$core$parse_number(s, parse_fn) {
  var temp__4655__auto__ = cljs.core.re_matches.call(null, /\s*([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)(M|B)?.*/, [cljs.core.str(s)].join(""));
  if (cljs.core.truth_(temp__4655__auto__)) {
    var matches = temp__4655__auto__;
    var number = parse_fn.call(null, cljs.core.nth.call(null, matches, 1));
    var unit = cljs.core.nth.call(null, matches, 3);
    if (cljs.core.not.call(null, isNaN(number))) {
      return no.en.core.apply_unit.call(null, number, unit);
    } else {
      return null;
    }
  } else {
    return null;
  }
};
no.en.core.parse_bytes = function no$en$core$parse_bytes(s) {
  var temp__4655__auto__ = cljs.core.re_matches.call(null, /\s*([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)(B|K|M|G|T|P|E|Z|Y)?.*/, [cljs.core.str(s)].join(""));
  if (cljs.core.truth_(temp__4655__auto__)) {
    var matches = temp__4655__auto__;
    var number = cljs.reader.read_string.call(null, cljs.core.nth.call(null, matches, 1));
    var unit = cljs.core.nth.call(null, matches, 3);
    return cljs.core.long$.call(null, cljs.core.long$.call(null, cljs.reader.read_string.call(null, [cljs.core.str(cljs.core.nth.call(null, matches, 1))].join(""))) * cljs.core.get.call(null, no.en.core.byte_scale, clojure.string.upper_case.call(null, function() {
      var or__6153__auto__ = unit;
      if (cljs.core.truth_(or__6153__auto__)) {
        return or__6153__auto__;
      } else {
        return "";
      }
    }()), 1));
  } else {
    return null;
  }
};
no.en.core.parse_integer = function no$en$core$parse_integer(s) {
  return no.en.core.parse_number.call(null, s, function(p1__13271_SHARP_) {
    return parseInt(p1__13271_SHARP_);
  });
};
no.en.core.parse_long = function no$en$core$parse_long(s) {
  return no.en.core.parse_number.call(null, s, function(p1__13272_SHARP_) {
    return parseInt(p1__13272_SHARP_);
  });
};
no.en.core.parse_double = function no$en$core$parse_double(s) {
  return no.en.core.parse_number.call(null, s, function(p1__13273_SHARP_) {
    return parseFloat(p1__13273_SHARP_);
  });
};
no.en.core.parse_float = function no$en$core$parse_float(s) {
  return no.en.core.parse_number.call(null, s, function(p1__13274_SHARP_) {
    return parseFloat(p1__13274_SHARP_);
  });
};
no.en.core.format_query_params = function no$en$core$format_query_params(m) {
  var params = clojure.string.join.call(null, "\x26", cljs.core.map.call(null, function(p1__13277_SHARP_) {
    return clojure.string.join.call(null, "\x3d", p1__13277_SHARP_);
  }, cljs.core.map.call(null, function(p1__13276_SHARP_) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [no.en.core.url_encode.call(null, cljs.core.name.call(null, cljs.core.first.call(null, p1__13276_SHARP_))), no.en.core.url_encode.call(null, cljs.core.second.call(null, p1__13276_SHARP_))], null);
  }, cljs.core.remove.call(null, function(p1__13275_SHARP_) {
    return clojure.string.blank_QMARK_.call(null, [cljs.core.str(cljs.core.second.call(null, p1__13275_SHARP_))].join(""));
  }, cljs.core.sort_by.call(null, cljs.core.first, cljs.core.seq.call(null, m))))));
  if (!clojure.string.blank_QMARK_.call(null, params)) {
    return params;
  } else {
    return null;
  }
};
no.en.core.format_url = function no$en$core$format_url(m) {
  if (!cljs.core.empty_QMARK_.call(null, m)) {
    var query_params = (new cljs.core.Keyword(null, "query-params", "query-params", 900640534)).cljs$core$IFn$_invoke$arity$1(m);
    return [cljs.core.str(cljs.core.truth_((new cljs.core.Keyword(null, "scheme", "scheme", 90199613)).cljs$core$IFn$_invoke$arity$1(m)) ? [cljs.core.str(cljs.core.name.call(null, (new cljs.core.Keyword(null, "scheme", "scheme", 90199613)).cljs$core$IFn$_invoke$arity$1(m))), cljs.core.str("://")].join("") : null), cljs.core.str(function() {
      var map__13280 = m;
      var map__13280__$1 = (!(map__13280 == null) ? map__13280.cljs$lang$protocol_mask$partition0$ & 64 || map__13280.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13280) : map__13280;
      var user = cljs.core.get.call(null, map__13280__$1, new cljs.core.Keyword(null, "user", "user", 1532431356));
      var password = cljs.core.get.call(null, map__13280__$1, new cljs.core.Keyword(null, "password", "password", 417022471));
      if (cljs.core.truth_(user)) {
        return [cljs.core.str(cljs.core.truth_(user) ? user : null), cljs.core.str(cljs.core.truth_(password) ? [cljs.core.str(":"), cljs.core.str(password)].join("") : null), cljs.core.str("@")].join("");
      } else {
        return null;
      }
    }()), cljs.core.str((new cljs.core.Keyword(null, "server-name", "server-name", -1012104295)).cljs$core$IFn$_invoke$arity$1(m)), cljs.core.str(function() {
      var temp__4655__auto__ = (new cljs.core.Keyword(null, "server-port", "server-port", 663745648)).cljs$core$IFn$_invoke$arity$1(m);
      if (cljs.core.truth_(temp__4655__auto__)) {
        var port = temp__4655__auto__;
        if (!cljs.core._EQ_.call(null, port, no.en.core.port_number.call(null, (new cljs.core.Keyword(null, "scheme", "scheme", 90199613)).cljs$core$IFn$_invoke$arity$1(m)))) {
          return [cljs.core.str(":"), cljs.core.str(port)].join("");
        } else {
          return null;
        }
      } else {
        return null;
      }
    }()), cljs.core.str((new cljs.core.Keyword(null, "uri", "uri", -774711847)).cljs$core$IFn$_invoke$arity$1(m) == null && !cljs.core.empty_QMARK_.call(null, query_params) ? "/" : (new cljs.core.Keyword(null, "uri", "uri", -774711847)).cljs$core$IFn$_invoke$arity$1(m)), cljs.core.str(!cljs.core.empty_QMARK_.call(null, query_params) ? [cljs.core.str("?"), cljs.core.str(no.en.core.format_query_params.call(null, query_params))].join("") : null), cljs.core.str(!clojure.string.blank_QMARK_.call(null, 
    (new cljs.core.Keyword(null, "fragment", "fragment", 826775688)).cljs$core$IFn$_invoke$arity$1(m)) ? [cljs.core.str("#"), cljs.core.str((new cljs.core.Keyword(null, "fragment", "fragment", 826775688)).cljs$core$IFn$_invoke$arity$1(m))].join("") : null)].join("");
  } else {
    return null;
  }
};
no.en.core.parse_percent = function no$en$core$parse_percent(s) {
  return no.en.core.parse_double.call(null, clojure.string.replace.call(null, s, "%", ""));
};
no.en.core.pattern_quote = function no$en$core$pattern_quote(s) {
  return clojure.string.replace.call(null, cljs.core.name.call(null, s), /([\[\]\^\$\|\(\)\\\+\*\?\{\}\=\!.])/, "\\\\$1");
};
no.en.core.separator = function no$en$core$separator(s) {
  var temp__4655__auto__ = cljs.core.re_matches.call(null, /([a-z0-9_-]+)([^a-z0-9_-]+).*/i, s);
  if (cljs.core.truth_(temp__4655__auto__)) {
    var matches = temp__4655__auto__;
    return cljs.core.nth.call(null, matches, 2);
  } else {
    return null;
  }
};
no.en.core.parse_query_params = function no$en$core$parse_query_params(s) {
  if (cljs.core.truth_(s)) {
    return cljs.core.apply.call(null, cljs.core.hash_map, cljs.core.mapcat.call(null, function(p1__13284_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, no.en.core.url_decode.call(null, cljs.core.first.call(null, p1__13284_SHARP_))), no.en.core.url_decode.call(null, cljs.core.second.call(null, p1__13284_SHARP_))], null);
    }, cljs.core.filter.call(null, function(p1__13283_SHARP_) {
      return cljs.core._EQ_.call(null, 2, cljs.core.count.call(null, p1__13283_SHARP_));
    }, cljs.core.map.call(null, function(p1__13282_SHARP_) {
      return clojure.string.split.call(null, p1__13282_SHARP_, /=/);
    }, clojure.string.split.call(null, [cljs.core.str(s)].join(""), /&/)))));
  } else {
    return null;
  }
};
no.en.core.parse_url = function no$en$core$parse_url(s) {
  var temp__4655__auto__ = cljs.core.re_matches.call(null, no.en.core.url_regex, [cljs.core.str(s)].join(""));
  if (cljs.core.truth_(temp__4655__auto__)) {
    var matches = temp__4655__auto__;
    var scheme = cljs.core.keyword.call(null, cljs.core.nth.call(null, matches, 1));
    return no.en.core.compact_map.call(null, cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "password", "password", 417022471), new cljs.core.Keyword(null, "fragment", "fragment", 826775688), new cljs.core.Keyword(null, "server-port", "server-port", 663745648), new cljs.core.Keyword(null, "query-params", "query-params", 900640534), new cljs.core.Keyword(null, "uri", "uri", -774711847), new cljs.core.Keyword(null, "server-name", "server-name", -1012104295), new cljs.core.Keyword(null, 
    "query-string", "query-string", -1018845061), new cljs.core.Keyword(null, "user", "user", 1532431356), new cljs.core.Keyword(null, "scheme", "scheme", 90199613)], [cljs.core.nth.call(null, matches, 4), cljs.core.nth.call(null, matches, 14), function() {
      var or__6153__auto__ = no.en.core.parse_integer.call(null, cljs.core.nth.call(null, matches, 8));
      if (cljs.core.truth_(or__6153__auto__)) {
        return or__6153__auto__;
      } else {
        return no.en.core.port_number.call(null, scheme);
      }
    }(), no.en.core.parse_query_params.call(null, cljs.core.nth.call(null, matches, 12)), cljs.core.nth.call(null, matches, 10), cljs.core.nth.call(null, matches, 6), cljs.core.nth.call(null, matches, 12), cljs.core.nth.call(null, matches, 3), scheme]));
  } else {
    return null;
  }
};
no.en.core.with_retries_STAR_ = function no$en$core$with_retries_STAR_(n, thunk) {
  var n__$1 = n;
  while (true) {
    var temp__4655__auto__ = function() {
      try {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [thunk.call(null)], null);
      } catch (e13286) {
        if (e13286 instanceof Error) {
          var e = e13286;
          if (n__$1 === 0) {
            throw e;
          } else {
            return null;
          }
        } else {
          throw e13286;
        }
      }
    }();
    if (cljs.core.truth_(temp__4655__auto__)) {
      var result = temp__4655__auto__;
      return result.call(null, 0);
    } else {
      var G__13287 = n__$1 - 1;
      n__$1 = G__13287;
      continue;
    }
    break;
  }
};
no.en.core.with_retries = function no$en$core$with_retries(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___13292 = arguments.length;
  var i__7212__auto___13293 = 0;
  while (true) {
    if (i__7212__auto___13293 < len__7211__auto___13292) {
      args__7218__auto__.push(arguments[i__7212__auto___13293]);
      var G__13294 = i__7212__auto___13293 + 1;
      i__7212__auto___13293 = G__13294;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 3 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(3), 0) : null;
  return no.en.core.with_retries.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__7219__auto__);
};
no.en.core.with_retries.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, n, body) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("no.en.core", "with-retries*", "no.en.core/with-retries*", 172357687, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, n), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", 
  "fn", "cljs.core/fn", -1065745098, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null))))), body)))))));
};
no.en.core.with_retries.cljs$lang$maxFixedArity = 3;
no.en.core.with_retries.cljs$lang$applyTo = function(seq13288) {
  var G__13289 = cljs.core.first.call(null, seq13288);
  var seq13288__$1 = cljs.core.next.call(null, seq13288);
  var G__13290 = cljs.core.first.call(null, seq13288__$1);
  var seq13288__$2 = cljs.core.next.call(null, seq13288__$1);
  var G__13291 = cljs.core.first.call(null, seq13288__$2);
  var seq13288__$3 = cljs.core.next.call(null, seq13288__$2);
  return no.en.core.with_retries.cljs$core$IFn$_invoke$arity$variadic(G__13289, G__13290, G__13291, seq13288__$3);
};
no.en.core.with_retries.cljs$lang$macro = true;
no.en.core.editable_QMARK_ = function no$en$core$editable_QMARK_(coll) {
  if (!(coll == null)) {
    if (false || coll.cljs$core$IEditableCollection$) {
      return true;
    } else {
      if (!coll.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEditableCollection, coll);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEditableCollection, coll);
  }
};
no.en.core.reduce_map = function no$en$core$reduce_map(f, coll) {
  if (cljs.core.truth_(no.en.core.editable_QMARK_.call(null, coll))) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce_kv.call(null, f.call(null, cljs.core.assoc_BANG_), cljs.core.transient$.call(null, cljs.core.empty.call(null, coll)), coll));
  } else {
    return cljs.core.reduce_kv.call(null, f.call(null, cljs.core.assoc), cljs.core.empty.call(null, coll), coll);
  }
};
no.en.core.map_keys = function no$en$core$map_keys(f, coll) {
  return no.en.core.reduce_map.call(null, function(xf) {
    return function(m, k, v) {
      return xf.call(null, m, f.call(null, k), v);
    };
  }, coll);
};
no.en.core.map_vals = function no$en$core$map_vals(f, coll) {
  return no.en.core.reduce_map.call(null, function(xf) {
    return function(m, k, v) {
      return xf.call(null, m, k, f.call(null, v));
    };
  }, coll);
};
no.en.core.deep_merge = function no$en$core$deep_merge(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___13298 = arguments.length;
  var i__7212__auto___13299 = 0;
  while (true) {
    if (i__7212__auto___13299 < len__7211__auto___13298) {
      args__7218__auto__.push(arguments[i__7212__auto___13299]);
      var G__13300 = i__7212__auto___13299 + 1;
      i__7212__auto___13299 = G__13300;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return no.en.core.deep_merge.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
no.en.core.deep_merge.cljs$core$IFn$_invoke$arity$variadic = function(maps) {
  if (cljs.core.every_QMARK_.call(null, cljs.core.map_QMARK_, maps)) {
    return cljs.core.apply.call(null, cljs.core.merge_with, no.en.core.deep_merge, maps);
  } else {
    return cljs.core.last.call(null, maps);
  }
};
no.en.core.deep_merge.cljs$lang$maxFixedArity = 0;
no.en.core.deep_merge.cljs$lang$applyTo = function(seq13297) {
  return no.en.core.deep_merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq13297));
};
no.en.core.deep_merge_with = function no$en$core$deep_merge_with(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___13303 = arguments.length;
  var i__7212__auto___13304 = 0;
  while (true) {
    if (i__7212__auto___13304 < len__7211__auto___13303) {
      args__7218__auto__.push(arguments[i__7212__auto___13304]);
      var G__13305 = i__7212__auto___13304 + 1;
      i__7212__auto___13304 = G__13305;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return no.en.core.deep_merge_with.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
no.en.core.deep_merge_with.cljs$core$IFn$_invoke$arity$variadic = function(f, maps) {
  return cljs.core.apply.call(null, function() {
    var no$en$core$m__delegate = function(maps__$1) {
      if (cljs.core.every_QMARK_.call(null, cljs.core.map_QMARK_, maps__$1)) {
        return cljs.core.apply.call(null, cljs.core.merge_with, no$en$core$m, maps__$1);
      } else {
        return cljs.core.apply.call(null, f, maps__$1);
      }
    };
    var no$en$core$m = function(var_args) {
      var maps__$1 = null;
      if (arguments.length > 0) {
        var G__13306__i = 0, G__13306__a = new Array(arguments.length - 0);
        while (G__13306__i < G__13306__a.length) {
          G__13306__a[G__13306__i] = arguments[G__13306__i + 0];
          ++G__13306__i;
        }
        maps__$1 = new cljs.core.IndexedSeq(G__13306__a, 0);
      }
      return no$en$core$m__delegate.call(this, maps__$1);
    };
    no$en$core$m.cljs$lang$maxFixedArity = 0;
    no$en$core$m.cljs$lang$applyTo = function(arglist__13307) {
      var maps__$1 = cljs.core.seq(arglist__13307);
      return no$en$core$m__delegate(maps__$1);
    };
    no$en$core$m.cljs$core$IFn$_invoke$arity$variadic = no$en$core$m__delegate;
    return no$en$core$m;
  }(), maps);
};
no.en.core.deep_merge_with.cljs$lang$maxFixedArity = 1;
no.en.core.deep_merge_with.cljs$lang$applyTo = function(seq13301) {
  var G__13302 = cljs.core.first.call(null, seq13301);
  var seq13301__$1 = cljs.core.next.call(null, seq13301);
  return no.en.core.deep_merge_with.cljs$core$IFn$_invoke$arity$variadic(G__13302, seq13301__$1);
};
goog.provide("com.cognitect.transit.util");
goog.require("goog.object");
goog.scope(function() {
  var util = com.cognitect.transit.util, gobject = goog.object;
  if (typeof Object.keys != "undefined") {
    util.objectKeys = function(obj) {
      return Object.keys(obj);
    };
  } else {
    util.objectKeys = function(obj) {
      return gobject.getKeys(obj);
    };
  }
  if (typeof Array.isArray != "undefined") {
    util.isArray = function(obj) {
      return Array.isArray(obj);
    };
  } else {
    util.isArray = function(obj) {
      return goog.typeOf(obj) === "array";
    };
  }
  util.chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\x3d";
  util.randInt = function(ub) {
    return Math.round(Math.random() * ub);
  };
  util.randHex = function() {
    return util.randInt(15).toString(16);
  };
  util.randomUUID = function() {
    var rhex = (8 | 3 & util.randInt(14)).toString(16), ret = util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + "4" + util.randHex() + util.randHex() + util.randHex() + "-" + rhex + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + 
    util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex();
    return ret;
  };
  util.btoa = function(input) {
    if (typeof btoa != "undefined") {
      return btoa(input);
    } else {
      var str = String(input);
      for (var block, charCode, idx = 0, map = util.chars, output = "";str.charAt(idx | 0) || (map = "\x3d", idx % 1);output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
        charCode = str.charCodeAt(idx += 3 / 4);
        if (charCode > 255) {
          throw new Error("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
        }
        block = block << 8 | charCode;
      }
      return output;
    }
  };
  util.atob = function(input) {
    if (typeof atob != "undefined") {
      return atob(input);
    } else {
      var str = String(input).replace(/=+$/, "");
      if (str.length % 4 == 1) {
        throw new Error("'atob' failed: The string to be decoded is not correctly encoded.");
      }
      for (var bc = 0, bs, buffer, idx = 0, output = "";buffer = str.charAt(idx++);~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
        buffer = util.chars.indexOf(buffer);
      }
      return output;
    }
  };
  util.Uint8ToBase64 = function(u8Arr) {
    var CHUNK_SIZE = 32768, index = 0, length = u8Arr.length, result = "", slice = null;
    while (index < length) {
      slice = u8Arr.subarray(index, Math.min(index + CHUNK_SIZE, length));
      result += String.fromCharCode.apply(null, slice);
      index += CHUNK_SIZE;
    }
    return util.btoa(result);
  };
  util.Base64ToUint8 = function(base64) {
    var binary_string = util.atob(base64), len = binary_string.length, bytes = new Uint8Array(len);
    for (var i = 0;i < len;i++) {
      var ascii = binary_string.charCodeAt(i);
      bytes[i] = ascii;
    }
    return bytes;
  };
});
goog.provide("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.util");
goog.scope(function() {
  var eq = com.cognitect.transit.eq, util = com.cognitect.transit.util;
  eq.hashCodeProperty = "transit$hashCode$";
  eq.hashCodeCounter = 1;
  eq.equals = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      if (x === y) {
        return true;
      } else {
        if (typeof x === "object") {
          if (util.isArray(x)) {
            if (util.isArray(y)) {
              if (x.length === y.length) {
                for (var i = 0;i < x.length;i++) {
                  if (!eq.equals(x[i], y[i])) {
                    return false;
                  }
                }
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          } else {
            if (x.com$cognitect$transit$equals) {
              return x.com$cognitect$transit$equals(y);
            } else {
              if (y != null && typeof y === "object") {
                if (y.com$cognitect$transit$equals) {
                  return y.com$cognitect$transit$equals(x);
                } else {
                  var xklen = 0, yklen = util.objectKeys(y).length;
                  for (var p in x) {
                    if (!x.hasOwnProperty(p)) {
                      continue;
                    }
                    xklen++;
                    if (!y.hasOwnProperty(p)) {
                      return false;
                    } else {
                      if (!eq.equals(x[p], y[p])) {
                        return false;
                      }
                    }
                  }
                  return xklen === yklen;
                }
              } else {
                return false;
              }
            }
          }
        } else {
          return false;
        }
      }
    }
  };
  eq.hashCombine = function(seed, hash) {
    return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
  };
  eq.stringCodeCache = {};
  eq.stringCodeCacheSize = 0;
  eq.STR_CACHE_MAX = 256;
  eq.hashString = function(str) {
    var cached = eq.stringCodeCache[str];
    if (cached != null) {
      return cached;
    }
    var code = 0;
    for (var i = 0;i < str.length;++i) {
      code = 31 * code + str.charCodeAt(i);
      code %= 4294967296;
    }
    eq.stringCodeCacheSize++;
    if (eq.stringCodeCacheSize >= eq.STR_CACHE_MAX) {
      eq.stringCodeCache = {};
      eq.stringCodeCacheSize = 1;
    }
    eq.stringCodeCache[str] = code;
    return code;
  };
  eq.hashMapLike = function(m) {
    var code = 0;
    if (m.forEach != null) {
      m.forEach(function(val, key, m) {
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      });
    } else {
      var keys = util.objectKeys(m);
      for (var i = 0;i < keys.length;i++) {
        var key = keys[i];
        var val = m[key];
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      }
    }
    return code;
  };
  eq.hashArrayLike = function(arr) {
    var code = 0;
    if (util.isArray(arr)) {
      for (var i = 0;i < arr.length;i++) {
        code = eq.hashCombine(code, eq.hashCode(arr[i]));
      }
    } else {
      if (arr.forEach) {
        arr.forEach(function(x, i) {
          code = eq.hashCombine(code, eq.hashCode(x));
        });
      }
    }
    return code;
  };
  eq.hashCode = function(x) {
    if (x == null) {
      return 0;
    } else {
      switch(typeof x) {
        case "number":
          return x;
          break;
        case "boolean":
          return x === true ? 1 : 0;
          break;
        case "string":
          return eq.hashString(x);
          break;
        case "function":
          var code = x[eq.hashCodeProperty];
          if (code) {
            return code;
          } else {
            code = eq.hashCodeCounter;
            if (typeof Object.defineProperty != "undefined") {
              Object.defineProperty(x, eq.hashCodeProperty, {value:code, enumerable:false});
            } else {
              x[eq.hashCodeProperty] = code;
            }
            eq.hashCodeCounter++;
            return code;
          }
          break;
        default:
          if (x instanceof Date) {
            return x.valueOf();
          } else {
            if (util.isArray(x)) {
              return eq.hashArrayLike(x);
            }
          }
          if (x.com$cognitect$transit$hashCode) {
            return x.com$cognitect$transit$hashCode();
          } else {
            return eq.hashMapLike(x);
          }
          break;
      }
    }
  };
  eq.extendToEQ = function(obj, opts) {
    obj.com$cognitect$transit$hashCode = opts["hashCode"];
    obj.com$cognitect$transit$equals = opts["equals"];
    return obj;
  };
});
goog.provide("goog.math.Long");
goog.math.Long = function(low, high) {
  this.low_ = low | 0;
  this.high_ = high | 0;
};
goog.math.Long.IntCache_ = {};
goog.math.Long.valueCache_ = {};
goog.math.Long.fromInt = function(value) {
  if (-128 <= value && value < 128) {
    var cachedObj = goog.math.Long.IntCache_[value];
    if (cachedObj) {
      return cachedObj;
    }
  }
  var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
  if (-128 <= value && value < 128) {
    goog.math.Long.IntCache_[value] = obj;
  }
  return obj;
};
goog.math.Long.fromNumber = function(value) {
  if (isNaN(value) || !isFinite(value)) {
    return goog.math.Long.getZero();
  } else {
    if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.getMinValue();
    } else {
      if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
        return goog.math.Long.getMaxValue();
      } else {
        if (value < 0) {
          return goog.math.Long.fromNumber(-value).negate();
        } else {
          return new goog.math.Long(value % goog.math.Long.TWO_PWR_32_DBL_ | 0, value / goog.math.Long.TWO_PWR_32_DBL_ | 0);
        }
      }
    }
  }
};
goog.math.Long.fromBits = function(lowBits, highBits) {
  return new goog.math.Long(lowBits, highBits);
};
goog.math.Long.fromString = function(str, opt_radix) {
  if (str.length == 0) {
    throw Error("number format error: empty string");
  }
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (str.charAt(0) == "-") {
    return goog.math.Long.fromString(str.substring(1), radix).negate();
  } else {
    if (str.indexOf("-") >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
  var result = goog.math.Long.getZero();
  for (var i = 0;i < str.length;i += 8) {
    var size = Math.min(8, str.length - i);
    var value = parseInt(str.substring(i, i + size), radix);
    if (size < 8) {
      var power = goog.math.Long.fromNumber(Math.pow(radix, size));
      result = result.multiply(power).add(goog.math.Long.fromNumber(value));
    } else {
      result = result.multiply(radixToPower);
      result = result.add(goog.math.Long.fromNumber(value));
    }
  }
  return result;
};
goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
goog.math.Long.getTwoPwr24DBL_ = 1 << 24;
goog.math.Long.TWO_PWR_32_DBL_ = goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_31_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ / 2;
goog.math.Long.TWO_PWR_48_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_64_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
goog.math.Long.TWO_PWR_63_DBL_ = goog.math.Long.TWO_PWR_64_DBL_ / 2;
goog.math.Long.getZero = function() {
  var idZero = goog.math.Long.ValueCacheId_.ZERO;
  if (!goog.math.Long.valueCache_[idZero]) {
    goog.math.Long.valueCache_[idZero] = goog.math.Long.fromInt(0);
  }
  return goog.math.Long.valueCache_[idZero];
};
goog.math.Long.getOne = function() {
  var idOne = goog.math.Long.ValueCacheId_.ONE;
  if (!goog.math.Long.valueCache_[idOne]) {
    goog.math.Long.valueCache_[idOne] = goog.math.Long.fromInt(1);
  }
  return goog.math.Long.valueCache_[idOne];
};
goog.math.Long.getNegOne = function() {
  var idNegOne = goog.math.Long.ValueCacheId_.NEG_ONE;
  if (!goog.math.Long.valueCache_[idNegOne]) {
    goog.math.Long.valueCache_[idNegOne] = goog.math.Long.fromInt(-1);
  }
  return goog.math.Long.valueCache_[idNegOne];
};
goog.math.Long.getMaxValue = function() {
  var idMaxValue = goog.math.Long.ValueCacheId_.MAX_VALUE;
  if (!goog.math.Long.valueCache_[idMaxValue]) {
    goog.math.Long.valueCache_[idMaxValue] = goog.math.Long.fromBits(4294967295 | 0, 2147483647 | 0);
  }
  return goog.math.Long.valueCache_[idMaxValue];
};
goog.math.Long.getMinValue = function() {
  var idMinValue = goog.math.Long.ValueCacheId_.MIN_VALUE;
  if (!goog.math.Long.valueCache_[idMinValue]) {
    goog.math.Long.valueCache_[idMinValue] = goog.math.Long.fromBits(0, 2147483648 | 0);
  }
  return goog.math.Long.valueCache_[idMinValue];
};
goog.math.Long.getTwoPwr24 = function() {
  var idTwoPwr24 = goog.math.Long.ValueCacheId_.TWO_PWR_24;
  if (!goog.math.Long.valueCache_[idTwoPwr24]) {
    goog.math.Long.valueCache_[idTwoPwr24] = goog.math.Long.fromInt(1 << 24);
  }
  return goog.math.Long.valueCache_[idTwoPwr24];
};
goog.math.Long.prototype.toInt = function() {
  return this.low_;
};
goog.math.Long.prototype.toNumber = function() {
  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
};
goog.math.Long.prototype.toString = function(opt_radix) {
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (this.isZero()) {
    return "0";
  }
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.getMinValue())) {
      var radixLong = goog.math.Long.fromNumber(radix);
      var div = this.div(radixLong);
      var rem = div.multiply(radixLong).subtract(this);
      return div.toString(radix) + rem.toInt().toString(radix);
    } else {
      return "-" + this.negate().toString(radix);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
  var rem = this;
  var result = "";
  while (true) {
    var remDiv = rem.div(radixToPower);
    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0;
    var digits = intval.toString(radix);
    rem = remDiv;
    if (rem.isZero()) {
      return digits + result;
    } else {
      while (digits.length < 6) {
        digits = "0" + digits;
      }
      result = "" + digits + result;
    }
  }
};
goog.math.Long.prototype.getHighBits = function() {
  return this.high_;
};
goog.math.Long.prototype.getLowBits = function() {
  return this.low_;
};
goog.math.Long.prototype.getLowBitsUnsigned = function() {
  return this.low_ >= 0 ? this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
};
goog.math.Long.prototype.getNumBitsAbs = function() {
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.getMinValue())) {
      return 64;
    } else {
      return this.negate().getNumBitsAbs();
    }
  } else {
    var val = this.high_ != 0 ? this.high_ : this.low_;
    for (var bit = 31;bit > 0;bit--) {
      if ((val & 1 << bit) != 0) {
        break;
      }
    }
    return this.high_ != 0 ? bit + 33 : bit + 1;
  }
};
goog.math.Long.prototype.isZero = function() {
  return this.high_ == 0 && this.low_ == 0;
};
goog.math.Long.prototype.isNegative = function() {
  return this.high_ < 0;
};
goog.math.Long.prototype.isOdd = function() {
  return (this.low_ & 1) == 1;
};
goog.math.Long.prototype.equals = function(other) {
  return this.high_ == other.high_ && this.low_ == other.low_;
};
goog.math.Long.prototype.notEquals = function(other) {
  return this.high_ != other.high_ || this.low_ != other.low_;
};
goog.math.Long.prototype.lessThan = function(other) {
  return this.compare(other) < 0;
};
goog.math.Long.prototype.lessThanOrEqual = function(other) {
  return this.compare(other) <= 0;
};
goog.math.Long.prototype.greaterThan = function(other) {
  return this.compare(other) > 0;
};
goog.math.Long.prototype.greaterThanOrEqual = function(other) {
  return this.compare(other) >= 0;
};
goog.math.Long.prototype.compare = function(other) {
  if (this.equals(other)) {
    return 0;
  }
  var thisNeg = this.isNegative();
  var otherNeg = other.isNegative();
  if (thisNeg && !otherNeg) {
    return -1;
  }
  if (!thisNeg && otherNeg) {
    return 1;
  }
  if (this.subtract(other).isNegative()) {
    return -1;
  } else {
    return 1;
  }
};
goog.math.Long.prototype.negate = function() {
  if (this.equals(goog.math.Long.getMinValue())) {
    return goog.math.Long.getMinValue();
  } else {
    return this.not().add(goog.math.Long.getOne());
  }
};
goog.math.Long.prototype.add = function(other) {
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 + b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 + b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 + b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 + b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.subtract = function(other) {
  return this.add(other.negate());
};
goog.math.Long.prototype.multiply = function(other) {
  if (this.isZero()) {
    return goog.math.Long.getZero();
  } else {
    if (other.isZero()) {
      return goog.math.Long.getZero();
    }
  }
  if (this.equals(goog.math.Long.getMinValue())) {
    return other.isOdd() ? goog.math.Long.getMinValue() : goog.math.Long.getZero();
  } else {
    if (other.equals(goog.math.Long.getMinValue())) {
      return this.isOdd() ? goog.math.Long.getMinValue() : goog.math.Long.getZero();
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().multiply(other.negate());
    } else {
      return this.negate().multiply(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
  }
  if (this.lessThan(goog.math.Long.getTwoPwr24()) && other.lessThan(goog.math.Long.getTwoPwr24())) {
    return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
  }
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 * b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 * b00;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c16 += a00 * b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 * b00;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a16 * b16;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a00 * b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.div = function(other) {
  if (other.isZero()) {
    throw Error("division by zero");
  } else {
    if (this.isZero()) {
      return goog.math.Long.getZero();
    }
  }
  if (this.equals(goog.math.Long.getMinValue())) {
    if (other.equals(goog.math.Long.getOne()) || other.equals(goog.math.Long.getNegOne())) {
      return goog.math.Long.getMinValue();
    } else {
      if (other.equals(goog.math.Long.getMinValue())) {
        return goog.math.Long.getOne();
      } else {
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.getZero())) {
          return other.isNegative() ? goog.math.Long.getOne() : goog.math.Long.getNegOne();
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    }
  } else {
    if (other.equals(goog.math.Long.getMinValue())) {
      return goog.math.Long.getZero();
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().div(other.negate());
    } else {
      return this.negate().div(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
  }
  var res = goog.math.Long.getZero();
  var rem = this;
  while (rem.greaterThanOrEqual(other)) {
    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
    var approxRes = goog.math.Long.fromNumber(approx);
    var approxRem = approxRes.multiply(other);
    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
      approx -= delta;
      approxRes = goog.math.Long.fromNumber(approx);
      approxRem = approxRes.multiply(other);
    }
    if (approxRes.isZero()) {
      approxRes = goog.math.Long.getOne();
    }
    res = res.add(approxRes);
    rem = rem.subtract(approxRem);
  }
  return res;
};
goog.math.Long.prototype.modulo = function(other) {
  return this.subtract(this.div(other).multiply(other));
};
goog.math.Long.prototype.not = function() {
  return goog.math.Long.fromBits(~this.low_, ~this.high_);
};
goog.math.Long.prototype.and = function(other) {
  return goog.math.Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);
};
goog.math.Long.prototype.or = function(other) {
  return goog.math.Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);
};
goog.math.Long.prototype.xor = function(other) {
  return goog.math.Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
};
goog.math.Long.prototype.shiftLeft = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var low = this.low_;
    if (numBits < 32) {
      var high = this.high_;
      return goog.math.Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);
    } else {
      return goog.math.Long.fromBits(0, low << numBits - 32);
    }
  }
};
goog.math.Long.prototype.shiftRight = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);
    } else {
      return goog.math.Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);
    }
  }
};
goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);
    } else {
      if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> numBits - 32, 0);
      }
    }
  }
};
goog.math.Long.ValueCacheId_ = {MAX_VALUE:1, MIN_VALUE:2, ZERO:3, ONE:4, NEG_ONE:5, TWO_PWR_24:6};
goog.provide("com.cognitect.transit.types");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.eq");
goog.require("goog.math.Long");
goog.scope(function() {
  var types = com.cognitect.transit.types, util = com.cognitect.transit.util, eq = com.cognitect.transit.eq, Long = goog.math.Long;
  types.TaggedValue = function(tag, rep) {
    this.tag = tag;
    this.rep = rep;
    this.hashCode = -1;
  };
  types.TaggedValue.prototype.toString = function() {
    return "[TaggedValue: " + this.tag + ", " + this.rep + "]";
  };
  types.TaggedValue.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.TaggedValue.prototype["equiv"] = types.TaggedValue.prototype.equiv;
  types.TaggedValue.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TaggedValue) {
      return this.tag === other.tag && eq.equals(this.rep, other.rep);
    } else {
      return false;
    }
  };
  types.TaggedValue.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCombine(eq.hashCode(this.tag), eq.hashCode(this.rep));
    }
    return this.hashCode;
  };
  types.taggedValue = function(tag, rep) {
    return new types.TaggedValue(tag, rep);
  };
  types.isTaggedValue = function(x) {
    return x instanceof types.TaggedValue;
  };
  types.nullValue = function() {
    return null;
  };
  types.boolValue = function(s) {
    return s === "t";
  };
  types.MAX_INT = Long.fromString("9007199254740992");
  types.MIN_INT = Long.fromString("-9007199254740992");
  types.intValue = function(s) {
    if (typeof s === "number") {
      return s;
    } else {
      if (s instanceof Long) {
        return s;
      } else {
        var n = Long.fromString(s, 10);
        if (n.greaterThan(types.MAX_INT) || n.lessThan(types.MIN_INT)) {
          return n;
        } else {
          return n.toNumber();
        }
      }
    }
  };
  Long.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  Long.prototype["equiv"] = Long.prototype.equiv;
  Long.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof Long && this.equals(other);
  };
  Long.prototype.com$cognitect$transit$hashCode = function() {
    return this.toInt();
  };
  types.isInteger = function(x) {
    if (x instanceof Long) {
      return true;
    } else {
      return typeof x === "number" && !isNaN(x) && !(x === Infinity) && parseFloat(x) === parseInt(x);
    }
  };
  types.floatValue = function(s) {
    return parseFloat(s);
  };
  types.bigInteger = function(s) {
    return types.taggedValue("n", s);
  };
  types.isBigInteger = function(x) {
    return x instanceof types.TaggedValue && x.tag === "n";
  };
  types.bigDecimalValue = function(s) {
    return types.taggedValue("f", s);
  };
  types.isBigDecimal = function(x) {
    return x instanceof types.TaggedValue && x.tag === "f";
  };
  types.charValue = function(s) {
    return s;
  };
  types.Keyword = function(name) {
    this.name = name;
    this.hashCode = -1;
  };
  types.Keyword.prototype.toString = function() {
    return ":" + this.name;
  };
  types.Keyword.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Keyword.prototype["equiv"] = types.Keyword.prototype.equiv;
  types.Keyword.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Keyword && this.name == other.name;
  };
  types.Keyword.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.name);
    }
    return this.hashCode;
  };
  types.keyword = function(s) {
    return new types.Keyword(s);
  };
  types.isKeyword = function(x) {
    return x instanceof types.Keyword;
  };
  types.Symbol = function(name) {
    this.name = name;
    this.hashCode = -1;
  };
  types.Symbol.prototype.toString = function() {
    return "[Symbol: " + this.name + "]";
  };
  types.Symbol.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Symbol.prototype["equiv"] = types.Symbol.prototype.equiv;
  types.Symbol.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Symbol && this.name == other.name;
  };
  types.Symbol.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.name);
    }
    return this.hashCode;
  };
  types.symbol = function(s) {
    return new types.Symbol(s);
  };
  types.isSymbol = function(x) {
    return x instanceof types.Symbol;
  };
  types.hexFor = function(aLong, sidx, eidx) {
    var ret = "", eidx = eidx || sidx + 1;
    for (var i = sidx, shift = (7 - i) * 8, mask = Long.fromInt(255).shiftLeft(shift);i < eidx;i++, shift -= 8, mask = mask.shiftRightUnsigned(8)) {
      var s = aLong.and(mask).shiftRightUnsigned(shift).toString(16);
      if (s.length == 1) {
        s = "0" + s;
      }
      ret += s;
    }
    return ret;
  };
  types.UUID = function(high, low) {
    this.high = high;
    this.low = low;
    this.hashCode = -1;
  };
  types.UUID.prototype.getLeastSignificantBits = function() {
    return this.low;
  };
  types.UUID.prototype.getMostSignificantBits = function() {
    return this.high;
  };
  types.UUID.prototype.toString = function(s) {
    var s = "", hi64 = this.high, lo64 = this.low;
    s += types.hexFor(hi64, 0, 4) + "-";
    s += types.hexFor(hi64, 4, 6) + "-";
    s += types.hexFor(hi64, 6, 8) + "-";
    s += types.hexFor(lo64, 0, 2) + "-";
    s += types.hexFor(lo64, 2, 8);
    return s;
  };
  types.UUID.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.UUID.prototype["equiv"] = types.UUID.prototype.equiv;
  types.UUID.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.UUID && this.high.equals(other.high) && this.low.equals(other.low);
  };
  types.UUID.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.toString());
    }
    return this.hashCode;
  };
  types.UUIDfromString = function uuidFromString(s) {
    var s = s.replace(/-/g, ""), hi64 = null, lo64 = null, hi32 = 0, lo32 = 0, off = 24, i = 0;
    for (hi32 = 0, i = 0, off = 24;i < 8;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 8, off = 24;i < 16;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    hi64 = Long.fromBits(lo32, hi32);
    for (hi32 = 0, i = 16, off = 24;i < 24;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 24, off = 24;i < 32;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    lo64 = Long.fromBits(lo32, hi32);
    return new types.UUID(hi64, lo64);
  };
  types.uuid = function(s) {
    return types.UUIDfromString(s);
  };
  types.isUUID = function(x) {
    return x instanceof types.UUID;
  };
  types.date = function(s) {
    s = typeof s === "number" ? s : parseInt(s, 10);
    return new Date(s);
  };
  types.verboseDate = function(s) {
    return new Date(s);
  };
  Date.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof Date) {
      return this.valueOf() === other.valueOf();
    } else {
      return false;
    }
  };
  Date.prototype.com$cognitect$transit$hashCode = function() {
    return this.valueOf();
  };
  types.binary = function(str, decoder) {
    if ((!decoder || decoder.preferBuffers !== false) && typeof Buffer != "undefined") {
      return new Buffer(str, "base64");
    } else {
      if (typeof Uint8Array != "undefined") {
        return util.Base64ToUint8(str);
      } else {
        return types.taggedValue("b", str);
      }
    }
  };
  types.isBinary = function(x) {
    if (typeof Buffer != "undefined" && x instanceof Buffer) {
      return true;
    } else {
      if (typeof Uint8Array != "undefined" && x instanceof Uint8Array) {
        return true;
      } else {
        return x instanceof types.TaggedValue && x.tag === "b";
      }
    }
  };
  types.uri = function(s) {
    return types.taggedValue("r", s);
  };
  types.isURI = function(x) {
    return x instanceof types.TaggedValue && x.tag === "r";
  };
  types.KEYS = 0;
  types.VALUES = 1;
  types.ENTRIES = 2;
  types.TransitArrayMapIterator = function(entries, type) {
    this.entries = entries;
    this.type = type || types.KEYS;
    this.idx = 0;
  };
  types.TransitArrayMapIterator.prototype.next = function(map, type) {
    if (this.idx < this.entries.length) {
      var value = null;
      if (this.type === types.KEYS) {
        value = this.entries[this.idx];
      } else {
        if (this.type === types.VALUES) {
          value = this.entries[this.idx + 1];
        } else {
          value = [this.entries[this.idx], this.entries[this.idx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx += 2;
      return ret;
    } else {
      return {"value":null, "done":true};
    }
  };
  types.TransitArrayMapIterator.prototype["next"] = types.TransitArrayMapIterator.prototype.next;
  types.TransitMapIterator = function(map, type) {
    this.map = map;
    this.type = type || types.KEYS;
    this.keys = this.map.getKeys();
    this.idx = 0;
    this.bucket = null;
    this.bucketIdx = 0;
  };
  types.TransitMapIterator.prototype.next = function() {
    if (this.idx < this.map.size) {
      if (this.bucket == null || !(this.bucketIdx < this.bucket.length)) {
        this.bucket = this.map.map[this.keys[this.idx]];
        this.bucketIdx = 0;
      }
      var value = null;
      if (this.type === types.KEYS) {
        value = this.bucket[this.bucketIdx];
      } else {
        if (this.type === types.VALUES) {
          value = this.bucket[this.bucketIdx + 1];
        } else {
          value = [this.bucket[this.bucketIdx], this.bucket[this.bucketIdx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx++;
      this.bucketIdx += 2;
      return ret;
    } else {
      return {"value":null, "done":true};
    }
  };
  types.TransitMapIterator.prototype["next"] = types.TransitMapIterator.prototype.next;
  types.mapEquals = function(me, you) {
    if ((you instanceof types.TransitMap || you instanceof types.TransitArrayMap) && me.size === you.size) {
      for (var code in me.map) {
        var bucket = me.map[code];
        for (var j = 0;j < bucket.length;j += 2) {
          if (!eq.equals(bucket[j + 1], you.get(bucket[j]))) {
            return false;
          }
        }
      }
      return true;
    } else {
      if (you != null && typeof you === "object") {
        var ks = util.objectKeys(you), kslen = ks.length;
        if (me.size === kslen) {
          for (var i = 0;i < kslen;i++) {
            var k = ks[i];
            if (!me.has(k) || !eq.equals(you[k], me.get(k))) {
              return false;
            }
          }
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  };
  types.SMALL_ARRAY_MAP_THRESHOLD = 8;
  types.ARRAY_MAP_THRESHOLD = 32;
  types.ARRAY_MAP_ACCESS_THRESHOLD = 32;
  types.TransitArrayMap = function(entries) {
    this._entries = entries;
    this.backingMap = null;
    this.hashCode = -1;
    this.size = entries.length / 2;
    this.accesses = 0;
  };
  types.TransitArrayMap.prototype.toString = function() {
    return "[TransitArrayMap]";
  };
  types.TransitArrayMap.prototype.convert = function() {
    if (this.backingMap) {
      throw Error("Invalid operation, already converted");
    }
    if (this.size < types.SMALL_ARRAY_MAP_THRESHOLD) {
      return false;
    }
    this.accesses++;
    if (this.accesses > types.ARRAY_MAP_ACCESS_THRESHOLD) {
      this.backingMap = types.map(this._entries, false, true);
      this._entries = [];
      return true;
    } else {
      return false;
    }
  };
  types.TransitArrayMap.prototype.clear = function() {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.clear();
      this.size = 0;
    } else {
      this._entries = [];
      this.size = 0;
    }
  };
  types.TransitArrayMap.prototype["clear"] = types.TransitArrayMap.prototype.clear;
  types.TransitArrayMap.prototype.keys = function() {
    if (this.backingMap) {
      return this.backingMap.keys();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.KEYS);
    }
  };
  types.TransitArrayMap.prototype["keys"] = types.TransitArrayMap.prototype.keys;
  types.TransitArrayMap.prototype.keySet = function() {
    if (this.backingMap) {
      return this.backingMap.keySet();
    } else {
      var ret = [];
      for (var i = 0, j = 0;j < this._entries.length;i++, j += 2) {
        ret[i] = this._entries[j];
      }
      return ret;
    }
  };
  types.TransitArrayMap.prototype["keySet"] = types.TransitArrayMap.prototype.keySet;
  types.TransitArrayMap.prototype.entries = function() {
    if (this.backingMap) {
      return this.backingMap.entries();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.ENTRIES);
    }
  };
  types.TransitArrayMap.prototype["entries"] = types.TransitArrayMap.prototype.entries;
  types.TransitArrayMap.prototype.values = function() {
    if (this.backingMap) {
      return this.backingMap.values();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.VALUES);
    }
  };
  types.TransitArrayMap.prototype["values"] = types.TransitArrayMap.prototype.values;
  types.TransitArrayMap.prototype.forEach = function(f) {
    if (this.backingMap) {
      this.backingMap.forEach(f);
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        f(this._entries[i + 1], this._entries[i]);
      }
    }
  };
  types.TransitArrayMap.prototype["forEach"] = types.TransitArrayMap.prototype.forEach;
  types.TransitArrayMap.prototype.get = function(k, notFound) {
    if (this.backingMap) {
      return this.backingMap.get(k);
    } else {
      if (this.convert()) {
        return this.get(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return this._entries[i + 1];
          }
        }
        return notFound;
      }
    }
  };
  types.TransitArrayMap.prototype["get"] = types.TransitArrayMap.prototype.get;
  types.TransitArrayMap.prototype.has = function(k) {
    if (this.backingMap) {
      return this.backingMap.has(k);
    } else {
      if (this.convert()) {
        return this.has(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return true;
          }
        }
        return false;
      }
    }
  };
  types.TransitArrayMap.prototype["has"] = types.TransitArrayMap.prototype.has;
  types.TransitArrayMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.set(k, v);
      this.size = this.backingMap.size;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          this._entries[i + 1] = v;
          return;
        }
      }
      this._entries.push(k);
      this._entries.push(v);
      this.size++;
      if (this.size > types.ARRAY_MAP_THRESHOLD) {
        this.backingMap = types.map(this._entries, false, true);
        this._entries = null;
      }
    }
  };
  types.TransitArrayMap.prototype["set"] = types.TransitArrayMap.prototype.set;
  types.TransitArrayMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap["delete"](k);
      this.size = this.backingMap.size;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          this._entries.splice(i, 2);
          this.size--;
          return;
        }
      }
    }
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.backingMap) {
      return this.backingMap.com$cognitect$transit$hashCode();
    } else {
      if (this.hashCode === -1) {
        this.hashCode = eq.hashMapLike(this);
      }
      return this.hashCode;
    }
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$equals = function(other) {
    if (this.backingMap) {
      return types.mapEquals(this.backingMap, other);
    } else {
      return types.mapEquals(this, other);
    }
  };
  types.TransitMap = function(keys, map, size) {
    this.map = map || {};
    this._keys = keys || [];
    this.size = size || 0;
    this.hashCode = -1;
  };
  types.TransitMap.prototype.toString = function() {
    return "[TransitMap]";
  };
  types.TransitMap.prototype.clear = function() {
    this.hashCode = -1;
    this.map = {};
    this._keys = [];
    this.size = 0;
  };
  types.TransitMap.prototype["clear"] = types.TransitMap.prototype.clear;
  types.TransitMap.prototype.getKeys = function() {
    if (this._keys != null) {
      return this._keys;
    } else {
      return util.objectKeys(this.map);
    }
  };
  types.TransitMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    this._keys = null;
    var code = eq.hashCode(k), bucket = this.map[code];
    for (var i = 0;i < bucket.length;i += 2) {
      if (eq.equals(k, bucket[i])) {
        bucket.splice(i, 2);
        if (bucket.length === 0) {
          delete this.map[code];
        }
        this.size--;
        break;
      }
    }
  };
  types.TransitMap.prototype.entries = function() {
    return new types.TransitMapIterator(this, types.ENTRIES);
  };
  types.TransitMap.prototype["entries"] = types.TransitMap.prototype.entries;
  types.TransitMap.prototype.forEach = function(callback) {
    var ks = this.getKeys();
    for (var i = 0;i < ks.length;i++) {
      var bucket = this.map[ks[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        callback(bucket[j + 1], bucket[j], this);
      }
    }
  };
  types.TransitMap.prototype["forEach"] = types.TransitMap.prototype.forEach;
  types.TransitMap.prototype.get = function(k, notFound) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return bucket[i + 1];
        }
      }
    } else {
      return notFound;
    }
  };
  types.TransitMap.prototype["get"] = types.TransitMap.prototype.get;
  types.TransitMap.prototype.has = function(k) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return true;
        }
      }
      return false;
    } else {
      return false;
    }
  };
  types.TransitMap.prototype["has"] = types.TransitMap.prototype.has;
  types.TransitMap.prototype.keys = function() {
    return new types.TransitMapIterator(this, types.KEYS);
  };
  types.TransitMap.prototype["keys"] = types.TransitMap.prototype.keys;
  types.TransitMap.prototype.keySet = function() {
    var keys = this.getKeys(), ret = [];
    for (var i = 0;i < keys.length;i++) {
      var bucket = this.map[keys[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        ret.push(bucket[j]);
      }
    }
    return ret;
  };
  types.TransitMap.prototype["keySet"] = types.TransitMap.prototype.keySet;
  types.TransitMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket == null) {
      if (this._keys) {
        this._keys.push(code);
      }
      this.map[code] = [k, v];
      this.size++;
    } else {
      var newEntry = true;
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(v, bucket[i])) {
          newEntry = false;
          bucket[i] = v;
          break;
        }
      }
      if (newEntry) {
        bucket.push(k);
        bucket.push(v);
        this.size++;
      }
    }
  };
  types.TransitMap.prototype["set"] = types.TransitMap.prototype.set;
  types.TransitMap.prototype.values = function() {
    return new types.TransitMapIterator(this, types.VALUES);
  };
  types.TransitMap.prototype["values"] = types.TransitMap.prototype.values;
  types.TransitMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashMapLike(this);
    }
    return this.hashCode;
  };
  types.TransitMap.prototype.com$cognitect$transit$equals = function(other) {
    return types.mapEquals(this, other);
  };
  types.map = function(arr, checkDups, hashMap) {
    arr = arr || [];
    checkDups = checkDups === false ? checkDups : true;
    hashMap = hashMap === true ? hashMap : false;
    if (!hashMap && arr.length <= types.ARRAY_MAP_THRESHOLD * 2) {
      if (checkDups) {
        var t = arr;
        arr = [];
        for (var i = 0;i < t.length;i += 2) {
          var seen = false;
          for (var j = 0;j < arr.length;j += 2) {
            if (eq.equals(arr[j], t[i])) {
              arr[j + 1] = t[i + 1];
              seen = true;
              break;
            }
          }
          if (!seen) {
            arr.push(t[i]);
            arr.push(t[i + 1]);
          }
        }
      }
      return new types.TransitArrayMap(arr);
    } else {
      var map = {}, keys = [], size = 0;
      for (var i = 0;i < arr.length;i += 2) {
        var code = eq.hashCode(arr[i]), bucket = map[code];
        if (bucket == null) {
          keys.push(code);
          map[code] = [arr[i], arr[i + 1]];
          size++;
        } else {
          var newEntry = true;
          for (var j = 0;j < bucket.length;j += 2) {
            if (eq.equals(bucket[j], arr[i])) {
              bucket[j + 1] = arr[i + 1];
              newEntry = false;
              break;
            }
          }
          if (newEntry) {
            bucket.push(arr[i]);
            bucket.push(arr[i + 1]);
            size++;
          }
        }
      }
      return new types.TransitMap(keys, map, size);
    }
  };
  types.isArrayMap = function(x) {
    return x instanceof types.TransitArrayMap;
  };
  types.isMap = function(x) {
    return x instanceof types.TransitArrayMap || x instanceof types.TransitMap;
  };
  types.TransitSet = function(map) {
    this.map = map;
    this.size = map.size;
  };
  types.TransitSet.prototype.toString = function() {
    return "[TransitSet]";
  };
  types.TransitSet.prototype.add = function(value) {
    this.map.set(value, value);
    this.size = this.map.size;
  };
  types.TransitSet.prototype["add"] = types.TransitSet.prototype.add;
  types.TransitSet.prototype.clear = function() {
    this.map = new types.TransitMap;
    this.size = 0;
  };
  types.TransitSet.prototype["clear"] = types.TransitSet.prototype.clear;
  types.TransitSet.prototype["delete"] = function(value) {
    this.map["delete"](value);
    this.size = this.map.size;
  };
  types.TransitSet.prototype.entries = function() {
    return this.map.entries();
  };
  types.TransitSet.prototype["entries"] = types.TransitSet.prototype.entries;
  types.TransitSet.prototype.forEach = function(iterator, thisArg) {
    var self = this;
    this.map.forEach(function(v, k, m) {
      iterator(k, self);
    });
  };
  types.TransitSet.prototype["forEach"] = types.TransitSet.prototype.forEach;
  types.TransitSet.prototype.has = function(value) {
    return this.map.has(value);
  };
  types.TransitSet.prototype["has"] = types.TransitSet.prototype.has;
  types.TransitSet.prototype.keys = function() {
    return this.map.keys();
  };
  types.TransitSet.prototype["keys"] = types.TransitSet.prototype.keys;
  types.TransitSet.prototype.keySet = function() {
    return this.map.keySet();
  };
  types.TransitSet.prototype["keySet"] = types.TransitSet.prototype.keySet;
  types.TransitSet.prototype.values = function() {
    return this.map.values();
  };
  types.TransitSet.prototype["values"] = types.TransitSet.prototype.values;
  types.TransitSet.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TransitSet) {
      if (this.size === other.size) {
        return eq.equals(this.map, other.map);
      }
    } else {
      return false;
    }
  };
  types.TransitSet.prototype.com$cognitect$transit$hashCode = function(other) {
    return eq.hashCode(this.map);
  };
  types.set = function(arr) {
    arr = arr || [];
    var map = {}, keys = [], size = 0;
    for (var i = 0;i < arr.length;i++) {
      var code = eq.hashCode(arr[i]), vals = map[code];
      if (vals == null) {
        keys.push(code);
        map[code] = [arr[i], arr[i]];
        size++;
      } else {
        var newEntry = true;
        for (var j = 0;j < vals.length;j += 2) {
          if (eq.equals(vals[j], arr[i])) {
            newEntry = false;
            break;
          }
        }
        if (newEntry) {
          vals.push(arr[i]);
          vals.push(arr[i]);
          size++;
        }
      }
    }
    return new types.TransitSet(new types.TransitMap(keys, map, size));
  };
  types.isSet = function(x) {
    return x instanceof types.TransitSet;
  };
  types.quoted = function(obj) {
    return types.taggedValue("'", obj);
  };
  types.isQuoted = function(x) {
    return x instanceof types.TaggedValue && x.tag === "'";
  };
  types.list = function(xs) {
    return types.taggedValue("list", xs);
  };
  types.isList = function(x) {
    return x instanceof types.List && x.tag === "list";
  };
  types.link = function(rep) {
    return types.taggedValue("link", rep);
  };
  types.isLink = function(x) {
    return x instanceof types.TaggedValue && x.tag === "link";
  };
  types.specialDouble = function(v) {
    switch(v) {
      case "-INF":
        return -Infinity;
      case "INF":
        return Infinity;
      case "NaN":
        return NaN;
      default:
        throw new Error("Invalid special double value " + v);break;
    }
  };
});
goog.provide("com.cognitect.transit.delimiters");
goog.scope(function() {
  var delimiters = com.cognitect.transit.delimiters;
  delimiters.ESC = "~";
  delimiters.TAG = "#";
  delimiters.SUB = "^";
  delimiters.RES = "`";
  delimiters.ESC_TAG = "~#";
});
goog.provide("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.delimiters");
goog.scope(function() {
  var caching = com.cognitect.transit.caching, d = com.cognitect.transit.delimiters;
  caching.MIN_SIZE_CACHEABLE = 3;
  caching.BASE_CHAR_IDX = 48;
  caching.CACHE_CODE_DIGITS = 44;
  caching.MAX_CACHE_ENTRIES = caching.CACHE_CODE_DIGITS * caching.CACHE_CODE_DIGITS;
  caching.MAX_CACHE_SIZE = 4096;
  caching.isCacheable = function(string, asMapKey) {
    if (string.length > caching.MIN_SIZE_CACHEABLE) {
      if (asMapKey) {
        return true;
      } else {
        var c0 = string.charAt(0), c1 = string.charAt(1);
        if (c0 === d.ESC) {
          return c1 === ":" || c1 === "$" || c1 === "#";
        } else {
          return false;
        }
      }
    } else {
      return false;
    }
  };
  caching.idxToCode = function(idx) {
    var hi = Math.floor(idx / caching.CACHE_CODE_DIGITS), lo = idx % caching.CACHE_CODE_DIGITS, loc = String.fromCharCode(lo + caching.BASE_CHAR_IDX);
    if (hi === 0) {
      return d.SUB + loc;
    } else {
      return d.SUB + String.fromCharCode(hi + caching.BASE_CHAR_IDX) + loc;
    }
  };
  caching.WriteCache = function() {
    this.idx = 0;
    this.gen = 0;
    this.cacheSize = 0;
    this.cache = {};
  };
  caching.WriteCache.prototype.write = function(string, asMapKey) {
    if (caching.isCacheable(string, asMapKey)) {
      if (this.cacheSize === caching.MAX_CACHE_SIZE) {
        this.clear();
        this.gen = 0;
        this.cache = {};
      } else {
        if (this.idx === caching.MAX_CACHE_ENTRIES) {
          this.clear();
        }
      }
      var entry = this.cache[string];
      if (entry == null) {
        this.cache[string] = [caching.idxToCode(this.idx), this.gen];
        this.idx++;
        return string;
      } else {
        if (entry[1] != this.gen) {
          entry[1] = this.gen;
          entry[0] = caching.idxToCode(this.idx);
          this.idx++;
          return string;
        } else {
          return entry[0];
        }
      }
    } else {
      return string;
    }
  };
  caching.WriteCache.prototype.clear = function() {
    this.idx = 0;
    this.gen++;
  };
  caching.writeCache = function() {
    return new caching.WriteCache;
  };
  caching.isCacheCode = function(string) {
    return string.charAt(0) === d.SUB && string.charAt(1) !== " ";
  };
  caching.codeToIdx = function(code) {
    if (code.length === 2) {
      return code.charCodeAt(1) - caching.BASE_CHAR_IDX;
    } else {
      var hi = (code.charCodeAt(1) - caching.BASE_CHAR_IDX) * caching.CACHE_CODE_DIGITS, lo = code.charCodeAt(2) - caching.BASE_CHAR_IDX;
      return hi + lo;
    }
  };
  caching.ReadCache = function() {
    this.idx = 0;
    this.cache = [];
  };
  caching.ReadCache.prototype.write = function(obj, asMapKey) {
    if (this.idx == caching.MAX_CACHE_ENTRIES) {
      this.idx = 0;
    }
    this.cache[this.idx] = obj;
    this.idx++;
    return obj;
  };
  caching.ReadCache.prototype.read = function(string, asMapKey) {
    return this.cache[caching.codeToIdx(string)];
  };
  caching.ReadCache.prototype.clear = function() {
    this.idx = 0;
  };
  caching.readCache = function() {
    return new caching.ReadCache;
  };
});
goog.provide("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.delimiters");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.types");
goog.scope(function() {
  var decoder = com.cognitect.transit.impl.decoder, util = com.cognitect.transit.util, d = com.cognitect.transit.delimiters, caching = com.cognitect.transit.caching, types = com.cognitect.transit.types;
  decoder.Tag = function(s) {
    this.str = s;
  };
  decoder.tag = function(s) {
    return new decoder.Tag(s);
  };
  decoder.isTag = function(x) {
    return x && x instanceof decoder.Tag;
  };
  decoder.isGroundHandler = function(handler) {
    switch(handler) {
      case "_":
      ;
      case "s":
      ;
      case "?":
      ;
      case "i":
      ;
      case "d":
      ;
      case "b":
      ;
      case "'":
      ;
      case "array":
      ;
      case "map":
        return true;
    }
    return false;
  };
  decoder.Decoder = function(options) {
    this.options = options || {};
    this.handlers = {};
    for (var h in this.defaults.handlers) {
      this.handlers[h] = this.defaults.handlers[h];
    }
    for (var h in this.options["handlers"]) {
      if (decoder.isGroundHandler(h)) {
        throw new Error('Cannot override handler for ground type "' + h + '"');
      }
      this.handlers[h] = this.options["handlers"][h];
    }
    this.preferStrings = this.options["preferStrings"] != null ? this.options["preferStrings"] : this.defaults.preferStrings;
    this.preferBuffers = this.options["preferBuffers"] != null ? this.options["preferBuffers"] : this.defaults.preferBuffers;
    this.defaultHandler = this.options["defaultHandler"] || this.defaults.defaultHandler;
    this.mapBuilder = this.options["mapBuilder"];
    this.arrayBuilder = this.options["arrayBuilder"];
  };
  decoder.Decoder.prototype.defaults = {handlers:{"_":function(v, d) {
    return types.nullValue();
  }, "?":function(v, d) {
    return types.boolValue(v);
  }, "b":function(v, d) {
    return types.binary(v, d);
  }, "i":function(v, d) {
    return types.intValue(v);
  }, "n":function(v, d) {
    return types.bigInteger(v);
  }, "d":function(v, d) {
    return types.floatValue(v);
  }, "f":function(v, d) {
    return types.bigDecimalValue(v);
  }, "c":function(v, d) {
    return types.charValue(v);
  }, ":":function(v, d) {
    return types.keyword(v);
  }, "$":function(v, d) {
    return types.symbol(v);
  }, "r":function(v, d) {
    return types.uri(v);
  }, "z":function(v, d) {
    return types.specialDouble(v);
  }, "'":function(v, d) {
    return v;
  }, "m":function(v, d) {
    return types.date(v);
  }, "t":function(v, d) {
    return types.verboseDate(v);
  }, "u":function(v, d) {
    return types.uuid(v);
  }, "set":function(v, d) {
    return types.set(v);
  }, "list":function(v, d) {
    return types.list(v);
  }, "link":function(v, d) {
    return types.link(v);
  }, "cmap":function(v, d) {
    return types.map(v, false);
  }}, defaultHandler:function(c, val) {
    return types.taggedValue(c, val);
  }, preferStrings:true, preferBuffers:true};
  decoder.Decoder.prototype.decode = function(node, cache, asMapKey, tagValue) {
    if (node == null) {
      return null;
    }
    var t = typeof node;
    switch(t) {
      case "string":
        return this.decodeString(node, cache, asMapKey, tagValue);
        break;
      case "object":
        if (util.isArray(node)) {
          if (node[0] === "^ ") {
            return this.decodeArrayHash(node, cache, asMapKey, tagValue);
          } else {
            return this.decodeArray(node, cache, asMapKey, tagValue);
          }
        } else {
          return this.decodeHash(node, cache, asMapKey, tagValue);
        }
        break;
    }
    return node;
  };
  decoder.Decoder.prototype["decode"] = decoder.Decoder.prototype.decode;
  decoder.Decoder.prototype.decodeString = function(string, cache, asMapKey, tagValue) {
    if (caching.isCacheable(string, asMapKey)) {
      var val = this.parseString(string, cache, false);
      if (cache) {
        cache.write(val, asMapKey);
      }
      return val;
    } else {
      if (caching.isCacheCode(string)) {
        return cache.read(string, asMapKey);
      } else {
        return this.parseString(string, cache, asMapKey);
      }
    }
  };
  decoder.Decoder.prototype.decodeHash = function(hash, cache, asMapKey, tagValue) {
    var ks = util.objectKeys(hash), key = ks[0], tag = ks.length == 1 ? this.decode(key, cache, false, false) : null;
    if (decoder.isTag(tag)) {
      var val = hash[key], handler = this.handlers[tag.str];
      if (handler != null) {
        return handler(this.decode(val, cache, false, true), this);
      } else {
        return types.taggedValue(tag.str, this.decode(val, cache, false, false));
      }
    } else {
      if (this.mapBuilder) {
        if (ks.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 && this.mapBuilder.fromArray) {
          var nodep = [];
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            nodep.push(this.decode(strKey, cache, true, false));
            nodep.push(this.decode(hash[strKey], cache, false, false));
          }
          return this.mapBuilder.fromArray(nodep, hash);
        } else {
          var ret = this.mapBuilder.init(hash);
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            ret = this.mapBuilder.add(ret, this.decode(strKey, cache, true, false), this.decode(hash[strKey], cache, false, false), hash);
          }
          return this.mapBuilder.finalize(ret, hash);
        }
      } else {
        var nodep = [];
        for (var i = 0;i < ks.length;i++) {
          var strKey = ks[i];
          nodep.push(this.decode(strKey, cache, true, false));
          nodep.push(this.decode(hash[strKey], cache, false, false));
        }
        return types.map(nodep, false);
      }
    }
  };
  decoder.Decoder.prototype.decodeArrayHash = function(node, cache, asMapKey, tagValue) {
    if (this.mapBuilder) {
      if (node.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 + 1 && this.mapBuilder.fromArray) {
        var nodep = [];
        for (var i = 1;i < node.length;i += 2) {
          nodep.push(this.decode(node[i], cache, true, false));
          nodep.push(this.decode(node[i + 1], cache, false, false));
        }
        return this.mapBuilder.fromArray(nodep, node);
      } else {
        var ret = this.mapBuilder.init(node);
        for (var i = 1;i < node.length;i += 2) {
          ret = this.mapBuilder.add(ret, this.decode(node[i], cache, true, false), this.decode(node[i + 1], cache, false, false), node);
        }
        return this.mapBuilder.finalize(ret, node);
      }
    } else {
      var nodep = [];
      for (var i = 1;i < node.length;i += 2) {
        nodep.push(this.decode(node[i], cache, true, false));
        nodep.push(this.decode(node[i + 1], cache, false, false));
      }
      return types.map(nodep, false);
    }
  };
  decoder.Decoder.prototype.decodeArray = function(node, cache, asMapKey, tagValue) {
    if (tagValue) {
      var ret = [];
      for (var i = 0;i < node.length;i++) {
        ret.push(this.decode(node[i], cache, asMapKey, false));
      }
      return ret;
    } else {
      var cacheIdx = cache && cache.idx;
      if (node.length === 2 && typeof node[0] === "string") {
        var tag = this.decode(node[0], cache, false, false);
        if (decoder.isTag(tag)) {
          var val = node[1], handler = this.handlers[tag.str];
          if (handler != null) {
            var ret = handler(this.decode(val, cache, asMapKey, true), this);
            return ret;
          } else {
            return types.taggedValue(tag.str, this.decode(val, cache, asMapKey, false));
          }
        }
      }
      if (cache && cacheIdx != cache.idx) {
        cache.idx = cacheIdx;
      }
      if (this.arrayBuilder) {
        if (node.length <= 32 && this.arrayBuilder.fromArray) {
          var arr = [];
          for (var i = 0;i < node.length;i++) {
            arr.push(this.decode(node[i], cache, asMapKey, false));
          }
          return this.arrayBuilder.fromArray(arr, node);
        } else {
          var ret = this.arrayBuilder.init();
          for (var i = 0;i < node.length;i++) {
            ret = this.arrayBuilder.add(ret, this.decode(node[i], cache, asMapKey, false), node);
          }
          return this.arrayBuilder.finalize(ret, node);
        }
      } else {
        var ret = [];
        for (var i = 0;i < node.length;i++) {
          ret.push(this.decode(node[i], cache, asMapKey, false));
        }
        return ret;
      }
    }
  };
  decoder.Decoder.prototype.parseString = function(string, cache, asMapKey) {
    if (string.charAt(0) === d.ESC) {
      var c = string.charAt(1);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return string.substring(1);
      } else {
        if (c === d.TAG) {
          return decoder.tag(string.substring(2));
        } else {
          var handler = this.handlers[c];
          if (handler == null) {
            return this.defaultHandler(c, string.substring(2));
          } else {
            return handler(string.substring(2), this);
          }
        }
      }
    } else {
      return string;
    }
  };
  decoder.decoder = function(options) {
    return new decoder.Decoder(options);
  };
});
goog.provide("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
goog.scope(function() {
  var reader = com.cognitect.transit.impl.reader, decoder = com.cognitect.transit.impl.decoder, caching = com.cognitect.transit.caching;
  reader.JSONUnmarshaller = function(opts) {
    this.decoder = new decoder.Decoder(opts);
  };
  reader.JSONUnmarshaller.prototype.unmarshal = function(str, cache) {
    return this.decoder.decode(JSON.parse(str), cache);
  };
  reader.Reader = function(unmarshaller, options) {
    this.unmarshaller = unmarshaller;
    this.options = options || {};
    this.cache = this.options["cache"] ? this.options["cache"] : new caching.ReadCache;
  };
  reader.Reader.prototype.read = function(str) {
    var ret = this.unmarshaller.unmarshal(str, this.cache);
    this.cache.clear();
    return ret;
  };
  reader.Reader.prototype["read"] = reader.Reader.prototype.read;
});
goog.provide("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.types");
goog.require("goog.math.Long");
goog.scope(function() {
  var handlers = com.cognitect.transit.handlers, util = com.cognitect.transit.util, types = com.cognitect.transit.types, Long = goog.math.Long;
  handlers.ctorGuid = 0;
  handlers.ctorGuidProperty = "transit$guid$" + util.randomUUID();
  handlers.typeTag = function(ctor) {
    if (ctor == null) {
      return "null";
    } else {
      if (ctor === String) {
        return "string";
      } else {
        if (ctor === Boolean) {
          return "boolean";
        } else {
          if (ctor === Number) {
            return "number";
          } else {
            if (ctor === Array) {
              return "array";
            } else {
              if (ctor === Object) {
                return "map";
              } else {
                var tag = ctor[handlers.ctorGuidProperty];
                if (tag == null) {
                  if (typeof Object.defineProperty != "undefined") {
                    tag = ++handlers.ctorGuid;
                    Object.defineProperty(ctor, handlers.ctorGuidProperty, {value:tag, enumerable:false});
                  } else {
                    ctor[handlers.ctorGuidProperty] = tag = ++handlers.ctorGuid;
                  }
                }
                return tag;
              }
            }
          }
        }
      }
    }
  };
  handlers.constructor = function(x) {
    if (x == null) {
      return null;
    } else {
      return x.constructor;
    }
  };
  handlers.padZeros = function(n, m) {
    var s = n.toString();
    for (var i = s.length;i < m;i++) {
      s = "0" + s;
    }
    return s;
  };
  handlers.stringableKeys = function(m) {
    var stringable = false, ks = util.objectKeys(m);
    for (var i = 0;i < ks.length;i++) {
    }
    return true;
  };
  handlers.NilHandler = function() {
  };
  handlers.NilHandler.prototype.tag = function(v) {
    return "_";
  };
  handlers.NilHandler.prototype.rep = function(v) {
    return null;
  };
  handlers.NilHandler.prototype.stringRep = function(v) {
    return "null";
  };
  handlers.StringHandler = function() {
  };
  handlers.StringHandler.prototype.tag = function(v) {
    return "s";
  };
  handlers.StringHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.StringHandler.prototype.stringRep = function(v) {
    return v;
  };
  handlers.NumberHandler = function() {
  };
  handlers.NumberHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.NumberHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.NumberHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler = function() {
  };
  handlers.IntegerHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.IntegerHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.BooleanHandler = function() {
  };
  handlers.BooleanHandler.prototype.tag = function(v) {
    return "?";
  };
  handlers.BooleanHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.BooleanHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.ArrayHandler = function() {
  };
  handlers.ArrayHandler.prototype.tag = function(v) {
    return "array";
  };
  handlers.ArrayHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.ArrayHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.MapHandler = function() {
  };
  handlers.MapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.MapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.MapHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.VerboseDateHandler = function() {
  };
  handlers.VerboseDateHandler.prototype.tag = function(v) {
    return "t";
  };
  handlers.VerboseDateHandler.prototype.rep = function(v) {
    return v.getUTCFullYear() + "-" + handlers.padZeros(v.getUTCMonth() + 1, 2) + "-" + handlers.padZeros(v.getUTCDate(), 2) + "T" + handlers.padZeros(v.getUTCHours(), 2) + ":" + handlers.padZeros(v.getUTCMinutes(), 2) + ":" + handlers.padZeros(v.getUTCSeconds(), 2) + "." + handlers.padZeros(v.getUTCMilliseconds(), 3) + "Z";
  };
  handlers.VerboseDateHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.DateHandler = function() {
  };
  handlers.DateHandler.prototype.tag = function(v) {
    return "m";
  };
  handlers.DateHandler.prototype.rep = function(v) {
    return v.valueOf();
  };
  handlers.DateHandler.prototype.stringRep = function(v) {
    return v.valueOf().toString();
  };
  handlers.DateHandler.prototype.getVerboseHandler = function(v) {
    return new handlers.VerboseDateHandler;
  };
  handlers.UUIDHandler = function() {
  };
  handlers.UUIDHandler.prototype.tag = function(v) {
    return "u";
  };
  handlers.UUIDHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.UUIDHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.KeywordHandler = function() {
  };
  handlers.KeywordHandler.prototype.tag = function(v) {
    return ":";
  };
  handlers.KeywordHandler.prototype.rep = function(v) {
    return v.name;
  };
  handlers.KeywordHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.SymbolHandler = function() {
  };
  handlers.SymbolHandler.prototype.tag = function(v) {
    return "$";
  };
  handlers.SymbolHandler.prototype.rep = function(v) {
    return v.name;
  };
  handlers.SymbolHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.TaggedHandler = function() {
  };
  handlers.TaggedHandler.prototype.tag = function(v) {
    return v.tag;
  };
  handlers.TaggedHandler.prototype.rep = function(v) {
    return v.rep;
  };
  handlers.TaggedHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitSetHandler = function() {
  };
  handlers.TransitSetHandler.prototype.tag = function(v) {
    return "set";
  };
  handlers.TransitSetHandler.prototype.rep = function(v) {
    var arr = [];
    v.forEach(function(key, set) {
      arr.push(key);
    });
    return types.taggedValue("array", arr);
  };
  handlers.TransitSetHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitArrayMapHandler = function() {
  };
  handlers.TransitArrayMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitArrayMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitArrayMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitMapHandler = function() {
  };
  handlers.TransitMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.BufferHandler = function() {
  };
  handlers.BufferHandler.prototype.tag = function(v) {
    return "b";
  };
  handlers.BufferHandler.prototype.rep = function(v) {
    return v.toString("base64");
  };
  handlers.BufferHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.Uint8ArrayHandler = function() {
  };
  handlers.Uint8ArrayHandler.prototype.tag = function(v) {
    return "b";
  };
  handlers.Uint8ArrayHandler.prototype.rep = function(v) {
    return util.Uint8ToBase64(v);
  };
  handlers.Uint8ArrayHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.defaultHandlers = function(hs) {
    hs.set(null, new handlers.NilHandler);
    hs.set(String, new handlers.StringHandler);
    hs.set(Number, new handlers.NumberHandler);
    hs.set(Long, new handlers.IntegerHandler);
    hs.set(Boolean, new handlers.BooleanHandler);
    hs.set(Array, new handlers.ArrayHandler);
    hs.set(Object, new handlers.MapHandler);
    hs.set(Date, new handlers.DateHandler);
    hs.set(types.UUID, new handlers.UUIDHandler);
    hs.set(types.Keyword, new handlers.KeywordHandler);
    hs.set(types.Symbol, new handlers.SymbolHandler);
    hs.set(types.TaggedValue, new handlers.TaggedHandler);
    hs.set(types.TransitSet, new handlers.TransitSetHandler);
    hs.set(types.TransitArrayMap, new handlers.TransitArrayMapHandler);
    hs.set(types.TransitMap, new handlers.TransitMapHandler);
    if (typeof Buffer != "undefined") {
      hs.set(Buffer, new handlers.BufferHandler);
    }
    if (typeof Uint8Array != "undefined") {
      hs.set(Uint8Array, new handlers.Uint8ArrayHandler);
    }
    return hs;
  };
  handlers.Handlers = function() {
    this.handlers = {};
    handlers.defaultHandlers(this);
  };
  handlers.Handlers.prototype.get = function(ctor) {
    var h = null;
    if (typeof ctor === "string") {
      h = this.handlers[ctor];
    } else {
      h = this.handlers[handlers.typeTag(ctor)];
    }
    if (h != null) {
      return h;
    } else {
      return this.handlers["default"];
    }
  };
  handlers.Handlers.prototype["get"] = handlers.Handlers.prototype.get;
  handlers.validTag = function(tag) {
    switch(tag) {
      case "null":
      ;
      case "string":
      ;
      case "boolean":
      ;
      case "number":
      ;
      case "array":
      ;
      case "map":
        return false;
        break;
    }
    return true;
  };
  handlers.Handlers.prototype.set = function(ctor, handler) {
    if (typeof ctor === "string" && handlers.validTag(ctor)) {
      this.handlers[ctor] = handler;
    } else {
      this.handlers[handlers.typeTag(ctor)] = handler;
    }
  };
});
goog.provide("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.delimiters");
goog.require("goog.math.Long");
goog.scope(function() {
  var writer = com.cognitect.transit.impl.writer, util = com.cognitect.transit.util, caching = com.cognitect.transit.caching, handlers = com.cognitect.transit.handlers, types = com.cognitect.transit.types, d = com.cognitect.transit.delimiters, Long = goog.math.Long;
  writer.escape = function(string) {
    if (string.length > 0) {
      var c = string.charAt(0);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return d.ESC + string;
      } else {
        return string;
      }
    } else {
      return string;
    }
  };
  writer.JSONMarshaller = function(opts) {
    this.opts = opts || {};
    this.preferStrings = this.opts["preferStrings"] != null ? this.opts["preferStrings"] : true;
    this.objectBuilder = this.opts["objectBuilder"] || null;
    this.handlers = new handlers.Handlers;
    var optsHandlers = this.opts["handlers"];
    if (optsHandlers) {
      if (util.isArray(optsHandlers) || !optsHandlers.forEach) {
        throw new Error('transit writer "handlers" option must be a map');
      }
      var self = this;
      optsHandlers.forEach(function(v, k) {
        self.handlers.set(k, v);
      });
    }
    this.handlerForForeign = this.opts["handlerForForeign"];
    this.unpack = this.opts["unpack"] || function(x) {
      if (types.isArrayMap(x) && x.backingMap === null) {
        return x._entries;
      } else {
        return false;
      }
    };
    this.verbose = this.opts && this.opts["verbose"] || false;
  };
  writer.JSONMarshaller.prototype.handler = function(obj) {
    var h = this.handlers.get(handlers.constructor(obj));
    if (h != null) {
      return h;
    } else {
      var tag = obj && obj["transitTag"];
      if (tag) {
        return this.handlers.get(tag);
      } else {
        return null;
      }
    }
  };
  writer.JSONMarshaller.prototype.registerHandler = function(ctor, handler) {
    this.handlers.set(ctor, handler);
  };
  writer.JSONMarshaller.prototype.emitNil = function(asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "_", "", asMapKey, cache);
    } else {
      return null;
    }
  };
  writer.JSONMarshaller.prototype.emitString = function(prefix, tag, s, asMapKey, cache) {
    var string = prefix + tag + s;
    if (cache) {
      return cache.write(string, asMapKey);
    } else {
      return string;
    }
  };
  writer.JSONMarshaller.prototype.emitBoolean = function(b, asMapKey, cache) {
    if (asMapKey) {
      var s = b.toString();
      return this.emitString(d.ESC, "?", s[0], asMapKey, cache);
    } else {
      return b;
    }
  };
  writer.JSONMarshaller.prototype.emitInteger = function(i, asMapKey, cache) {
    if (i === Infinity) {
      return this.emitString(d.ESC, "z", "INF", asMapKey, cache);
    } else {
      if (i === -Infinity) {
        return this.emitString(d.ESC, "z", "-INF", asMapKey, cache);
      } else {
        if (isNaN(i)) {
          return this.emitString(d.ESC, "z", "NaN", asMapKey, cache);
        } else {
          if (asMapKey || typeof i === "string" || i instanceof Long) {
            return this.emitString(d.ESC, "i", i.toString(), asMapKey, cache);
          } else {
            return i;
          }
        }
      }
    }
  };
  writer.JSONMarshaller.prototype.emitDouble = function(d, asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "d", d, asMapKey, cache);
    } else {
      return d;
    }
  };
  writer.JSONMarshaller.prototype.emitBinary = function(b, asMapKey, cache) {
    return this.emitString(d.ESC, "b", b, asMapKey, cache);
  };
  writer.JSONMarshaller.prototype.emitQuoted = function(em, obj, cache) {
    if (em.verbose) {
      var ret = {}, k = this.emitString(d.ESC_TAG, "'", "", true, cache);
      ret[k] = writer.marshal(this, obj, false, cache);
      return ret;
    } else {
      return [this.emitString(d.ESC_TAG, "'", "", true, cache), writer.marshal(this, obj, false, cache)];
    }
  };
  writer.emitObjects = function(em, iterable, cache) {
    var ret = [];
    if (util.isArray(iterable)) {
      for (var i = 0;i < iterable.length;i++) {
        ret.push(writer.marshal(em, iterable[i], false, cache));
      }
    } else {
      iterable.forEach(function(v, i) {
        ret.push(writer.marshal(em, v, false, cache));
      });
    }
    return ret;
  };
  writer.emitArray = function(em, iterable, skip, cache) {
    return writer.emitObjects(em, iterable, cache);
  };
  writer.isStringableKey = function(em, k) {
    if (typeof k !== "string") {
      var h = em.handler(k);
      return h && h.tag(k).length === 1;
    } else {
      return true;
    }
  };
  writer.stringableKeys = function(em, obj) {
    var arr = em.unpack(obj), stringableKeys = true;
    if (arr) {
      for (var i = 0;i < arr.length;i += 2) {
        stringableKeys = writer.isStringableKey(em, arr[i]);
        if (!stringableKeys) {
          break;
        }
      }
      return stringableKeys;
    } else {
      if (obj.keys) {
        var iter = obj.keys(), step = null;
        if (iter.next) {
          step = iter.next();
          while (!step.done) {
            stringableKeys = writer.isStringableKey(em, step.value);
            if (!stringableKeys) {
              break;
            }
            step = iter.next();
          }
          return stringableKeys;
        }
      }
    }
    if (obj.forEach) {
      obj.forEach(function(v, k) {
        stringableKeys = stringableKeys && writer.isStringableKey(em, k);
      });
      return stringableKeys;
    } else {
      throw new Error("Cannot walk keys of object type " + handlers.constructor(obj).name);
    }
  };
  writer.isForeignObject = function(x) {
    if (x.constructor["transit$isObject"]) {
      return true;
    }
    var ret = x.constructor.toString(), ret = ret.substr("function ".length), ret = ret.substr(0, ret.indexOf("(")), isObject = ret == "Object";
    if (typeof Object.defineProperty != "undefined") {
      Object.defineProperty(x.constructor, "transit$isObject", {value:isObject, enumerable:false});
    } else {
      x.constructor["transit$isObject"] = isObject;
    }
    return isObject;
  };
  writer.emitMap = function(em, obj, skip, cache) {
    if (obj.constructor === Object || obj.forEach != null || em.handlerForForeign && writer.isForeignObject(obj)) {
      if (em.verbose) {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            var ret = {};
            obj.forEach(function(v, k) {
              ret[writer.marshal(em, k, true, false)] = writer.marshal(em, v, false, cache);
            });
            return ret;
          } else {
            var arr = em.unpack(obj), rep = [], tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], true, false));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, true, false));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            var ret = {};
            ret[tag] = rep;
            return ret;
          }
        } else {
          var ret = {}, ks = util.objectKeys(obj);
          for (var i = 0;i < ks.length;i++) {
            ret[writer.marshal(em, ks[i], true, false)] = writer.marshal(em, obj[ks[i]], false, cache);
          }
          return ret;
        }
      } else {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            var arr = em.unpack(obj), ret = ["^ "];
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                ret.push(writer.marshal(em, arr[i], true, cache));
                ret.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                ret.push(writer.marshal(em, k, true, cache));
                ret.push(writer.marshal(em, v, false, cache));
              });
            }
            return ret;
          } else {
            var arr = em.unpack(obj), rep = [], tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], true, cache));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, true, cache));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            return [tag, rep];
          }
        } else {
          var ret = ["^ "], ks = util.objectKeys(obj);
          for (var i = 0;i < ks.length;i++) {
            ret.push(writer.marshal(em, ks[i], true, cache));
            ret.push(writer.marshal(em, obj[ks[i]], false, cache));
          }
          return ret;
        }
      }
    } else {
      if (em.objectBuilder != null) {
        return em.objectBuilder(obj, function(k) {
          return writer.marshal(em, k, true, cache);
        }, function(v) {
          return writer.marshal(em, v, false, cache);
        });
      } else {
        var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
        err.data = {obj:obj, type:name};
        throw err;
      }
    }
  };
  writer.emitTaggedMap = function(em, tag, rep, skip, cache) {
    if (em.verbose) {
      var ret = {};
      ret[em.emitString(d.ESC_TAG, tag, "", true, cache)] = writer.marshal(em, rep, false, cache);
      return ret;
    } else {
      return [em.emitString(d.ESC_TAG, tag, "", true, cache), writer.marshal(em, rep, false, cache)];
    }
  };
  writer.emitEncoded = function(em, h, tag, rep, obj, asMapKey, cache) {
    if (tag.length === 1) {
      if (typeof rep === "string") {
        return em.emitString(d.ESC, tag, rep, asMapKey, cache);
      } else {
        if (asMapKey || em.preferStrings) {
          var vh = em.verbose && h.getVerboseHandler();
          if (vh) {
            tag = vh.tag(obj);
            rep = vh.stringRep(obj, vh);
          } else {
            rep = h.stringRep(obj, h);
          }
          if (rep !== null) {
            return em.emitString(d.ESC, tag, rep, asMapKey, cache);
          } else {
            var err = new Error('Tag "' + tag + '" cannot be encoded as string');
            err.data = {tag:tag, rep:rep, obj:obj};
            throw err;
          }
        } else {
          return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
        }
      }
    } else {
      return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
    }
  };
  writer.marshal = function(em, obj, asMapKey, cache) {
    var h = em.handler(obj) || (em.handlerForForeign ? em.handlerForForeign(obj, em.handlers) : null), tag = h ? h.tag(obj) : null, rep = h ? h.rep(obj) : null;
    if (h != null && tag != null) {
      switch(tag) {
        case "_":
          return em.emitNil(asMapKey, cache);
          break;
        case "s":
          return em.emitString("", "", writer.escape(rep), asMapKey, cache);
          break;
        case "?":
          return em.emitBoolean(rep, asMapKey, cache);
          break;
        case "i":
          return em.emitInteger(rep, asMapKey, cache);
          break;
        case "d":
          return em.emitDouble(rep, asMapKey, cache);
          break;
        case "b":
          return em.emitBinary(rep, asMapKey, cache);
          break;
        case "'":
          return em.emitQuoted(em, rep, cache);
          break;
        case "array":
          return writer.emitArray(em, rep, asMapKey, cache);
          break;
        case "map":
          return writer.emitMap(em, rep, asMapKey, cache);
          break;
        default:
          return writer.emitEncoded(em, h, tag, rep, obj, asMapKey, cache);
          break;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.maybeQuoted = function(em, obj) {
    var h = em.handler(obj) || (em.handlerForForeign ? em.handlerForForeign(obj, em.handlers) : null);
    if (h != null) {
      if (h.tag(obj).length === 1) {
        return types.quoted(obj);
      } else {
        return obj;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.marshalTop = function(em, obj, asMapKey, cache) {
    return JSON.stringify(writer.marshal(em, writer.maybeQuoted(em, obj), asMapKey, cache));
  };
  writer.Writer = function(marshaller, options) {
    this._marshaller = marshaller;
    this.options = options || {};
    if (this.options["cache"] === false) {
      this.cache = null;
    } else {
      this.cache = this.options["cache"] ? this.options["cache"] : new caching.WriteCache;
    }
  };
  writer.Writer.prototype.marshaller = function() {
    return this._marshaller;
  };
  writer.Writer.prototype["marshaller"] = writer.Writer.prototype.marshaller;
  writer.Writer.prototype.write = function(obj, opts) {
    var ret = null, ropts = opts || {}, asMapKey = ropts["asMapKey"] || false, cache = this._marshaller.verbose ? false : this.cache;
    if (ropts["marshalTop"] === false) {
      ret = writer.marshal(this._marshaller, obj, asMapKey, cache);
    } else {
      ret = writer.marshalTop(this._marshaller, obj, asMapKey, cache);
    }
    if (this.cache != null) {
      this.cache.clear();
    }
    return ret;
  };
  writer.Writer.prototype["write"] = writer.Writer.prototype.write;
  writer.Writer.prototype.register = function(type, handler) {
    this._marshaller.registerHandler(type, handler);
  };
  writer.Writer.prototype["register"] = writer.Writer.prototype.register;
});
goog.provide("com.cognitect.transit");
goog.require("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
var TRANSIT_DEV = true;
var TRANSIT_NODE_TARGET = false;
var TRANSIT_BROWSER_TARGET = false;
var TRANSIT_BROWSER_AMD_TARGET = false;
goog.scope(function() {
  var transit = com.cognitect.transit;
  var reader = com.cognitect.transit.impl.reader, writer = com.cognitect.transit.impl.writer, decoder = com.cognitect.transit.impl.decoder, types = com.cognitect.transit.types, eq = com.cognitect.transit.eq, caching = com.cognitect.transit.caching;
  transit.reader = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      type = "json";
      var unmarshaller = new reader.JSONUnmarshaller(opts);
      return new reader.Reader(unmarshaller, opts);
    } else {
      throw new Error("Cannot create reader of type " + type);
    }
  };
  transit.writer = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      if (type === "json-verbose") {
        if (opts == null) {
          opts = {};
        }
        opts["verbose"] = true;
      }
      type = "json";
      var marshaller = new writer.JSONMarshaller(opts);
      return new writer.Writer(marshaller, opts);
    } else {
      var err = new Error('Type must be "json"');
      err.data = {type:type};
      throw err;
    }
  };
  transit.makeWriteHandler = function(obj) {
    var Handler = function() {
    };
    Handler.prototype.tag = obj["tag"];
    Handler.prototype.rep = obj["rep"];
    Handler.prototype.stringRep = obj["stringRep"];
    Handler.prototype.getVerboseHandler = obj["getVerboseHandler"];
    return new Handler;
  };
  transit.makeBuilder = function(obj) {
    var Builder = function() {
    };
    Builder.prototype.init = obj["init"];
    Builder.prototype.add = obj["add"];
    Builder.prototype.finalize = obj["finalize"];
    Builder.prototype.fromArray = obj["fromArray"];
    return new Builder;
  };
  transit.date = types.date;
  transit.integer = types.intValue;
  transit.isInteger = types.isInteger;
  transit.uuid = types.uuid;
  transit.isUUID = types.isUUID;
  transit.bigInt = types.bigInteger;
  transit.isBigInt = types.isBigInteger;
  transit.bigDec = types.bigDecimalValue;
  transit.isBigDec = types.isBigDecimal;
  transit.keyword = types.keyword;
  transit.isKeyword = types.isKeyword;
  transit.symbol = types.symbol;
  transit.isSymbol = types.isSymbol;
  transit.binary = types.binary;
  transit.isBinary = types.isBinary;
  transit.uri = types.uri;
  transit.isURI = types.isURI;
  transit.map = types.map;
  transit.isMap = types.isMap;
  transit.set = types.set;
  transit.isSet = types.isSet;
  transit.list = types.list;
  transit.isList = types.isList;
  transit.quoted = types.quoted;
  transit.isQuoted = types.isQuoted;
  transit.tagged = types.taggedValue;
  transit.isTaggedValue = types.isTaggedValue;
  transit.link = types.link;
  transit.isLink = types.isLink;
  transit.hash = eq.hashCode;
  transit.hashMapLike = eq.hashMapLike;
  transit.hashMapLike = eq.hashArrayLike;
  transit.equals = eq.equals;
  transit.extendToEQ = eq.extendToEQ;
  transit.mapToObject = function(m) {
    var ret = {};
    m.forEach(function(v, k) {
      if (typeof k !== "string") {
        throw Error("Cannot convert map with non-string keys");
      } else {
        ret[k] = v;
      }
    });
    return ret;
  };
  transit.decoder = decoder.decoder;
  transit.readCache = caching.readCache;
  transit.writeCache = caching.writeCache;
  transit.UUIDfromString = types.UUIDfromString;
  transit.randomUUID = types.randomUUID;
  transit.stringableKeys = writer.stringableKeys;
  if (TRANSIT_BROWSER_TARGET) {
    goog.exportSymbol("transit.reader", transit.reader);
    goog.exportSymbol("transit.writer", transit.writer);
    goog.exportSymbol("transit.makeBuilder", transit.makeBuilder);
    goog.exportSymbol("transit.makeWriteHandler", transit.makeWriteHandler);
    goog.exportSymbol("transit.date", types.date);
    goog.exportSymbol("transit.integer", types.intValue);
    goog.exportSymbol("transit.isInteger", types.isInteger);
    goog.exportSymbol("transit.uuid", types.uuid);
    goog.exportSymbol("transit.isUUID", types.isUUID);
    goog.exportSymbol("transit.bigInt", types.bigInteger);
    goog.exportSymbol("transit.isBigInt", types.isBigInteger);
    goog.exportSymbol("transit.bigDec", types.bigDecimalValue);
    goog.exportSymbol("transit.isBigDec", types.isBigDecimal);
    goog.exportSymbol("transit.keyword", types.keyword);
    goog.exportSymbol("transit.isKeyword", types.isKeyword);
    goog.exportSymbol("transit.symbol", types.symbol);
    goog.exportSymbol("transit.isSymbol", types.isSymbol);
    goog.exportSymbol("transit.binary", types.binary);
    goog.exportSymbol("transit.isBinary", types.isBinary);
    goog.exportSymbol("transit.uri", types.uri);
    goog.exportSymbol("transit.isURI", types.isURI);
    goog.exportSymbol("transit.map", types.map);
    goog.exportSymbol("transit.isMap", types.isMap);
    goog.exportSymbol("transit.set", types.set);
    goog.exportSymbol("transit.isSet", types.isSet);
    goog.exportSymbol("transit.list", types.list);
    goog.exportSymbol("transit.isList", types.isList);
    goog.exportSymbol("transit.quoted", types.quoted);
    goog.exportSymbol("transit.isQuoted", types.isQuoted);
    goog.exportSymbol("transit.tagged", types.taggedValue);
    goog.exportSymbol("transit.isTaggedValue", types.isTaggedValue);
    goog.exportSymbol("transit.link", types.link);
    goog.exportSymbol("transit.isLink", types.isLink);
    goog.exportSymbol("transit.hash", eq.hashCode);
    goog.exportSymbol("transit.hashMapLike", eq.hashMapLike);
    goog.exportSymbol("transit.hashArrayLike", eq.hashArrayLike);
    goog.exportSymbol("transit.equals", eq.equals);
    goog.exportSymbol("transit.extendToEQ", eq.extendToEQ);
    goog.exportSymbol("transit.mapToObject", transit.mapToObject);
    goog.exportSymbol("transit.decoder", decoder.decoder);
    goog.exportSymbol("transit.UUIDfromString", types.UUIDfromString);
    goog.exportSymbol("transit.randomUUID", types.randomUUID);
    goog.exportSymbol("transit.stringableKeys", writer.stringableKeys);
    goog.exportSymbol("transit.readCache", caching.readCache);
    goog.exportSymbol("transit.writeCache", caching.writeCache);
  }
  if (TRANSIT_NODE_TARGET) {
    module.exports = {reader:transit.reader, writer:transit.writer, makeBuilder:transit.makeBuilder, makeWriteHandler:transit.makeWriteHandler, date:types.date, integer:types.intValue, isInteger:types.isInteger, uuid:types.uuid, isUUID:types.isUUID, bigInt:types.bigInteger, isBigInt:types.isBigInteger, bigDec:types.bigDecimalValue, isBigDec:types.isBigDecimal, keyword:types.keyword, isKeyword:types.isKeyword, symbol:types.symbol, isSymbol:types.isSymbol, binary:types.binary, isBinary:types.isBinary, 
    uri:types.uri, isURI:types.isURI, map:types.map, isMap:types.isMap, set:types.set, isSet:types.isSet, list:types.list, isList:types.isList, quoted:types.quoted, isQuoted:types.isQuoted, tagged:types.taggedValue, isTaggedValue:types.isTaggedValue, link:types.link, isLink:types.isLink, hash:eq.hashCode, hashArrayLike:eq.hashArrayLike, hashMapLike:eq.hashMapLike, equals:eq.equals, extendToEQ:eq.extendToEQ, mapToObject:transit.mapToObject, decoder:decoder.decoder, UUIDfromString:types.UUIDfromString, 
    randomUUID:types.randomUUID, stringableKeys:writer.stringableKeys, readCache:caching.readCache, writeCache:caching.writeCache};
  }
});
goog.provide("cognitect.transit");
goog.require("cljs.core");
goog.require("com.cognitect.transit");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.eq");
goog.require("goog.math.Long");
cljs.core.UUID.prototype.cljs$core$IEquiv$ = true;
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return this$__$1.uuid === other.uuid;
  } else {
    if (other instanceof com.cognitect.transit.types.UUID) {
      return this$__$1.uuid === other.toString();
    } else {
      return false;
    }
  }
};
cljs.core.UUID.prototype.cljs$core$IComparable$ = true;
cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID || other instanceof com.cognitect.transit.types.UUID) {
    return cljs.core.compare.call(null, this$__$1.toString(), other.toString());
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(this$__$1), cljs.core.str(" to "), cljs.core.str(other)].join(""));
  }
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IComparable$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID || other instanceof com.cognitect.transit.types.UUID) {
    return cljs.core.compare.call(null, this$__$1.toString(), other.toString());
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(this$__$1), cljs.core.str(" to "), cljs.core.str(other)].join(""));
  }
};
goog.math.Long.prototype.cljs$core$IEquiv$ = true;
goog.math.Long.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return cljs.core._equiv.call(null, other, this$__$1);
  } else {
    return this$__$1.equiv(other);
  }
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$ = true;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
goog.math.Long.prototype.cljs$core$IHash$ = true;
goog.math.Long.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.hash.call(null, this$__$1.toString());
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$ = true;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IPrintWithWriter$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(uuid, writer, _) {
  var uuid__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(uuid__$1.toString()), cljs.core.str('"')].join(""));
};
cognitect.transit.opts_merge = function cognitect$transit$opts_merge(a, b) {
  var seq__13314_13318 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, b));
  var chunk__13315_13319 = null;
  var count__13316_13320 = 0;
  var i__13317_13321 = 0;
  while (true) {
    if (i__13317_13321 < count__13316_13320) {
      var k_13322 = cljs.core._nth.call(null, chunk__13315_13319, i__13317_13321);
      var v_13323 = b[k_13322];
      a[k_13322] = v_13323;
      var G__13324 = seq__13314_13318;
      var G__13325 = chunk__13315_13319;
      var G__13326 = count__13316_13320;
      var G__13327 = i__13317_13321 + 1;
      seq__13314_13318 = G__13324;
      chunk__13315_13319 = G__13325;
      count__13316_13320 = G__13326;
      i__13317_13321 = G__13327;
      continue;
    } else {
      var temp__4657__auto___13328 = cljs.core.seq.call(null, seq__13314_13318);
      if (temp__4657__auto___13328) {
        var seq__13314_13329__$1 = temp__4657__auto___13328;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13314_13329__$1)) {
          var c__6956__auto___13330 = cljs.core.chunk_first.call(null, seq__13314_13329__$1);
          var G__13331 = cljs.core.chunk_rest.call(null, seq__13314_13329__$1);
          var G__13332 = c__6956__auto___13330;
          var G__13333 = cljs.core.count.call(null, c__6956__auto___13330);
          var G__13334 = 0;
          seq__13314_13318 = G__13331;
          chunk__13315_13319 = G__13332;
          count__13316_13320 = G__13333;
          i__13317_13321 = G__13334;
          continue;
        } else {
          var k_13335 = cljs.core.first.call(null, seq__13314_13329__$1);
          var v_13336 = b[k_13335];
          a[k_13335] = v_13336;
          var G__13337 = cljs.core.next.call(null, seq__13314_13329__$1);
          var G__13338 = null;
          var G__13339 = 0;
          var G__13340 = 0;
          seq__13314_13318 = G__13337;
          chunk__13315_13319 = G__13338;
          count__13316_13320 = G__13339;
          i__13317_13321 = G__13340;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return a;
};
cognitect.transit.MapBuilder = function() {
};
cognitect.transit.MapBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
};
cognitect.transit.MapBuilder.prototype.add = function(m, k, v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.assoc_BANG_.call(null, m, k, v);
};
cognitect.transit.MapBuilder.prototype.finalize = function(m, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, m);
};
cognitect.transit.MapBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentArrayMap.fromArray.call(null, arr, true, true);
};
cognitect.transit.MapBuilder.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.MapBuilder.cljs$lang$type = true;
cognitect.transit.MapBuilder.cljs$lang$ctorStr = "cognitect.transit/MapBuilder";
cognitect.transit.MapBuilder.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write.call(null, writer__6752__auto__, "cognitect.transit/MapBuilder");
};
cognitect.transit.__GT_MapBuilder = function cognitect$transit$__GT_MapBuilder() {
  return new cognitect.transit.MapBuilder;
};
cognitect.transit.VectorBuilder = function() {
};
cognitect.transit.VectorBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
};
cognitect.transit.VectorBuilder.prototype.add = function(v, x, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.conj_BANG_.call(null, v, x);
};
cognitect.transit.VectorBuilder.prototype.finalize = function(v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, v);
};
cognitect.transit.VectorBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentVector.fromArray.call(null, arr, true);
};
cognitect.transit.VectorBuilder.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.VectorBuilder.cljs$lang$type = true;
cognitect.transit.VectorBuilder.cljs$lang$ctorStr = "cognitect.transit/VectorBuilder";
cognitect.transit.VectorBuilder.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write.call(null, writer__6752__auto__, "cognitect.transit/VectorBuilder");
};
cognitect.transit.__GT_VectorBuilder = function cognitect$transit$__GT_VectorBuilder() {
  return new cognitect.transit.VectorBuilder;
};
cognitect.transit.reader = function cognitect$transit$reader(var_args) {
  var args13341 = [];
  var len__7211__auto___13344 = arguments.length;
  var i__7212__auto___13345 = 0;
  while (true) {
    if (i__7212__auto___13345 < len__7211__auto___13344) {
      args13341.push(arguments[i__7212__auto___13345]);
      var G__13346 = i__7212__auto___13345 + 1;
      i__7212__auto___13345 = G__13346;
      continue;
    } else {
    }
    break;
  }
  var G__13343 = args13341.length;
  switch(G__13343) {
    case 1:
      return cognitect.transit.reader.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13341.length)].join(""));;
  }
};
cognitect.transit.reader.cljs$core$IFn$_invoke$arity$1 = function(type) {
  return cognitect.transit.reader.call(null, type, null);
};
cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2 = function(type, opts) {
  return com.cognitect.transit.reader.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"handlers":cljs.core.clj__GT_js.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, ["$", function(v) {
    return cljs.core.symbol.call(null, v);
  }, ":", function(v) {
    return cljs.core.keyword.call(null, v);
  }, "set", function(v) {
    return cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, v);
  }, "list", function(v) {
    return cljs.core.into.call(null, cljs.core.List.EMPTY, v.reverse());
  }, "cmap", function(v) {
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < v.length) {
        var G__13348 = i + 2;
        var G__13349 = cljs.core.assoc_BANG_.call(null, ret, v[i], v[i + 1]);
        i = G__13348;
        ret = G__13349;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, ret);
      }
      break;
    }
  }], null), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts))), "mapBuilder":new cognitect.transit.MapBuilder, "arrayBuilder":new cognitect.transit.VectorBuilder, "prefersStrings":false}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
};
cognitect.transit.reader.cljs$lang$maxFixedArity = 2;
cognitect.transit.read = function cognitect$transit$read(r, str) {
  return r.read(str);
};
cognitect.transit.KeywordHandler = function() {
};
cognitect.transit.KeywordHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return ":";
};
cognitect.transit.KeywordHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.KeywordHandler.cljs$lang$type = true;
cognitect.transit.KeywordHandler.cljs$lang$ctorStr = "cognitect.transit/KeywordHandler";
cognitect.transit.KeywordHandler.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write.call(null, writer__6752__auto__, "cognitect.transit/KeywordHandler");
};
cognitect.transit.__GT_KeywordHandler = function cognitect$transit$__GT_KeywordHandler() {
  return new cognitect.transit.KeywordHandler;
};
cognitect.transit.SymbolHandler = function() {
};
cognitect.transit.SymbolHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "$";
};
cognitect.transit.SymbolHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.SymbolHandler.cljs$lang$type = true;
cognitect.transit.SymbolHandler.cljs$lang$ctorStr = "cognitect.transit/SymbolHandler";
cognitect.transit.SymbolHandler.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write.call(null, writer__6752__auto__, "cognitect.transit/SymbolHandler");
};
cognitect.transit.__GT_SymbolHandler = function cognitect$transit$__GT_SymbolHandler() {
  return new cognitect.transit.SymbolHandler;
};
cognitect.transit.ListHandler = function() {
};
cognitect.transit.ListHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "list";
};
cognitect.transit.ListHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__13350_13354 = cljs.core.seq.call(null, v);
  var chunk__13351_13355 = null;
  var count__13352_13356 = 0;
  var i__13353_13357 = 0;
  while (true) {
    if (i__13353_13357 < count__13352_13356) {
      var x_13358 = cljs.core._nth.call(null, chunk__13351_13355, i__13353_13357);
      ret.push(x_13358);
      var G__13359 = seq__13350_13354;
      var G__13360 = chunk__13351_13355;
      var G__13361 = count__13352_13356;
      var G__13362 = i__13353_13357 + 1;
      seq__13350_13354 = G__13359;
      chunk__13351_13355 = G__13360;
      count__13352_13356 = G__13361;
      i__13353_13357 = G__13362;
      continue;
    } else {
      var temp__4657__auto___13363 = cljs.core.seq.call(null, seq__13350_13354);
      if (temp__4657__auto___13363) {
        var seq__13350_13364__$1 = temp__4657__auto___13363;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13350_13364__$1)) {
          var c__6956__auto___13365 = cljs.core.chunk_first.call(null, seq__13350_13364__$1);
          var G__13366 = cljs.core.chunk_rest.call(null, seq__13350_13364__$1);
          var G__13367 = c__6956__auto___13365;
          var G__13368 = cljs.core.count.call(null, c__6956__auto___13365);
          var G__13369 = 0;
          seq__13350_13354 = G__13366;
          chunk__13351_13355 = G__13367;
          count__13352_13356 = G__13368;
          i__13353_13357 = G__13369;
          continue;
        } else {
          var x_13370 = cljs.core.first.call(null, seq__13350_13364__$1);
          ret.push(x_13370);
          var G__13371 = cljs.core.next.call(null, seq__13350_13364__$1);
          var G__13372 = null;
          var G__13373 = 0;
          var G__13374 = 0;
          seq__13350_13354 = G__13371;
          chunk__13351_13355 = G__13372;
          count__13352_13356 = G__13373;
          i__13353_13357 = G__13374;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.ListHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.ListHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.ListHandler.cljs$lang$type = true;
cognitect.transit.ListHandler.cljs$lang$ctorStr = "cognitect.transit/ListHandler";
cognitect.transit.ListHandler.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write.call(null, writer__6752__auto__, "cognitect.transit/ListHandler");
};
cognitect.transit.__GT_ListHandler = function cognitect$transit$__GT_ListHandler() {
  return new cognitect.transit.ListHandler;
};
cognitect.transit.MapHandler = function() {
};
cognitect.transit.MapHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "map";
};
cognitect.transit.MapHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v;
};
cognitect.transit.MapHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.MapHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.MapHandler.cljs$lang$type = true;
cognitect.transit.MapHandler.cljs$lang$ctorStr = "cognitect.transit/MapHandler";
cognitect.transit.MapHandler.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write.call(null, writer__6752__auto__, "cognitect.transit/MapHandler");
};
cognitect.transit.__GT_MapHandler = function cognitect$transit$__GT_MapHandler() {
  return new cognitect.transit.MapHandler;
};
cognitect.transit.SetHandler = function() {
};
cognitect.transit.SetHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "set";
};
cognitect.transit.SetHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__13375_13379 = cljs.core.seq.call(null, v);
  var chunk__13376_13380 = null;
  var count__13377_13381 = 0;
  var i__13378_13382 = 0;
  while (true) {
    if (i__13378_13382 < count__13377_13381) {
      var x_13383 = cljs.core._nth.call(null, chunk__13376_13380, i__13378_13382);
      ret.push(x_13383);
      var G__13384 = seq__13375_13379;
      var G__13385 = chunk__13376_13380;
      var G__13386 = count__13377_13381;
      var G__13387 = i__13378_13382 + 1;
      seq__13375_13379 = G__13384;
      chunk__13376_13380 = G__13385;
      count__13377_13381 = G__13386;
      i__13378_13382 = G__13387;
      continue;
    } else {
      var temp__4657__auto___13388 = cljs.core.seq.call(null, seq__13375_13379);
      if (temp__4657__auto___13388) {
        var seq__13375_13389__$1 = temp__4657__auto___13388;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13375_13389__$1)) {
          var c__6956__auto___13390 = cljs.core.chunk_first.call(null, seq__13375_13389__$1);
          var G__13391 = cljs.core.chunk_rest.call(null, seq__13375_13389__$1);
          var G__13392 = c__6956__auto___13390;
          var G__13393 = cljs.core.count.call(null, c__6956__auto___13390);
          var G__13394 = 0;
          seq__13375_13379 = G__13391;
          chunk__13376_13380 = G__13392;
          count__13377_13381 = G__13393;
          i__13378_13382 = G__13394;
          continue;
        } else {
          var x_13395 = cljs.core.first.call(null, seq__13375_13389__$1);
          ret.push(x_13395);
          var G__13396 = cljs.core.next.call(null, seq__13375_13389__$1);
          var G__13397 = null;
          var G__13398 = 0;
          var G__13399 = 0;
          seq__13375_13379 = G__13396;
          chunk__13376_13380 = G__13397;
          count__13377_13381 = G__13398;
          i__13378_13382 = G__13399;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.SetHandler.prototype.stringRep = function() {
  var self__ = this;
  var v = this;
  return null;
};
cognitect.transit.SetHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.SetHandler.cljs$lang$type = true;
cognitect.transit.SetHandler.cljs$lang$ctorStr = "cognitect.transit/SetHandler";
cognitect.transit.SetHandler.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write.call(null, writer__6752__auto__, "cognitect.transit/SetHandler");
};
cognitect.transit.__GT_SetHandler = function cognitect$transit$__GT_SetHandler() {
  return new cognitect.transit.SetHandler;
};
cognitect.transit.VectorHandler = function() {
};
cognitect.transit.VectorHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "array";
};
cognitect.transit.VectorHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__13400_13404 = cljs.core.seq.call(null, v);
  var chunk__13401_13405 = null;
  var count__13402_13406 = 0;
  var i__13403_13407 = 0;
  while (true) {
    if (i__13403_13407 < count__13402_13406) {
      var x_13408 = cljs.core._nth.call(null, chunk__13401_13405, i__13403_13407);
      ret.push(x_13408);
      var G__13409 = seq__13400_13404;
      var G__13410 = chunk__13401_13405;
      var G__13411 = count__13402_13406;
      var G__13412 = i__13403_13407 + 1;
      seq__13400_13404 = G__13409;
      chunk__13401_13405 = G__13410;
      count__13402_13406 = G__13411;
      i__13403_13407 = G__13412;
      continue;
    } else {
      var temp__4657__auto___13413 = cljs.core.seq.call(null, seq__13400_13404);
      if (temp__4657__auto___13413) {
        var seq__13400_13414__$1 = temp__4657__auto___13413;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13400_13414__$1)) {
          var c__6956__auto___13415 = cljs.core.chunk_first.call(null, seq__13400_13414__$1);
          var G__13416 = cljs.core.chunk_rest.call(null, seq__13400_13414__$1);
          var G__13417 = c__6956__auto___13415;
          var G__13418 = cljs.core.count.call(null, c__6956__auto___13415);
          var G__13419 = 0;
          seq__13400_13404 = G__13416;
          chunk__13401_13405 = G__13417;
          count__13402_13406 = G__13418;
          i__13403_13407 = G__13419;
          continue;
        } else {
          var x_13420 = cljs.core.first.call(null, seq__13400_13414__$1);
          ret.push(x_13420);
          var G__13421 = cljs.core.next.call(null, seq__13400_13414__$1);
          var G__13422 = null;
          var G__13423 = 0;
          var G__13424 = 0;
          seq__13400_13404 = G__13421;
          chunk__13401_13405 = G__13422;
          count__13402_13406 = G__13423;
          i__13403_13407 = G__13424;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return ret;
};
cognitect.transit.VectorHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.VectorHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.VectorHandler.cljs$lang$type = true;
cognitect.transit.VectorHandler.cljs$lang$ctorStr = "cognitect.transit/VectorHandler";
cognitect.transit.VectorHandler.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write.call(null, writer__6752__auto__, "cognitect.transit/VectorHandler");
};
cognitect.transit.__GT_VectorHandler = function cognitect$transit$__GT_VectorHandler() {
  return new cognitect.transit.VectorHandler;
};
cognitect.transit.UUIDHandler = function() {
};
cognitect.transit.UUIDHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "u";
};
cognitect.transit.UUIDHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.uuid;
};
cognitect.transit.UUIDHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var this$ = this;
  return this$.rep(v);
};
cognitect.transit.UUIDHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.UUIDHandler.cljs$lang$type = true;
cognitect.transit.UUIDHandler.cljs$lang$ctorStr = "cognitect.transit/UUIDHandler";
cognitect.transit.UUIDHandler.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write.call(null, writer__6752__auto__, "cognitect.transit/UUIDHandler");
};
cognitect.transit.__GT_UUIDHandler = function cognitect$transit$__GT_UUIDHandler() {
  return new cognitect.transit.UUIDHandler;
};
cognitect.transit.writer = function cognitect$transit$writer(var_args) {
  var args13425 = [];
  var len__7211__auto___13436 = arguments.length;
  var i__7212__auto___13437 = 0;
  while (true) {
    if (i__7212__auto___13437 < len__7211__auto___13436) {
      args13425.push(arguments[i__7212__auto___13437]);
      var G__13438 = i__7212__auto___13437 + 1;
      i__7212__auto___13437 = G__13438;
      continue;
    } else {
    }
    break;
  }
  var G__13427 = args13425.length;
  switch(G__13427) {
    case 1:
      return cognitect.transit.writer.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cognitect.transit.writer.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13425.length)].join(""));;
  }
};
cognitect.transit.writer.cljs$core$IFn$_invoke$arity$1 = function(type) {
  return cognitect.transit.writer.call(null, type, null);
};
cognitect.transit.writer.cljs$core$IFn$_invoke$arity$2 = function(type, opts) {
  var keyword_handler = new cognitect.transit.KeywordHandler;
  var symbol_handler = new cognitect.transit.SymbolHandler;
  var list_handler = new cognitect.transit.ListHandler;
  var map_handler = new cognitect.transit.MapHandler;
  var set_handler = new cognitect.transit.SetHandler;
  var vector_handler = new cognitect.transit.VectorHandler;
  var uuid_handler = new cognitect.transit.UUIDHandler;
  var handlers = cljs.core.merge.call(null, cljs.core.PersistentHashMap.fromArrays([cljs.core.PersistentHashMap, cljs.core.Cons, cljs.core.PersistentArrayMap, cljs.core.NodeSeq, cljs.core.PersistentQueue, cljs.core.IndexedSeq, cljs.core.Keyword, cljs.core.EmptyList, cljs.core.LazySeq, cljs.core.Subvec, cljs.core.PersistentQueueSeq, cljs.core.ArrayNodeSeq, cljs.core.ValSeq, cljs.core.PersistentArrayMapSeq, cljs.core.PersistentVector, cljs.core.List, cljs.core.RSeq, cljs.core.PersistentHashSet, cljs.core.PersistentTreeMap, 
  cljs.core.KeySeq, cljs.core.ChunkedSeq, cljs.core.PersistentTreeSet, cljs.core.ChunkedCons, cljs.core.Symbol, cljs.core.UUID, cljs.core.Range, cljs.core.PersistentTreeMapSeq], [map_handler, list_handler, map_handler, list_handler, list_handler, list_handler, keyword_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, set_handler, map_handler, list_handler, list_handler, set_handler, list_handler, 
  symbol_handler, uuid_handler, list_handler, list_handler]), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts));
  return com.cognitect.transit.writer.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"objectBuilder":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
    return function(m, kfn, vfn) {
      return cljs.core.reduce_kv.call(null, function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
        return function(obj, k, v) {
          var G__13428 = obj;
          G__13428.push(kfn.call(null, k), vfn.call(null, v));
          return G__13428;
        };
      }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), ["^ "], m);
    };
  }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), "handlers":function() {
    var x13429 = cljs.core.clone.call(null, handlers);
    x13429.forEach = function(x13429, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
      return function(f) {
        var coll = this;
        var seq__13430 = cljs.core.seq.call(null, coll);
        var chunk__13431 = null;
        var count__13432 = 0;
        var i__13433 = 0;
        while (true) {
          if (i__13433 < count__13432) {
            var vec__13434 = cljs.core._nth.call(null, chunk__13431, i__13433);
            var k = cljs.core.nth.call(null, vec__13434, 0, null);
            var v = cljs.core.nth.call(null, vec__13434, 1, null);
            f.call(null, v, k);
            var G__13440 = seq__13430;
            var G__13441 = chunk__13431;
            var G__13442 = count__13432;
            var G__13443 = i__13433 + 1;
            seq__13430 = G__13440;
            chunk__13431 = G__13441;
            count__13432 = G__13442;
            i__13433 = G__13443;
            continue;
          } else {
            var temp__4657__auto__ = cljs.core.seq.call(null, seq__13430);
            if (temp__4657__auto__) {
              var seq__13430__$1 = temp__4657__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__13430__$1)) {
                var c__6956__auto__ = cljs.core.chunk_first.call(null, seq__13430__$1);
                var G__13444 = cljs.core.chunk_rest.call(null, seq__13430__$1);
                var G__13445 = c__6956__auto__;
                var G__13446 = cljs.core.count.call(null, c__6956__auto__);
                var G__13447 = 0;
                seq__13430 = G__13444;
                chunk__13431 = G__13445;
                count__13432 = G__13446;
                i__13433 = G__13447;
                continue;
              } else {
                var vec__13435 = cljs.core.first.call(null, seq__13430__$1);
                var k = cljs.core.nth.call(null, vec__13435, 0, null);
                var v = cljs.core.nth.call(null, vec__13435, 1, null);
                f.call(null, v, k);
                var G__13448 = cljs.core.next.call(null, seq__13430__$1);
                var G__13449 = null;
                var G__13450 = 0;
                var G__13451 = 0;
                seq__13430 = G__13448;
                chunk__13431 = G__13449;
                count__13432 = G__13450;
                i__13433 = G__13451;
                continue;
              }
            } else {
              return null;
            }
          }
          break;
        }
      };
    }(x13429, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers);
    return x13429;
  }(), "unpack":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
    return function(x) {
      if (x instanceof cljs.core.PersistentArrayMap) {
        return x.arr;
      } else {
        return false;
      }
    };
  }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers)}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
};
cognitect.transit.writer.cljs$lang$maxFixedArity = 2;
cognitect.transit.write = function cognitect$transit$write(w, o) {
  return w.write(o);
};
cognitect.transit.read_handler = function cognitect$transit$read_handler(from_rep) {
  return from_rep;
};
cognitect.transit.write_handler = function cognitect$transit$write_handler(var_args) {
  var args13452 = [];
  var len__7211__auto___13458 = arguments.length;
  var i__7212__auto___13459 = 0;
  while (true) {
    if (i__7212__auto___13459 < len__7211__auto___13458) {
      args13452.push(arguments[i__7212__auto___13459]);
      var G__13460 = i__7212__auto___13459 + 1;
      i__7212__auto___13459 = G__13460;
      continue;
    } else {
    }
    break;
  }
  var G__13454 = args13452.length;
  switch(G__13454) {
    case 2:
      return cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13452.length)].join(""));;
  }
};
cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$2 = function(tag_fn, rep_fn) {
  return cognitect.transit.write_handler.call(null, tag_fn, rep_fn, null, null);
};
cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$3 = function(tag_fn, rep_fn, str_rep_fn) {
  return cognitect.transit.write_handler.call(null, tag_fn, rep_fn, str_rep_fn, null);
};
cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$4 = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn) {
  if (typeof cognitect.transit.t_cognitect$transit13455 !== "undefined") {
  } else {
    cognitect.transit.t_cognitect$transit13455 = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn, meta13456) {
      this.tag_fn = tag_fn;
      this.rep_fn = rep_fn;
      this.str_rep_fn = str_rep_fn;
      this.verbose_handler_fn = verbose_handler_fn;
      this.meta13456 = meta13456;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cognitect.transit.t_cognitect$transit13455.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13457, meta13456__$1) {
      var self__ = this;
      var _13457__$1 = this;
      return new cognitect.transit.t_cognitect$transit13455(self__.tag_fn, self__.rep_fn, self__.str_rep_fn, self__.verbose_handler_fn, meta13456__$1);
    };
    cognitect.transit.t_cognitect$transit13455.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13457) {
      var self__ = this;
      var _13457__$1 = this;
      return self__.meta13456;
    };
    cognitect.transit.t_cognitect$transit13455.prototype.tag = function(o) {
      var self__ = this;
      var _ = this;
      return self__.tag_fn.call(null, o);
    };
    cognitect.transit.t_cognitect$transit13455.prototype.rep = function(o) {
      var self__ = this;
      var _ = this;
      return self__.rep_fn.call(null, o);
    };
    cognitect.transit.t_cognitect$transit13455.prototype.stringRep = function(o) {
      var self__ = this;
      var _ = this;
      if (cljs.core.truth_(self__.str_rep_fn)) {
        return self__.str_rep_fn.call(null, o);
      } else {
        return null;
      }
    };
    cognitect.transit.t_cognitect$transit13455.prototype.getVerboseHandler = function() {
      var self__ = this;
      var _ = this;
      if (cljs.core.truth_(self__.verbose_handler_fn)) {
        return self__.verbose_handler_fn.call(null);
      } else {
        return null;
      }
    };
    cognitect.transit.t_cognitect$transit13455.getBasis = function() {
      return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "tag-fn", "tag-fn", 242055482, null), new cljs.core.Symbol(null, "rep-fn", "rep-fn", -1724891035, null), new cljs.core.Symbol(null, "str-rep-fn", "str-rep-fn", -1179615016, null), new cljs.core.Symbol(null, "verbose-handler-fn", "verbose-handler-fn", 547340594, null), new cljs.core.Symbol(null, "meta13456", "meta13456", -1399713387, null)], null);
    };
    cognitect.transit.t_cognitect$transit13455.cljs$lang$type = true;
    cognitect.transit.t_cognitect$transit13455.cljs$lang$ctorStr = "cognitect.transit/t_cognitect$transit13455";
    cognitect.transit.t_cognitect$transit13455.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
      return cljs.core._write.call(null, writer__6752__auto__, "cognitect.transit/t_cognitect$transit13455");
    };
    cognitect.transit.__GT_t_cognitect$transit13455 = function cognitect$transit$__GT_t_cognitect$transit13455(tag_fn__$1, rep_fn__$1, str_rep_fn__$1, verbose_handler_fn__$1, meta13456) {
      return new cognitect.transit.t_cognitect$transit13455(tag_fn__$1, rep_fn__$1, str_rep_fn__$1, verbose_handler_fn__$1, meta13456);
    };
  }
  return new cognitect.transit.t_cognitect$transit13455(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn, cljs.core.PersistentArrayMap.EMPTY);
};
cognitect.transit.write_handler.cljs$lang$maxFixedArity = 4;
cognitect.transit.tagged_value = function cognitect$transit$tagged_value(tag, rep) {
  return com.cognitect.transit.types.taggedValue.call(null, tag, rep);
};
cognitect.transit.tagged_value_QMARK_ = function cognitect$transit$tagged_value_QMARK_(x) {
  return com.cognitect.transit.types.isTaggedValue.call(null, x);
};
cognitect.transit.integer = function cognitect$transit$integer(s) {
  return com.cognitect.transit.types.intValue.call(null, s);
};
cognitect.transit.integer_QMARK_ = function cognitect$transit$integer_QMARK_(x) {
  return com.cognitect.transit.types.isInteger.call(null, x);
};
cognitect.transit.bigint = function cognitect$transit$bigint(s) {
  return com.cognitect.transit.types.bigInteger.call(null, s);
};
cognitect.transit.bigint_QMARK_ = function cognitect$transit$bigint_QMARK_(x) {
  return com.cognitect.transit.types.isBigInteger.call(null, x);
};
cognitect.transit.bigdec = function cognitect$transit$bigdec(s) {
  return com.cognitect.transit.types.bigDecimalValue.call(null, s);
};
cognitect.transit.bigdec_QMARK_ = function cognitect$transit$bigdec_QMARK_(x) {
  return com.cognitect.transit.types.isBigDecimal.call(null, x);
};
cognitect.transit.uri = function cognitect$transit$uri(s) {
  return com.cognitect.transit.types.uri.call(null, s);
};
cognitect.transit.uri_QMARK_ = function cognitect$transit$uri_QMARK_(x) {
  return com.cognitect.transit.types.isURI.call(null, x);
};
cognitect.transit.uuid = function cognitect$transit$uuid(s) {
  return com.cognitect.transit.types.uuid.call(null, s);
};
cognitect.transit.uuid_QMARK_ = function cognitect$transit$uuid_QMARK_(x) {
  var or__6153__auto__ = com.cognitect.transit.types.isUUID.call(null, x);
  if (cljs.core.truth_(or__6153__auto__)) {
    return or__6153__auto__;
  } else {
    return x instanceof cljs.core.UUID;
  }
};
cognitect.transit.binary = function cognitect$transit$binary(s) {
  return com.cognitect.transit.types.binary.call(null, s);
};
cognitect.transit.binary_QMARK_ = function cognitect$transit$binary_QMARK_(x) {
  return com.cognitect.transit.types.isBinary.call(null, x);
};
cognitect.transit.quoted = function cognitect$transit$quoted(x) {
  return com.cognitect.transit.types.quoted.call(null, x);
};
cognitect.transit.quoted_QMARK_ = function cognitect$transit$quoted_QMARK_(x) {
  return com.cognitect.transit.types.isQuoted.call(null, x);
};
cognitect.transit.link = function cognitect$transit$link(x) {
  return com.cognitect.transit.types.link.call(null, x);
};
cognitect.transit.link_QMARK_ = function cognitect$transit$link_QMARK_(x) {
  return com.cognitect.transit.types.isLink.call(null, x);
};
goog.provide("cljs_http.util");
goog.require("cljs.core");
goog.require("goog.Uri");
goog.require("clojure.string");
goog.require("cognitect.transit");
goog.require("goog.userAgent");
goog.require("no.en.core");
cljs_http.util.basic_auth = function cljs_http$util$basic_auth(credentials) {
  if (cljs.core.truth_(credentials)) {
    var vec__13465 = cljs.core.map_QMARK_.call(null, credentials) ? cljs.core.map.call(null, credentials, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "username", "username", 1605666410), new cljs.core.Keyword(null, "password", "password", 417022471)], null)) : credentials;
    var username = cljs.core.nth.call(null, vec__13465, 0, null);
    var password = cljs.core.nth.call(null, vec__13465, 1, null);
    return [cljs.core.str("Basic "), cljs.core.str(no.en.core.base64_encode.call(null, [cljs.core.str(username), cljs.core.str(":"), cljs.core.str(password)].join("")))].join("");
  } else {
    return null;
  }
};
cljs_http.util.build_url = function cljs_http$util$build_url(p__13466) {
  var map__13470 = p__13466;
  var map__13470__$1 = (!(map__13470 == null) ? map__13470.cljs$lang$protocol_mask$partition0$ & 64 || map__13470.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13470) : map__13470;
  var scheme = cljs.core.get.call(null, map__13470__$1, new cljs.core.Keyword(null, "scheme", "scheme", 90199613));
  var server_name = cljs.core.get.call(null, map__13470__$1, new cljs.core.Keyword(null, "server-name", "server-name", -1012104295));
  var server_port = cljs.core.get.call(null, map__13470__$1, new cljs.core.Keyword(null, "server-port", "server-port", 663745648));
  var uri = cljs.core.get.call(null, map__13470__$1, new cljs.core.Keyword(null, "uri", "uri", -774711847));
  var query_string = cljs.core.get.call(null, map__13470__$1, new cljs.core.Keyword(null, "query-string", "query-string", -1018845061));
  return [cljs.core.str(function() {
    var G__13472 = new goog.Uri;
    G__13472.setScheme(cljs.core.name.call(null, function() {
      var or__6153__auto__ = scheme;
      if (cljs.core.truth_(or__6153__auto__)) {
        return or__6153__auto__;
      } else {
        return new cljs.core.Keyword(null, "http", "http", 382524695);
      }
    }()));
    G__13472.setDomain(server_name);
    G__13472.setPort(server_port);
    G__13472.setPath(uri);
    G__13472.setQuery(query_string, true);
    return G__13472;
  }())].join("");
};
cljs_http.util.camelize = function cljs_http$util$camelize(s) {
  return clojure.string.join.call(null, "-", cljs.core.map.call(null, clojure.string.capitalize, clojure.string.split.call(null, [cljs.core.str(s)].join(""), /-/)));
};
cljs_http.util.build_headers = function cljs_http$util$build_headers(m) {
  return cljs.core.clj__GT_js.call(null, cljs.core.zipmap.call(null, cljs.core.map.call(null, cljs_http.util.camelize, cljs.core.keys.call(null, m)), cljs.core.vals.call(null, m)));
};
cljs_http.util.user_agent = function cljs_http$util$user_agent() {
  return goog.userAgent.getUserAgentString();
};
cljs_http.util.android_QMARK_ = function cljs_http$util$android_QMARK_() {
  return cljs.core.re_matches.call(null, /.*android.*/i, cljs_http.util.user_agent.call(null));
};
cljs_http.util.transit_decode = function cljs_http$util$transit_decode(s, type, opts) {
  var rdr = cognitect.transit.reader.call(null, type, opts);
  return cognitect.transit.read.call(null, rdr, s);
};
cljs_http.util.transit_encode = function cljs_http$util$transit_encode(x, type, opts) {
  var wrtr = cognitect.transit.writer.call(null, type, opts);
  return cognitect.transit.write.call(null, wrtr, x);
};
cljs_http.util.json_decode = function cljs_http$util$json_decode(s) {
  var temp__4655__auto__ = !clojure.string.blank_QMARK_.call(null, s) ? JSON.parse(s) : null;
  if (cljs.core.truth_(temp__4655__auto__)) {
    var v = temp__4655__auto__;
    return cljs.core.js__GT_clj.call(null, v, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), true);
  } else {
    return null;
  }
};
cljs_http.util.json_encode = function cljs_http$util$json_encode(x) {
  return JSON.stringify(cljs.core.clj__GT_js.call(null, x));
};
cljs_http.util.parse_headers = function cljs_http$util$parse_headers(headers) {
  return cljs.core.reduce.call(null, function(p1__13474_SHARP_, p2__13473_SHARP_) {
    var vec__13476 = clojure.string.split.call(null, p2__13473_SHARP_, /:\s+/);
    var k = cljs.core.nth.call(null, vec__13476, 0, null);
    var v = cljs.core.nth.call(null, vec__13476, 1, null);
    if (clojure.string.blank_QMARK_.call(null, k) || clojure.string.blank_QMARK_.call(null, v)) {
      return p1__13474_SHARP_;
    } else {
      return cljs.core.assoc.call(null, p1__13474_SHARP_, clojure.string.lower_case.call(null, k), v);
    }
  }, cljs.core.PersistentArrayMap.EMPTY, clojure.string.split.call(null, function() {
    var or__6153__auto__ = headers;
    if (cljs.core.truth_(or__6153__auto__)) {
      return or__6153__auto__;
    } else {
      return "";
    }
  }(), /(\n)|(\r)|(\r\n)|(\n\r)/));
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
};
cljs.core.async.impl.protocols.take_BANG_ = function cljs$core$async$impl$protocols$take_BANG_(port, fn1_handler) {
  if (!(port == null) && !(port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 == null)) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__6808__auto__ = port == null ? null : port;
    var m__6809__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, port, fn1_handler);
    } else {
      var m__6809__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, port, fn1_handler);
      } else {
        throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
      }
    }
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
};
cljs.core.async.impl.protocols.put_BANG_ = function cljs$core$async$impl$protocols$put_BANG_(port, val, fn1_handler) {
  if (!(port == null) && !(port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 == null)) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    var x__6808__auto__ = port == null ? null : port;
    var m__6809__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, port, val, fn1_handler);
    } else {
      var m__6809__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, port, val, fn1_handler);
      } else {
        throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
      }
    }
  }
};
cljs.core.async.impl.protocols.Channel = function() {
};
cljs.core.async.impl.protocols.close_BANG_ = function cljs$core$async$impl$protocols$close_BANG_(chan) {
  if (!(chan == null) && !(chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 == null)) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__6808__auto__ = chan == null ? null : chan;
    var m__6809__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, chan);
    } else {
      var m__6809__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, chan);
      } else {
        throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
      }
    }
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function cljs$core$async$impl$protocols$closed_QMARK_(chan) {
  if (!(chan == null) && !(chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 == null)) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    var x__6808__auto__ = chan == null ? null : chan;
    var m__6809__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, chan);
    } else {
      var m__6809__auto____$1 = cljs.core.async.impl.protocols.closed_QMARK_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, chan);
      } else {
        throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
      }
    }
  }
};
cljs.core.async.impl.protocols.Handler = function() {
};
cljs.core.async.impl.protocols.active_QMARK_ = function cljs$core$async$impl$protocols$active_QMARK_(h) {
  if (!(h == null) && !(h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 == null)) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__6808__auto__ = h == null ? null : h;
    var m__6809__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, h);
    } else {
      var m__6809__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, h);
      } else {
        throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
      }
    }
  }
};
cljs.core.async.impl.protocols.blockable_QMARK_ = function cljs$core$async$impl$protocols$blockable_QMARK_(h) {
  if (!(h == null) && !(h.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 == null)) {
    return h.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1(h);
  } else {
    var x__6808__auto__ = h == null ? null : h;
    var m__6809__auto__ = cljs.core.async.impl.protocols.blockable_QMARK_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, h);
    } else {
      var m__6809__auto____$1 = cljs.core.async.impl.protocols.blockable_QMARK_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, h);
      } else {
        throw cljs.core.missing_protocol.call(null, "Handler.blockable?", h);
      }
    }
  }
};
cljs.core.async.impl.protocols.commit = function cljs$core$async$impl$protocols$commit(h) {
  if (!(h == null) && !(h.cljs$core$async$impl$protocols$Handler$commit$arity$1 == null)) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__6808__auto__ = h == null ? null : h;
    var m__6809__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, h);
    } else {
      var m__6809__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, h);
      } else {
        throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
      }
    }
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
};
cljs.core.async.impl.protocols.full_QMARK_ = function cljs$core$async$impl$protocols$full_QMARK_(b) {
  if (!(b == null) && !(b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 == null)) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__6808__auto__ = b == null ? null : b;
    var m__6809__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, b);
    } else {
      var m__6809__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, b);
      } else {
        throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
      }
    }
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function cljs$core$async$impl$protocols$remove_BANG_(b) {
  if (!(b == null) && !(b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 == null)) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__6808__auto__ = b == null ? null : b;
    var m__6809__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, b);
    } else {
      var m__6809__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, b);
      } else {
        throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
      }
    }
  }
};
cljs.core.async.impl.protocols.add_BANG__STAR_ = function cljs$core$async$impl$protocols$add_BANG__STAR_(b, itm) {
  if (!(b == null) && !(b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 == null)) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2(b, itm);
  } else {
    var x__6808__auto__ = b == null ? null : b;
    var m__6809__auto__ = cljs.core.async.impl.protocols.add_BANG__STAR_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, b, itm);
    } else {
      var m__6809__auto____$1 = cljs.core.async.impl.protocols.add_BANG__STAR_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, b, itm);
      } else {
        throw cljs.core.missing_protocol.call(null, "Buffer.add!*", b);
      }
    }
  }
};
cljs.core.async.impl.protocols.close_buf_BANG_ = function cljs$core$async$impl$protocols$close_buf_BANG_(b) {
  if (!(b == null) && !(b.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 == null)) {
    return b.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1(b);
  } else {
    var x__6808__auto__ = b == null ? null : b;
    var m__6809__auto__ = cljs.core.async.impl.protocols.close_buf_BANG_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, b);
    } else {
      var m__6809__auto____$1 = cljs.core.async.impl.protocols.close_buf_BANG_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, b);
      } else {
        throw cljs.core.missing_protocol.call(null, "Buffer.close-buf!", b);
      }
    }
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function cljs$core$async$impl$protocols$add_BANG_(var_args) {
  var args13036 = [];
  var len__7211__auto___13039 = arguments.length;
  var i__7212__auto___13040 = 0;
  while (true) {
    if (i__7212__auto___13040 < len__7211__auto___13039) {
      args13036.push(arguments[i__7212__auto___13040]);
      var G__13041 = i__7212__auto___13040 + 1;
      i__7212__auto___13040 = G__13041;
      continue;
    } else {
    }
    break;
  }
  var G__13038 = args13036.length;
  switch(G__13038) {
    case 1:
      return cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13036.length)].join(""));;
  }
};
cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$1 = function(b) {
  return b;
};
cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2 = function(b, itm) {
  if (!(itm == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "itm", "itm", -713282527, null)))))].join(""));
  }
  return cljs.core.async.impl.protocols.add_BANG__STAR_.call(null, b, itm);
};
cljs.core.async.impl.protocols.add_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
};
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function cljs$core$async$impl$buffers$acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__13045 = cnt + 1;
      cnt = G__13045;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__7056__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__7056__auto__) {
      var v_13046 = this$.pop();
      if (keep_QMARK_.call(null, v_13046)) {
        this$.unshift(v_13046);
      } else {
      }
      var G__13047 = x + 1;
      x = G__13047;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "head", "head", 869147608, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "tail", "tail", 494507963, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "length", "length", -2065447907, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write.call(null, writer__6752__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function cljs$core$async$impl$buffers$__GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function cljs$core$async$impl$buffers$ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  self__.buf.unbounded_unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return null;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)], null);
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write.call(null, writer__6752__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function cljs$core$async$impl$buffers$__GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function cljs$core$async$impl$buffers$fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
  } else {
    self__.buf.unshift(itm);
  }
  return this$__$1;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return null;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)], null);
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write.call(null, writer__6752__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function cljs$core$async$impl$buffers$__GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function cljs$core$async$impl$buffers$dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  self__.buf.unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return null;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)], null);
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write.call(null, writer__6752__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function cljs$core$async$impl$buffers$__GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function cljs$core$async$impl$buffers$sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
if (typeof cljs.core.async.impl.buffers.NO_VAL !== "undefined") {
} else {
  cljs.core.async.impl.buffers.NO_VAL = new Object;
}
cljs.core.async.impl.buffers.undelivered_QMARK_ = function cljs$core$async$impl$buffers$undelivered_QMARK_(val) {
  return cljs.core.async.impl.buffers.NO_VAL === val;
};
cljs.core.async.impl.buffers.PromiseBuffer = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return false;
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val;
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.truth_(cljs.core.async.impl.buffers.undelivered_QMARK_.call(null, self__.val))) {
    self__.val = itm;
  } else {
  }
  return this$__$1;
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$async$impl$protocols$Buffer$close_buf_BANG_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(cljs.core.async.impl.buffers.undelivered_QMARK_.call(null, self__.val))) {
    return self__.val = null;
  } else {
    return null;
  }
};
cljs.core.async.impl.buffers.PromiseBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(cljs.core.async.impl.buffers.undelivered_QMARK_.call(null, self__.val))) {
    return 0;
  } else {
    return 1;
  }
};
cljs.core.async.impl.buffers.PromiseBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.async.impl.buffers.PromiseBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.PromiseBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/PromiseBuffer";
cljs.core.async.impl.buffers.PromiseBuffer.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write.call(null, writer__6752__auto__, "cljs.core.async.impl.buffers/PromiseBuffer");
};
cljs.core.async.impl.buffers.__GT_PromiseBuffer = function cljs$core$async$impl$buffers$__GT_PromiseBuffer(val) {
  return new cljs.core.async.impl.buffers.PromiseBuffer(val);
};
cljs.core.async.impl.buffers.promise_buffer = function cljs$core$async$impl$buffers$promise_buffer() {
  return new cljs.core.async.impl.buffers.PromiseBuffer(cljs.core.async.impl.buffers.NO_VAL);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("goog.async.nextTick");
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function cljs$core$async$impl$dispatch$process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_13050 = 0;
  while (true) {
    var m_13051 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_13051 == null) {
    } else {
      m_13051.call(null);
      if (count_13050 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__13052 = count_13050 + 1;
        count_13050 = G__13052;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
cljs.core.async.impl.dispatch.queue_dispatcher = function cljs$core$async$impl$dispatch$queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__6141__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (cljs.core.truth_(and__6141__auto__)) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__6141__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    return goog.async.nextTick(cljs.core.async.impl.dispatch.process_messages);
  }
};
cljs.core.async.impl.dispatch.run = function cljs$core$async$impl$dispatch$run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function cljs$core$async$impl$dispatch$queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.channels.box = function cljs$core$async$impl$channels$box(val) {
  if (typeof cljs.core.async.impl.channels.t_cljs$core$async$impl$channels13058 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels13058 = function(box, val, meta13059) {
      this.box = box;
      this.val = val;
      this.meta13059 = meta13059;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels13058.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13060, meta13059__$1) {
      var self__ = this;
      var _13060__$1 = this;
      return new cljs.core.async.impl.channels.t_cljs$core$async$impl$channels13058(self__.box, self__.val, meta13059__$1);
    };
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels13058.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13060) {
      var self__ = this;
      var _13060__$1 = this;
      return self__.meta13059;
    };
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels13058.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels13058.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "box", "box", -1123515375, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 
      1769233139, null)], null)))], null)), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "meta13059", "meta13059", 1970825983, null)], null);
    };
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels13058.cljs$lang$type = true;
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels13058.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t_cljs$core$async$impl$channels13058";
    cljs.core.async.impl.channels.t_cljs$core$async$impl$channels13058.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
      return cljs.core._write.call(null, writer__6752__auto__, "cljs.core.async.impl.channels/t_cljs$core$async$impl$channels13058");
    };
    cljs.core.async.impl.channels.__GT_t_cljs$core$async$impl$channels13058 = function cljs$core$async$impl$channels$box_$___GT_t_cljs$core$async$impl$channels13058(box__$1, val__$1, meta13059) {
      return new cljs.core.async.impl.channels.t_cljs$core$async$impl$channels13058(box__$1, val__$1, meta13059);
    };
  }
  return new cljs.core.async.impl.channels.t_cljs$core$async$impl$channels13058(cljs$core$async$impl$channels$box, val, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "handler", "handler", 1444934915, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null)], null);
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write.call(null, writer__6752__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function cljs$core$async$impl$channels$__GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function cljs$core$async$impl$channels$put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.MMC = function() {
};
cljs.core.async.impl.channels.abort = function cljs$core$async$impl$channels$abort(this$) {
  if (!(this$ == null) && !(this$.cljs$core$async$impl$channels$MMC$abort$arity$1 == null)) {
    return this$.cljs$core$async$impl$channels$MMC$abort$arity$1(this$);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = cljs.core.async.impl.channels.abort[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, this$);
    } else {
      var m__6809__auto____$1 = cljs.core.async.impl.channels.abort["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "MMC.abort", this$);
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
  this.add_BANG_ = add_BANG_;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$abort$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  while (true) {
    var putter_13061 = self__.puts.pop();
    if (putter_13061 == null) {
    } else {
      var put_handler_13062 = putter_13061.handler;
      var val_13063 = putter_13061.val;
      if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_13062)) {
        var put_cb_13064 = cljs.core.async.impl.protocols.commit.call(null, put_handler_13062);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb_13064, put_handler_13062, val_13063, putter_13061, this$__$1) {
          return function() {
            return put_cb_13064.call(null, true);
          };
        }(put_cb_13064, put_handler_13062, val_13063, putter_13061, this$__$1));
      } else {
        continue;
      }
    }
    break;
  }
  self__.puts.cleanup(cljs.core.constantly.call(null, false));
  return cljs.core.async.impl.protocols.close_BANG_.call(null, this$__$1);
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    if (cljs.core.truth_(function() {
      var and__6141__auto__ = self__.buf;
      if (cljs.core.truth_(and__6141__auto__)) {
        return cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf));
      } else {
        return and__6141__auto__;
      }
    }())) {
      cljs.core.async.impl.protocols.commit.call(null, handler);
      var done_QMARK_ = cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val));
      while (true) {
        if (self__.takes.length > 0 && cljs.core.count.call(null, self__.buf) > 0) {
          var taker_13065 = self__.takes.pop();
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_13065)) {
            var take_cb_13066 = cljs.core.async.impl.protocols.commit.call(null, taker_13065);
            var val_13067__$1 = cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf);
            cljs.core.async.impl.dispatch.run.call(null, function(take_cb_13066, val_13067__$1, taker_13065, done_QMARK_, closed__$1, this$__$1) {
              return function() {
                return take_cb_13066.call(null, val_13067__$1);
              };
            }(take_cb_13066, val_13067__$1, taker_13065, done_QMARK_, closed__$1, this$__$1));
          } else {
            continue;
          }
        } else {
        }
        break;
      }
      if (done_QMARK_) {
        cljs.core.async.impl.channels.abort.call(null, this$__$1);
      } else {
      }
      return cljs.core.async.impl.channels.box.call(null, true);
    } else {
      var taker = function() {
        while (true) {
          var taker = self__.takes.pop();
          if (cljs.core.truth_(taker)) {
            if (cljs.core.truth_(cljs.core.async.impl.protocols.active_QMARK_.call(null, taker))) {
              return taker;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(taker)) {
        var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(take_cb, taker, closed__$1, this$__$1) {
          return function() {
            return take_cb.call(null, val);
          };
        }(take_cb, taker, closed__$1, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, true);
      } else {
        if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
          self__.dirty_puts = 0;
          self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
        } else {
          self__.dirty_puts = self__.dirty_puts + 1;
        }
        if (cljs.core.truth_(cljs.core.async.impl.protocols.blockable_QMARK_.call(null, handler))) {
          if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
            -280799999, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
          }
          self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
        } else {
        }
        return null;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      var retval = cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
      while (true) {
        if (cljs.core.truth_(cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
        } else {
          var putter_13068 = self__.puts.pop();
          if (putter_13068 == null) {
          } else {
            var put_handler_13069 = putter_13068.handler;
            var val_13070 = putter_13068.val;
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_13069)) {
              var put_cb_13071 = cljs.core.async.impl.protocols.commit.call(null, put_handler_13069);
              cljs.core.async.impl.protocols.commit.call(null, handler);
              cljs.core.async.impl.dispatch.run.call(null, function(put_cb_13071, put_handler_13069, val_13070, putter_13068, _, retval, this$__$1) {
                return function() {
                  return put_cb_13071.call(null, true);
                };
              }(put_cb_13071, put_handler_13069, val_13070, putter_13068, _, retval, this$__$1));
              if (cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val_13070))) {
                cljs.core.async.impl.channels.abort.call(null, this$__$1);
              } else {
              }
            } else {
            }
            continue;
          }
        }
        break;
      }
      return retval;
    } else {
      var putter = function() {
        while (true) {
          var putter = self__.puts.pop();
          if (cljs.core.truth_(putter)) {
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, putter.handler)) {
              return putter;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(putter)) {
        var put_cb = cljs.core.async.impl.protocols.commit.call(null, putter.handler);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb, putter, this$__$1) {
          return function() {
            return put_cb.call(null, true);
          };
        }(put_cb, putter, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, putter.val);
      } else {
        if (cljs.core.truth_(self__.closed)) {
          if (cljs.core.truth_(self__.buf)) {
            self__.add_BANG_.call(null, self__.buf);
          } else {
          }
          if (cljs.core.truth_(function() {
            var and__6141__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, handler);
            if (cljs.core.truth_(and__6141__auto__)) {
              return cljs.core.async.impl.protocols.commit.call(null, handler);
            } else {
              return and__6141__auto__;
            }
          }())) {
            var has_val = function() {
              var and__6141__auto__ = self__.buf;
              if (cljs.core.truth_(and__6141__auto__)) {
                return cljs.core.count.call(null, self__.buf) > 0;
              } else {
                return and__6141__auto__;
              }
            }();
            var val = cljs.core.truth_(has_val) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            return null;
          }
        } else {
          if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_takes = 0;
            self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
          } else {
            self__.dirty_takes = self__.dirty_takes + 1;
          }
          if (cljs.core.truth_(cljs.core.async.impl.protocols.blockable_QMARK_.call(null, handler))) {
            if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
            } else {
              throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", -280799999, null), new cljs.core.Symbol(null, 
              "takes", "takes", 298247964, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
            }
            self__.takes.unbounded_unshift(handler);
          } else {
          }
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    if (cljs.core.truth_(function() {
      var and__6141__auto__ = self__.buf;
      if (cljs.core.truth_(and__6141__auto__)) {
        return self__.puts.length === 0;
      } else {
        return and__6141__auto__;
      }
    }())) {
      self__.add_BANG_.call(null, self__.buf);
    } else {
    }
    while (true) {
      var taker_13072 = self__.takes.pop();
      if (taker_13072 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_13072)) {
          var take_cb_13073 = cljs.core.async.impl.protocols.commit.call(null, taker_13072);
          var val_13074 = cljs.core.truth_(function() {
            var and__6141__auto__ = self__.buf;
            if (cljs.core.truth_(and__6141__auto__)) {
              return cljs.core.count.call(null, self__.buf) > 0;
            } else {
              return and__6141__auto__;
            }
          }()) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_13073, val_13074, taker_13072, this$__$1) {
            return function() {
              return take_cb_13073.call(null, val_13074);
            };
          }(take_cb_13073, val_13074, taker_13072, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    if (cljs.core.truth_(self__.buf)) {
      cljs.core.async.impl.protocols.close_buf_BANG_.call(null, self__.buf);
    } else {
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.getBasis = function() {
  return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "takes", "takes", 298247964, null), cljs.core.with_meta(new cljs.core.Symbol(null, "dirty-takes", "dirty-takes", 575642138, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null), cljs.core.with_meta(new cljs.core.Symbol(null, "dirty-puts", "dirty-puts", 
  57041148, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "closed", "closed", 720856168, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "add!", "add!", 2046056845, null)], null);
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write.call(null, writer__6752__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function cljs$core$async$impl$channels$__GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_);
};
cljs.core.async.impl.channels.ex_handler = function cljs$core$async$impl$channels$ex_handler(ex) {
  console.log(ex);
  return null;
};
cljs.core.async.impl.channels.handle = function cljs$core$async$impl$channels$handle(buf, exh, t) {
  var else$ = function() {
    var or__6153__auto__ = exh;
    if (cljs.core.truth_(or__6153__auto__)) {
      return or__6153__auto__;
    } else {
      return cljs.core.async.impl.channels.ex_handler;
    }
  }().call(null, t);
  if (else$ == null) {
    return buf;
  } else {
    return cljs.core.async.impl.protocols.add_BANG_.call(null, buf, else$);
  }
};
cljs.core.async.impl.channels.chan = function cljs$core$async$impl$channels$chan(var_args) {
  var args13075 = [];
  var len__7211__auto___13080 = arguments.length;
  var i__7212__auto___13081 = 0;
  while (true) {
    if (i__7212__auto___13081 < len__7211__auto___13080) {
      args13075.push(arguments[i__7212__auto___13081]);
      var G__13082 = i__7212__auto___13081 + 1;
      i__7212__auto___13081 = G__13082;
      continue;
    } else {
    }
    break;
  }
  var G__13077 = args13075.length;
  switch(G__13077) {
    case 1:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13075.length)].join(""));;
  }
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1 = function(buf) {
  return cljs.core.async.impl.channels.chan.call(null, buf, null);
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2 = function(buf, xform) {
  return cljs.core.async.impl.channels.chan.call(null, buf, xform, null);
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3 = function(buf, xform, exh) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false, function() {
    var add_BANG_ = cljs.core.truth_(xform) ? xform.call(null, cljs.core.async.impl.protocols.add_BANG_) : cljs.core.async.impl.protocols.add_BANG_;
    return function(add_BANG_) {
      return function() {
        var G__13084 = null;
        var G__13084__1 = function(buf__$1) {
          try {
            return add_BANG_.call(null, buf__$1);
          } catch (e13078) {
            var t = e13078;
            return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
          }
        };
        var G__13084__2 = function(buf__$1, val) {
          try {
            return add_BANG_.call(null, buf__$1, val);
          } catch (e13079) {
            var t = e13079;
            return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
          }
        };
        G__13084 = function(buf__$1, val) {
          switch(arguments.length) {
            case 1:
              return G__13084__1.call(this, buf__$1);
            case 2:
              return G__13084__2.call(this, buf__$1, val);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__13084.cljs$core$IFn$_invoke$arity$1 = G__13084__1;
        G__13084.cljs$core$IFn$_invoke$arity$2 = G__13084__2;
        return G__13084;
      }();
    }(add_BANG_);
  }());
};
cljs.core.async.impl.channels.chan.cljs$lang$maxFixedArity = 3;
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function cljs$core$async$impl$ioc_helpers$aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function cljs$core$async$impl$ioc_helpers$aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function cljs$core$async$impl$ioc_helpers$finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function cljs$core$async$impl$ioc_helpers$fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13482 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13482 = function(fn_handler, f, meta13483) {
      this.fn_handler = fn_handler;
      this.f = f;
      this.meta13483 = meta13483;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13482.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13484, meta13483__$1) {
      var self__ = this;
      var _13484__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13482(self__.fn_handler, self__.f, meta13483__$1);
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13482.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13484) {
      var self__ = this;
      var _13484__$1 = this;
      return self__.meta13483;
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13482.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13482.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13482.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13482.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13482.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "fn-handler", "fn-handler", 648785851, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "private", "private", -558947994), true, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, 
      cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", "f", 43394975, null)], null)))], null)), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "meta13483", "meta13483", -264764310, null)], null);
    };
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13482.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13482.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t_cljs$core$async$impl$ioc_helpers13482";
    cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13482.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
      return cljs.core._write.call(null, writer__6752__auto__, "cljs.core.async.impl.ioc-helpers/t_cljs$core$async$impl$ioc_helpers13482");
    };
    cljs.core.async.impl.ioc_helpers.__GT_t_cljs$core$async$impl$ioc_helpers13482 = function cljs$core$async$impl$ioc_helpers$fn_handler_$___GT_t_cljs$core$async$impl$ioc_helpers13482(fn_handler__$1, f__$1, meta13483) {
      return new cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13482(fn_handler__$1, f__$1, meta13483);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t_cljs$core$async$impl$ioc_helpers13482(cljs$core$async$impl$ioc_helpers$fn_handler, f, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function cljs$core$async$impl$ioc_helpers$run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function cljs$core$async$impl$ioc_helpers$run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e13486) {
    if (e13486 instanceof Object) {
      var ex = e13486;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      throw e13486;
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function cljs$core$async$impl$ioc_helpers$take_BANG_(state, blk, c) {
  var temp__4655__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_13489_13491 = state;
    statearr_13489_13491[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_13489_13491[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4655__auto__)) {
    var cb = temp__4655__auto__;
    var statearr_13490_13492 = state;
    statearr_13490_13492[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_13490_13492[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function cljs$core$async$impl$ioc_helpers$put_BANG_(state, blk, c, val) {
  var temp__4655__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_13495_13497 = state;
    statearr_13495_13497[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = ret_val;
    statearr_13495_13497[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4655__auto__)) {
    var cb = temp__4655__auto__;
    var statearr_13496_13498 = state;
    statearr_13496_13498[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_13496_13498[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.return_chan = function cljs$core$async$impl$ioc_helpers$return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap, __hash) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__6767__auto__, k__6768__auto__) {
  var self__ = this;
  var this__6767__auto____$1 = this;
  return cljs.core._lookup.call(null, this__6767__auto____$1, k__6768__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__6769__auto__, k13500, else__6770__auto__) {
  var self__ = this;
  var this__6769__auto____$1 = this;
  var G__13502 = k13500 instanceof cljs.core.Keyword ? k13500.fqn : null;
  switch(G__13502) {
    case "catch-block":
      return self__.catch_block;
      break;
    case "catch-exception":
      return self__.catch_exception;
      break;
    case "finally-block":
      return self__.finally_block;
      break;
    case "continue-block":
      return self__.continue_block;
      break;
    case "prev":
      return self__.prev;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k13500, else__6770__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__6781__auto__, writer__6782__auto__, opts__6783__auto__) {
  var self__ = this;
  var this__6781__auto____$1 = this;
  var pr_pair__6784__auto__ = function(this__6781__auto____$1) {
    return function(keyval__6785__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__6782__auto__, cljs.core.pr_writer, "", " ", "", opts__6783__auto__, keyval__6785__auto__);
    };
  }(this__6781__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__6782__auto__, pr_pair__6784__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__6783__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IIterable$ = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__13499) {
  var self__ = this;
  var G__13499__$1 = this;
  return new cljs.core.RecordIter(0, G__13499__$1, 5, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), new cljs.core.Keyword(null, "prev", "prev", -1597069226)], null), 
  cljs.core._iterator.call(null, self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__6765__auto__) {
  var self__ = this;
  var this__6765__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__6761__auto__) {
  var self__ = this;
  var this__6761__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__6771__auto__) {
  var self__ = this;
  var this__6771__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__6762__auto__) {
  var self__ = this;
  var this__6762__auto____$1 = this;
  var h__6588__auto__ = self__.__hash;
  if (!(h__6588__auto__ == null)) {
    return h__6588__auto__;
  } else {
    var h__6588__auto____$1 = cljs.core.hash_imap.call(null, this__6762__auto____$1);
    self__.__hash = h__6588__auto____$1;
    return h__6588__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__6763__auto__, other__6764__auto__) {
  var self__ = this;
  var this__6763__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__6141__auto__ = other__6764__auto__;
    if (cljs.core.truth_(and__6141__auto__)) {
      var and__6141__auto____$1 = this__6763__auto____$1.constructor === other__6764__auto__.constructor;
      if (and__6141__auto____$1) {
        return cljs.core.equiv_map.call(null, this__6763__auto____$1, other__6764__auto__);
      } else {
        return and__6141__auto____$1;
      }
    } else {
      return and__6141__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__6776__auto__, k__6777__auto__) {
  var self__ = this;
  var this__6776__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  null], null), null), k__6777__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__6776__auto____$1), self__.__meta), k__6777__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__6777__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__6774__auto__, k__6775__auto__, G__13499) {
  var self__ = this;
  var this__6774__auto____$1 = this;
  var pred__13503 = cljs.core.keyword_identical_QMARK_;
  var expr__13504 = k__6775__auto__;
  if (cljs.core.truth_(pred__13503.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), expr__13504))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__13499, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__13503.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), expr__13504))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__13499, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__13503.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), expr__13504))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__13499, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__13503.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), expr__13504))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__13499, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__13503.call(null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), expr__13504))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__13499, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__6775__auto__, G__13499), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__6779__auto__) {
  var self__ = this;
  var this__6779__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__6766__auto__, G__13499) {
  var self__ = this;
  var this__6766__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__13499, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__6772__auto__, entry__6773__auto__) {
  var self__ = this;
  var this__6772__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__6773__auto__)) {
    return cljs.core._assoc.call(null, this__6772__auto____$1, cljs.core._nth.call(null, entry__6773__auto__, 0), cljs.core._nth.call(null, entry__6773__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__6772__auto____$1, entry__6773__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "catch-block", "catch-block", -1479223021, null), cljs.core.with_meta(new cljs.core.Symbol(null, "catch-exception", "catch-exception", -356775268, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "Class", "Class", 2064526977, null)], null)), new cljs.core.Symbol(null, "finally-block", "finally-block", 
  -1821453297, null), new cljs.core.Symbol(null, "continue-block", "continue-block", -211516323, null), new cljs.core.Symbol(null, "prev", "prev", 43462301, null)], null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__6801__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__6801__auto__, writer__6802__auto__) {
  return cljs.core._write.call(null, writer__6802__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$__GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev, null, null, null);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$map__GT_ExceptionFrame(G__13501) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(G__13501), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(G__13501), (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(G__13501), (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(G__13501), 
  (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(G__13501), null, cljs.core.dissoc.call(null, G__13501, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), new cljs.core.Keyword(null, "prev", "prev", -1597069226)), 
  null);
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function cljs$core$async$impl$ioc_helpers$add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_13508 = state;
  statearr_13508[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_13508;
};
cljs.core.async.impl.ioc_helpers.process_exception = function cljs$core$async$impl$ioc_helpers$process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__6141__auto__ = exception;
      if (cljs.core.truth_(and__6141__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__6141__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__6141__auto__ = exception;
        if (cljs.core.truth_(and__6141__auto__)) {
          var and__6141__auto____$1 = catch_block;
          if (cljs.core.truth_(and__6141__auto____$1)) {
            return cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "default", "default", -1987822328), catch_exception) || exception instanceof catch_exception;
          } else {
            return and__6141__auto____$1;
          }
        } else {
          return and__6141__auto__;
        }
      }())) {
        var statearr_13514 = state;
        statearr_13514[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_13514[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_13514[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_13514[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null);
        return statearr_13514;
      } else {
        if (cljs.core.truth_(function() {
          var and__6141__auto__ = exception;
          if (cljs.core.truth_(and__6141__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__6141__auto__;
          }
        }())) {
          var statearr_13515_13519 = state;
          statearr_13515_13519[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__13520 = state;
          state = G__13520;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__6141__auto__ = exception;
            if (cljs.core.truth_(and__6141__auto__)) {
              var and__6141__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__6141__auto____$1) {
                return (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__6141__auto____$1;
              }
            } else {
              return and__6141__auto__;
            }
          }())) {
            var statearr_13516 = state;
            statearr_13516[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_13516[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
            return statearr_13516;
          } else {
            if (cljs.core.truth_(function() {
              var and__6141__auto__ = cljs.core.not.call(null, exception);
              if (and__6141__auto__) {
                return (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__6141__auto__;
              }
            }())) {
              var statearr_13517 = state;
              statearr_13517[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_13517[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
              return statearr_13517;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_13518 = state;
                statearr_13518[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_13518[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_13518;
              } else {
                throw new Error("No matching clause");
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function cljs$core$async$impl$timers$random_level(var_args) {
  var args13523 = [];
  var len__7211__auto___13526 = arguments.length;
  var i__7212__auto___13527 = 0;
  while (true) {
    if (i__7212__auto___13527 < len__7211__auto___13526) {
      args13523.push(arguments[i__7212__auto___13527]);
      var G__13528 = i__7212__auto___13527 + 1;
      i__7212__auto___13527 = G__13528;
      continue;
    } else {
    }
    break;
  }
  var G__13525 = args13523.length;
  switch(G__13525) {
    case 0:
      return cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13523.length)].join(""));;
  }
};
cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.impl.timers.random_level.call(null, 0);
};
cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$1 = function(level) {
  while (true) {
    if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
      var G__13530 = level + 1;
      level = G__13530;
      continue;
    } else {
      return level;
    }
    break;
  }
};
cljs.core.async.impl.timers.random_level.cljs$lang$maxFixedArity = 1;
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), cljs.core.with_meta(new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "forward", "forward", 1083186224, null)], null);
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write.call(null, writer__6752__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.__GT_SkipListNode = function cljs$core$async$impl$timers$__GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function cljs$core$async$impl$timers$skip_list_node(var_args) {
  var args13531 = [];
  var len__7211__auto___13534 = arguments.length;
  var i__7212__auto___13535 = 0;
  while (true) {
    if (i__7212__auto___13535 < len__7211__auto___13534) {
      args13531.push(arguments[i__7212__auto___13535]);
      var G__13536 = i__7212__auto___13535 + 1;
      i__7212__auto___13535 = G__13536;
      continue;
    } else {
    }
    break;
  }
  var G__13533 = args13531.length;
  switch(G__13533) {
    case 1:
      return cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13531.length)].join(""));;
  }
};
cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$1 = function(level) {
  return cljs.core.async.impl.timers.skip_list_node.call(null, null, null, level);
};
cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$3 = function(k, v, level) {
  var arr = new Array(level + 1);
  var i_13538 = 0;
  while (true) {
    if (i_13538 < arr.length) {
      arr[i_13538] = null;
      var G__13539 = i_13538 + 1;
      i_13538 = G__13539;
      continue;
    } else {
    }
    break;
  }
  return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
};
cljs.core.async.impl.timers.skip_list_node.cljs$lang$maxFixedArity = 3;
cljs.core.async.impl.timers.least_greater_node = function cljs$core$async$impl$timers$least_greater_node(var_args) {
  var args13540 = [];
  var len__7211__auto___13543 = arguments.length;
  var i__7212__auto___13544 = 0;
  while (true) {
    if (i__7212__auto___13544 < len__7211__auto___13543) {
      args13540.push(arguments[i__7212__auto___13544]);
      var G__13545 = i__7212__auto___13544 + 1;
      i__7212__auto___13544 = G__13545;
      continue;
    } else {
    }
    break;
  }
  var G__13542 = args13540.length;
  switch(G__13542) {
    case 3:
      return cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13540.length)].join(""));;
  }
};
cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$3 = function(x, k, level) {
  return cljs.core.async.impl.timers.least_greater_node.call(null, x, k, level, null);
};
cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$4 = function(x, k, level, update) {
  while (true) {
    if (!(level < 0)) {
      var x__$1 = function() {
        var x__$1 = x;
        while (true) {
          var temp__4655__auto__ = x__$1.forward[level];
          if (cljs.core.truth_(temp__4655__auto__)) {
            var x_SINGLEQUOTE_ = temp__4655__auto__;
            if (x_SINGLEQUOTE_.key < k) {
              var G__13547 = x_SINGLEQUOTE_;
              x__$1 = G__13547;
              continue;
            } else {
              return x__$1;
            }
          } else {
            return x__$1;
          }
          break;
        }
      }();
      if (update == null) {
      } else {
        update[level] = x__$1;
      }
      var G__13548 = x__$1;
      var G__13549 = k;
      var G__13550 = level - 1;
      var G__13551 = update;
      x = G__13548;
      k = G__13549;
      level = G__13550;
      update = G__13551;
      continue;
    } else {
      return x;
    }
    break;
  }
};
cljs.core.async.impl.timers.least_greater_node.cljs$lang$maxFixedArity = 4;
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_13552 = self__.level + 1;
      while (true) {
        if (i_13552 <= new_level + 1) {
          update[i_13552] = self__.header;
          var G__13553 = i_13552 + 1;
          i_13552 = G__13553;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_13554 = 0;
    while (true) {
      if (i_13554 <= self__.level) {
        var links_13555 = update[i_13554].forward;
        if (links_13555[i_13554] === x__$1) {
          links_13555[i_13554] = x__$1.forward[i_13554];
          var G__13556 = i_13554 + 1;
          i_13554 = G__13556;
          continue;
        } else {
          var G__13557 = i_13554 + 1;
          i_13554 = G__13557;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__13558 = x_SINGLEQUOTE_;
              x__$1 = G__13558;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__13559 = nx;
        var G__13560 = level__$1 - 1;
        x = G__13559;
        level__$1 = G__13560;
        continue;
      } else {
        var G__13561 = x;
        var G__13562 = level__$1 - 1;
        x = G__13561;
        level__$1 = G__13562;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__13563 = x_SINGLEQUOTE_;
              x__$1 = G__13563;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__13564 = nx;
        var G__13565 = level__$1 - 1;
        x = G__13564;
        level__$1 = G__13565;
        continue;
      } else {
        var G__13566 = x;
        var G__13567 = level__$1 - 1;
        x = G__13566;
        level__$1 = G__13567;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function cljs$core$async$impl$timers$iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), cljs$core$async$impl$timers$iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "header", "header", 1759972661, null), cljs.core.with_meta(new cljs.core.Symbol(null, "level", "level", -1363938217, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
  return cljs.core._write.call(null, writer__6752__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.__GT_SkipList = function cljs$core$async$impl$timers$__GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function cljs$core$async$impl$timers$skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function cljs$core$async$impl$timers$timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__6153__auto__ = cljs.core.truth_(function() {
    var and__6141__auto__ = me;
    if (cljs.core.truth_(and__6141__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__6141__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__6153__auto__)) {
    return or__6153__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__6153__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__6153__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function cljs$core$async$fn_handler(var_args) {
  var args13570 = [];
  var len__7211__auto___13576 = arguments.length;
  var i__7212__auto___13577 = 0;
  while (true) {
    if (i__7212__auto___13577 < len__7211__auto___13576) {
      args13570.push(arguments[i__7212__auto___13577]);
      var G__13578 = i__7212__auto___13577 + 1;
      i__7212__auto___13577 = G__13578;
      continue;
    } else {
    }
    break;
  }
  var G__13572 = args13570.length;
  switch(G__13572) {
    case 1:
      return cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13570.length)].join(""));;
  }
};
cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.async.fn_handler.call(null, f, true);
};
cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$2 = function(f, blockable) {
  if (typeof cljs.core.async.t_cljs$core$async13573 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async13573 = function(f, blockable, meta13574) {
      this.f = f;
      this.blockable = blockable;
      this.meta13574 = meta13574;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async13573.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13575, meta13574__$1) {
      var self__ = this;
      var _13575__$1 = this;
      return new cljs.core.async.t_cljs$core$async13573(self__.f, self__.blockable, meta13574__$1);
    };
    cljs.core.async.t_cljs$core$async13573.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13575) {
      var self__ = this;
      var _13575__$1 = this;
      return self__.meta13574;
    };
    cljs.core.async.t_cljs$core$async13573.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t_cljs$core$async13573.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t_cljs$core$async13573.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.blockable;
    };
    cljs.core.async.t_cljs$core$async13573.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t_cljs$core$async13573.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "blockable", "blockable", -28395259, null), new cljs.core.Symbol(null, "meta13574", "meta13574", -1029848482, null)], null);
    };
    cljs.core.async.t_cljs$core$async13573.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async13573.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async13573";
    cljs.core.async.t_cljs$core$async13573.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
      return cljs.core._write.call(null, writer__6752__auto__, "cljs.core.async/t_cljs$core$async13573");
    };
    cljs.core.async.__GT_t_cljs$core$async13573 = function cljs$core$async$__GT_t_cljs$core$async13573(f__$1, blockable__$1, meta13574) {
      return new cljs.core.async.t_cljs$core$async13573(f__$1, blockable__$1, meta13574);
    };
  }
  return new cljs.core.async.t_cljs$core$async13573(f, blockable, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.fn_handler.cljs$lang$maxFixedArity = 2;
cljs.core.async.buffer = function cljs$core$async$buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function cljs$core$async$dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function cljs$core$async$sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function cljs$core$async$unblocking_buffer_QMARK_(buff) {
  if (!(buff == null)) {
    if (false || buff.cljs$core$async$impl$protocols$UnblockingBuffer$) {
      return true;
    } else {
      if (!buff.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, buff);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, buff);
  }
};
cljs.core.async.chan = function cljs$core$async$chan(var_args) {
  var args13582 = [];
  var len__7211__auto___13585 = arguments.length;
  var i__7212__auto___13586 = 0;
  while (true) {
    if (i__7212__auto___13586 < len__7211__auto___13585) {
      args13582.push(arguments[i__7212__auto___13586]);
      var G__13587 = i__7212__auto___13586 + 1;
      i__7212__auto___13586 = G__13587;
      continue;
    } else {
    }
    break;
  }
  var G__13584 = args13582.length;
  switch(G__13584) {
    case 0:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13582.length)].join(""));;
  }
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.chan.call(null, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1 = function(buf_or_n) {
  return cljs.core.async.chan.call(null, buf_or_n, null, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2 = function(buf_or_n, xform) {
  return cljs.core.async.chan.call(null, buf_or_n, xform, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3 = function(buf_or_n, xform, ex_handler) {
  var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
  if (cljs.core.truth_(xform)) {
    if (cljs.core.truth_(buf_or_n__$1)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("buffer must be supplied when transducer is"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "buf-or-n", "buf-or-n", -1646815050, null)))].join(""));
    }
  } else {
  }
  return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1, xform, ex_handler);
};
cljs.core.async.chan.cljs$lang$maxFixedArity = 3;
cljs.core.async.promise_chan = function cljs$core$async$promise_chan(var_args) {
  var args13589 = [];
  var len__7211__auto___13592 = arguments.length;
  var i__7212__auto___13593 = 0;
  while (true) {
    if (i__7212__auto___13593 < len__7211__auto___13592) {
      args13589.push(arguments[i__7212__auto___13593]);
      var G__13594 = i__7212__auto___13593 + 1;
      i__7212__auto___13593 = G__13594;
      continue;
    } else {
    }
    break;
  }
  var G__13591 = args13589.length;
  switch(G__13591) {
    case 0:
      return cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13589.length)].join(""));;
  }
};
cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.promise_chan.call(null, null);
};
cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$1 = function(xform) {
  return cljs.core.async.promise_chan.call(null, xform, null);
};
cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$2 = function(xform, ex_handler) {
  return cljs.core.async.chan.call(null, cljs.core.async.impl.buffers.promise_buffer.call(null), xform, ex_handler);
};
cljs.core.async.promise_chan.cljs$lang$maxFixedArity = 2;
cljs.core.async.timeout = function cljs$core$async$timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function cljs$core$async$_LT__BANG_(port) {
  throw new Error("\x3c! used not in (go ...) block");
};
cljs.core.async.take_BANG_ = function cljs$core$async$take_BANG_(var_args) {
  var args13596 = [];
  var len__7211__auto___13599 = arguments.length;
  var i__7212__auto___13600 = 0;
  while (true) {
    if (i__7212__auto___13600 < len__7211__auto___13599) {
      args13596.push(arguments[i__7212__auto___13600]);
      var G__13601 = i__7212__auto___13600 + 1;
      i__7212__auto___13600 = G__13601;
      continue;
    } else {
    }
    break;
  }
  var G__13598 = args13596.length;
  switch(G__13598) {
    case 2:
      return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13596.length)].join(""));;
  }
};
cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2 = function(port, fn1) {
  return cljs.core.async.take_BANG_.call(null, port, fn1, true);
};
cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3 = function(port, fn1, on_caller_QMARK_) {
  var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
  if (cljs.core.truth_(ret)) {
    var val_13603 = cljs.core.deref.call(null, ret);
    if (cljs.core.truth_(on_caller_QMARK_)) {
      fn1.call(null, val_13603);
    } else {
      cljs.core.async.impl.dispatch.run.call(null, function(val_13603, ret) {
        return function() {
          return fn1.call(null, val_13603);
        };
      }(val_13603, ret));
    }
  } else {
  }
  return null;
};
cljs.core.async.take_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.async.nop = function cljs$core$async$nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function cljs$core$async$_GT__BANG_(port, val) {
  throw new Error("\x3e! used not in (go ...) block");
};
cljs.core.async.put_BANG_ = function cljs$core$async$put_BANG_(var_args) {
  var args13604 = [];
  var len__7211__auto___13607 = arguments.length;
  var i__7212__auto___13608 = 0;
  while (true) {
    if (i__7212__auto___13608 < len__7211__auto___13607) {
      args13604.push(arguments[i__7212__auto___13608]);
      var G__13609 = i__7212__auto___13608 + 1;
      i__7212__auto___13608 = G__13609;
      continue;
    } else {
    }
    break;
  }
  var G__13606 = args13604.length;
  switch(G__13606) {
    case 2:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13604.length)].join(""));;
  }
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2 = function(port, val) {
  var temp__4655__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
  if (cljs.core.truth_(temp__4655__auto__)) {
    var ret = temp__4655__auto__;
    return cljs.core.deref.call(null, ret);
  } else {
    return true;
  }
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3 = function(port, val, fn1) {
  return cljs.core.async.put_BANG_.call(null, port, val, fn1, true);
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4 = function(port, val, fn1, on_caller_QMARK_) {
  var temp__4655__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
  if (cljs.core.truth_(temp__4655__auto__)) {
    var retb = temp__4655__auto__;
    var ret = cljs.core.deref.call(null, retb);
    if (cljs.core.truth_(on_caller_QMARK_)) {
      fn1.call(null, ret);
    } else {
      cljs.core.async.impl.dispatch.run.call(null, function(ret, retb, temp__4655__auto__) {
        return function() {
          return fn1.call(null, ret);
        };
      }(ret, retb, temp__4655__auto__));
    }
    return ret;
  } else {
    return true;
  }
};
cljs.core.async.put_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.async.close_BANG_ = function cljs$core$async$close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function cljs$core$async$random_array(n) {
  var a = new Array(n);
  var n__7056__auto___13611 = n;
  var x_13612 = 0;
  while (true) {
    if (x_13612 < n__7056__auto___13611) {
      a[x_13612] = 0;
      var G__13613 = x_13612 + 1;
      x_13612 = G__13613;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__13614 = i + 1;
      i = G__13614;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function cljs$core$async$alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t_cljs$core$async13618 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async13618 = function(alt_flag, flag, meta13619) {
      this.alt_flag = alt_flag;
      this.flag = flag;
      this.meta13619 = meta13619;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async13618.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_13620, meta13619__$1) {
        var self__ = this;
        var _13620__$1 = this;
        return new cljs.core.async.t_cljs$core$async13618(self__.alt_flag, self__.flag, meta13619__$1);
      };
    }(flag);
    cljs.core.async.t_cljs$core$async13618.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_13620) {
        var self__ = this;
        var _13620__$1 = this;
        return self__.meta13619;
      };
    }(flag);
    cljs.core.async.t_cljs$core$async13618.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t_cljs$core$async13618.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t_cljs$core$async13618.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return true;
      };
    }(flag);
    cljs.core.async.t_cljs$core$async13618.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t_cljs$core$async13618.getBasis = function(flag) {
      return function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "alt-flag", "alt-flag", -1794972754, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "private", "private", -558947994), true, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)), 
        new cljs.core.Symbol(null, "flag", "flag", -1565787888, null), new cljs.core.Symbol(null, "meta13619", "meta13619", 2138621643, null)], null);
      };
    }(flag);
    cljs.core.async.t_cljs$core$async13618.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async13618.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async13618";
    cljs.core.async.t_cljs$core$async13618.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
        return cljs.core._write.call(null, writer__6752__auto__, "cljs.core.async/t_cljs$core$async13618");
      };
    }(flag);
    cljs.core.async.__GT_t_cljs$core$async13618 = function(flag) {
      return function cljs$core$async$alt_flag_$___GT_t_cljs$core$async13618(alt_flag__$1, flag__$1, meta13619) {
        return new cljs.core.async.t_cljs$core$async13618(alt_flag__$1, flag__$1, meta13619);
      };
    }(flag);
  }
  return new cljs.core.async.t_cljs$core$async13618(cljs$core$async$alt_flag, flag, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.alt_handler = function cljs$core$async$alt_handler(flag, cb) {
  if (typeof cljs.core.async.t_cljs$core$async13624 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async13624 = function(alt_handler, flag, cb, meta13625) {
      this.alt_handler = alt_handler;
      this.flag = flag;
      this.cb = cb;
      this.meta13625 = meta13625;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async13624.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13626, meta13625__$1) {
      var self__ = this;
      var _13626__$1 = this;
      return new cljs.core.async.t_cljs$core$async13624(self__.alt_handler, self__.flag, self__.cb, meta13625__$1);
    };
    cljs.core.async.t_cljs$core$async13624.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13626) {
      var self__ = this;
      var _13626__$1 = this;
      return self__.meta13625;
    };
    cljs.core.async.t_cljs$core$async13624.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t_cljs$core$async13624.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t_cljs$core$async13624.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t_cljs$core$async13624.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t_cljs$core$async13624.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "alt-handler", "alt-handler", 963786170, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "private", "private", -558947994), true, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 2, 
      5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "flag", "flag", -1565787888, null), new cljs.core.Symbol(null, "cb", "cb", -2064487928, null)], null)))], null)), new cljs.core.Symbol(null, "flag", "flag", -1565787888, null), new cljs.core.Symbol(null, "cb", "cb", -2064487928, null), new cljs.core.Symbol(null, "meta13625", "meta13625", -1600442897, null)], null);
    };
    cljs.core.async.t_cljs$core$async13624.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async13624.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async13624";
    cljs.core.async.t_cljs$core$async13624.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
      return cljs.core._write.call(null, writer__6752__auto__, "cljs.core.async/t_cljs$core$async13624");
    };
    cljs.core.async.__GT_t_cljs$core$async13624 = function cljs$core$async$alt_handler_$___GT_t_cljs$core$async13624(alt_handler__$1, flag__$1, cb__$1, meta13625) {
      return new cljs.core.async.t_cljs$core$async13624(alt_handler__$1, flag__$1, cb__$1, meta13625);
    };
  }
  return new cljs.core.async.t_cljs$core$async13624(cljs$core$async$alt_handler, flag, cb, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.do_alts = function cljs$core$async$do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__13627_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__13627_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__13628_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__13628_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__6153__auto__ = wport;
            if (cljs.core.truth_(or__6153__auto__)) {
              return or__6153__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__13629 = i + 1;
          i = G__13629;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__6153__auto__ = ret;
  if (cljs.core.truth_(or__6153__auto__)) {
    return or__6153__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4657__auto__ = function() {
        var and__6141__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__6141__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__6141__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4657__auto__)) {
        var got = temp__4657__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function cljs$core$async$alts_BANG_(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___13635 = arguments.length;
  var i__7212__auto___13636 = 0;
  while (true) {
    if (i__7212__auto___13636 < len__7211__auto___13635) {
      args__7218__auto__.push(arguments[i__7212__auto___13636]);
      var G__13637 = i__7212__auto___13636 + 1;
      i__7212__auto___13636 = G__13637;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(ports, p__13632) {
  var map__13633 = p__13632;
  var map__13633__$1 = (!(map__13633 == null) ? map__13633.cljs$lang$protocol_mask$partition0$ & 64 || map__13633.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13633) : map__13633;
  var opts = map__13633__$1;
  throw new Error("alts! used not in (go ...) block");
};
cljs.core.async.alts_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.async.alts_BANG_.cljs$lang$applyTo = function(seq13630) {
  var G__13631 = cljs.core.first.call(null, seq13630);
  var seq13630__$1 = cljs.core.next.call(null, seq13630);
  return cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__13631, seq13630__$1);
};
cljs.core.async.offer_BANG_ = function cljs$core$async$offer_BANG_(port, val) {
  var ret = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, cljs.core.async.nop, false));
  if (cljs.core.truth_(ret)) {
    return cljs.core.deref.call(null, ret);
  } else {
    return null;
  }
};
cljs.core.async.poll_BANG_ = function cljs$core$async$poll_BANG_(port) {
  var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, cljs.core.async.nop, false));
  if (cljs.core.truth_(ret)) {
    return cljs.core.deref.call(null, ret);
  } else {
    return null;
  }
};
cljs.core.async.pipe = function cljs$core$async$pipe(var_args) {
  var args13638 = [];
  var len__7211__auto___13688 = arguments.length;
  var i__7212__auto___13689 = 0;
  while (true) {
    if (i__7212__auto___13689 < len__7211__auto___13688) {
      args13638.push(arguments[i__7212__auto___13689]);
      var G__13690 = i__7212__auto___13689 + 1;
      i__7212__auto___13689 = G__13690;
      continue;
    } else {
    }
    break;
  }
  var G__13640 = args13638.length;
  switch(G__13640) {
    case 2:
      return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13638.length)].join(""));;
  }
};
cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2 = function(from, to) {
  return cljs.core.async.pipe.call(null, from, to, true);
};
cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3 = function(from, to, close_QMARK_) {
  var c__10548__auto___13692 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10548__auto___13692) {
    return function() {
      var f__10549__auto__ = function() {
        var switch__10483__auto__ = function(c__10548__auto___13692) {
          return function(state_13664) {
            var state_val_13665 = state_13664[1];
            if (state_val_13665 === 7) {
              var inst_13660 = state_13664[2];
              var state_13664__$1 = state_13664;
              var statearr_13666_13693 = state_13664__$1;
              statearr_13666_13693[2] = inst_13660;
              statearr_13666_13693[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13665 === 1) {
                var state_13664__$1 = state_13664;
                var statearr_13667_13694 = state_13664__$1;
                statearr_13667_13694[2] = null;
                statearr_13667_13694[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13665 === 4) {
                  var inst_13643 = state_13664[7];
                  var inst_13643__$1 = state_13664[2];
                  var inst_13644 = inst_13643__$1 == null;
                  var state_13664__$1 = function() {
                    var statearr_13668 = state_13664;
                    statearr_13668[7] = inst_13643__$1;
                    return statearr_13668;
                  }();
                  if (cljs.core.truth_(inst_13644)) {
                    var statearr_13669_13695 = state_13664__$1;
                    statearr_13669_13695[1] = 5;
                  } else {
                    var statearr_13670_13696 = state_13664__$1;
                    statearr_13670_13696[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13665 === 13) {
                    var state_13664__$1 = state_13664;
                    var statearr_13671_13697 = state_13664__$1;
                    statearr_13671_13697[2] = null;
                    statearr_13671_13697[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13665 === 6) {
                      var inst_13643 = state_13664[7];
                      var state_13664__$1 = state_13664;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13664__$1, 11, to, inst_13643);
                    } else {
                      if (state_val_13665 === 3) {
                        var inst_13662 = state_13664[2];
                        var state_13664__$1 = state_13664;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13664__$1, inst_13662);
                      } else {
                        if (state_val_13665 === 12) {
                          var state_13664__$1 = state_13664;
                          var statearr_13672_13698 = state_13664__$1;
                          statearr_13672_13698[2] = null;
                          statearr_13672_13698[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13665 === 2) {
                            var state_13664__$1 = state_13664;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13664__$1, 4, from);
                          } else {
                            if (state_val_13665 === 11) {
                              var inst_13653 = state_13664[2];
                              var state_13664__$1 = state_13664;
                              if (cljs.core.truth_(inst_13653)) {
                                var statearr_13673_13699 = state_13664__$1;
                                statearr_13673_13699[1] = 12;
                              } else {
                                var statearr_13674_13700 = state_13664__$1;
                                statearr_13674_13700[1] = 13;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13665 === 9) {
                                var state_13664__$1 = state_13664;
                                var statearr_13675_13701 = state_13664__$1;
                                statearr_13675_13701[2] = null;
                                statearr_13675_13701[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13665 === 5) {
                                  var state_13664__$1 = state_13664;
                                  if (cljs.core.truth_(close_QMARK_)) {
                                    var statearr_13676_13702 = state_13664__$1;
                                    statearr_13676_13702[1] = 8;
                                  } else {
                                    var statearr_13677_13703 = state_13664__$1;
                                    statearr_13677_13703[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_13665 === 14) {
                                    var inst_13658 = state_13664[2];
                                    var state_13664__$1 = state_13664;
                                    var statearr_13678_13704 = state_13664__$1;
                                    statearr_13678_13704[2] = inst_13658;
                                    statearr_13678_13704[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13665 === 10) {
                                      var inst_13650 = state_13664[2];
                                      var state_13664__$1 = state_13664;
                                      var statearr_13679_13705 = state_13664__$1;
                                      statearr_13679_13705[2] = inst_13650;
                                      statearr_13679_13705[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13665 === 8) {
                                        var inst_13647 = cljs.core.async.close_BANG_.call(null, to);
                                        var state_13664__$1 = state_13664;
                                        var statearr_13680_13706 = state_13664__$1;
                                        statearr_13680_13706[2] = inst_13647;
                                        statearr_13680_13706[1] = 10;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10548__auto___13692);
        return function(switch__10483__auto__, c__10548__auto___13692) {
          return function() {
            var cljs$core$async$state_machine__10484__auto__ = null;
            var cljs$core$async$state_machine__10484__auto____0 = function() {
              var statearr_13684 = [null, null, null, null, null, null, null, null];
              statearr_13684[0] = cljs$core$async$state_machine__10484__auto__;
              statearr_13684[1] = 1;
              return statearr_13684;
            };
            var cljs$core$async$state_machine__10484__auto____1 = function(state_13664) {
              while (true) {
                var ret_value__10485__auto__ = function() {
                  try {
                    while (true) {
                      var result__10486__auto__ = switch__10483__auto__.call(null, state_13664);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10486__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__10486__auto__;
                      }
                      break;
                    }
                  } catch (e13685) {
                    if (e13685 instanceof Object) {
                      var ex__10487__auto__ = e13685;
                      var statearr_13686_13707 = state_13664;
                      statearr_13686_13707[5] = ex__10487__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13664);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13685;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10485__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13708 = state_13664;
                  state_13664 = G__13708;
                  continue;
                } else {
                  return ret_value__10485__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__10484__auto__ = function(state_13664) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__10484__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__10484__auto____1.call(this, state_13664);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__10484__auto____0;
            cljs$core$async$state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__10484__auto____1;
            return cljs$core$async$state_machine__10484__auto__;
          }();
        }(switch__10483__auto__, c__10548__auto___13692);
      }();
      var state__10550__auto__ = function() {
        var statearr_13687 = f__10549__auto__.call(null);
        statearr_13687[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10548__auto___13692;
        return statearr_13687;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10550__auto__);
    };
  }(c__10548__auto___13692));
  return to;
};
cljs.core.async.pipe.cljs$lang$maxFixedArity = 3;
cljs.core.async.pipeline_STAR_ = function cljs$core$async$pipeline_STAR_(n, to, xf, from, close_QMARK_, ex_handler, type) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -244377722, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null))))].join(""));
  }
  var jobs = cljs.core.async.chan.call(null, n);
  var results = cljs.core.async.chan.call(null, n);
  var process = function(jobs, results) {
    return function(p__13892) {
      var vec__13893 = p__13892;
      var v = cljs.core.nth.call(null, vec__13893, 0, null);
      var p = cljs.core.nth.call(null, vec__13893, 1, null);
      var job = vec__13893;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1, xf, ex_handler);
        var c__10548__auto___14075 = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(c__10548__auto___14075, res, vec__13893, v, p, job, jobs, results) {
          return function() {
            var f__10549__auto__ = function() {
              var switch__10483__auto__ = function(c__10548__auto___14075, res, vec__13893, v, p, job, jobs, results) {
                return function(state_13898) {
                  var state_val_13899 = state_13898[1];
                  if (state_val_13899 === 1) {
                    var state_13898__$1 = state_13898;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13898__$1, 2, res, v);
                  } else {
                    if (state_val_13899 === 2) {
                      var inst_13895 = state_13898[2];
                      var inst_13896 = cljs.core.async.close_BANG_.call(null, res);
                      var state_13898__$1 = function() {
                        var statearr_13900 = state_13898;
                        statearr_13900[7] = inst_13895;
                        return statearr_13900;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13898__$1, inst_13896);
                    } else {
                      return null;
                    }
                  }
                };
              }(c__10548__auto___14075, res, vec__13893, v, p, job, jobs, results);
              return function(switch__10483__auto__, c__10548__auto___14075, res, vec__13893, v, p, job, jobs, results) {
                return function() {
                  var cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__ = null;
                  var cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____0 = function() {
                    var statearr_13904 = [null, null, null, null, null, null, null, null];
                    statearr_13904[0] = cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__;
                    statearr_13904[1] = 1;
                    return statearr_13904;
                  };
                  var cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____1 = function(state_13898) {
                    while (true) {
                      var ret_value__10485__auto__ = function() {
                        try {
                          while (true) {
                            var result__10486__auto__ = switch__10483__auto__.call(null, state_13898);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__10486__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                              continue;
                            } else {
                              return result__10486__auto__;
                            }
                            break;
                          }
                        } catch (e13905) {
                          if (e13905 instanceof Object) {
                            var ex__10487__auto__ = e13905;
                            var statearr_13906_14076 = state_13898;
                            statearr_13906_14076[5] = ex__10487__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13898);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            throw e13905;
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10485__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        var G__14077 = state_13898;
                        state_13898 = G__14077;
                        continue;
                      } else {
                        return ret_value__10485__auto__;
                      }
                      break;
                    }
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__ = function(state_13898) {
                    switch(arguments.length) {
                      case 0:
                        return cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____0.call(this);
                      case 1:
                        return cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____1.call(this, state_13898);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____0;
                  cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____1;
                  return cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__;
                }();
              }(switch__10483__auto__, c__10548__auto___14075, res, vec__13893, v, p, job, jobs, results);
            }();
            var state__10550__auto__ = function() {
              var statearr_13907 = f__10549__auto__.call(null);
              statearr_13907[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10548__auto___14075;
              return statearr_13907;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10550__auto__);
          };
        }(c__10548__auto___14075, res, vec__13893, v, p, job, jobs, results));
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results);
  var async = function(jobs, results, process) {
    return function(p__13908) {
      var vec__13909 = p__13908;
      var v = cljs.core.nth.call(null, vec__13909, 0, null);
      var p = cljs.core.nth.call(null, vec__13909, 1, null);
      var job = vec__13909;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1);
        xf.call(null, v, res);
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results, process);
  var n__7056__auto___14078 = n;
  var __14079 = 0;
  while (true) {
    if (__14079 < n__7056__auto___14078) {
      var G__13910_14080 = type instanceof cljs.core.Keyword ? type.fqn : null;
      switch(G__13910_14080) {
        case "compute":
          var c__10548__auto___14082 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__14079, c__10548__auto___14082, G__13910_14080, n__7056__auto___14078, jobs, results, process, async) {
            return function() {
              var f__10549__auto__ = function() {
                var switch__10483__auto__ = function(__14079, c__10548__auto___14082, G__13910_14080, n__7056__auto___14078, jobs, results, process, async) {
                  return function(state_13923) {
                    var state_val_13924 = state_13923[1];
                    if (state_val_13924 === 1) {
                      var state_13923__$1 = state_13923;
                      var statearr_13925_14083 = state_13923__$1;
                      statearr_13925_14083[2] = null;
                      statearr_13925_14083[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13924 === 2) {
                        var state_13923__$1 = state_13923;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13923__$1, 4, jobs);
                      } else {
                        if (state_val_13924 === 3) {
                          var inst_13921 = state_13923[2];
                          var state_13923__$1 = state_13923;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13923__$1, inst_13921);
                        } else {
                          if (state_val_13924 === 4) {
                            var inst_13913 = state_13923[2];
                            var inst_13914 = process.call(null, inst_13913);
                            var state_13923__$1 = state_13923;
                            if (cljs.core.truth_(inst_13914)) {
                              var statearr_13926_14084 = state_13923__$1;
                              statearr_13926_14084[1] = 5;
                            } else {
                              var statearr_13927_14085 = state_13923__$1;
                              statearr_13927_14085[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13924 === 5) {
                              var state_13923__$1 = state_13923;
                              var statearr_13928_14086 = state_13923__$1;
                              statearr_13928_14086[2] = null;
                              statearr_13928_14086[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13924 === 6) {
                                var state_13923__$1 = state_13923;
                                var statearr_13929_14087 = state_13923__$1;
                                statearr_13929_14087[2] = null;
                                statearr_13929_14087[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13924 === 7) {
                                  var inst_13919 = state_13923[2];
                                  var state_13923__$1 = state_13923;
                                  var statearr_13930_14088 = state_13923__$1;
                                  statearr_13930_14088[2] = inst_13919;
                                  statearr_13930_14088[1] = 3;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__14079, c__10548__auto___14082, G__13910_14080, n__7056__auto___14078, jobs, results, process, async);
                return function(__14079, switch__10483__auto__, c__10548__auto___14082, G__13910_14080, n__7056__auto___14078, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____0 = function() {
                      var statearr_13934 = [null, null, null, null, null, null, null];
                      statearr_13934[0] = cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__;
                      statearr_13934[1] = 1;
                      return statearr_13934;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____1 = function(state_13923) {
                      while (true) {
                        var ret_value__10485__auto__ = function() {
                          try {
                            while (true) {
                              var result__10486__auto__ = switch__10483__auto__.call(null, state_13923);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__10486__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__10486__auto__;
                              }
                              break;
                            }
                          } catch (e13935) {
                            if (e13935 instanceof Object) {
                              var ex__10487__auto__ = e13935;
                              var statearr_13936_14089 = state_13923;
                              statearr_13936_14089[5] = ex__10487__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13923);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e13935;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10485__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__14090 = state_13923;
                          state_13923 = G__14090;
                          continue;
                        } else {
                          return ret_value__10485__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__ = function(state_13923) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____1.call(this, state_13923);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__;
                  }();
                }(__14079, switch__10483__auto__, c__10548__auto___14082, G__13910_14080, n__7056__auto___14078, jobs, results, process, async);
              }();
              var state__10550__auto__ = function() {
                var statearr_13937 = f__10549__auto__.call(null);
                statearr_13937[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10548__auto___14082;
                return statearr_13937;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10550__auto__);
            };
          }(__14079, c__10548__auto___14082, G__13910_14080, n__7056__auto___14078, jobs, results, process, async));
          break;
        case "async":
          var c__10548__auto___14091 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__14079, c__10548__auto___14091, G__13910_14080, n__7056__auto___14078, jobs, results, process, async) {
            return function() {
              var f__10549__auto__ = function() {
                var switch__10483__auto__ = function(__14079, c__10548__auto___14091, G__13910_14080, n__7056__auto___14078, jobs, results, process, async) {
                  return function(state_13950) {
                    var state_val_13951 = state_13950[1];
                    if (state_val_13951 === 1) {
                      var state_13950__$1 = state_13950;
                      var statearr_13952_14092 = state_13950__$1;
                      statearr_13952_14092[2] = null;
                      statearr_13952_14092[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13951 === 2) {
                        var state_13950__$1 = state_13950;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13950__$1, 4, jobs);
                      } else {
                        if (state_val_13951 === 3) {
                          var inst_13948 = state_13950[2];
                          var state_13950__$1 = state_13950;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13950__$1, inst_13948);
                        } else {
                          if (state_val_13951 === 4) {
                            var inst_13940 = state_13950[2];
                            var inst_13941 = async.call(null, inst_13940);
                            var state_13950__$1 = state_13950;
                            if (cljs.core.truth_(inst_13941)) {
                              var statearr_13953_14093 = state_13950__$1;
                              statearr_13953_14093[1] = 5;
                            } else {
                              var statearr_13954_14094 = state_13950__$1;
                              statearr_13954_14094[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13951 === 5) {
                              var state_13950__$1 = state_13950;
                              var statearr_13955_14095 = state_13950__$1;
                              statearr_13955_14095[2] = null;
                              statearr_13955_14095[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13951 === 6) {
                                var state_13950__$1 = state_13950;
                                var statearr_13956_14096 = state_13950__$1;
                                statearr_13956_14096[2] = null;
                                statearr_13956_14096[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13951 === 7) {
                                  var inst_13946 = state_13950[2];
                                  var state_13950__$1 = state_13950;
                                  var statearr_13957_14097 = state_13950__$1;
                                  statearr_13957_14097[2] = inst_13946;
                                  statearr_13957_14097[1] = 3;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__14079, c__10548__auto___14091, G__13910_14080, n__7056__auto___14078, jobs, results, process, async);
                return function(__14079, switch__10483__auto__, c__10548__auto___14091, G__13910_14080, n__7056__auto___14078, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____0 = function() {
                      var statearr_13961 = [null, null, null, null, null, null, null];
                      statearr_13961[0] = cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__;
                      statearr_13961[1] = 1;
                      return statearr_13961;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____1 = function(state_13950) {
                      while (true) {
                        var ret_value__10485__auto__ = function() {
                          try {
                            while (true) {
                              var result__10486__auto__ = switch__10483__auto__.call(null, state_13950);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__10486__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__10486__auto__;
                              }
                              break;
                            }
                          } catch (e13962) {
                            if (e13962 instanceof Object) {
                              var ex__10487__auto__ = e13962;
                              var statearr_13963_14098 = state_13950;
                              statearr_13963_14098[5] = ex__10487__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13950);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e13962;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10485__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__14099 = state_13950;
                          state_13950 = G__14099;
                          continue;
                        } else {
                          return ret_value__10485__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__ = function(state_13950) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____1.call(this, state_13950);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__;
                  }();
                }(__14079, switch__10483__auto__, c__10548__auto___14091, G__13910_14080, n__7056__auto___14078, jobs, results, process, async);
              }();
              var state__10550__auto__ = function() {
                var statearr_13964 = f__10549__auto__.call(null);
                statearr_13964[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10548__auto___14091;
                return statearr_13964;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10550__auto__);
            };
          }(__14079, c__10548__auto___14091, G__13910_14080, n__7056__auto___14078, jobs, results, process, async));
          break;
        default:
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(type)].join(""));;
      }
      var G__14100 = __14079 + 1;
      __14079 = G__14100;
      continue;
    } else {
    }
    break;
  }
  var c__10548__auto___14101 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10548__auto___14101, jobs, results, process, async) {
    return function() {
      var f__10549__auto__ = function() {
        var switch__10483__auto__ = function(c__10548__auto___14101, jobs, results, process, async) {
          return function(state_13986) {
            var state_val_13987 = state_13986[1];
            if (state_val_13987 === 1) {
              var state_13986__$1 = state_13986;
              var statearr_13988_14102 = state_13986__$1;
              statearr_13988_14102[2] = null;
              statearr_13988_14102[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13987 === 2) {
                var state_13986__$1 = state_13986;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13986__$1, 4, from);
              } else {
                if (state_val_13987 === 3) {
                  var inst_13984 = state_13986[2];
                  var state_13986__$1 = state_13986;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13986__$1, inst_13984);
                } else {
                  if (state_val_13987 === 4) {
                    var inst_13967 = state_13986[7];
                    var inst_13967__$1 = state_13986[2];
                    var inst_13968 = inst_13967__$1 == null;
                    var state_13986__$1 = function() {
                      var statearr_13989 = state_13986;
                      statearr_13989[7] = inst_13967__$1;
                      return statearr_13989;
                    }();
                    if (cljs.core.truth_(inst_13968)) {
                      var statearr_13990_14103 = state_13986__$1;
                      statearr_13990_14103[1] = 5;
                    } else {
                      var statearr_13991_14104 = state_13986__$1;
                      statearr_13991_14104[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13987 === 5) {
                      var inst_13970 = cljs.core.async.close_BANG_.call(null, jobs);
                      var state_13986__$1 = state_13986;
                      var statearr_13992_14105 = state_13986__$1;
                      statearr_13992_14105[2] = inst_13970;
                      statearr_13992_14105[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13987 === 6) {
                        var inst_13967 = state_13986[7];
                        var inst_13972 = state_13986[8];
                        var inst_13972__$1 = cljs.core.async.chan.call(null, 1);
                        var inst_13973 = cljs.core.PersistentVector.EMPTY_NODE;
                        var inst_13974 = [inst_13967, inst_13972__$1];
                        var inst_13975 = new cljs.core.PersistentVector(null, 2, 5, inst_13973, inst_13974, null);
                        var state_13986__$1 = function() {
                          var statearr_13993 = state_13986;
                          statearr_13993[8] = inst_13972__$1;
                          return statearr_13993;
                        }();
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13986__$1, 8, jobs, inst_13975);
                      } else {
                        if (state_val_13987 === 7) {
                          var inst_13982 = state_13986[2];
                          var state_13986__$1 = state_13986;
                          var statearr_13994_14106 = state_13986__$1;
                          statearr_13994_14106[2] = inst_13982;
                          statearr_13994_14106[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13987 === 8) {
                            var inst_13972 = state_13986[8];
                            var inst_13977 = state_13986[2];
                            var state_13986__$1 = function() {
                              var statearr_13995 = state_13986;
                              statearr_13995[9] = inst_13977;
                              return statearr_13995;
                            }();
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13986__$1, 9, results, inst_13972);
                          } else {
                            if (state_val_13987 === 9) {
                              var inst_13979 = state_13986[2];
                              var state_13986__$1 = function() {
                                var statearr_13996 = state_13986;
                                statearr_13996[10] = inst_13979;
                                return statearr_13996;
                              }();
                              var statearr_13997_14107 = state_13986__$1;
                              statearr_13997_14107[2] = null;
                              statearr_13997_14107[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10548__auto___14101, jobs, results, process, async);
        return function(switch__10483__auto__, c__10548__auto___14101, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____0 = function() {
              var statearr_14001 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_14001[0] = cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__;
              statearr_14001[1] = 1;
              return statearr_14001;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____1 = function(state_13986) {
              while (true) {
                var ret_value__10485__auto__ = function() {
                  try {
                    while (true) {
                      var result__10486__auto__ = switch__10483__auto__.call(null, state_13986);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10486__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__10486__auto__;
                      }
                      break;
                    }
                  } catch (e14002) {
                    if (e14002 instanceof Object) {
                      var ex__10487__auto__ = e14002;
                      var statearr_14003_14108 = state_13986;
                      statearr_14003_14108[5] = ex__10487__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13986);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14002;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10485__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14109 = state_13986;
                  state_13986 = G__14109;
                  continue;
                } else {
                  return ret_value__10485__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__ = function(state_13986) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____1.call(this, state_13986);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__;
          }();
        }(switch__10483__auto__, c__10548__auto___14101, jobs, results, process, async);
      }();
      var state__10550__auto__ = function() {
        var statearr_14004 = f__10549__auto__.call(null);
        statearr_14004[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10548__auto___14101;
        return statearr_14004;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10550__auto__);
    };
  }(c__10548__auto___14101, jobs, results, process, async));
  var c__10548__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10548__auto__, jobs, results, process, async) {
    return function() {
      var f__10549__auto__ = function() {
        var switch__10483__auto__ = function(c__10548__auto__, jobs, results, process, async) {
          return function(state_14042) {
            var state_val_14043 = state_14042[1];
            if (state_val_14043 === 7) {
              var inst_14038 = state_14042[2];
              var state_14042__$1 = state_14042;
              var statearr_14044_14110 = state_14042__$1;
              statearr_14044_14110[2] = inst_14038;
              statearr_14044_14110[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14043 === 20) {
                var state_14042__$1 = state_14042;
                var statearr_14045_14111 = state_14042__$1;
                statearr_14045_14111[2] = null;
                statearr_14045_14111[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14043 === 1) {
                  var state_14042__$1 = state_14042;
                  var statearr_14046_14112 = state_14042__$1;
                  statearr_14046_14112[2] = null;
                  statearr_14046_14112[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14043 === 4) {
                    var inst_14007 = state_14042[7];
                    var inst_14007__$1 = state_14042[2];
                    var inst_14008 = inst_14007__$1 == null;
                    var state_14042__$1 = function() {
                      var statearr_14047 = state_14042;
                      statearr_14047[7] = inst_14007__$1;
                      return statearr_14047;
                    }();
                    if (cljs.core.truth_(inst_14008)) {
                      var statearr_14048_14113 = state_14042__$1;
                      statearr_14048_14113[1] = 5;
                    } else {
                      var statearr_14049_14114 = state_14042__$1;
                      statearr_14049_14114[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14043 === 15) {
                      var inst_14020 = state_14042[8];
                      var state_14042__$1 = state_14042;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14042__$1, 18, to, inst_14020);
                    } else {
                      if (state_val_14043 === 21) {
                        var inst_14033 = state_14042[2];
                        var state_14042__$1 = state_14042;
                        var statearr_14050_14115 = state_14042__$1;
                        statearr_14050_14115[2] = inst_14033;
                        statearr_14050_14115[1] = 13;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14043 === 13) {
                          var inst_14035 = state_14042[2];
                          var state_14042__$1 = function() {
                            var statearr_14051 = state_14042;
                            statearr_14051[9] = inst_14035;
                            return statearr_14051;
                          }();
                          var statearr_14052_14116 = state_14042__$1;
                          statearr_14052_14116[2] = null;
                          statearr_14052_14116[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14043 === 6) {
                            var inst_14007 = state_14042[7];
                            var state_14042__$1 = state_14042;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14042__$1, 11, inst_14007);
                          } else {
                            if (state_val_14043 === 17) {
                              var inst_14028 = state_14042[2];
                              var state_14042__$1 = state_14042;
                              if (cljs.core.truth_(inst_14028)) {
                                var statearr_14053_14117 = state_14042__$1;
                                statearr_14053_14117[1] = 19;
                              } else {
                                var statearr_14054_14118 = state_14042__$1;
                                statearr_14054_14118[1] = 20;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14043 === 3) {
                                var inst_14040 = state_14042[2];
                                var state_14042__$1 = state_14042;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14042__$1, inst_14040);
                              } else {
                                if (state_val_14043 === 12) {
                                  var inst_14017 = state_14042[10];
                                  var state_14042__$1 = state_14042;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14042__$1, 14, inst_14017);
                                } else {
                                  if (state_val_14043 === 2) {
                                    var state_14042__$1 = state_14042;
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14042__$1, 4, results);
                                  } else {
                                    if (state_val_14043 === 19) {
                                      var state_14042__$1 = state_14042;
                                      var statearr_14055_14119 = state_14042__$1;
                                      statearr_14055_14119[2] = null;
                                      statearr_14055_14119[1] = 12;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_14043 === 11) {
                                        var inst_14017 = state_14042[2];
                                        var state_14042__$1 = function() {
                                          var statearr_14056 = state_14042;
                                          statearr_14056[10] = inst_14017;
                                          return statearr_14056;
                                        }();
                                        var statearr_14057_14120 = state_14042__$1;
                                        statearr_14057_14120[2] = null;
                                        statearr_14057_14120[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_14043 === 9) {
                                          var state_14042__$1 = state_14042;
                                          var statearr_14058_14121 = state_14042__$1;
                                          statearr_14058_14121[2] = null;
                                          statearr_14058_14121[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_14043 === 5) {
                                            var state_14042__$1 = state_14042;
                                            if (cljs.core.truth_(close_QMARK_)) {
                                              var statearr_14059_14122 = state_14042__$1;
                                              statearr_14059_14122[1] = 8;
                                            } else {
                                              var statearr_14060_14123 = state_14042__$1;
                                              statearr_14060_14123[1] = 9;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_14043 === 14) {
                                              var inst_14022 = state_14042[11];
                                              var inst_14020 = state_14042[8];
                                              var inst_14020__$1 = state_14042[2];
                                              var inst_14021 = inst_14020__$1 == null;
                                              var inst_14022__$1 = cljs.core.not.call(null, inst_14021);
                                              var state_14042__$1 = function() {
                                                var statearr_14061 = state_14042;
                                                statearr_14061[11] = inst_14022__$1;
                                                statearr_14061[8] = inst_14020__$1;
                                                return statearr_14061;
                                              }();
                                              if (inst_14022__$1) {
                                                var statearr_14062_14124 = state_14042__$1;
                                                statearr_14062_14124[1] = 15;
                                              } else {
                                                var statearr_14063_14125 = state_14042__$1;
                                                statearr_14063_14125[1] = 16;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_14043 === 16) {
                                                var inst_14022 = state_14042[11];
                                                var state_14042__$1 = state_14042;
                                                var statearr_14064_14126 = state_14042__$1;
                                                statearr_14064_14126[2] = inst_14022;
                                                statearr_14064_14126[1] = 17;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_14043 === 10) {
                                                  var inst_14014 = state_14042[2];
                                                  var state_14042__$1 = state_14042;
                                                  var statearr_14065_14127 = state_14042__$1;
                                                  statearr_14065_14127[2] = inst_14014;
                                                  statearr_14065_14127[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_14043 === 18) {
                                                    var inst_14025 = state_14042[2];
                                                    var state_14042__$1 = state_14042;
                                                    var statearr_14066_14128 = state_14042__$1;
                                                    statearr_14066_14128[2] = inst_14025;
                                                    statearr_14066_14128[1] = 17;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_14043 === 8) {
                                                      var inst_14011 = cljs.core.async.close_BANG_.call(null, to);
                                                      var state_14042__$1 = state_14042;
                                                      var statearr_14067_14129 = state_14042__$1;
                                                      statearr_14067_14129[2] = inst_14011;
                                                      statearr_14067_14129[1] = 10;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10548__auto__, jobs, results, process, async);
        return function(switch__10483__auto__, c__10548__auto__, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____0 = function() {
              var statearr_14071 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_14071[0] = cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__;
              statearr_14071[1] = 1;
              return statearr_14071;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____1 = function(state_14042) {
              while (true) {
                var ret_value__10485__auto__ = function() {
                  try {
                    while (true) {
                      var result__10486__auto__ = switch__10483__auto__.call(null, state_14042);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10486__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__10486__auto__;
                      }
                      break;
                    }
                  } catch (e14072) {
                    if (e14072 instanceof Object) {
                      var ex__10487__auto__ = e14072;
                      var statearr_14073_14130 = state_14042;
                      statearr_14073_14130[5] = ex__10487__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14042);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14072;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10485__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14131 = state_14042;
                  state_14042 = G__14131;
                  continue;
                } else {
                  return ret_value__10485__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__ = function(state_14042) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____1.call(this, state_14042);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__10484__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__10484__auto__;
          }();
        }(switch__10483__auto__, c__10548__auto__, jobs, results, process, async);
      }();
      var state__10550__auto__ = function() {
        var statearr_14074 = f__10549__auto__.call(null);
        statearr_14074[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10548__auto__;
        return statearr_14074;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10550__auto__);
    };
  }(c__10548__auto__, jobs, results, process, async));
  return c__10548__auto__;
};
cljs.core.async.pipeline_async = function cljs$core$async$pipeline_async(var_args) {
  var args14132 = [];
  var len__7211__auto___14135 = arguments.length;
  var i__7212__auto___14136 = 0;
  while (true) {
    if (i__7212__auto___14136 < len__7211__auto___14135) {
      args14132.push(arguments[i__7212__auto___14136]);
      var G__14137 = i__7212__auto___14136 + 1;
      i__7212__auto___14136 = G__14137;
      continue;
    } else {
    }
    break;
  }
  var G__14134 = args14132.length;
  switch(G__14134) {
    case 4:
      return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args14132.length)].join(""));;
  }
};
cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4 = function(n, to, af, from) {
  return cljs.core.async.pipeline_async.call(null, n, to, af, from, true);
};
cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5 = function(n, to, af, from, close_QMARK_) {
  return cljs.core.async.pipeline_STAR_.call(null, n, to, af, from, close_QMARK_, null, new cljs.core.Keyword(null, "async", "async", 1050769601));
};
cljs.core.async.pipeline_async.cljs$lang$maxFixedArity = 5;
cljs.core.async.pipeline = function cljs$core$async$pipeline(var_args) {
  var args14139 = [];
  var len__7211__auto___14142 = arguments.length;
  var i__7212__auto___14143 = 0;
  while (true) {
    if (i__7212__auto___14143 < len__7211__auto___14142) {
      args14139.push(arguments[i__7212__auto___14143]);
      var G__14144 = i__7212__auto___14143 + 1;
      i__7212__auto___14143 = G__14144;
      continue;
    } else {
    }
    break;
  }
  var G__14141 = args14139.length;
  switch(G__14141) {
    case 4:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args14139.length)].join(""));;
  }
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4 = function(n, to, xf, from) {
  return cljs.core.async.pipeline.call(null, n, to, xf, from, true);
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5 = function(n, to, xf, from, close_QMARK_) {
  return cljs.core.async.pipeline.call(null, n, to, xf, from, close_QMARK_, null);
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6 = function(n, to, xf, from, close_QMARK_, ex_handler) {
  return cljs.core.async.pipeline_STAR_.call(null, n, to, xf, from, close_QMARK_, ex_handler, new cljs.core.Keyword(null, "compute", "compute", 1555393130));
};
cljs.core.async.pipeline.cljs$lang$maxFixedArity = 6;
cljs.core.async.split = function cljs$core$async$split(var_args) {
  var args14146 = [];
  var len__7211__auto___14199 = arguments.length;
  var i__7212__auto___14200 = 0;
  while (true) {
    if (i__7212__auto___14200 < len__7211__auto___14199) {
      args14146.push(arguments[i__7212__auto___14200]);
      var G__14201 = i__7212__auto___14200 + 1;
      i__7212__auto___14200 = G__14201;
      continue;
    } else {
    }
    break;
  }
  var G__14148 = args14146.length;
  switch(G__14148) {
    case 2:
      return cljs.core.async.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.async.split.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args14146.length)].join(""));;
  }
};
cljs.core.async.split.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.split.call(null, p, ch, null, null);
};
cljs.core.async.split.cljs$core$IFn$_invoke$arity$4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
  var tc = cljs.core.async.chan.call(null, t_buf_or_n);
  var fc = cljs.core.async.chan.call(null, f_buf_or_n);
  var c__10548__auto___14203 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10548__auto___14203, tc, fc) {
    return function() {
      var f__10549__auto__ = function() {
        var switch__10483__auto__ = function(c__10548__auto___14203, tc, fc) {
          return function(state_14174) {
            var state_val_14175 = state_14174[1];
            if (state_val_14175 === 7) {
              var inst_14170 = state_14174[2];
              var state_14174__$1 = state_14174;
              var statearr_14176_14204 = state_14174__$1;
              statearr_14176_14204[2] = inst_14170;
              statearr_14176_14204[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14175 === 1) {
                var state_14174__$1 = state_14174;
                var statearr_14177_14205 = state_14174__$1;
                statearr_14177_14205[2] = null;
                statearr_14177_14205[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14175 === 4) {
                  var inst_14151 = state_14174[7];
                  var inst_14151__$1 = state_14174[2];
                  var inst_14152 = inst_14151__$1 == null;
                  var state_14174__$1 = function() {
                    var statearr_14178 = state_14174;
                    statearr_14178[7] = inst_14151__$1;
                    return statearr_14178;
                  }();
                  if (cljs.core.truth_(inst_14152)) {
                    var statearr_14179_14206 = state_14174__$1;
                    statearr_14179_14206[1] = 5;
                  } else {
                    var statearr_14180_14207 = state_14174__$1;
                    statearr_14180_14207[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14175 === 13) {
                    var state_14174__$1 = state_14174;
                    var statearr_14181_14208 = state_14174__$1;
                    statearr_14181_14208[2] = null;
                    statearr_14181_14208[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14175 === 6) {
                      var inst_14151 = state_14174[7];
                      var inst_14157 = p.call(null, inst_14151);
                      var state_14174__$1 = state_14174;
                      if (cljs.core.truth_(inst_14157)) {
                        var statearr_14182_14209 = state_14174__$1;
                        statearr_14182_14209[1] = 9;
                      } else {
                        var statearr_14183_14210 = state_14174__$1;
                        statearr_14183_14210[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14175 === 3) {
                        var inst_14172 = state_14174[2];
                        var state_14174__$1 = state_14174;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14174__$1, inst_14172);
                      } else {
                        if (state_val_14175 === 12) {
                          var state_14174__$1 = state_14174;
                          var statearr_14184_14211 = state_14174__$1;
                          statearr_14184_14211[2] = null;
                          statearr_14184_14211[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14175 === 2) {
                            var state_14174__$1 = state_14174;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14174__$1, 4, ch);
                          } else {
                            if (state_val_14175 === 11) {
                              var inst_14151 = state_14174[7];
                              var inst_14161 = state_14174[2];
                              var state_14174__$1 = state_14174;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14174__$1, 8, inst_14161, inst_14151);
                            } else {
                              if (state_val_14175 === 9) {
                                var state_14174__$1 = state_14174;
                                var statearr_14185_14212 = state_14174__$1;
                                statearr_14185_14212[2] = tc;
                                statearr_14185_14212[1] = 11;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14175 === 5) {
                                  var inst_14154 = cljs.core.async.close_BANG_.call(null, tc);
                                  var inst_14155 = cljs.core.async.close_BANG_.call(null, fc);
                                  var state_14174__$1 = function() {
                                    var statearr_14186 = state_14174;
                                    statearr_14186[8] = inst_14154;
                                    return statearr_14186;
                                  }();
                                  var statearr_14187_14213 = state_14174__$1;
                                  statearr_14187_14213[2] = inst_14155;
                                  statearr_14187_14213[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14175 === 14) {
                                    var inst_14168 = state_14174[2];
                                    var state_14174__$1 = state_14174;
                                    var statearr_14188_14214 = state_14174__$1;
                                    statearr_14188_14214[2] = inst_14168;
                                    statearr_14188_14214[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14175 === 10) {
                                      var state_14174__$1 = state_14174;
                                      var statearr_14189_14215 = state_14174__$1;
                                      statearr_14189_14215[2] = fc;
                                      statearr_14189_14215[1] = 11;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_14175 === 8) {
                                        var inst_14163 = state_14174[2];
                                        var state_14174__$1 = state_14174;
                                        if (cljs.core.truth_(inst_14163)) {
                                          var statearr_14190_14216 = state_14174__$1;
                                          statearr_14190_14216[1] = 12;
                                        } else {
                                          var statearr_14191_14217 = state_14174__$1;
                                          statearr_14191_14217[1] = 13;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10548__auto___14203, tc, fc);
        return function(switch__10483__auto__, c__10548__auto___14203, tc, fc) {
          return function() {
            var cljs$core$async$state_machine__10484__auto__ = null;
            var cljs$core$async$state_machine__10484__auto____0 = function() {
              var statearr_14195 = [null, null, null, null, null, null, null, null, null];
              statearr_14195[0] = cljs$core$async$state_machine__10484__auto__;
              statearr_14195[1] = 1;
              return statearr_14195;
            };
            var cljs$core$async$state_machine__10484__auto____1 = function(state_14174) {
              while (true) {
                var ret_value__10485__auto__ = function() {
                  try {
                    while (true) {
                      var result__10486__auto__ = switch__10483__auto__.call(null, state_14174);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10486__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__10486__auto__;
                      }
                      break;
                    }
                  } catch (e14196) {
                    if (e14196 instanceof Object) {
                      var ex__10487__auto__ = e14196;
                      var statearr_14197_14218 = state_14174;
                      statearr_14197_14218[5] = ex__10487__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14174);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14196;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10485__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14219 = state_14174;
                  state_14174 = G__14219;
                  continue;
                } else {
                  return ret_value__10485__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__10484__auto__ = function(state_14174) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__10484__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__10484__auto____1.call(this, state_14174);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__10484__auto____0;
            cljs$core$async$state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__10484__auto____1;
            return cljs$core$async$state_machine__10484__auto__;
          }();
        }(switch__10483__auto__, c__10548__auto___14203, tc, fc);
      }();
      var state__10550__auto__ = function() {
        var statearr_14198 = f__10549__auto__.call(null);
        statearr_14198[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10548__auto___14203;
        return statearr_14198;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10550__auto__);
    };
  }(c__10548__auto___14203, tc, fc));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
};
cljs.core.async.split.cljs$lang$maxFixedArity = 4;
cljs.core.async.reduce = function cljs$core$async$reduce(f, init, ch) {
  var c__10548__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10548__auto__) {
    return function() {
      var f__10549__auto__ = function() {
        var switch__10483__auto__ = function(c__10548__auto__) {
          return function(state_14283) {
            var state_val_14284 = state_14283[1];
            if (state_val_14284 === 7) {
              var inst_14279 = state_14283[2];
              var state_14283__$1 = state_14283;
              var statearr_14285_14306 = state_14283__$1;
              statearr_14285_14306[2] = inst_14279;
              statearr_14285_14306[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14284 === 1) {
                var inst_14263 = init;
                var state_14283__$1 = function() {
                  var statearr_14286 = state_14283;
                  statearr_14286[7] = inst_14263;
                  return statearr_14286;
                }();
                var statearr_14287_14307 = state_14283__$1;
                statearr_14287_14307[2] = null;
                statearr_14287_14307[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14284 === 4) {
                  var inst_14266 = state_14283[8];
                  var inst_14266__$1 = state_14283[2];
                  var inst_14267 = inst_14266__$1 == null;
                  var state_14283__$1 = function() {
                    var statearr_14288 = state_14283;
                    statearr_14288[8] = inst_14266__$1;
                    return statearr_14288;
                  }();
                  if (cljs.core.truth_(inst_14267)) {
                    var statearr_14289_14308 = state_14283__$1;
                    statearr_14289_14308[1] = 5;
                  } else {
                    var statearr_14290_14309 = state_14283__$1;
                    statearr_14290_14309[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14284 === 6) {
                    var inst_14270 = state_14283[9];
                    var inst_14266 = state_14283[8];
                    var inst_14263 = state_14283[7];
                    var inst_14270__$1 = f.call(null, inst_14263, inst_14266);
                    var inst_14271 = cljs.core.reduced_QMARK_.call(null, inst_14270__$1);
                    var state_14283__$1 = function() {
                      var statearr_14291 = state_14283;
                      statearr_14291[9] = inst_14270__$1;
                      return statearr_14291;
                    }();
                    if (inst_14271) {
                      var statearr_14292_14310 = state_14283__$1;
                      statearr_14292_14310[1] = 8;
                    } else {
                      var statearr_14293_14311 = state_14283__$1;
                      statearr_14293_14311[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14284 === 3) {
                      var inst_14281 = state_14283[2];
                      var state_14283__$1 = state_14283;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14283__$1, inst_14281);
                    } else {
                      if (state_val_14284 === 2) {
                        var state_14283__$1 = state_14283;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14283__$1, 4, ch);
                      } else {
                        if (state_val_14284 === 9) {
                          var inst_14270 = state_14283[9];
                          var inst_14263 = inst_14270;
                          var state_14283__$1 = function() {
                            var statearr_14294 = state_14283;
                            statearr_14294[7] = inst_14263;
                            return statearr_14294;
                          }();
                          var statearr_14295_14312 = state_14283__$1;
                          statearr_14295_14312[2] = null;
                          statearr_14295_14312[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14284 === 5) {
                            var inst_14263 = state_14283[7];
                            var state_14283__$1 = state_14283;
                            var statearr_14296_14313 = state_14283__$1;
                            statearr_14296_14313[2] = inst_14263;
                            statearr_14296_14313[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14284 === 10) {
                              var inst_14277 = state_14283[2];
                              var state_14283__$1 = state_14283;
                              var statearr_14297_14314 = state_14283__$1;
                              statearr_14297_14314[2] = inst_14277;
                              statearr_14297_14314[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14284 === 8) {
                                var inst_14270 = state_14283[9];
                                var inst_14273 = cljs.core.deref.call(null, inst_14270);
                                var state_14283__$1 = state_14283;
                                var statearr_14298_14315 = state_14283__$1;
                                statearr_14298_14315[2] = inst_14273;
                                statearr_14298_14315[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10548__auto__);
        return function(switch__10483__auto__, c__10548__auto__) {
          return function() {
            var cljs$core$async$reduce_$_state_machine__10484__auto__ = null;
            var cljs$core$async$reduce_$_state_machine__10484__auto____0 = function() {
              var statearr_14302 = [null, null, null, null, null, null, null, null, null, null];
              statearr_14302[0] = cljs$core$async$reduce_$_state_machine__10484__auto__;
              statearr_14302[1] = 1;
              return statearr_14302;
            };
            var cljs$core$async$reduce_$_state_machine__10484__auto____1 = function(state_14283) {
              while (true) {
                var ret_value__10485__auto__ = function() {
                  try {
                    while (true) {
                      var result__10486__auto__ = switch__10483__auto__.call(null, state_14283);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10486__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__10486__auto__;
                      }
                      break;
                    }
                  } catch (e14303) {
                    if (e14303 instanceof Object) {
                      var ex__10487__auto__ = e14303;
                      var statearr_14304_14316 = state_14283;
                      statearr_14304_14316[5] = ex__10487__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14283);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14303;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10485__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14317 = state_14283;
                  state_14283 = G__14317;
                  continue;
                } else {
                  return ret_value__10485__auto__;
                }
                break;
              }
            };
            cljs$core$async$reduce_$_state_machine__10484__auto__ = function(state_14283) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$reduce_$_state_machine__10484__auto____0.call(this);
                case 1:
                  return cljs$core$async$reduce_$_state_machine__10484__auto____1.call(this, state_14283);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$reduce_$_state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$reduce_$_state_machine__10484__auto____0;
            cljs$core$async$reduce_$_state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$reduce_$_state_machine__10484__auto____1;
            return cljs$core$async$reduce_$_state_machine__10484__auto__;
          }();
        }(switch__10483__auto__, c__10548__auto__);
      }();
      var state__10550__auto__ = function() {
        var statearr_14305 = f__10549__auto__.call(null);
        statearr_14305[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10548__auto__;
        return statearr_14305;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10550__auto__);
    };
  }(c__10548__auto__));
  return c__10548__auto__;
};
cljs.core.async.onto_chan = function cljs$core$async$onto_chan(var_args) {
  var args14318 = [];
  var len__7211__auto___14370 = arguments.length;
  var i__7212__auto___14371 = 0;
  while (true) {
    if (i__7212__auto___14371 < len__7211__auto___14370) {
      args14318.push(arguments[i__7212__auto___14371]);
      var G__14372 = i__7212__auto___14371 + 1;
      i__7212__auto___14371 = G__14372;
      continue;
    } else {
    }
    break;
  }
  var G__14320 = args14318.length;
  switch(G__14320) {
    case 2:
      return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args14318.length)].join(""));;
  }
};
cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2 = function(ch, coll) {
  return cljs.core.async.onto_chan.call(null, ch, coll, true);
};
cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3 = function(ch, coll, close_QMARK_) {
  var c__10548__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10548__auto__) {
    return function() {
      var f__10549__auto__ = function() {
        var switch__10483__auto__ = function(c__10548__auto__) {
          return function(state_14345) {
            var state_val_14346 = state_14345[1];
            if (state_val_14346 === 7) {
              var inst_14327 = state_14345[2];
              var state_14345__$1 = state_14345;
              var statearr_14347_14374 = state_14345__$1;
              statearr_14347_14374[2] = inst_14327;
              statearr_14347_14374[1] = 6;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14346 === 1) {
                var inst_14321 = cljs.core.seq.call(null, coll);
                var inst_14322 = inst_14321;
                var state_14345__$1 = function() {
                  var statearr_14348 = state_14345;
                  statearr_14348[7] = inst_14322;
                  return statearr_14348;
                }();
                var statearr_14349_14375 = state_14345__$1;
                statearr_14349_14375[2] = null;
                statearr_14349_14375[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14346 === 4) {
                  var inst_14322 = state_14345[7];
                  var inst_14325 = cljs.core.first.call(null, inst_14322);
                  var state_14345__$1 = state_14345;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_14345__$1, 7, ch, inst_14325);
                } else {
                  if (state_val_14346 === 13) {
                    var inst_14339 = state_14345[2];
                    var state_14345__$1 = state_14345;
                    var statearr_14350_14376 = state_14345__$1;
                    statearr_14350_14376[2] = inst_14339;
                    statearr_14350_14376[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14346 === 6) {
                      var inst_14330 = state_14345[2];
                      var state_14345__$1 = state_14345;
                      if (cljs.core.truth_(inst_14330)) {
                        var statearr_14351_14377 = state_14345__$1;
                        statearr_14351_14377[1] = 8;
                      } else {
                        var statearr_14352_14378 = state_14345__$1;
                        statearr_14352_14378[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14346 === 3) {
                        var inst_14343 = state_14345[2];
                        var state_14345__$1 = state_14345;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14345__$1, inst_14343);
                      } else {
                        if (state_val_14346 === 12) {
                          var state_14345__$1 = state_14345;
                          var statearr_14353_14379 = state_14345__$1;
                          statearr_14353_14379[2] = null;
                          statearr_14353_14379[1] = 13;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14346 === 2) {
                            var inst_14322 = state_14345[7];
                            var state_14345__$1 = state_14345;
                            if (cljs.core.truth_(inst_14322)) {
                              var statearr_14354_14380 = state_14345__$1;
                              statearr_14354_14380[1] = 4;
                            } else {
                              var statearr_14355_14381 = state_14345__$1;
                              statearr_14355_14381[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14346 === 11) {
                              var inst_14336 = cljs.core.async.close_BANG_.call(null, ch);
                              var state_14345__$1 = state_14345;
                              var statearr_14356_14382 = state_14345__$1;
                              statearr_14356_14382[2] = inst_14336;
                              statearr_14356_14382[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14346 === 9) {
                                var state_14345__$1 = state_14345;
                                if (cljs.core.truth_(close_QMARK_)) {
                                  var statearr_14357_14383 = state_14345__$1;
                                  statearr_14357_14383[1] = 11;
                                } else {
                                  var statearr_14358_14384 = state_14345__$1;
                                  statearr_14358_14384[1] = 12;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14346 === 5) {
                                  var inst_14322 = state_14345[7];
                                  var state_14345__$1 = state_14345;
                                  var statearr_14359_14385 = state_14345__$1;
                                  statearr_14359_14385[2] = inst_14322;
                                  statearr_14359_14385[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14346 === 10) {
                                    var inst_14341 = state_14345[2];
                                    var state_14345__$1 = state_14345;
                                    var statearr_14360_14386 = state_14345__$1;
                                    statearr_14360_14386[2] = inst_14341;
                                    statearr_14360_14386[1] = 3;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14346 === 8) {
                                      var inst_14322 = state_14345[7];
                                      var inst_14332 = cljs.core.next.call(null, inst_14322);
                                      var inst_14322__$1 = inst_14332;
                                      var state_14345__$1 = function() {
                                        var statearr_14361 = state_14345;
                                        statearr_14361[7] = inst_14322__$1;
                                        return statearr_14361;
                                      }();
                                      var statearr_14362_14387 = state_14345__$1;
                                      statearr_14362_14387[2] = null;
                                      statearr_14362_14387[1] = 2;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10548__auto__);
        return function(switch__10483__auto__, c__10548__auto__) {
          return function() {
            var cljs$core$async$state_machine__10484__auto__ = null;
            var cljs$core$async$state_machine__10484__auto____0 = function() {
              var statearr_14366 = [null, null, null, null, null, null, null, null];
              statearr_14366[0] = cljs$core$async$state_machine__10484__auto__;
              statearr_14366[1] = 1;
              return statearr_14366;
            };
            var cljs$core$async$state_machine__10484__auto____1 = function(state_14345) {
              while (true) {
                var ret_value__10485__auto__ = function() {
                  try {
                    while (true) {
                      var result__10486__auto__ = switch__10483__auto__.call(null, state_14345);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10486__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__10486__auto__;
                      }
                      break;
                    }
                  } catch (e14367) {
                    if (e14367 instanceof Object) {
                      var ex__10487__auto__ = e14367;
                      var statearr_14368_14388 = state_14345;
                      statearr_14368_14388[5] = ex__10487__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14345);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14367;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10485__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14389 = state_14345;
                  state_14345 = G__14389;
                  continue;
                } else {
                  return ret_value__10485__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__10484__auto__ = function(state_14345) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__10484__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__10484__auto____1.call(this, state_14345);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__10484__auto____0;
            cljs$core$async$state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__10484__auto____1;
            return cljs$core$async$state_machine__10484__auto__;
          }();
        }(switch__10483__auto__, c__10548__auto__);
      }();
      var state__10550__auto__ = function() {
        var statearr_14369 = f__10549__auto__.call(null);
        statearr_14369[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10548__auto__;
        return statearr_14369;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10550__auto__);
    };
  }(c__10548__auto__));
  return c__10548__auto__;
};
cljs.core.async.onto_chan.cljs$lang$maxFixedArity = 3;
cljs.core.async.to_chan = function cljs$core$async$to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
};
cljs.core.async.muxch_STAR_ = function cljs$core$async$muxch_STAR_(_) {
  if (!(_ == null) && !(_.cljs$core$async$Mux$muxch_STAR_$arity$1 == null)) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__6808__auto__ = _ == null ? null : _;
    var m__6809__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, _);
    } else {
      var m__6809__auto____$1 = cljs.core.async.muxch_STAR_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, _);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
      }
    }
  }
};
cljs.core.async.Mult = function() {
};
cljs.core.async.tap_STAR_ = function cljs$core$async$tap_STAR_(m, ch, close_QMARK_) {
  if (!(m == null) && !(m.cljs$core$async$Mult$tap_STAR_$arity$3 == null)) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__6808__auto__ = m == null ? null : m;
    var m__6809__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, m, ch, close_QMARK_);
    } else {
      var m__6809__auto____$1 = cljs.core.async.tap_STAR_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, m, ch, close_QMARK_);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
      }
    }
  }
};
cljs.core.async.untap_STAR_ = function cljs$core$async$untap_STAR_(m, ch) {
  if (!(m == null) && !(m.cljs$core$async$Mult$untap_STAR_$arity$2 == null)) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__6808__auto__ = m == null ? null : m;
    var m__6809__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, m, ch);
    } else {
      var m__6809__auto____$1 = cljs.core.async.untap_STAR_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, m, ch);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
      }
    }
  }
};
cljs.core.async.untap_all_STAR_ = function cljs$core$async$untap_all_STAR_(m) {
  if (!(m == null) && !(m.cljs$core$async$Mult$untap_all_STAR_$arity$1 == null)) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__6808__auto__ = m == null ? null : m;
    var m__6809__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, m);
    } else {
      var m__6809__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, m);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
      }
    }
  }
};
cljs.core.async.mult = function cljs$core$async$mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t_cljs$core$async14611 !== "undefined") {
    } else {
      cljs.core.async.t_cljs$core$async14611 = function(mult, ch, cs, meta14612) {
        this.mult = mult;
        this.ch = ch;
        this.cs = cs;
        this.meta14612 = meta14612;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t_cljs$core$async14611.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_14613, meta14612__$1) {
          var self__ = this;
          var _14613__$1 = this;
          return new cljs.core.async.t_cljs$core$async14611(self__.mult, self__.ch, self__.cs, meta14612__$1);
        };
      }(cs);
      cljs.core.async.t_cljs$core$async14611.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_14613) {
          var self__ = this;
          var _14613__$1 = this;
          return self__.meta14612;
        };
      }(cs);
      cljs.core.async.t_cljs$core$async14611.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t_cljs$core$async14611.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t_cljs$core$async14611.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t_cljs$core$async14611.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$1, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$1, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t_cljs$core$async14611.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$1) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$1);
          return null;
        };
      }(cs);
      cljs.core.async.t_cljs$core$async14611.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t_cljs$core$async14611.getBasis = function(cs) {
        return function() {
          return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "mult", "mult", -1187640995, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ch", 
          "ch", 1085813622, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "Creates and returns a mult(iple) of the supplied channel. Channels\n  containing copies of the channel can be created with 'tap', and\n  detached with 'untap'.\n\n  Each item is distributed to all taps in parallel and synchronously,\n  i.e. each tap must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow taps from holding up the mult.\n\n  Items received when there are no taps get dropped.\n\n  If a tap puts to a closed channel, it will be removed from the mult."], 
          null)), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "cs", "cs", -117024463, null), new cljs.core.Symbol(null, "meta14612", "meta14612", -239603310, null)], null);
        };
      }(cs);
      cljs.core.async.t_cljs$core$async14611.cljs$lang$type = true;
      cljs.core.async.t_cljs$core$async14611.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async14611";
      cljs.core.async.t_cljs$core$async14611.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
          return cljs.core._write.call(null, writer__6752__auto__, "cljs.core.async/t_cljs$core$async14611");
        };
      }(cs);
      cljs.core.async.__GT_t_cljs$core$async14611 = function(cs) {
        return function cljs$core$async$mult_$___GT_t_cljs$core$async14611(mult__$1, ch__$1, cs__$1, meta14612) {
          return new cljs.core.async.t_cljs$core$async14611(mult__$1, ch__$1, cs__$1, meta14612);
        };
      }(cs);
    }
    return new cljs.core.async.t_cljs$core$async14611(cljs$core$async$mult, ch, cs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function(_) {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__10548__auto___14832 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10548__auto___14832, cs, m, dchan, dctr, done) {
    return function() {
      var f__10549__auto__ = function() {
        var switch__10483__auto__ = function(c__10548__auto___14832, cs, m, dchan, dctr, done) {
          return function(state_14744) {
            var state_val_14745 = state_14744[1];
            if (state_val_14745 === 7) {
              var inst_14740 = state_14744[2];
              var state_14744__$1 = state_14744;
              var statearr_14746_14833 = state_14744__$1;
              statearr_14746_14833[2] = inst_14740;
              statearr_14746_14833[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_14745 === 20) {
                var inst_14645 = state_14744[7];
                var inst_14655 = cljs.core.first.call(null, inst_14645);
                var inst_14656 = cljs.core.nth.call(null, inst_14655, 0, null);
                var inst_14657 = cljs.core.nth.call(null, inst_14655, 1, null);
                var state_14744__$1 = function() {
                  var statearr_14747 = state_14744;
                  statearr_14747[8] = inst_14656;
                  return statearr_14747;
                }();
                if (cljs.core.truth_(inst_14657)) {
                  var statearr_14748_14834 = state_14744__$1;
                  statearr_14748_14834[1] = 22;
                } else {
                  var statearr_14749_14835 = state_14744__$1;
                  statearr_14749_14835[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_14745 === 27) {
                  var inst_14687 = state_14744[9];
                  var inst_14685 = state_14744[10];
                  var inst_14692 = state_14744[11];
                  var inst_14616 = state_14744[12];
                  var inst_14692__$1 = cljs.core._nth.call(null, inst_14685, inst_14687);
                  var inst_14693 = cljs.core.async.put_BANG_.call(null, inst_14692__$1, inst_14616, done);
                  var state_14744__$1 = function() {
                    var statearr_14750 = state_14744;
                    statearr_14750[11] = inst_14692__$1;
                    return statearr_14750;
                  }();
                  if (cljs.core.truth_(inst_14693)) {
                    var statearr_14751_14836 = state_14744__$1;
                    statearr_14751_14836[1] = 30;
                  } else {
                    var statearr_14752_14837 = state_14744__$1;
                    statearr_14752_14837[1] = 31;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_14745 === 1) {
                    var state_14744__$1 = state_14744;
                    var statearr_14753_14838 = state_14744__$1;
                    statearr_14753_14838[2] = null;
                    statearr_14753_14838[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_14745 === 24) {
                      var inst_14645 = state_14744[7];
                      var inst_14662 = state_14744[2];
                      var inst_14663 = cljs.core.next.call(null, inst_14645);
                      var inst_14625 = inst_14663;
                      var inst_14626 = null;
                      var inst_14627 = 0;
                      var inst_14628 = 0;
                      var state_14744__$1 = function() {
                        var statearr_14754 = state_14744;
                        statearr_14754[13] = inst_14662;
                        statearr_14754[14] = inst_14627;
                        statearr_14754[15] = inst_14626;
                        statearr_14754[16] = inst_14628;
                        statearr_14754[17] = inst_14625;
                        return statearr_14754;
                      }();
                      var statearr_14755_14839 = state_14744__$1;
                      statearr_14755_14839[2] = null;
                      statearr_14755_14839[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_14745 === 39) {
                        var state_14744__$1 = state_14744;
                        var statearr_14759_14840 = state_14744__$1;
                        statearr_14759_14840[2] = null;
                        statearr_14759_14840[1] = 41;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_14745 === 4) {
                          var inst_14616 = state_14744[12];
                          var inst_14616__$1 = state_14744[2];
                          var inst_14617 = inst_14616__$1 == null;
                          var state_14744__$1 = function() {
                            var statearr_14760 = state_14744;
                            statearr_14760[12] = inst_14616__$1;
                            return statearr_14760;
                          }();
                          if (cljs.core.truth_(inst_14617)) {
                            var statearr_14761_14841 = state_14744__$1;
                            statearr_14761_14841[1] = 5;
                          } else {
                            var statearr_14762_14842 = state_14744__$1;
                            statearr_14762_14842[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_14745 === 15) {
                            var inst_14627 = state_14744[14];
                            var inst_14626 = state_14744[15];
                            var inst_14628 = state_14744[16];
                            var inst_14625 = state_14744[17];
                            var inst_14641 = state_14744[2];
                            var inst_14642 = inst_14628 + 1;
                            var tmp14756 = inst_14627;
                            var tmp14757 = inst_14626;
                            var tmp14758 = inst_14625;
                            var inst_14625__$1 = tmp14758;
                            var inst_14626__$1 = tmp14757;
                            var inst_14627__$1 = tmp14756;
                            var inst_14628__$1 = inst_14642;
                            var state_14744__$1 = function() {
                              var statearr_14763 = state_14744;
                              statearr_14763[14] = inst_14627__$1;
                              statearr_14763[15] = inst_14626__$1;
                              statearr_14763[16] = inst_14628__$1;
                              statearr_14763[18] = inst_14641;
                              statearr_14763[17] = inst_14625__$1;
                              return statearr_14763;
                            }();
                            var statearr_14764_14843 = state_14744__$1;
                            statearr_14764_14843[2] = null;
                            statearr_14764_14843[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_14745 === 21) {
                              var inst_14666 = state_14744[2];
                              var state_14744__$1 = state_14744;
                              var statearr_14768_14844 = state_14744__$1;
                              statearr_14768_14844[2] = inst_14666;
                              statearr_14768_14844[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_14745 === 31) {
                                var inst_14692 = state_14744[11];
                                var inst_14696 = done.call(null, null);
                                var inst_14697 = cljs.core.async.untap_STAR_.call(null, m, inst_14692);
                                var state_14744__$1 = function() {
                                  var statearr_14769 = state_14744;
                                  statearr_14769[19] = inst_14696;
                                  return statearr_14769;
                                }();
                                var statearr_14770_14845 = state_14744__$1;
                                statearr_14770_14845[2] = inst_14697;
                                statearr_14770_14845[1] = 32;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_14745 === 32) {
                                  var inst_14684 = state_14744[20];
                                  var inst_14687 = state_14744[9];
                                  var inst_14685 = state_14744[10];
                                  var inst_14686 = state_14744[21];
                                  var inst_14699 = state_14744[2];
                                  var inst_14700 = inst_14687 + 1;
                                  var tmp14765 = inst_14684;
                                  var tmp14766 = inst_14685;
                                  var tmp14767 = inst_14686;
                                  var inst_14684__$1 = tmp14765;
                                  var inst_14685__$1 = tmp14766;
                                  var inst_14686__$1 = tmp14767;
                                  var inst_14687__$1 = inst_14700;
                                  var state_14744__$1 = function() {
                                    var statearr_14771 = state_14744;
                                    statearr_14771[22] = inst_14699;
                                    statearr_14771[20] = inst_14684__$1;
                                    statearr_14771[9] = inst_14687__$1;
                                    statearr_14771[10] = inst_14685__$1;
                                    statearr_14771[21] = inst_14686__$1;
                                    return statearr_14771;
                                  }();
                                  var statearr_14772_14846 = state_14744__$1;
                                  statearr_14772_14846[2] = null;
                                  statearr_14772_14846[1] = 25;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_14745 === 40) {
                                    var inst_14712 = state_14744[23];
                                    var inst_14716 = done.call(null, null);
                                    var inst_14717 = cljs.core.async.untap_STAR_.call(null, m, inst_14712);
                                    var state_14744__$1 = function() {
                                      var statearr_14773 = state_14744;
                                      statearr_14773[24] = inst_14716;
                                      return statearr_14773;
                                    }();
                                    var statearr_14774_14847 = state_14744__$1;
                                    statearr_14774_14847[2] = inst_14717;
                                    statearr_14774_14847[1] = 41;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_14745 === 33) {
                                      var inst_14703 = state_14744[25];
                                      var inst_14705 = cljs.core.chunked_seq_QMARK_.call(null, inst_14703);
                                      var state_14744__$1 = state_14744;
                                      if (inst_14705) {
                                        var statearr_14775_14848 = state_14744__$1;
                                        statearr_14775_14848[1] = 36;
                                      } else {
                                        var statearr_14776_14849 = state_14744__$1;
                                        statearr_14776_14849[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_14745 === 13) {
                                        var inst_14635 = state_14744[26];
                                        var inst_14638 = cljs.core.async.close_BANG_.call(null, inst_14635);
                                        var state_14744__$1 = state_14744;
                                        var statearr_14777_14850 = state_14744__$1;
                                        statearr_14777_14850[2] = inst_14638;
                                        statearr_14777_14850[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_14745 === 22) {
                                          var inst_14656 = state_14744[8];
                                          var inst_14659 = cljs.core.async.close_BANG_.call(null, inst_14656);
                                          var state_14744__$1 = state_14744;
                                          var statearr_14778_14851 = state_14744__$1;
                                          statearr_14778_14851[2] = inst_14659;
                                          statearr_14778_14851[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_14745 === 36) {
                                            var inst_14703 = state_14744[25];
                                            var inst_14707 = cljs.core.chunk_first.call(null, inst_14703);
                                            var inst_14708 = cljs.core.chunk_rest.call(null, inst_14703);
                                            var inst_14709 = cljs.core.count.call(null, inst_14707);
                                            var inst_14684 = inst_14708;
                                            var inst_14685 = inst_14707;
                                            var inst_14686 = inst_14709;
                                            var inst_14687 = 0;
                                            var state_14744__$1 = function() {
                                              var statearr_14779 = state_14744;
                                              statearr_14779[20] = inst_14684;
                                              statearr_14779[9] = inst_14687;
                                              statearr_14779[10] = inst_14685;
                                              statearr_14779[21] = inst_14686;
                                              return statearr_14779;
                                            }();
                                            var statearr_14780_14852 = state_14744__$1;
                                            statearr_14780_14852[2] = null;
                                            statearr_14780_14852[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_14745 === 41) {
                                              var inst_14703 = state_14744[25];
                                              var inst_14719 = state_14744[2];
                                              var inst_14720 = cljs.core.next.call(null, inst_14703);
                                              var inst_14684 = inst_14720;
                                              var inst_14685 = null;
                                              var inst_14686 = 0;
                                              var inst_14687 = 0;
                                              var state_14744__$1 = function() {
                                                var statearr_14781 = state_14744;
                                                statearr_14781[20] = inst_14684;
                                                statearr_14781[9] = inst_14687;
                                                statearr_14781[10] = inst_14685;
                                                statearr_14781[21] = inst_14686;
                                                statearr_14781[27] = inst_14719;
                                                return statearr_14781;
                                              }();
                                              var statearr_14782_14853 = state_14744__$1;
                                              statearr_14782_14853[2] = null;
                                              statearr_14782_14853[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_14745 === 43) {
                                                var state_14744__$1 = state_14744;
                                                var statearr_14783_14854 = state_14744__$1;
                                                statearr_14783_14854[2] = null;
                                                statearr_14783_14854[1] = 44;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_14745 === 29) {
                                                  var inst_14728 = state_14744[2];
                                                  var state_14744__$1 = state_14744;
                                                  var statearr_14784_14855 = state_14744__$1;
                                                  statearr_14784_14855[2] = inst_14728;
                                                  statearr_14784_14855[1] = 26;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_14745 === 44) {
                                                    var inst_14737 = state_14744[2];
                                                    var state_14744__$1 = function() {
                                                      var statearr_14785 = state_14744;
                                                      statearr_14785[28] = inst_14737;
                                                      return statearr_14785;
                                                    }();
                                                    var statearr_14786_14856 = state_14744__$1;
                                                    statearr_14786_14856[2] = null;
                                                    statearr_14786_14856[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_14745 === 6) {
                                                      var inst_14676 = state_14744[29];
                                                      var inst_14675 = cljs.core.deref.call(null, cs);
                                                      var inst_14676__$1 = cljs.core.keys.call(null, inst_14675);
                                                      var inst_14677 = cljs.core.count.call(null, inst_14676__$1);
                                                      var inst_14678 = cljs.core.reset_BANG_.call(null, dctr, inst_14677);
                                                      var inst_14683 = cljs.core.seq.call(null, inst_14676__$1);
                                                      var inst_14684 = inst_14683;
                                                      var inst_14685 = null;
                                                      var inst_14686 = 0;
                                                      var inst_14687 = 0;
                                                      var state_14744__$1 = function() {
                                                        var statearr_14787 = state_14744;
                                                        statearr_14787[20] = inst_14684;
                                                        statearr_14787[30] = inst_14678;
                                                        statearr_14787[29] = inst_14676__$1;
                                                        statearr_14787[9] = inst_14687;
                                                        statearr_14787[10] = inst_14685;
                                                        statearr_14787[21] = inst_14686;
                                                        return statearr_14787;
                                                      }();
                                                      var statearr_14788_14857 = state_14744__$1;
                                                      statearr_14788_14857[2] = null;
                                                      statearr_14788_14857[1] = 25;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_14745 === 28) {
                                                        var inst_14703 = state_14744[25];
                                                        var inst_14684 = state_14744[20];
                                                        var inst_14703__$1 = cljs.core.seq.call(null, inst_14684);
                                                        var state_14744__$1 = function() {
                                                          var statearr_14789 = state_14744;
                                                          statearr_14789[25] = inst_14703__$1;
                                                          return statearr_14789;
                                                        }();
                                                        if (inst_14703__$1) {
                                                          var statearr_14790_14858 = state_14744__$1;
                                                          statearr_14790_14858[1] = 33;
                                                        } else {
                                                          var statearr_14791_14859 = state_14744__$1;
                                                          statearr_14791_14859[1] = 34;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_14745 === 25) {
                                                          var inst_14687 = state_14744[9];
                                                          var inst_14686 = state_14744[21];
                                                          var inst_14689 = inst_14687 < inst_14686;
                                                          var inst_14690 = inst_14689;
                                                          var state_14744__$1 = state_14744;
                                                          if (cljs.core.truth_(inst_14690)) {
                                                            var statearr_14792_14860 = state_14744__$1;
                                                            statearr_14792_14860[1] = 27;
                                                          } else {
                                                            var statearr_14793_14861 = state_14744__$1;
                                                            statearr_14793_14861[1] = 28;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_14745 === 34) {
                                                            var state_14744__$1 = state_14744;
                                                            var statearr_14794_14862 = state_14744__$1;
                                                            statearr_14794_14862[2] = null;
                                                            statearr_14794_14862[1] = 35;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_14745 === 17) {
                                                              var state_14744__$1 = state_14744;
                                                              var statearr_14795_14863 = state_14744__$1;
                                                              statearr_14795_14863[2] = null;
                                                              statearr_14795_14863[1] = 18;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_14745 === 3) {
                                                                var inst_14742 = state_14744[2];
                                                                var state_14744__$1 = state_14744;
                                                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14744__$1, inst_14742);
                                                              } else {
                                                                if (state_val_14745 === 12) {
                                                                  var inst_14671 = state_14744[2];
                                                                  var state_14744__$1 = state_14744;
                                                                  var statearr_14796_14864 = state_14744__$1;
                                                                  statearr_14796_14864[2] = inst_14671;
                                                                  statearr_14796_14864[1] = 9;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_14745 === 2) {
                                                                    var state_14744__$1 = state_14744;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14744__$1, 4, ch);
                                                                  } else {
                                                                    if (state_val_14745 === 23) {
                                                                      var state_14744__$1 = state_14744;
                                                                      var statearr_14797_14865 = state_14744__$1;
                                                                      statearr_14797_14865[2] = null;
                                                                      statearr_14797_14865[1] = 24;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_14745 === 35) {
                                                                        var inst_14726 = state_14744[2];
                                                                        var state_14744__$1 = state_14744;
                                                                        var statearr_14798_14866 = state_14744__$1;
                                                                        statearr_14798_14866[2] = inst_14726;
                                                                        statearr_14798_14866[1] = 29;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_14745 === 19) {
                                                                          var inst_14645 = state_14744[7];
                                                                          var inst_14649 = cljs.core.chunk_first.call(null, inst_14645);
                                                                          var inst_14650 = cljs.core.chunk_rest.call(null, inst_14645);
                                                                          var inst_14651 = cljs.core.count.call(null, inst_14649);
                                                                          var inst_14625 = inst_14650;
                                                                          var inst_14626 = inst_14649;
                                                                          var inst_14627 = inst_14651;
                                                                          var inst_14628 = 0;
                                                                          var state_14744__$1 = function() {
                                                                            var statearr_14799 = state_14744;
                                                                            statearr_14799[14] = inst_14627;
                                                                            statearr_14799[15] = inst_14626;
                                                                            statearr_14799[16] = inst_14628;
                                                                            statearr_14799[17] = inst_14625;
                                                                            return statearr_14799;
                                                                          }();
                                                                          var statearr_14800_14867 = state_14744__$1;
                                                                          statearr_14800_14867[2] = null;
                                                                          statearr_14800_14867[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_14745 === 11) {
                                                                            var inst_14645 = state_14744[7];
                                                                            var inst_14625 = state_14744[17];
                                                                            var inst_14645__$1 = cljs.core.seq.call(null, inst_14625);
                                                                            var state_14744__$1 = function() {
                                                                              var statearr_14801 = state_14744;
                                                                              statearr_14801[7] = inst_14645__$1;
                                                                              return statearr_14801;
                                                                            }();
                                                                            if (inst_14645__$1) {
                                                                              var statearr_14802_14868 = state_14744__$1;
                                                                              statearr_14802_14868[1] = 16;
                                                                            } else {
                                                                              var statearr_14803_14869 = state_14744__$1;
                                                                              statearr_14803_14869[1] = 17;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_14745 === 9) {
                                                                              var inst_14673 = state_14744[2];
                                                                              var state_14744__$1 = state_14744;
                                                                              var statearr_14804_14870 = state_14744__$1;
                                                                              statearr_14804_14870[2] = inst_14673;
                                                                              statearr_14804_14870[1] = 7;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_14745 === 5) {
                                                                                var inst_14623 = cljs.core.deref.call(null, cs);
                                                                                var inst_14624 = cljs.core.seq.call(null, inst_14623);
                                                                                var inst_14625 = inst_14624;
                                                                                var inst_14626 = null;
                                                                                var inst_14627 = 0;
                                                                                var inst_14628 = 0;
                                                                                var state_14744__$1 = function() {
                                                                                  var statearr_14805 = state_14744;
                                                                                  statearr_14805[14] = inst_14627;
                                                                                  statearr_14805[15] = inst_14626;
                                                                                  statearr_14805[16] = inst_14628;
                                                                                  statearr_14805[17] = inst_14625;
                                                                                  return statearr_14805;
                                                                                }();
                                                                                var statearr_14806_14871 = state_14744__$1;
                                                                                statearr_14806_14871[2] = null;
                                                                                statearr_14806_14871[1] = 8;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_14745 === 14) {
                                                                                  var state_14744__$1 = state_14744;
                                                                                  var statearr_14807_14872 = state_14744__$1;
                                                                                  statearr_14807_14872[2] = null;
                                                                                  statearr_14807_14872[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_14745 === 45) {
                                                                                    var inst_14734 = state_14744[2];
                                                                                    var state_14744__$1 = state_14744;
                                                                                    var statearr_14808_14873 = state_14744__$1;
                                                                                    statearr_14808_14873[2] = inst_14734;
                                                                                    statearr_14808_14873[1] = 44;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_14745 === 26) {
                                                                                      var inst_14676 = state_14744[29];
                                                                                      var inst_14730 = state_14744[2];
                                                                                      var inst_14731 = cljs.core.seq.call(null, inst_14676);
                                                                                      var state_14744__$1 = function() {
                                                                                        var statearr_14809 = state_14744;
                                                                                        statearr_14809[31] = inst_14730;
                                                                                        return statearr_14809;
                                                                                      }();
                                                                                      if (inst_14731) {
                                                                                        var statearr_14810_14874 = state_14744__$1;
                                                                                        statearr_14810_14874[1] = 42;
                                                                                      } else {
                                                                                        var statearr_14811_14875 = state_14744__$1;
                                                                                        statearr_14811_14875[1] = 43;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_14745 === 16) {
                                                                                        var inst_14645 = state_14744[7];
                                                                                        var inst_14647 = cljs.core.chunked_seq_QMARK_.call(null, inst_14645);
                                                                                        var state_14744__$1 = state_14744;
                                                                                        if (inst_14647) {
                                                                                          var statearr_14812_14876 = state_14744__$1;
                                                                                          statearr_14812_14876[1] = 19;
                                                                                        } else {
                                                                                          var statearr_14813_14877 = state_14744__$1;
                                                                                          statearr_14813_14877[1] = 20;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_14745 === 38) {
                                                                                          var inst_14723 = state_14744[2];
                                                                                          var state_14744__$1 = state_14744;
                                                                                          var statearr_14814_14878 = state_14744__$1;
                                                                                          statearr_14814_14878[2] = inst_14723;
                                                                                          statearr_14814_14878[1] = 35;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_14745 === 30) {
                                                                                            var state_14744__$1 = state_14744;
                                                                                            var statearr_14815_14879 = state_14744__$1;
                                                                                            statearr_14815_14879[2] = null;
                                                                                            statearr_14815_14879[1] = 32;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_14745 === 10) {
                                                                                              var inst_14626 = state_14744[15];
                                                                                              var inst_14628 = state_14744[16];
                                                                                              var inst_14634 = cljs.core._nth.call(null, inst_14626, inst_14628);
                                                                                              var inst_14635 = cljs.core.nth.call(null, inst_14634, 0, null);
                                                                                              var inst_14636 = cljs.core.nth.call(null, inst_14634, 1, null);
                                                                                              var state_14744__$1 = function() {
                                                                                                var statearr_14816 = state_14744;
                                                                                                statearr_14816[26] = inst_14635;
                                                                                                return statearr_14816;
                                                                                              }();
                                                                                              if (cljs.core.truth_(inst_14636)) {
                                                                                                var statearr_14817_14880 = state_14744__$1;
                                                                                                statearr_14817_14880[1] = 13;
                                                                                              } else {
                                                                                                var statearr_14818_14881 = state_14744__$1;
                                                                                                statearr_14818_14881[1] = 14;
                                                                                              }
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_14745 === 18) {
                                                                                                var inst_14669 = state_14744[2];
                                                                                                var state_14744__$1 = state_14744;
                                                                                                var statearr_14819_14882 = state_14744__$1;
                                                                                                statearr_14819_14882[2] = inst_14669;
                                                                                                statearr_14819_14882[1] = 12;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                if (state_val_14745 === 42) {
                                                                                                  var state_14744__$1 = state_14744;
                                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14744__$1, 45, dchan);
                                                                                                } else {
                                                                                                  if (state_val_14745 === 37) {
                                                                                                    var inst_14703 = state_14744[25];
                                                                                                    var inst_14712 = state_14744[23];
                                                                                                    var inst_14616 = state_14744[12];
                                                                                                    var inst_14712__$1 = cljs.core.first.call(null, inst_14703);
                                                                                                    var inst_14713 = cljs.core.async.put_BANG_.call(null, inst_14712__$1, inst_14616, done);
                                                                                                    var state_14744__$1 = function() {
                                                                                                      var statearr_14820 = state_14744;
                                                                                                      statearr_14820[23] = inst_14712__$1;
                                                                                                      return statearr_14820;
                                                                                                    }();
                                                                                                    if (cljs.core.truth_(inst_14713)) {
                                                                                                      var statearr_14821_14883 = state_14744__$1;
                                                                                                      statearr_14821_14883[1] = 39;
                                                                                                    } else {
                                                                                                      var statearr_14822_14884 = state_14744__$1;
                                                                                                      statearr_14822_14884[1] = 40;
                                                                                                    }
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                  } else {
                                                                                                    if (state_val_14745 === 8) {
                                                                                                      var inst_14627 = state_14744[14];
                                                                                                      var inst_14628 = state_14744[16];
                                                                                                      var inst_14630 = inst_14628 < inst_14627;
                                                                                                      var inst_14631 = inst_14630;
                                                                                                      var state_14744__$1 = state_14744;
                                                                                                      if (cljs.core.truth_(inst_14631)) {
                                                                                                        var statearr_14823_14885 = state_14744__$1;
                                                                                                        statearr_14823_14885[1] = 10;
                                                                                                      } else {
                                                                                                        var statearr_14824_14886 = state_14744__$1;
                                                                                                        statearr_14824_14886[1] = 11;
                                                                                                      }
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                    } else {
                                                                                                      return null;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10548__auto___14832, cs, m, dchan, dctr, done);
        return function(switch__10483__auto__, c__10548__auto___14832, cs, m, dchan, dctr, done) {
          return function() {
            var cljs$core$async$mult_$_state_machine__10484__auto__ = null;
            var cljs$core$async$mult_$_state_machine__10484__auto____0 = function() {
              var statearr_14828 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_14828[0] = cljs$core$async$mult_$_state_machine__10484__auto__;
              statearr_14828[1] = 1;
              return statearr_14828;
            };
            var cljs$core$async$mult_$_state_machine__10484__auto____1 = function(state_14744) {
              while (true) {
                var ret_value__10485__auto__ = function() {
                  try {
                    while (true) {
                      var result__10486__auto__ = switch__10483__auto__.call(null, state_14744);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10486__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__10486__auto__;
                      }
                      break;
                    }
                  } catch (e14829) {
                    if (e14829 instanceof Object) {
                      var ex__10487__auto__ = e14829;
                      var statearr_14830_14887 = state_14744;
                      statearr_14830_14887[5] = ex__10487__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14744);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e14829;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10485__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__14888 = state_14744;
                  state_14744 = G__14888;
                  continue;
                } else {
                  return ret_value__10485__auto__;
                }
                break;
              }
            };
            cljs$core$async$mult_$_state_machine__10484__auto__ = function(state_14744) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mult_$_state_machine__10484__auto____0.call(this);
                case 1:
                  return cljs$core$async$mult_$_state_machine__10484__auto____1.call(this, state_14744);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mult_$_state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mult_$_state_machine__10484__auto____0;
            cljs$core$async$mult_$_state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mult_$_state_machine__10484__auto____1;
            return cljs$core$async$mult_$_state_machine__10484__auto__;
          }();
        }(switch__10483__auto__, c__10548__auto___14832, cs, m, dchan, dctr, done);
      }();
      var state__10550__auto__ = function() {
        var statearr_14831 = f__10549__auto__.call(null);
        statearr_14831[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10548__auto___14832;
        return statearr_14831;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10550__auto__);
    };
  }(c__10548__auto___14832, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function cljs$core$async$tap(var_args) {
  var args14889 = [];
  var len__7211__auto___14892 = arguments.length;
  var i__7212__auto___14893 = 0;
  while (true) {
    if (i__7212__auto___14893 < len__7211__auto___14892) {
      args14889.push(arguments[i__7212__auto___14893]);
      var G__14894 = i__7212__auto___14893 + 1;
      i__7212__auto___14893 = G__14894;
      continue;
    } else {
    }
    break;
  }
  var G__14891 = args14889.length;
  switch(G__14891) {
    case 2:
      return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args14889.length)].join(""));;
  }
};
cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2 = function(mult, ch) {
  return cljs.core.async.tap.call(null, mult, ch, true);
};
cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3 = function(mult, ch, close_QMARK_) {
  cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
  return ch;
};
cljs.core.async.tap.cljs$lang$maxFixedArity = 3;
cljs.core.async.untap = function cljs$core$async$untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function cljs$core$async$untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
};
cljs.core.async.admix_STAR_ = function cljs$core$async$admix_STAR_(m, ch) {
  if (!(m == null) && !(m.cljs$core$async$Mix$admix_STAR_$arity$2 == null)) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__6808__auto__ = m == null ? null : m;
    var m__6809__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, m, ch);
    } else {
      var m__6809__auto____$1 = cljs.core.async.admix_STAR_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, m, ch);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
      }
    }
  }
};
cljs.core.async.unmix_STAR_ = function cljs$core$async$unmix_STAR_(m, ch) {
  if (!(m == null) && !(m.cljs$core$async$Mix$unmix_STAR_$arity$2 == null)) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__6808__auto__ = m == null ? null : m;
    var m__6809__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, m, ch);
    } else {
      var m__6809__auto____$1 = cljs.core.async.unmix_STAR_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, m, ch);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
      }
    }
  }
};
cljs.core.async.unmix_all_STAR_ = function cljs$core$async$unmix_all_STAR_(m) {
  if (!(m == null) && !(m.cljs$core$async$Mix$unmix_all_STAR_$arity$1 == null)) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__6808__auto__ = m == null ? null : m;
    var m__6809__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, m);
    } else {
      var m__6809__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, m);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
      }
    }
  }
};
cljs.core.async.toggle_STAR_ = function cljs$core$async$toggle_STAR_(m, state_map) {
  if (!(m == null) && !(m.cljs$core$async$Mix$toggle_STAR_$arity$2 == null)) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__6808__auto__ = m == null ? null : m;
    var m__6809__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, m, state_map);
    } else {
      var m__6809__auto____$1 = cljs.core.async.toggle_STAR_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, m, state_map);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
      }
    }
  }
};
cljs.core.async.solo_mode_STAR_ = function cljs$core$async$solo_mode_STAR_(m, mode) {
  if (!(m == null) && !(m.cljs$core$async$Mix$solo_mode_STAR_$arity$2 == null)) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__6808__auto__ = m == null ? null : m;
    var m__6809__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, m, mode);
    } else {
      var m__6809__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, m, mode);
      } else {
        throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
      }
    }
  }
};
cljs.core.async.ioc_alts_BANG_ = function cljs$core$async$ioc_alts_BANG_(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___14906 = arguments.length;
  var i__7212__auto___14907 = 0;
  while (true) {
    if (i__7212__auto___14907 < len__7211__auto___14906) {
      args__7218__auto__.push(arguments[i__7212__auto___14907]);
      var G__14908 = i__7212__auto___14907 + 1;
      i__7212__auto___14907 = G__14908;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 3 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(3), 0) : null;
  return cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__7219__auto__);
};
cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(state, cont_block, ports, p__14900) {
  var map__14901 = p__14900;
  var map__14901__$1 = (!(map__14901 == null) ? map__14901.cljs$lang$protocol_mask$partition0$ & 64 || map__14901.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14901) : map__14901;
  var opts = map__14901__$1;
  var statearr_14903_14909 = state;
  statearr_14903_14909[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
  var temp__4657__auto__ = cljs.core.async.do_alts.call(null, function(map__14901, map__14901__$1, opts) {
    return function(val) {
      var statearr_14904_14910 = state;
      statearr_14904_14910[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
    };
  }(map__14901, map__14901__$1, opts), ports, opts);
  if (cljs.core.truth_(temp__4657__auto__)) {
    var cb = temp__4657__auto__;
    var statearr_14905_14911 = state;
    statearr_14905_14911[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.async.ioc_alts_BANG_.cljs$lang$applyTo = function(seq14896) {
  var G__14897 = cljs.core.first.call(null, seq14896);
  var seq14896__$1 = cljs.core.next.call(null, seq14896);
  var G__14898 = cljs.core.first.call(null, seq14896__$1);
  var seq14896__$2 = cljs.core.next.call(null, seq14896__$1);
  var G__14899 = cljs.core.first.call(null, seq14896__$2);
  var seq14896__$3 = cljs.core.next.call(null, seq14896__$2);
  return cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__14897, G__14898, G__14899, seq14896__$3);
};
cljs.core.async.mix = function cljs$core$async$mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t_cljs$core$async15075 !== "undefined") {
    } else {
      cljs.core.async.t_cljs$core$async15075 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta15076) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta15076 = meta15076;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t_cljs$core$async15075.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_15077, meta15076__$1) {
          var self__ = this;
          var _15077__$1 = this;
          return new cljs.core.async.t_cljs$core$async15075(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta15076__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async15075.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_15077) {
          var self__ = this;
          var _15077__$1 = this;
          return self__.meta15076;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async15075.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t_cljs$core$async15075.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async15075.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t_cljs$core$async15075.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async15075.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async15075.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async15075.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async15075.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "mode", "mode", -2000032078, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async15075.getBasis = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function() {
          return new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "change", "change", 477485025, null), cljs.core.with_meta(new cljs.core.Symbol(null, "mix", "mix", 2121373763, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, 
          [new cljs.core.Symbol(null, "out", "out", 729986010, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "Creates and returns a mix of one or more input channels which will\n  be put on the supplied out channel. Input sources can be added to\n  the mix with 'admix', and removed with 'unmix'. A mix supports\n  soloing, muting and pausing multiple inputs atomically using\n  'toggle', and can solo using either muting or pausing as determined\n  by 'solo-mode'.\n\n  Each channel can have zero or more boolean modes set via 'toggle':\n\n  :solo - when true, only this (ond other soloed) channel(s) will appear\n          in the mix output channel. :mute and :pause states of soloed\n          channels are ignored. If solo-mode is :mute, non-soloed\n          channels are muted, if :pause, non-soloed channels are\n          paused.\n\n  :mute - muted channels will have their contents consumed but not included in the mix\n  :pause - paused channels will not have their contents consumed (and thus also not included in the mix)\n"], 
          null)), new cljs.core.Symbol(null, "solo-mode", "solo-mode", 2031788074, null), new cljs.core.Symbol(null, "pick", "pick", 1300068175, null), new cljs.core.Symbol(null, "cs", "cs", -117024463, null), new cljs.core.Symbol(null, "calc-state", "calc-state", -349968968, null), new cljs.core.Symbol(null, "out", "out", 729986010, null), new cljs.core.Symbol(null, "changed", "changed", -2083710852, null), new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, 
          "attrs", "attrs", -450137186, null), new cljs.core.Symbol(null, "meta15076", "meta15076", -1162636481, null)], null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t_cljs$core$async15075.cljs$lang$type = true;
      cljs.core.async.t_cljs$core$async15075.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async15075";
      cljs.core.async.t_cljs$core$async15075.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
          return cljs.core._write.call(null, writer__6752__auto__, "cljs.core.async/t_cljs$core$async15075");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t_cljs$core$async15075 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function cljs$core$async$mix_$___GT_t_cljs$core$async15075(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta15076) {
          return new cljs.core.async.t_cljs$core$async15075(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta15076);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t_cljs$core$async15075(change, cljs$core$async$mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__10548__auto___15238 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10548__auto___15238, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__10549__auto__ = function() {
        var switch__10483__auto__ = function(c__10548__auto___15238, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_15175) {
            var state_val_15176 = state_15175[1];
            if (state_val_15176 === 7) {
              var inst_15093 = state_15175[2];
              var state_15175__$1 = state_15175;
              var statearr_15177_15239 = state_15175__$1;
              statearr_15177_15239[2] = inst_15093;
              statearr_15177_15239[1] = 4;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15176 === 20) {
                var inst_15105 = state_15175[7];
                var state_15175__$1 = state_15175;
                var statearr_15178_15240 = state_15175__$1;
                statearr_15178_15240[2] = inst_15105;
                statearr_15178_15240[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15176 === 27) {
                  var state_15175__$1 = state_15175;
                  var statearr_15179_15241 = state_15175__$1;
                  statearr_15179_15241[2] = null;
                  statearr_15179_15241[1] = 28;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15176 === 1) {
                    var inst_15081 = state_15175[8];
                    var inst_15081__$1 = calc_state.call(null);
                    var inst_15083 = inst_15081__$1 == null;
                    var inst_15084 = cljs.core.not.call(null, inst_15083);
                    var state_15175__$1 = function() {
                      var statearr_15180 = state_15175;
                      statearr_15180[8] = inst_15081__$1;
                      return statearr_15180;
                    }();
                    if (inst_15084) {
                      var statearr_15181_15242 = state_15175__$1;
                      statearr_15181_15242[1] = 2;
                    } else {
                      var statearr_15182_15243 = state_15175__$1;
                      statearr_15182_15243[1] = 3;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15176 === 24) {
                      var inst_15149 = state_15175[9];
                      var inst_15128 = state_15175[10];
                      var inst_15135 = state_15175[11];
                      var inst_15149__$1 = inst_15128.call(null, inst_15135);
                      var state_15175__$1 = function() {
                        var statearr_15183 = state_15175;
                        statearr_15183[9] = inst_15149__$1;
                        return statearr_15183;
                      }();
                      if (cljs.core.truth_(inst_15149__$1)) {
                        var statearr_15184_15244 = state_15175__$1;
                        statearr_15184_15244[1] = 29;
                      } else {
                        var statearr_15185_15245 = state_15175__$1;
                        statearr_15185_15245[1] = 30;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15176 === 4) {
                        var inst_15096 = state_15175[2];
                        var state_15175__$1 = state_15175;
                        if (cljs.core.truth_(inst_15096)) {
                          var statearr_15186_15246 = state_15175__$1;
                          statearr_15186_15246[1] = 8;
                        } else {
                          var statearr_15187_15247 = state_15175__$1;
                          statearr_15187_15247[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_15176 === 15) {
                          var inst_15122 = state_15175[2];
                          var state_15175__$1 = state_15175;
                          if (cljs.core.truth_(inst_15122)) {
                            var statearr_15188_15248 = state_15175__$1;
                            statearr_15188_15248[1] = 19;
                          } else {
                            var statearr_15189_15249 = state_15175__$1;
                            statearr_15189_15249[1] = 20;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_15176 === 21) {
                            var inst_15127 = state_15175[12];
                            var inst_15127__$1 = state_15175[2];
                            var inst_15128 = cljs.core.get.call(null, inst_15127__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                            var inst_15129 = cljs.core.get.call(null, inst_15127__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                            var inst_15130 = cljs.core.get.call(null, inst_15127__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                            var state_15175__$1 = function() {
                              var statearr_15190 = state_15175;
                              statearr_15190[13] = inst_15129;
                              statearr_15190[10] = inst_15128;
                              statearr_15190[12] = inst_15127__$1;
                              return statearr_15190;
                            }();
                            return cljs.core.async.ioc_alts_BANG_.call(null, state_15175__$1, 22, inst_15130);
                          } else {
                            if (state_val_15176 === 31) {
                              var inst_15157 = state_15175[2];
                              var state_15175__$1 = state_15175;
                              if (cljs.core.truth_(inst_15157)) {
                                var statearr_15191_15250 = state_15175__$1;
                                statearr_15191_15250[1] = 32;
                              } else {
                                var statearr_15192_15251 = state_15175__$1;
                                statearr_15192_15251[1] = 33;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_15176 === 32) {
                                var inst_15134 = state_15175[14];
                                var state_15175__$1 = state_15175;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15175__$1, 35, out, inst_15134);
                              } else {
                                if (state_val_15176 === 33) {
                                  var inst_15127 = state_15175[12];
                                  var inst_15105 = inst_15127;
                                  var state_15175__$1 = function() {
                                    var statearr_15193 = state_15175;
                                    statearr_15193[7] = inst_15105;
                                    return statearr_15193;
                                  }();
                                  var statearr_15194_15252 = state_15175__$1;
                                  statearr_15194_15252[2] = null;
                                  statearr_15194_15252[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_15176 === 13) {
                                    var inst_15105 = state_15175[7];
                                    var inst_15112 = inst_15105.cljs$lang$protocol_mask$partition0$;
                                    var inst_15113 = inst_15112 & 64;
                                    var inst_15114 = inst_15105.cljs$core$ISeq$;
                                    var inst_15115 = inst_15113 || inst_15114;
                                    var state_15175__$1 = state_15175;
                                    if (cljs.core.truth_(inst_15115)) {
                                      var statearr_15195_15253 = state_15175__$1;
                                      statearr_15195_15253[1] = 16;
                                    } else {
                                      var statearr_15196_15254 = state_15175__$1;
                                      statearr_15196_15254[1] = 17;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_15176 === 22) {
                                      var inst_15134 = state_15175[14];
                                      var inst_15135 = state_15175[11];
                                      var inst_15133 = state_15175[2];
                                      var inst_15134__$1 = cljs.core.nth.call(null, inst_15133, 0, null);
                                      var inst_15135__$1 = cljs.core.nth.call(null, inst_15133, 1, null);
                                      var inst_15136 = inst_15134__$1 == null;
                                      var inst_15137 = cljs.core._EQ_.call(null, inst_15135__$1, change);
                                      var inst_15138 = inst_15136 || inst_15137;
                                      var state_15175__$1 = function() {
                                        var statearr_15197 = state_15175;
                                        statearr_15197[14] = inst_15134__$1;
                                        statearr_15197[11] = inst_15135__$1;
                                        return statearr_15197;
                                      }();
                                      if (cljs.core.truth_(inst_15138)) {
                                        var statearr_15198_15255 = state_15175__$1;
                                        statearr_15198_15255[1] = 23;
                                      } else {
                                        var statearr_15199_15256 = state_15175__$1;
                                        statearr_15199_15256[1] = 24;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_15176 === 36) {
                                        var inst_15127 = state_15175[12];
                                        var inst_15105 = inst_15127;
                                        var state_15175__$1 = function() {
                                          var statearr_15200 = state_15175;
                                          statearr_15200[7] = inst_15105;
                                          return statearr_15200;
                                        }();
                                        var statearr_15201_15257 = state_15175__$1;
                                        statearr_15201_15257[2] = null;
                                        statearr_15201_15257[1] = 11;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_15176 === 29) {
                                          var inst_15149 = state_15175[9];
                                          var state_15175__$1 = state_15175;
                                          var statearr_15202_15258 = state_15175__$1;
                                          statearr_15202_15258[2] = inst_15149;
                                          statearr_15202_15258[1] = 31;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_15176 === 6) {
                                            var state_15175__$1 = state_15175;
                                            var statearr_15203_15259 = state_15175__$1;
                                            statearr_15203_15259[2] = false;
                                            statearr_15203_15259[1] = 7;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_15176 === 28) {
                                              var inst_15145 = state_15175[2];
                                              var inst_15146 = calc_state.call(null);
                                              var inst_15105 = inst_15146;
                                              var state_15175__$1 = function() {
                                                var statearr_15204 = state_15175;
                                                statearr_15204[15] = inst_15145;
                                                statearr_15204[7] = inst_15105;
                                                return statearr_15204;
                                              }();
                                              var statearr_15205_15260 = state_15175__$1;
                                              statearr_15205_15260[2] = null;
                                              statearr_15205_15260[1] = 11;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_15176 === 25) {
                                                var inst_15171 = state_15175[2];
                                                var state_15175__$1 = state_15175;
                                                var statearr_15206_15261 = state_15175__$1;
                                                statearr_15206_15261[2] = inst_15171;
                                                statearr_15206_15261[1] = 12;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_15176 === 34) {
                                                  var inst_15169 = state_15175[2];
                                                  var state_15175__$1 = state_15175;
                                                  var statearr_15207_15262 = state_15175__$1;
                                                  statearr_15207_15262[2] = inst_15169;
                                                  statearr_15207_15262[1] = 25;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_15176 === 17) {
                                                    var state_15175__$1 = state_15175;
                                                    var statearr_15208_15263 = state_15175__$1;
                                                    statearr_15208_15263[2] = false;
                                                    statearr_15208_15263[1] = 18;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_15176 === 3) {
                                                      var state_15175__$1 = state_15175;
                                                      var statearr_15209_15264 = state_15175__$1;
                                                      statearr_15209_15264[2] = false;
                                                      statearr_15209_15264[1] = 4;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_15176 === 12) {
                                                        var inst_15173 = state_15175[2];
                                                        var state_15175__$1 = state_15175;
                                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15175__$1, inst_15173);
                                                      } else {
                                                        if (state_val_15176 === 2) {
                                                          var inst_15081 = state_15175[8];
                                                          var inst_15086 = inst_15081.cljs$lang$protocol_mask$partition0$;
                                                          var inst_15087 = inst_15086 & 64;
                                                          var inst_15088 = inst_15081.cljs$core$ISeq$;
                                                          var inst_15089 = inst_15087 || inst_15088;
                                                          var state_15175__$1 = state_15175;
                                                          if (cljs.core.truth_(inst_15089)) {
                                                            var statearr_15210_15265 = state_15175__$1;
                                                            statearr_15210_15265[1] = 5;
                                                          } else {
                                                            var statearr_15211_15266 = state_15175__$1;
                                                            statearr_15211_15266[1] = 6;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_15176 === 23) {
                                                            var inst_15134 = state_15175[14];
                                                            var inst_15140 = inst_15134 == null;
                                                            var state_15175__$1 = state_15175;
                                                            if (cljs.core.truth_(inst_15140)) {
                                                              var statearr_15212_15267 = state_15175__$1;
                                                              statearr_15212_15267[1] = 26;
                                                            } else {
                                                              var statearr_15213_15268 = state_15175__$1;
                                                              statearr_15213_15268[1] = 27;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_15176 === 35) {
                                                              var inst_15160 = state_15175[2];
                                                              var state_15175__$1 = state_15175;
                                                              if (cljs.core.truth_(inst_15160)) {
                                                                var statearr_15214_15269 = state_15175__$1;
                                                                statearr_15214_15269[1] = 36;
                                                              } else {
                                                                var statearr_15215_15270 = state_15175__$1;
                                                                statearr_15215_15270[1] = 37;
                                                              }
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_15176 === 19) {
                                                                var inst_15105 = state_15175[7];
                                                                var inst_15124 = cljs.core.apply.call(null, cljs.core.hash_map, inst_15105);
                                                                var state_15175__$1 = state_15175;
                                                                var statearr_15216_15271 = state_15175__$1;
                                                                statearr_15216_15271[2] = inst_15124;
                                                                statearr_15216_15271[1] = 21;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                if (state_val_15176 === 11) {
                                                                  var inst_15105 = state_15175[7];
                                                                  var inst_15109 = inst_15105 == null;
                                                                  var inst_15110 = cljs.core.not.call(null, inst_15109);
                                                                  var state_15175__$1 = state_15175;
                                                                  if (inst_15110) {
                                                                    var statearr_15217_15272 = state_15175__$1;
                                                                    statearr_15217_15272[1] = 13;
                                                                  } else {
                                                                    var statearr_15218_15273 = state_15175__$1;
                                                                    statearr_15218_15273[1] = 14;
                                                                  }
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_15176 === 9) {
                                                                    var inst_15081 = state_15175[8];
                                                                    var state_15175__$1 = state_15175;
                                                                    var statearr_15219_15274 = state_15175__$1;
                                                                    statearr_15219_15274[2] = inst_15081;
                                                                    statearr_15219_15274[1] = 10;
                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                  } else {
                                                                    if (state_val_15176 === 5) {
                                                                      var state_15175__$1 = state_15175;
                                                                      var statearr_15220_15275 = state_15175__$1;
                                                                      statearr_15220_15275[2] = true;
                                                                      statearr_15220_15275[1] = 7;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_15176 === 14) {
                                                                        var state_15175__$1 = state_15175;
                                                                        var statearr_15221_15276 = state_15175__$1;
                                                                        statearr_15221_15276[2] = false;
                                                                        statearr_15221_15276[1] = 15;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_15176 === 26) {
                                                                          var inst_15135 = state_15175[11];
                                                                          var inst_15142 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_15135);
                                                                          var state_15175__$1 = state_15175;
                                                                          var statearr_15222_15277 = state_15175__$1;
                                                                          statearr_15222_15277[2] = inst_15142;
                                                                          statearr_15222_15277[1] = 28;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_15176 === 16) {
                                                                            var state_15175__$1 = state_15175;
                                                                            var statearr_15223_15278 = state_15175__$1;
                                                                            statearr_15223_15278[2] = true;
                                                                            statearr_15223_15278[1] = 18;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_15176 === 38) {
                                                                              var inst_15165 = state_15175[2];
                                                                              var state_15175__$1 = state_15175;
                                                                              var statearr_15224_15279 = state_15175__$1;
                                                                              statearr_15224_15279[2] = inst_15165;
                                                                              statearr_15224_15279[1] = 34;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_15176 === 30) {
                                                                                var inst_15129 = state_15175[13];
                                                                                var inst_15128 = state_15175[10];
                                                                                var inst_15135 = state_15175[11];
                                                                                var inst_15152 = cljs.core.empty_QMARK_.call(null, inst_15128);
                                                                                var inst_15153 = inst_15129.call(null, inst_15135);
                                                                                var inst_15154 = cljs.core.not.call(null, inst_15153);
                                                                                var inst_15155 = inst_15152 && inst_15154;
                                                                                var state_15175__$1 = state_15175;
                                                                                var statearr_15225_15280 = state_15175__$1;
                                                                                statearr_15225_15280[2] = inst_15155;
                                                                                statearr_15225_15280[1] = 31;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_15176 === 10) {
                                                                                  var inst_15081 = state_15175[8];
                                                                                  var inst_15101 = state_15175[2];
                                                                                  var inst_15102 = cljs.core.get.call(null, inst_15101, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                                                                  var inst_15103 = cljs.core.get.call(null, inst_15101, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                                                                  var inst_15104 = cljs.core.get.call(null, inst_15101, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                                                                  var inst_15105 = inst_15081;
                                                                                  var state_15175__$1 = function() {
                                                                                    var statearr_15226 = state_15175;
                                                                                    statearr_15226[16] = inst_15102;
                                                                                    statearr_15226[17] = inst_15103;
                                                                                    statearr_15226[7] = inst_15105;
                                                                                    statearr_15226[18] = inst_15104;
                                                                                    return statearr_15226;
                                                                                  }();
                                                                                  var statearr_15227_15281 = state_15175__$1;
                                                                                  statearr_15227_15281[2] = null;
                                                                                  statearr_15227_15281[1] = 11;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_15176 === 18) {
                                                                                    var inst_15119 = state_15175[2];
                                                                                    var state_15175__$1 = state_15175;
                                                                                    var statearr_15228_15282 = state_15175__$1;
                                                                                    statearr_15228_15282[2] = inst_15119;
                                                                                    statearr_15228_15282[1] = 15;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_15176 === 37) {
                                                                                      var state_15175__$1 = state_15175;
                                                                                      var statearr_15229_15283 = state_15175__$1;
                                                                                      statearr_15229_15283[2] = null;
                                                                                      statearr_15229_15283[1] = 38;
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_15176 === 8) {
                                                                                        var inst_15081 = state_15175[8];
                                                                                        var inst_15098 = cljs.core.apply.call(null, cljs.core.hash_map, inst_15081);
                                                                                        var state_15175__$1 = state_15175;
                                                                                        var statearr_15230_15284 = state_15175__$1;
                                                                                        statearr_15230_15284[2] = inst_15098;
                                                                                        statearr_15230_15284[1] = 10;
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        return null;
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10548__auto___15238, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__10483__auto__, c__10548__auto___15238, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var cljs$core$async$mix_$_state_machine__10484__auto__ = null;
            var cljs$core$async$mix_$_state_machine__10484__auto____0 = function() {
              var statearr_15234 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_15234[0] = cljs$core$async$mix_$_state_machine__10484__auto__;
              statearr_15234[1] = 1;
              return statearr_15234;
            };
            var cljs$core$async$mix_$_state_machine__10484__auto____1 = function(state_15175) {
              while (true) {
                var ret_value__10485__auto__ = function() {
                  try {
                    while (true) {
                      var result__10486__auto__ = switch__10483__auto__.call(null, state_15175);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10486__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__10486__auto__;
                      }
                      break;
                    }
                  } catch (e15235) {
                    if (e15235 instanceof Object) {
                      var ex__10487__auto__ = e15235;
                      var statearr_15236_15285 = state_15175;
                      statearr_15236_15285[5] = ex__10487__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15175);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15235;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10485__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15286 = state_15175;
                  state_15175 = G__15286;
                  continue;
                } else {
                  return ret_value__10485__auto__;
                }
                break;
              }
            };
            cljs$core$async$mix_$_state_machine__10484__auto__ = function(state_15175) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mix_$_state_machine__10484__auto____0.call(this);
                case 1:
                  return cljs$core$async$mix_$_state_machine__10484__auto____1.call(this, state_15175);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mix_$_state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mix_$_state_machine__10484__auto____0;
            cljs$core$async$mix_$_state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mix_$_state_machine__10484__auto____1;
            return cljs$core$async$mix_$_state_machine__10484__auto__;
          }();
        }(switch__10483__auto__, c__10548__auto___15238, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__10550__auto__ = function() {
        var statearr_15237 = f__10549__auto__.call(null);
        statearr_15237[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10548__auto___15238;
        return statearr_15237;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10550__auto__);
    };
  }(c__10548__auto___15238, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function cljs$core$async$admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function cljs$core$async$unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function cljs$core$async$unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function cljs$core$async$toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function cljs$core$async$solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
};
cljs.core.async.sub_STAR_ = function cljs$core$async$sub_STAR_(p, v, ch, close_QMARK_) {
  if (!(p == null) && !(p.cljs$core$async$Pub$sub_STAR_$arity$4 == null)) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__6808__auto__ = p == null ? null : p;
    var m__6809__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, p, v, ch, close_QMARK_);
    } else {
      var m__6809__auto____$1 = cljs.core.async.sub_STAR_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, p, v, ch, close_QMARK_);
      } else {
        throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
      }
    }
  }
};
cljs.core.async.unsub_STAR_ = function cljs$core$async$unsub_STAR_(p, v, ch) {
  if (!(p == null) && !(p.cljs$core$async$Pub$unsub_STAR_$arity$3 == null)) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__6808__auto__ = p == null ? null : p;
    var m__6809__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, p, v, ch);
    } else {
      var m__6809__auto____$1 = cljs.core.async.unsub_STAR_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, p, v, ch);
      } else {
        throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
      }
    }
  }
};
cljs.core.async.unsub_all_STAR_ = function cljs$core$async$unsub_all_STAR_(var_args) {
  var args15287 = [];
  var len__7211__auto___15290 = arguments.length;
  var i__7212__auto___15291 = 0;
  while (true) {
    if (i__7212__auto___15291 < len__7211__auto___15290) {
      args15287.push(arguments[i__7212__auto___15291]);
      var G__15292 = i__7212__auto___15291 + 1;
      i__7212__auto___15291 = G__15292;
      continue;
    } else {
    }
    break;
  }
  var G__15289 = args15287.length;
  switch(G__15289) {
    case 1:
      return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args15287.length)].join(""));;
  }
};
cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = function(p) {
  if (!(p == null) && !(p.cljs$core$async$Pub$unsub_all_STAR_$arity$1 == null)) {
    return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
  } else {
    var x__6808__auto__ = p == null ? null : p;
    var m__6809__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, p);
    } else {
      var m__6809__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, p);
      } else {
        throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
      }
    }
  }
};
cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = function(p, v) {
  if (!(p == null) && !(p.cljs$core$async$Pub$unsub_all_STAR_$arity$2 == null)) {
    return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
  } else {
    var x__6808__auto__ = p == null ? null : p;
    var m__6809__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, p, v);
    } else {
      var m__6809__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, p, v);
      } else {
        throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
      }
    }
  }
};
cljs.core.async.unsub_all_STAR_.cljs$lang$maxFixedArity = 2;
cljs.core.async.pub = function cljs$core$async$pub(var_args) {
  var args15295 = [];
  var len__7211__auto___15420 = arguments.length;
  var i__7212__auto___15421 = 0;
  while (true) {
    if (i__7212__auto___15421 < len__7211__auto___15420) {
      args15295.push(arguments[i__7212__auto___15421]);
      var G__15422 = i__7212__auto___15421 + 1;
      i__7212__auto___15421 = G__15422;
      continue;
    } else {
    }
    break;
  }
  var G__15297 = args15295.length;
  switch(G__15297) {
    case 2:
      return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args15295.length)].join(""));;
  }
};
cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2 = function(ch, topic_fn) {
  return cljs.core.async.pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
};
cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3 = function(ch, topic_fn, buf_fn) {
  var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ensure_mult = function(mults) {
    return function(topic) {
      var or__6153__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
      if (cljs.core.truth_(or__6153__auto__)) {
        return or__6153__auto__;
      } else {
        return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__6153__auto__, mults) {
          return function(p1__15294_SHARP_) {
            if (cljs.core.truth_(p1__15294_SHARP_.call(null, topic))) {
              return p1__15294_SHARP_;
            } else {
              return cljs.core.assoc.call(null, p1__15294_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
            }
          };
        }(or__6153__auto__, mults)), topic);
      }
    };
  }(mults);
  var p = function() {
    if (typeof cljs.core.async.t_cljs$core$async15298 !== "undefined") {
    } else {
      cljs.core.async.t_cljs$core$async15298 = function(ch, topic_fn, buf_fn, mults, ensure_mult, meta15299) {
        this.ch = ch;
        this.topic_fn = topic_fn;
        this.buf_fn = buf_fn;
        this.mults = mults;
        this.ensure_mult = ensure_mult;
        this.meta15299 = meta15299;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t_cljs$core$async15298.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
        return function(_15300, meta15299__$1) {
          var self__ = this;
          var _15300__$1 = this;
          return new cljs.core.async.t_cljs$core$async15298(self__.ch, self__.topic_fn, self__.buf_fn, self__.mults, self__.ensure_mult, meta15299__$1);
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async15298.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
        return function(_15300) {
          var self__ = this;
          var _15300__$1 = this;
          return self__.meta15299;
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async15298.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t_cljs$core$async15298.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async15298.prototype.cljs$core$async$Pub$ = true;
      cljs.core.async.t_cljs$core$async15298.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
        return function(p, topic, ch__$1, close_QMARK_) {
          var self__ = this;
          var p__$1 = this;
          var m = self__.ensure_mult.call(null, topic);
          return cljs.core.async.tap.call(null, m, ch__$1, close_QMARK_);
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async15298.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
        return function(p, topic, ch__$1) {
          var self__ = this;
          var p__$1 = this;
          var temp__4657__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
          if (cljs.core.truth_(temp__4657__auto__)) {
            var m = temp__4657__auto__;
            return cljs.core.async.untap.call(null, m, ch__$1);
          } else {
            return null;
          }
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async15298.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async15298.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
        return function(_, topic) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async15298.getBasis = function(mults, ensure_mult) {
        return function() {
          return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "topic-fn", "topic-fn", -862449736, null), new cljs.core.Symbol(null, "buf-fn", "buf-fn", -1200281591, null), new cljs.core.Symbol(null, "mults", "mults", -461114485, null), new cljs.core.Symbol(null, "ensure-mult", "ensure-mult", 1796584816, null), new cljs.core.Symbol(null, "meta15299", "meta15299", -2121564401, 
          null)], null);
        };
      }(mults, ensure_mult);
      cljs.core.async.t_cljs$core$async15298.cljs$lang$type = true;
      cljs.core.async.t_cljs$core$async15298.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async15298";
      cljs.core.async.t_cljs$core$async15298.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
        return function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
          return cljs.core._write.call(null, writer__6752__auto__, "cljs.core.async/t_cljs$core$async15298");
        };
      }(mults, ensure_mult);
      cljs.core.async.__GT_t_cljs$core$async15298 = function(mults, ensure_mult) {
        return function cljs$core$async$__GT_t_cljs$core$async15298(ch__$1, topic_fn__$1, buf_fn__$1, mults__$1, ensure_mult__$1, meta15299) {
          return new cljs.core.async.t_cljs$core$async15298(ch__$1, topic_fn__$1, buf_fn__$1, mults__$1, ensure_mult__$1, meta15299);
        };
      }(mults, ensure_mult);
    }
    return new cljs.core.async.t_cljs$core$async15298(ch, topic_fn, buf_fn, mults, ensure_mult, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__10548__auto___15424 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10548__auto___15424, mults, ensure_mult, p) {
    return function() {
      var f__10549__auto__ = function() {
        var switch__10483__auto__ = function(c__10548__auto___15424, mults, ensure_mult, p) {
          return function(state_15372) {
            var state_val_15373 = state_15372[1];
            if (state_val_15373 === 7) {
              var inst_15368 = state_15372[2];
              var state_15372__$1 = state_15372;
              var statearr_15374_15425 = state_15372__$1;
              statearr_15374_15425[2] = inst_15368;
              statearr_15374_15425[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15373 === 20) {
                var state_15372__$1 = state_15372;
                var statearr_15375_15426 = state_15372__$1;
                statearr_15375_15426[2] = null;
                statearr_15375_15426[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15373 === 1) {
                  var state_15372__$1 = state_15372;
                  var statearr_15376_15427 = state_15372__$1;
                  statearr_15376_15427[2] = null;
                  statearr_15376_15427[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15373 === 24) {
                    var inst_15351 = state_15372[7];
                    var inst_15360 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_15351);
                    var state_15372__$1 = state_15372;
                    var statearr_15377_15428 = state_15372__$1;
                    statearr_15377_15428[2] = inst_15360;
                    statearr_15377_15428[1] = 25;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15373 === 4) {
                      var inst_15303 = state_15372[8];
                      var inst_15303__$1 = state_15372[2];
                      var inst_15304 = inst_15303__$1 == null;
                      var state_15372__$1 = function() {
                        var statearr_15378 = state_15372;
                        statearr_15378[8] = inst_15303__$1;
                        return statearr_15378;
                      }();
                      if (cljs.core.truth_(inst_15304)) {
                        var statearr_15379_15429 = state_15372__$1;
                        statearr_15379_15429[1] = 5;
                      } else {
                        var statearr_15380_15430 = state_15372__$1;
                        statearr_15380_15430[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15373 === 15) {
                        var inst_15345 = state_15372[2];
                        var state_15372__$1 = state_15372;
                        var statearr_15381_15431 = state_15372__$1;
                        statearr_15381_15431[2] = inst_15345;
                        statearr_15381_15431[1] = 12;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_15373 === 21) {
                          var inst_15365 = state_15372[2];
                          var state_15372__$1 = function() {
                            var statearr_15382 = state_15372;
                            statearr_15382[9] = inst_15365;
                            return statearr_15382;
                          }();
                          var statearr_15383_15432 = state_15372__$1;
                          statearr_15383_15432[2] = null;
                          statearr_15383_15432[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_15373 === 13) {
                            var inst_15327 = state_15372[10];
                            var inst_15329 = cljs.core.chunked_seq_QMARK_.call(null, inst_15327);
                            var state_15372__$1 = state_15372;
                            if (inst_15329) {
                              var statearr_15384_15433 = state_15372__$1;
                              statearr_15384_15433[1] = 16;
                            } else {
                              var statearr_15385_15434 = state_15372__$1;
                              statearr_15385_15434[1] = 17;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_15373 === 22) {
                              var inst_15357 = state_15372[2];
                              var state_15372__$1 = state_15372;
                              if (cljs.core.truth_(inst_15357)) {
                                var statearr_15386_15435 = state_15372__$1;
                                statearr_15386_15435[1] = 23;
                              } else {
                                var statearr_15387_15436 = state_15372__$1;
                                statearr_15387_15436[1] = 24;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_15373 === 6) {
                                var inst_15353 = state_15372[11];
                                var inst_15351 = state_15372[7];
                                var inst_15303 = state_15372[8];
                                var inst_15351__$1 = topic_fn.call(null, inst_15303);
                                var inst_15352 = cljs.core.deref.call(null, mults);
                                var inst_15353__$1 = cljs.core.get.call(null, inst_15352, inst_15351__$1);
                                var state_15372__$1 = function() {
                                  var statearr_15388 = state_15372;
                                  statearr_15388[11] = inst_15353__$1;
                                  statearr_15388[7] = inst_15351__$1;
                                  return statearr_15388;
                                }();
                                if (cljs.core.truth_(inst_15353__$1)) {
                                  var statearr_15389_15437 = state_15372__$1;
                                  statearr_15389_15437[1] = 19;
                                } else {
                                  var statearr_15390_15438 = state_15372__$1;
                                  statearr_15390_15438[1] = 20;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15373 === 25) {
                                  var inst_15362 = state_15372[2];
                                  var state_15372__$1 = state_15372;
                                  var statearr_15391_15439 = state_15372__$1;
                                  statearr_15391_15439[2] = inst_15362;
                                  statearr_15391_15439[1] = 21;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_15373 === 17) {
                                    var inst_15327 = state_15372[10];
                                    var inst_15336 = cljs.core.first.call(null, inst_15327);
                                    var inst_15337 = cljs.core.async.muxch_STAR_.call(null, inst_15336);
                                    var inst_15338 = cljs.core.async.close_BANG_.call(null, inst_15337);
                                    var inst_15339 = cljs.core.next.call(null, inst_15327);
                                    var inst_15313 = inst_15339;
                                    var inst_15314 = null;
                                    var inst_15315 = 0;
                                    var inst_15316 = 0;
                                    var state_15372__$1 = function() {
                                      var statearr_15392 = state_15372;
                                      statearr_15392[12] = inst_15315;
                                      statearr_15392[13] = inst_15338;
                                      statearr_15392[14] = inst_15316;
                                      statearr_15392[15] = inst_15313;
                                      statearr_15392[16] = inst_15314;
                                      return statearr_15392;
                                    }();
                                    var statearr_15393_15440 = state_15372__$1;
                                    statearr_15393_15440[2] = null;
                                    statearr_15393_15440[1] = 8;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_15373 === 3) {
                                      var inst_15370 = state_15372[2];
                                      var state_15372__$1 = state_15372;
                                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15372__$1, inst_15370);
                                    } else {
                                      if (state_val_15373 === 12) {
                                        var inst_15347 = state_15372[2];
                                        var state_15372__$1 = state_15372;
                                        var statearr_15394_15441 = state_15372__$1;
                                        statearr_15394_15441[2] = inst_15347;
                                        statearr_15394_15441[1] = 9;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_15373 === 2) {
                                          var state_15372__$1 = state_15372;
                                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15372__$1, 4, ch);
                                        } else {
                                          if (state_val_15373 === 23) {
                                            var state_15372__$1 = state_15372;
                                            var statearr_15395_15442 = state_15372__$1;
                                            statearr_15395_15442[2] = null;
                                            statearr_15395_15442[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_15373 === 19) {
                                              var inst_15353 = state_15372[11];
                                              var inst_15303 = state_15372[8];
                                              var inst_15355 = cljs.core.async.muxch_STAR_.call(null, inst_15353);
                                              var state_15372__$1 = state_15372;
                                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15372__$1, 22, inst_15355, inst_15303);
                                            } else {
                                              if (state_val_15373 === 11) {
                                                var inst_15313 = state_15372[15];
                                                var inst_15327 = state_15372[10];
                                                var inst_15327__$1 = cljs.core.seq.call(null, inst_15313);
                                                var state_15372__$1 = function() {
                                                  var statearr_15396 = state_15372;
                                                  statearr_15396[10] = inst_15327__$1;
                                                  return statearr_15396;
                                                }();
                                                if (inst_15327__$1) {
                                                  var statearr_15397_15443 = state_15372__$1;
                                                  statearr_15397_15443[1] = 13;
                                                } else {
                                                  var statearr_15398_15444 = state_15372__$1;
                                                  statearr_15398_15444[1] = 14;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_15373 === 9) {
                                                  var inst_15349 = state_15372[2];
                                                  var state_15372__$1 = state_15372;
                                                  var statearr_15399_15445 = state_15372__$1;
                                                  statearr_15399_15445[2] = inst_15349;
                                                  statearr_15399_15445[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_15373 === 5) {
                                                    var inst_15310 = cljs.core.deref.call(null, mults);
                                                    var inst_15311 = cljs.core.vals.call(null, inst_15310);
                                                    var inst_15312 = cljs.core.seq.call(null, inst_15311);
                                                    var inst_15313 = inst_15312;
                                                    var inst_15314 = null;
                                                    var inst_15315 = 0;
                                                    var inst_15316 = 0;
                                                    var state_15372__$1 = function() {
                                                      var statearr_15400 = state_15372;
                                                      statearr_15400[12] = inst_15315;
                                                      statearr_15400[14] = inst_15316;
                                                      statearr_15400[15] = inst_15313;
                                                      statearr_15400[16] = inst_15314;
                                                      return statearr_15400;
                                                    }();
                                                    var statearr_15401_15446 = state_15372__$1;
                                                    statearr_15401_15446[2] = null;
                                                    statearr_15401_15446[1] = 8;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_15373 === 14) {
                                                      var state_15372__$1 = state_15372;
                                                      var statearr_15405_15447 = state_15372__$1;
                                                      statearr_15405_15447[2] = null;
                                                      statearr_15405_15447[1] = 15;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_15373 === 16) {
                                                        var inst_15327 = state_15372[10];
                                                        var inst_15331 = cljs.core.chunk_first.call(null, inst_15327);
                                                        var inst_15332 = cljs.core.chunk_rest.call(null, inst_15327);
                                                        var inst_15333 = cljs.core.count.call(null, inst_15331);
                                                        var inst_15313 = inst_15332;
                                                        var inst_15314 = inst_15331;
                                                        var inst_15315 = inst_15333;
                                                        var inst_15316 = 0;
                                                        var state_15372__$1 = function() {
                                                          var statearr_15406 = state_15372;
                                                          statearr_15406[12] = inst_15315;
                                                          statearr_15406[14] = inst_15316;
                                                          statearr_15406[15] = inst_15313;
                                                          statearr_15406[16] = inst_15314;
                                                          return statearr_15406;
                                                        }();
                                                        var statearr_15407_15448 = state_15372__$1;
                                                        statearr_15407_15448[2] = null;
                                                        statearr_15407_15448[1] = 8;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_15373 === 10) {
                                                          var inst_15315 = state_15372[12];
                                                          var inst_15316 = state_15372[14];
                                                          var inst_15313 = state_15372[15];
                                                          var inst_15314 = state_15372[16];
                                                          var inst_15321 = cljs.core._nth.call(null, inst_15314, inst_15316);
                                                          var inst_15322 = cljs.core.async.muxch_STAR_.call(null, inst_15321);
                                                          var inst_15323 = cljs.core.async.close_BANG_.call(null, inst_15322);
                                                          var inst_15324 = inst_15316 + 1;
                                                          var tmp15402 = inst_15315;
                                                          var tmp15403 = inst_15313;
                                                          var tmp15404 = inst_15314;
                                                          var inst_15313__$1 = tmp15403;
                                                          var inst_15314__$1 = tmp15404;
                                                          var inst_15315__$1 = tmp15402;
                                                          var inst_15316__$1 = inst_15324;
                                                          var state_15372__$1 = function() {
                                                            var statearr_15408 = state_15372;
                                                            statearr_15408[12] = inst_15315__$1;
                                                            statearr_15408[17] = inst_15323;
                                                            statearr_15408[14] = inst_15316__$1;
                                                            statearr_15408[15] = inst_15313__$1;
                                                            statearr_15408[16] = inst_15314__$1;
                                                            return statearr_15408;
                                                          }();
                                                          var statearr_15409_15449 = state_15372__$1;
                                                          statearr_15409_15449[2] = null;
                                                          statearr_15409_15449[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_15373 === 18) {
                                                            var inst_15342 = state_15372[2];
                                                            var state_15372__$1 = state_15372;
                                                            var statearr_15410_15450 = state_15372__$1;
                                                            statearr_15410_15450[2] = inst_15342;
                                                            statearr_15410_15450[1] = 15;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_15373 === 8) {
                                                              var inst_15315 = state_15372[12];
                                                              var inst_15316 = state_15372[14];
                                                              var inst_15318 = inst_15316 < inst_15315;
                                                              var inst_15319 = inst_15318;
                                                              var state_15372__$1 = state_15372;
                                                              if (cljs.core.truth_(inst_15319)) {
                                                                var statearr_15411_15451 = state_15372__$1;
                                                                statearr_15411_15451[1] = 10;
                                                              } else {
                                                                var statearr_15412_15452 = state_15372__$1;
                                                                statearr_15412_15452[1] = 11;
                                                              }
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              return null;
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10548__auto___15424, mults, ensure_mult, p);
        return function(switch__10483__auto__, c__10548__auto___15424, mults, ensure_mult, p) {
          return function() {
            var cljs$core$async$state_machine__10484__auto__ = null;
            var cljs$core$async$state_machine__10484__auto____0 = function() {
              var statearr_15416 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_15416[0] = cljs$core$async$state_machine__10484__auto__;
              statearr_15416[1] = 1;
              return statearr_15416;
            };
            var cljs$core$async$state_machine__10484__auto____1 = function(state_15372) {
              while (true) {
                var ret_value__10485__auto__ = function() {
                  try {
                    while (true) {
                      var result__10486__auto__ = switch__10483__auto__.call(null, state_15372);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10486__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__10486__auto__;
                      }
                      break;
                    }
                  } catch (e15417) {
                    if (e15417 instanceof Object) {
                      var ex__10487__auto__ = e15417;
                      var statearr_15418_15453 = state_15372;
                      statearr_15418_15453[5] = ex__10487__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15372);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15417;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10485__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15454 = state_15372;
                  state_15372 = G__15454;
                  continue;
                } else {
                  return ret_value__10485__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__10484__auto__ = function(state_15372) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__10484__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__10484__auto____1.call(this, state_15372);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__10484__auto____0;
            cljs$core$async$state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__10484__auto____1;
            return cljs$core$async$state_machine__10484__auto__;
          }();
        }(switch__10483__auto__, c__10548__auto___15424, mults, ensure_mult, p);
      }();
      var state__10550__auto__ = function() {
        var statearr_15419 = f__10549__auto__.call(null);
        statearr_15419[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10548__auto___15424;
        return statearr_15419;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10550__auto__);
    };
  }(c__10548__auto___15424, mults, ensure_mult, p));
  return p;
};
cljs.core.async.pub.cljs$lang$maxFixedArity = 3;
cljs.core.async.sub = function cljs$core$async$sub(var_args) {
  var args15455 = [];
  var len__7211__auto___15458 = arguments.length;
  var i__7212__auto___15459 = 0;
  while (true) {
    if (i__7212__auto___15459 < len__7211__auto___15458) {
      args15455.push(arguments[i__7212__auto___15459]);
      var G__15460 = i__7212__auto___15459 + 1;
      i__7212__auto___15459 = G__15460;
      continue;
    } else {
    }
    break;
  }
  var G__15457 = args15455.length;
  switch(G__15457) {
    case 3:
      return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args15455.length)].join(""));;
  }
};
cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3 = function(p, topic, ch) {
  return cljs.core.async.sub.call(null, p, topic, ch, true);
};
cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4 = function(p, topic, ch, close_QMARK_) {
  return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
};
cljs.core.async.sub.cljs$lang$maxFixedArity = 4;
cljs.core.async.unsub = function cljs$core$async$unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function cljs$core$async$unsub_all(var_args) {
  var args15462 = [];
  var len__7211__auto___15465 = arguments.length;
  var i__7212__auto___15466 = 0;
  while (true) {
    if (i__7212__auto___15466 < len__7211__auto___15465) {
      args15462.push(arguments[i__7212__auto___15466]);
      var G__15467 = i__7212__auto___15466 + 1;
      i__7212__auto___15466 = G__15467;
      continue;
    } else {
    }
    break;
  }
  var G__15464 = args15462.length;
  switch(G__15464) {
    case 1:
      return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args15462.length)].join(""));;
  }
};
cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return cljs.core.async.unsub_all_STAR_.call(null, p);
};
cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2 = function(p, topic) {
  return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
};
cljs.core.async.unsub_all.cljs$lang$maxFixedArity = 2;
cljs.core.async.map = function cljs$core$async$map(var_args) {
  var args15469 = [];
  var len__7211__auto___15540 = arguments.length;
  var i__7212__auto___15541 = 0;
  while (true) {
    if (i__7212__auto___15541 < len__7211__auto___15540) {
      args15469.push(arguments[i__7212__auto___15541]);
      var G__15542 = i__7212__auto___15541 + 1;
      i__7212__auto___15541 = G__15542;
      continue;
    } else {
    }
    break;
  }
  var G__15471 = args15469.length;
  switch(G__15471) {
    case 2:
      return cljs.core.async.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args15469.length)].join(""));;
  }
};
cljs.core.async.map.cljs$core$IFn$_invoke$arity$2 = function(f, chs) {
  return cljs.core.async.map.call(null, f, chs, null);
};
cljs.core.async.map.cljs$core$IFn$_invoke$arity$3 = function(f, chs, buf_or_n) {
  var chs__$1 = cljs.core.vec.call(null, chs);
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var cnt = cljs.core.count.call(null, chs__$1);
  var rets = cljs.core.object_array.call(null, cnt);
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
    return function(i) {
      return function(chs__$1, out, cnt, rets, dchan, dctr) {
        return function(ret) {
          rets[i] = ret;
          if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
            return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
          } else {
            return null;
          }
        };
      }(chs__$1, out, cnt, rets, dchan, dctr);
    };
  }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
  var c__10548__auto___15544 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10548__auto___15544, chs__$1, out, cnt, rets, dchan, dctr, done) {
    return function() {
      var f__10549__auto__ = function() {
        var switch__10483__auto__ = function(c__10548__auto___15544, chs__$1, out, cnt, rets, dchan, dctr, done) {
          return function(state_15510) {
            var state_val_15511 = state_15510[1];
            if (state_val_15511 === 7) {
              var state_15510__$1 = state_15510;
              var statearr_15512_15545 = state_15510__$1;
              statearr_15512_15545[2] = null;
              statearr_15512_15545[1] = 8;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15511 === 1) {
                var state_15510__$1 = state_15510;
                var statearr_15513_15546 = state_15510__$1;
                statearr_15513_15546[2] = null;
                statearr_15513_15546[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15511 === 4) {
                  var inst_15474 = state_15510[7];
                  var inst_15476 = inst_15474 < cnt;
                  var state_15510__$1 = state_15510;
                  if (cljs.core.truth_(inst_15476)) {
                    var statearr_15514_15547 = state_15510__$1;
                    statearr_15514_15547[1] = 6;
                  } else {
                    var statearr_15515_15548 = state_15510__$1;
                    statearr_15515_15548[1] = 7;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15511 === 15) {
                    var inst_15506 = state_15510[2];
                    var state_15510__$1 = state_15510;
                    var statearr_15516_15549 = state_15510__$1;
                    statearr_15516_15549[2] = inst_15506;
                    statearr_15516_15549[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15511 === 13) {
                      var inst_15499 = cljs.core.async.close_BANG_.call(null, out);
                      var state_15510__$1 = state_15510;
                      var statearr_15517_15550 = state_15510__$1;
                      statearr_15517_15550[2] = inst_15499;
                      statearr_15517_15550[1] = 15;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15511 === 6) {
                        var state_15510__$1 = state_15510;
                        var statearr_15518_15551 = state_15510__$1;
                        statearr_15518_15551[2] = null;
                        statearr_15518_15551[1] = 11;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_15511 === 3) {
                          var inst_15508 = state_15510[2];
                          var state_15510__$1 = state_15510;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15510__$1, inst_15508);
                        } else {
                          if (state_val_15511 === 12) {
                            var inst_15496 = state_15510[8];
                            var inst_15496__$1 = state_15510[2];
                            var inst_15497 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_15496__$1);
                            var state_15510__$1 = function() {
                              var statearr_15519 = state_15510;
                              statearr_15519[8] = inst_15496__$1;
                              return statearr_15519;
                            }();
                            if (cljs.core.truth_(inst_15497)) {
                              var statearr_15520_15552 = state_15510__$1;
                              statearr_15520_15552[1] = 13;
                            } else {
                              var statearr_15521_15553 = state_15510__$1;
                              statearr_15521_15553[1] = 14;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_15511 === 2) {
                              var inst_15473 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                              var inst_15474 = 0;
                              var state_15510__$1 = function() {
                                var statearr_15522 = state_15510;
                                statearr_15522[9] = inst_15473;
                                statearr_15522[7] = inst_15474;
                                return statearr_15522;
                              }();
                              var statearr_15523_15554 = state_15510__$1;
                              statearr_15523_15554[2] = null;
                              statearr_15523_15554[1] = 4;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_15511 === 11) {
                                var inst_15474 = state_15510[7];
                                var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_15510, 10, Object, null, 9);
                                var inst_15483 = chs__$1.call(null, inst_15474);
                                var inst_15484 = done.call(null, inst_15474);
                                var inst_15485 = cljs.core.async.take_BANG_.call(null, inst_15483, inst_15484);
                                var state_15510__$1 = state_15510;
                                var statearr_15524_15555 = state_15510__$1;
                                statearr_15524_15555[2] = inst_15485;
                                cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15510__$1);
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15511 === 9) {
                                  var inst_15474 = state_15510[7];
                                  var inst_15487 = state_15510[2];
                                  var inst_15488 = inst_15474 + 1;
                                  var inst_15474__$1 = inst_15488;
                                  var state_15510__$1 = function() {
                                    var statearr_15525 = state_15510;
                                    statearr_15525[7] = inst_15474__$1;
                                    statearr_15525[10] = inst_15487;
                                    return statearr_15525;
                                  }();
                                  var statearr_15526_15556 = state_15510__$1;
                                  statearr_15526_15556[2] = null;
                                  statearr_15526_15556[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_15511 === 5) {
                                    var inst_15494 = state_15510[2];
                                    var state_15510__$1 = function() {
                                      var statearr_15527 = state_15510;
                                      statearr_15527[11] = inst_15494;
                                      return statearr_15527;
                                    }();
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15510__$1, 12, dchan);
                                  } else {
                                    if (state_val_15511 === 14) {
                                      var inst_15496 = state_15510[8];
                                      var inst_15501 = cljs.core.apply.call(null, f, inst_15496);
                                      var state_15510__$1 = state_15510;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15510__$1, 16, out, inst_15501);
                                    } else {
                                      if (state_val_15511 === 16) {
                                        var inst_15503 = state_15510[2];
                                        var state_15510__$1 = function() {
                                          var statearr_15528 = state_15510;
                                          statearr_15528[12] = inst_15503;
                                          return statearr_15528;
                                        }();
                                        var statearr_15529_15557 = state_15510__$1;
                                        statearr_15529_15557[2] = null;
                                        statearr_15529_15557[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_15511 === 10) {
                                          var inst_15478 = state_15510[2];
                                          var inst_15479 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                          var state_15510__$1 = function() {
                                            var statearr_15530 = state_15510;
                                            statearr_15530[13] = inst_15478;
                                            return statearr_15530;
                                          }();
                                          var statearr_15531_15558 = state_15510__$1;
                                          statearr_15531_15558[2] = inst_15479;
                                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15510__$1);
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_15511 === 8) {
                                            var inst_15492 = state_15510[2];
                                            var state_15510__$1 = state_15510;
                                            var statearr_15532_15559 = state_15510__$1;
                                            statearr_15532_15559[2] = inst_15492;
                                            statearr_15532_15559[1] = 5;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10548__auto___15544, chs__$1, out, cnt, rets, dchan, dctr, done);
        return function(switch__10483__auto__, c__10548__auto___15544, chs__$1, out, cnt, rets, dchan, dctr, done) {
          return function() {
            var cljs$core$async$state_machine__10484__auto__ = null;
            var cljs$core$async$state_machine__10484__auto____0 = function() {
              var statearr_15536 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_15536[0] = cljs$core$async$state_machine__10484__auto__;
              statearr_15536[1] = 1;
              return statearr_15536;
            };
            var cljs$core$async$state_machine__10484__auto____1 = function(state_15510) {
              while (true) {
                var ret_value__10485__auto__ = function() {
                  try {
                    while (true) {
                      var result__10486__auto__ = switch__10483__auto__.call(null, state_15510);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10486__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__10486__auto__;
                      }
                      break;
                    }
                  } catch (e15537) {
                    if (e15537 instanceof Object) {
                      var ex__10487__auto__ = e15537;
                      var statearr_15538_15560 = state_15510;
                      statearr_15538_15560[5] = ex__10487__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15510);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15537;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10485__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15561 = state_15510;
                  state_15510 = G__15561;
                  continue;
                } else {
                  return ret_value__10485__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__10484__auto__ = function(state_15510) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__10484__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__10484__auto____1.call(this, state_15510);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__10484__auto____0;
            cljs$core$async$state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__10484__auto____1;
            return cljs$core$async$state_machine__10484__auto__;
          }();
        }(switch__10483__auto__, c__10548__auto___15544, chs__$1, out, cnt, rets, dchan, dctr, done);
      }();
      var state__10550__auto__ = function() {
        var statearr_15539 = f__10549__auto__.call(null);
        statearr_15539[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10548__auto___15544;
        return statearr_15539;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10550__auto__);
    };
  }(c__10548__auto___15544, chs__$1, out, cnt, rets, dchan, dctr, done));
  return out;
};
cljs.core.async.map.cljs$lang$maxFixedArity = 3;
cljs.core.async.merge = function cljs$core$async$merge(var_args) {
  var args15563 = [];
  var len__7211__auto___15619 = arguments.length;
  var i__7212__auto___15620 = 0;
  while (true) {
    if (i__7212__auto___15620 < len__7211__auto___15619) {
      args15563.push(arguments[i__7212__auto___15620]);
      var G__15621 = i__7212__auto___15620 + 1;
      i__7212__auto___15620 = G__15621;
      continue;
    } else {
    }
    break;
  }
  var G__15565 = args15563.length;
  switch(G__15565) {
    case 1:
      return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args15563.length)].join(""));;
  }
};
cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1 = function(chs) {
  return cljs.core.async.merge.call(null, chs, null);
};
cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2 = function(chs, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__10548__auto___15623 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10548__auto___15623, out) {
    return function() {
      var f__10549__auto__ = function() {
        var switch__10483__auto__ = function(c__10548__auto___15623, out) {
          return function(state_15595) {
            var state_val_15596 = state_15595[1];
            if (state_val_15596 === 7) {
              var inst_15575 = state_15595[7];
              var inst_15574 = state_15595[8];
              var inst_15574__$1 = state_15595[2];
              var inst_15575__$1 = cljs.core.nth.call(null, inst_15574__$1, 0, null);
              var inst_15576 = cljs.core.nth.call(null, inst_15574__$1, 1, null);
              var inst_15577 = inst_15575__$1 == null;
              var state_15595__$1 = function() {
                var statearr_15597 = state_15595;
                statearr_15597[7] = inst_15575__$1;
                statearr_15597[8] = inst_15574__$1;
                statearr_15597[9] = inst_15576;
                return statearr_15597;
              }();
              if (cljs.core.truth_(inst_15577)) {
                var statearr_15598_15624 = state_15595__$1;
                statearr_15598_15624[1] = 8;
              } else {
                var statearr_15599_15625 = state_15595__$1;
                statearr_15599_15625[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15596 === 1) {
                var inst_15566 = cljs.core.vec.call(null, chs);
                var inst_15567 = inst_15566;
                var state_15595__$1 = function() {
                  var statearr_15600 = state_15595;
                  statearr_15600[10] = inst_15567;
                  return statearr_15600;
                }();
                var statearr_15601_15626 = state_15595__$1;
                statearr_15601_15626[2] = null;
                statearr_15601_15626[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15596 === 4) {
                  var inst_15567 = state_15595[10];
                  var state_15595__$1 = state_15595;
                  return cljs.core.async.ioc_alts_BANG_.call(null, state_15595__$1, 7, inst_15567);
                } else {
                  if (state_val_15596 === 6) {
                    var inst_15591 = state_15595[2];
                    var state_15595__$1 = state_15595;
                    var statearr_15602_15627 = state_15595__$1;
                    statearr_15602_15627[2] = inst_15591;
                    statearr_15602_15627[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15596 === 3) {
                      var inst_15593 = state_15595[2];
                      var state_15595__$1 = state_15595;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15595__$1, inst_15593);
                    } else {
                      if (state_val_15596 === 2) {
                        var inst_15567 = state_15595[10];
                        var inst_15569 = cljs.core.count.call(null, inst_15567);
                        var inst_15570 = inst_15569 > 0;
                        var state_15595__$1 = state_15595;
                        if (cljs.core.truth_(inst_15570)) {
                          var statearr_15604_15628 = state_15595__$1;
                          statearr_15604_15628[1] = 4;
                        } else {
                          var statearr_15605_15629 = state_15595__$1;
                          statearr_15605_15629[1] = 5;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_15596 === 11) {
                          var inst_15567 = state_15595[10];
                          var inst_15584 = state_15595[2];
                          var tmp15603 = inst_15567;
                          var inst_15567__$1 = tmp15603;
                          var state_15595__$1 = function() {
                            var statearr_15606 = state_15595;
                            statearr_15606[10] = inst_15567__$1;
                            statearr_15606[11] = inst_15584;
                            return statearr_15606;
                          }();
                          var statearr_15607_15630 = state_15595__$1;
                          statearr_15607_15630[2] = null;
                          statearr_15607_15630[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_15596 === 9) {
                            var inst_15575 = state_15595[7];
                            var state_15595__$1 = state_15595;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15595__$1, 11, out, inst_15575);
                          } else {
                            if (state_val_15596 === 5) {
                              var inst_15589 = cljs.core.async.close_BANG_.call(null, out);
                              var state_15595__$1 = state_15595;
                              var statearr_15608_15631 = state_15595__$1;
                              statearr_15608_15631[2] = inst_15589;
                              statearr_15608_15631[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_15596 === 10) {
                                var inst_15587 = state_15595[2];
                                var state_15595__$1 = state_15595;
                                var statearr_15609_15632 = state_15595__$1;
                                statearr_15609_15632[2] = inst_15587;
                                statearr_15609_15632[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15596 === 8) {
                                  var inst_15567 = state_15595[10];
                                  var inst_15575 = state_15595[7];
                                  var inst_15574 = state_15595[8];
                                  var inst_15576 = state_15595[9];
                                  var inst_15579 = function() {
                                    var cs = inst_15567;
                                    var vec__15572 = inst_15574;
                                    var v = inst_15575;
                                    var c = inst_15576;
                                    return function(cs, vec__15572, v, c, inst_15567, inst_15575, inst_15574, inst_15576, state_val_15596, c__10548__auto___15623, out) {
                                      return function(p1__15562_SHARP_) {
                                        return cljs.core.not_EQ_.call(null, c, p1__15562_SHARP_);
                                      };
                                    }(cs, vec__15572, v, c, inst_15567, inst_15575, inst_15574, inst_15576, state_val_15596, c__10548__auto___15623, out);
                                  }();
                                  var inst_15580 = cljs.core.filterv.call(null, inst_15579, inst_15567);
                                  var inst_15567__$1 = inst_15580;
                                  var state_15595__$1 = function() {
                                    var statearr_15610 = state_15595;
                                    statearr_15610[10] = inst_15567__$1;
                                    return statearr_15610;
                                  }();
                                  var statearr_15611_15633 = state_15595__$1;
                                  statearr_15611_15633[2] = null;
                                  statearr_15611_15633[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10548__auto___15623, out);
        return function(switch__10483__auto__, c__10548__auto___15623, out) {
          return function() {
            var cljs$core$async$state_machine__10484__auto__ = null;
            var cljs$core$async$state_machine__10484__auto____0 = function() {
              var statearr_15615 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_15615[0] = cljs$core$async$state_machine__10484__auto__;
              statearr_15615[1] = 1;
              return statearr_15615;
            };
            var cljs$core$async$state_machine__10484__auto____1 = function(state_15595) {
              while (true) {
                var ret_value__10485__auto__ = function() {
                  try {
                    while (true) {
                      var result__10486__auto__ = switch__10483__auto__.call(null, state_15595);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10486__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__10486__auto__;
                      }
                      break;
                    }
                  } catch (e15616) {
                    if (e15616 instanceof Object) {
                      var ex__10487__auto__ = e15616;
                      var statearr_15617_15634 = state_15595;
                      statearr_15617_15634[5] = ex__10487__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15595);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15616;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10485__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15635 = state_15595;
                  state_15595 = G__15635;
                  continue;
                } else {
                  return ret_value__10485__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__10484__auto__ = function(state_15595) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__10484__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__10484__auto____1.call(this, state_15595);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__10484__auto____0;
            cljs$core$async$state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__10484__auto____1;
            return cljs$core$async$state_machine__10484__auto__;
          }();
        }(switch__10483__auto__, c__10548__auto___15623, out);
      }();
      var state__10550__auto__ = function() {
        var statearr_15618 = f__10549__auto__.call(null);
        statearr_15618[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10548__auto___15623;
        return statearr_15618;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10550__auto__);
    };
  }(c__10548__auto___15623, out));
  return out;
};
cljs.core.async.merge.cljs$lang$maxFixedArity = 2;
cljs.core.async.into = function cljs$core$async$into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function cljs$core$async$take(var_args) {
  var args15636 = [];
  var len__7211__auto___15685 = arguments.length;
  var i__7212__auto___15686 = 0;
  while (true) {
    if (i__7212__auto___15686 < len__7211__auto___15685) {
      args15636.push(arguments[i__7212__auto___15686]);
      var G__15687 = i__7212__auto___15686 + 1;
      i__7212__auto___15686 = G__15687;
      continue;
    } else {
    }
    break;
  }
  var G__15638 = args15636.length;
  switch(G__15638) {
    case 2:
      return cljs.core.async.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.take.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args15636.length)].join(""));;
  }
};
cljs.core.async.take.cljs$core$IFn$_invoke$arity$2 = function(n, ch) {
  return cljs.core.async.take.call(null, n, ch, null);
};
cljs.core.async.take.cljs$core$IFn$_invoke$arity$3 = function(n, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__10548__auto___15689 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10548__auto___15689, out) {
    return function() {
      var f__10549__auto__ = function() {
        var switch__10483__auto__ = function(c__10548__auto___15689, out) {
          return function(state_15662) {
            var state_val_15663 = state_15662[1];
            if (state_val_15663 === 7) {
              var inst_15644 = state_15662[7];
              var inst_15644__$1 = state_15662[2];
              var inst_15645 = inst_15644__$1 == null;
              var inst_15646 = cljs.core.not.call(null, inst_15645);
              var state_15662__$1 = function() {
                var statearr_15664 = state_15662;
                statearr_15664[7] = inst_15644__$1;
                return statearr_15664;
              }();
              if (inst_15646) {
                var statearr_15665_15690 = state_15662__$1;
                statearr_15665_15690[1] = 8;
              } else {
                var statearr_15666_15691 = state_15662__$1;
                statearr_15666_15691[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15663 === 1) {
                var inst_15639 = 0;
                var state_15662__$1 = function() {
                  var statearr_15667 = state_15662;
                  statearr_15667[8] = inst_15639;
                  return statearr_15667;
                }();
                var statearr_15668_15692 = state_15662__$1;
                statearr_15668_15692[2] = null;
                statearr_15668_15692[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15663 === 4) {
                  var state_15662__$1 = state_15662;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15662__$1, 7, ch);
                } else {
                  if (state_val_15663 === 6) {
                    var inst_15657 = state_15662[2];
                    var state_15662__$1 = state_15662;
                    var statearr_15669_15693 = state_15662__$1;
                    statearr_15669_15693[2] = inst_15657;
                    statearr_15669_15693[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15663 === 3) {
                      var inst_15659 = state_15662[2];
                      var inst_15660 = cljs.core.async.close_BANG_.call(null, out);
                      var state_15662__$1 = function() {
                        var statearr_15670 = state_15662;
                        statearr_15670[9] = inst_15659;
                        return statearr_15670;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15662__$1, inst_15660);
                    } else {
                      if (state_val_15663 === 2) {
                        var inst_15639 = state_15662[8];
                        var inst_15641 = inst_15639 < n;
                        var state_15662__$1 = state_15662;
                        if (cljs.core.truth_(inst_15641)) {
                          var statearr_15671_15694 = state_15662__$1;
                          statearr_15671_15694[1] = 4;
                        } else {
                          var statearr_15672_15695 = state_15662__$1;
                          statearr_15672_15695[1] = 5;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_15663 === 11) {
                          var inst_15639 = state_15662[8];
                          var inst_15649 = state_15662[2];
                          var inst_15650 = inst_15639 + 1;
                          var inst_15639__$1 = inst_15650;
                          var state_15662__$1 = function() {
                            var statearr_15673 = state_15662;
                            statearr_15673[8] = inst_15639__$1;
                            statearr_15673[10] = inst_15649;
                            return statearr_15673;
                          }();
                          var statearr_15674_15696 = state_15662__$1;
                          statearr_15674_15696[2] = null;
                          statearr_15674_15696[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_15663 === 9) {
                            var state_15662__$1 = state_15662;
                            var statearr_15675_15697 = state_15662__$1;
                            statearr_15675_15697[2] = null;
                            statearr_15675_15697[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_15663 === 5) {
                              var state_15662__$1 = state_15662;
                              var statearr_15676_15698 = state_15662__$1;
                              statearr_15676_15698[2] = null;
                              statearr_15676_15698[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_15663 === 10) {
                                var inst_15654 = state_15662[2];
                                var state_15662__$1 = state_15662;
                                var statearr_15677_15699 = state_15662__$1;
                                statearr_15677_15699[2] = inst_15654;
                                statearr_15677_15699[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15663 === 8) {
                                  var inst_15644 = state_15662[7];
                                  var state_15662__$1 = state_15662;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15662__$1, 11, out, inst_15644);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10548__auto___15689, out);
        return function(switch__10483__auto__, c__10548__auto___15689, out) {
          return function() {
            var cljs$core$async$state_machine__10484__auto__ = null;
            var cljs$core$async$state_machine__10484__auto____0 = function() {
              var statearr_15681 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_15681[0] = cljs$core$async$state_machine__10484__auto__;
              statearr_15681[1] = 1;
              return statearr_15681;
            };
            var cljs$core$async$state_machine__10484__auto____1 = function(state_15662) {
              while (true) {
                var ret_value__10485__auto__ = function() {
                  try {
                    while (true) {
                      var result__10486__auto__ = switch__10483__auto__.call(null, state_15662);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10486__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__10486__auto__;
                      }
                      break;
                    }
                  } catch (e15682) {
                    if (e15682 instanceof Object) {
                      var ex__10487__auto__ = e15682;
                      var statearr_15683_15700 = state_15662;
                      statearr_15683_15700[5] = ex__10487__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15662);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15682;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10485__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15701 = state_15662;
                  state_15662 = G__15701;
                  continue;
                } else {
                  return ret_value__10485__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__10484__auto__ = function(state_15662) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__10484__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__10484__auto____1.call(this, state_15662);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__10484__auto____0;
            cljs$core$async$state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__10484__auto____1;
            return cljs$core$async$state_machine__10484__auto__;
          }();
        }(switch__10483__auto__, c__10548__auto___15689, out);
      }();
      var state__10550__auto__ = function() {
        var statearr_15684 = f__10549__auto__.call(null);
        statearr_15684[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10548__auto___15689;
        return statearr_15684;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10550__auto__);
    };
  }(c__10548__auto___15689, out));
  return out;
};
cljs.core.async.take.cljs$lang$maxFixedArity = 3;
cljs.core.async.map_LT_ = function cljs$core$async$map_LT_(f, ch) {
  if (typeof cljs.core.async.t_cljs$core$async15709 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async15709 = function(map_LT_, f, ch, meta15710) {
      this.map_LT_ = map_LT_;
      this.f = f;
      this.ch = ch;
      this.meta15710 = meta15710;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async15709.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15711, meta15710__$1) {
      var self__ = this;
      var _15711__$1 = this;
      return new cljs.core.async.t_cljs$core$async15709(self__.map_LT_, self__.f, self__.ch, meta15710__$1);
    };
    cljs.core.async.t_cljs$core$async15709.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15711) {
      var self__ = this;
      var _15711__$1 = this;
      return self__.meta15710;
    };
    cljs.core.async.t_cljs$core$async15709.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t_cljs$core$async15709.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t_cljs$core$async15709.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t_cljs$core$async15709.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t_cljs$core$async15709.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t_cljs$core$async15712 !== "undefined") {
        } else {
          cljs.core.async.t_cljs$core$async15712 = function(map_LT_, f, ch, meta15710, _, fn1, meta15713) {
            this.map_LT_ = map_LT_;
            this.f = f;
            this.ch = ch;
            this.meta15710 = meta15710;
            this._ = _;
            this.fn1 = fn1;
            this.meta15713 = meta15713;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
            this.cljs$lang$protocol_mask$partition1$ = 0;
          };
          cljs.core.async.t_cljs$core$async15712.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_15714, meta15713__$1) {
              var self__ = this;
              var _15714__$1 = this;
              return new cljs.core.async.t_cljs$core$async15712(self__.map_LT_, self__.f, self__.ch, self__.meta15710, self__._, self__.fn1, meta15713__$1);
            };
          }(___$1);
          cljs.core.async.t_cljs$core$async15712.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_15714) {
              var self__ = this;
              var _15714__$1 = this;
              return self__.meta15713;
            };
          }(___$1);
          cljs.core.async.t_cljs$core$async15712.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t_cljs$core$async15712.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t_cljs$core$async15712.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              return true;
            };
          }(___$1);
          cljs.core.async.t_cljs$core$async15712.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$2, ___$1) {
                return function(p1__15702_SHARP_) {
                  return f1.call(null, p1__15702_SHARP_ == null ? null : self__.f.call(null, p1__15702_SHARP_));
                };
              }(f1, ___$2, ___$1);
            };
          }(___$1);
          cljs.core.async.t_cljs$core$async15712.getBasis = function(___$1) {
            return function() {
              return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "map\x3c", "map\x3c", -1235808357, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, 
              "f", "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "Deprecated - this function will be removed. Use transducer instead"], null)), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta15710", "meta15710", 593824651, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_", "_", -1201019570, null), 
              new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol("cljs.core.async", "t_cljs$core$async15709", "cljs.core.async/t_cljs$core$async15709", -706911143, null)], null)), new cljs.core.Symbol(null, "fn1", "fn1", 895834444, null), new cljs.core.Symbol(null, "meta15713", "meta15713", 1348410104, null)], null);
            };
          }(___$1);
          cljs.core.async.t_cljs$core$async15712.cljs$lang$type = true;
          cljs.core.async.t_cljs$core$async15712.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async15712";
          cljs.core.async.t_cljs$core$async15712.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
              return cljs.core._write.call(null, writer__6752__auto__, "cljs.core.async/t_cljs$core$async15712");
            };
          }(___$1);
          cljs.core.async.__GT_t_cljs$core$async15712 = function(___$1) {
            return function cljs$core$async$map_LT__$___GT_t_cljs$core$async15712(map_LT___$1, f__$1, ch__$1, meta15710__$1, ___$2, fn1__$1, meta15713) {
              return new cljs.core.async.t_cljs$core$async15712(map_LT___$1, f__$1, ch__$1, meta15710__$1, ___$2, fn1__$1, meta15713);
            };
          }(___$1);
        }
        return new cljs.core.async.t_cljs$core$async15712(self__.map_LT_, self__.f, self__.ch, self__.meta15710, ___$1, fn1, cljs.core.PersistentArrayMap.EMPTY);
      }());
      if (cljs.core.truth_(function() {
        var and__6141__auto__ = ret;
        if (cljs.core.truth_(and__6141__auto__)) {
          return !(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__6141__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t_cljs$core$async15709.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t_cljs$core$async15709.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t_cljs$core$async15709.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "map\x3c", "map\x3c", -1235808357, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", 
      "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "Deprecated - this function will be removed. Use transducer instead"], null)), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta15710", "meta15710", 593824651, null)], null);
    };
    cljs.core.async.t_cljs$core$async15709.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async15709.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async15709";
    cljs.core.async.t_cljs$core$async15709.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
      return cljs.core._write.call(null, writer__6752__auto__, "cljs.core.async/t_cljs$core$async15709");
    };
    cljs.core.async.__GT_t_cljs$core$async15709 = function cljs$core$async$map_LT__$___GT_t_cljs$core$async15709(map_LT___$1, f__$1, ch__$1, meta15710) {
      return new cljs.core.async.t_cljs$core$async15709(map_LT___$1, f__$1, ch__$1, meta15710);
    };
  }
  return new cljs.core.async.t_cljs$core$async15709(cljs$core$async$map_LT_, f, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.map_GT_ = function cljs$core$async$map_GT_(f, ch) {
  if (typeof cljs.core.async.t_cljs$core$async15718 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async15718 = function(map_GT_, f, ch, meta15719) {
      this.map_GT_ = map_GT_;
      this.f = f;
      this.ch = ch;
      this.meta15719 = meta15719;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async15718.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15720, meta15719__$1) {
      var self__ = this;
      var _15720__$1 = this;
      return new cljs.core.async.t_cljs$core$async15718(self__.map_GT_, self__.f, self__.ch, meta15719__$1);
    };
    cljs.core.async.t_cljs$core$async15718.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15720) {
      var self__ = this;
      var _15720__$1 = this;
      return self__.meta15719;
    };
    cljs.core.async.t_cljs$core$async15718.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t_cljs$core$async15718.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t_cljs$core$async15718.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t_cljs$core$async15718.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t_cljs$core$async15718.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t_cljs$core$async15718.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t_cljs$core$async15718.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "map\x3e", "map\x3e", 1676369295, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", 
      "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "Deprecated - this function will be removed. Use transducer instead"], null)), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta15719", "meta15719", -1969932063, null)], null);
    };
    cljs.core.async.t_cljs$core$async15718.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async15718.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async15718";
    cljs.core.async.t_cljs$core$async15718.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
      return cljs.core._write.call(null, writer__6752__auto__, "cljs.core.async/t_cljs$core$async15718");
    };
    cljs.core.async.__GT_t_cljs$core$async15718 = function cljs$core$async$map_GT__$___GT_t_cljs$core$async15718(map_GT___$1, f__$1, ch__$1, meta15719) {
      return new cljs.core.async.t_cljs$core$async15718(map_GT___$1, f__$1, ch__$1, meta15719);
    };
  }
  return new cljs.core.async.t_cljs$core$async15718(cljs$core$async$map_GT_, f, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.filter_GT_ = function cljs$core$async$filter_GT_(p, ch) {
  if (typeof cljs.core.async.t_cljs$core$async15724 !== "undefined") {
  } else {
    cljs.core.async.t_cljs$core$async15724 = function(filter_GT_, p, ch, meta15725) {
      this.filter_GT_ = filter_GT_;
      this.p = p;
      this.ch = ch;
      this.meta15725 = meta15725;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t_cljs$core$async15724.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15726, meta15725__$1) {
      var self__ = this;
      var _15726__$1 = this;
      return new cljs.core.async.t_cljs$core$async15724(self__.filter_GT_, self__.p, self__.ch, meta15725__$1);
    };
    cljs.core.async.t_cljs$core$async15724.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15726) {
      var self__ = this;
      var _15726__$1 = this;
      return self__.meta15725;
    };
    cljs.core.async.t_cljs$core$async15724.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t_cljs$core$async15724.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t_cljs$core$async15724.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t_cljs$core$async15724.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t_cljs$core$async15724.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t_cljs$core$async15724.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t_cljs$core$async15724.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t_cljs$core$async15724.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "filter\x3e", "filter\x3e", -37644455, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, 
      "p", "p", 1791580836, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "Deprecated - this function will be removed. Use transducer instead"], null)), new cljs.core.Symbol(null, "p", "p", 1791580836, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta15725", "meta15725", 953593317, null)], null);
    };
    cljs.core.async.t_cljs$core$async15724.cljs$lang$type = true;
    cljs.core.async.t_cljs$core$async15724.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async15724";
    cljs.core.async.t_cljs$core$async15724.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
      return cljs.core._write.call(null, writer__6752__auto__, "cljs.core.async/t_cljs$core$async15724");
    };
    cljs.core.async.__GT_t_cljs$core$async15724 = function cljs$core$async$filter_GT__$___GT_t_cljs$core$async15724(filter_GT___$1, p__$1, ch__$1, meta15725) {
      return new cljs.core.async.t_cljs$core$async15724(filter_GT___$1, p__$1, ch__$1, meta15725);
    };
  }
  return new cljs.core.async.t_cljs$core$async15724(cljs$core$async$filter_GT_, p, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.remove_GT_ = function cljs$core$async$remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function cljs$core$async$filter_LT_(var_args) {
  var args15727 = [];
  var len__7211__auto___15771 = arguments.length;
  var i__7212__auto___15772 = 0;
  while (true) {
    if (i__7212__auto___15772 < len__7211__auto___15771) {
      args15727.push(arguments[i__7212__auto___15772]);
      var G__15773 = i__7212__auto___15772 + 1;
      i__7212__auto___15772 = G__15773;
      continue;
    } else {
    }
    break;
  }
  var G__15729 = args15727.length;
  switch(G__15729) {
    case 2:
      return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args15727.length)].join(""));;
  }
};
cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.filter_LT_.call(null, p, ch, null);
};
cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3 = function(p, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__10548__auto___15775 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10548__auto___15775, out) {
    return function() {
      var f__10549__auto__ = function() {
        var switch__10483__auto__ = function(c__10548__auto___15775, out) {
          return function(state_15750) {
            var state_val_15751 = state_15750[1];
            if (state_val_15751 === 7) {
              var inst_15746 = state_15750[2];
              var state_15750__$1 = state_15750;
              var statearr_15752_15776 = state_15750__$1;
              statearr_15752_15776[2] = inst_15746;
              statearr_15752_15776[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15751 === 1) {
                var state_15750__$1 = state_15750;
                var statearr_15753_15777 = state_15750__$1;
                statearr_15753_15777[2] = null;
                statearr_15753_15777[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15751 === 4) {
                  var inst_15732 = state_15750[7];
                  var inst_15732__$1 = state_15750[2];
                  var inst_15733 = inst_15732__$1 == null;
                  var state_15750__$1 = function() {
                    var statearr_15754 = state_15750;
                    statearr_15754[7] = inst_15732__$1;
                    return statearr_15754;
                  }();
                  if (cljs.core.truth_(inst_15733)) {
                    var statearr_15755_15778 = state_15750__$1;
                    statearr_15755_15778[1] = 5;
                  } else {
                    var statearr_15756_15779 = state_15750__$1;
                    statearr_15756_15779[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15751 === 6) {
                    var inst_15732 = state_15750[7];
                    var inst_15737 = p.call(null, inst_15732);
                    var state_15750__$1 = state_15750;
                    if (cljs.core.truth_(inst_15737)) {
                      var statearr_15757_15780 = state_15750__$1;
                      statearr_15757_15780[1] = 8;
                    } else {
                      var statearr_15758_15781 = state_15750__$1;
                      statearr_15758_15781[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15751 === 3) {
                      var inst_15748 = state_15750[2];
                      var state_15750__$1 = state_15750;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15750__$1, inst_15748);
                    } else {
                      if (state_val_15751 === 2) {
                        var state_15750__$1 = state_15750;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15750__$1, 4, ch);
                      } else {
                        if (state_val_15751 === 11) {
                          var inst_15740 = state_15750[2];
                          var state_15750__$1 = state_15750;
                          var statearr_15759_15782 = state_15750__$1;
                          statearr_15759_15782[2] = inst_15740;
                          statearr_15759_15782[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_15751 === 9) {
                            var state_15750__$1 = state_15750;
                            var statearr_15760_15783 = state_15750__$1;
                            statearr_15760_15783[2] = null;
                            statearr_15760_15783[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_15751 === 5) {
                              var inst_15735 = cljs.core.async.close_BANG_.call(null, out);
                              var state_15750__$1 = state_15750;
                              var statearr_15761_15784 = state_15750__$1;
                              statearr_15761_15784[2] = inst_15735;
                              statearr_15761_15784[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_15751 === 10) {
                                var inst_15743 = state_15750[2];
                                var state_15750__$1 = function() {
                                  var statearr_15762 = state_15750;
                                  statearr_15762[8] = inst_15743;
                                  return statearr_15762;
                                }();
                                var statearr_15763_15785 = state_15750__$1;
                                statearr_15763_15785[2] = null;
                                statearr_15763_15785[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15751 === 8) {
                                  var inst_15732 = state_15750[7];
                                  var state_15750__$1 = state_15750;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15750__$1, 11, out, inst_15732);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10548__auto___15775, out);
        return function(switch__10483__auto__, c__10548__auto___15775, out) {
          return function() {
            var cljs$core$async$state_machine__10484__auto__ = null;
            var cljs$core$async$state_machine__10484__auto____0 = function() {
              var statearr_15767 = [null, null, null, null, null, null, null, null, null];
              statearr_15767[0] = cljs$core$async$state_machine__10484__auto__;
              statearr_15767[1] = 1;
              return statearr_15767;
            };
            var cljs$core$async$state_machine__10484__auto____1 = function(state_15750) {
              while (true) {
                var ret_value__10485__auto__ = function() {
                  try {
                    while (true) {
                      var result__10486__auto__ = switch__10483__auto__.call(null, state_15750);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10486__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__10486__auto__;
                      }
                      break;
                    }
                  } catch (e15768) {
                    if (e15768 instanceof Object) {
                      var ex__10487__auto__ = e15768;
                      var statearr_15769_15786 = state_15750;
                      statearr_15769_15786[5] = ex__10487__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15750);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15768;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10485__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15787 = state_15750;
                  state_15750 = G__15787;
                  continue;
                } else {
                  return ret_value__10485__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__10484__auto__ = function(state_15750) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__10484__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__10484__auto____1.call(this, state_15750);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__10484__auto____0;
            cljs$core$async$state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__10484__auto____1;
            return cljs$core$async$state_machine__10484__auto__;
          }();
        }(switch__10483__auto__, c__10548__auto___15775, out);
      }();
      var state__10550__auto__ = function() {
        var statearr_15770 = f__10549__auto__.call(null);
        statearr_15770[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10548__auto___15775;
        return statearr_15770;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10550__auto__);
    };
  }(c__10548__auto___15775, out));
  return out;
};
cljs.core.async.filter_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.remove_LT_ = function cljs$core$async$remove_LT_(var_args) {
  var args15788 = [];
  var len__7211__auto___15791 = arguments.length;
  var i__7212__auto___15792 = 0;
  while (true) {
    if (i__7212__auto___15792 < len__7211__auto___15791) {
      args15788.push(arguments[i__7212__auto___15792]);
      var G__15793 = i__7212__auto___15792 + 1;
      i__7212__auto___15792 = G__15793;
      continue;
    } else {
    }
    break;
  }
  var G__15790 = args15788.length;
  switch(G__15790) {
    case 2:
      return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args15788.length)].join(""));;
  }
};
cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.remove_LT_.call(null, p, ch, null);
};
cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3 = function(p, ch, buf_or_n) {
  return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
};
cljs.core.async.remove_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.mapcat_STAR_ = function cljs$core$async$mapcat_STAR_(f, in$, out) {
  var c__10548__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10548__auto__) {
    return function() {
      var f__10549__auto__ = function() {
        var switch__10483__auto__ = function(c__10548__auto__) {
          return function(state_15960) {
            var state_val_15961 = state_15960[1];
            if (state_val_15961 === 7) {
              var inst_15956 = state_15960[2];
              var state_15960__$1 = state_15960;
              var statearr_15962_16003 = state_15960__$1;
              statearr_15962_16003[2] = inst_15956;
              statearr_15962_16003[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15961 === 20) {
                var inst_15926 = state_15960[7];
                var inst_15937 = state_15960[2];
                var inst_15938 = cljs.core.next.call(null, inst_15926);
                var inst_15912 = inst_15938;
                var inst_15913 = null;
                var inst_15914 = 0;
                var inst_15915 = 0;
                var state_15960__$1 = function() {
                  var statearr_15963 = state_15960;
                  statearr_15963[8] = inst_15912;
                  statearr_15963[9] = inst_15913;
                  statearr_15963[10] = inst_15914;
                  statearr_15963[11] = inst_15915;
                  statearr_15963[12] = inst_15937;
                  return statearr_15963;
                }();
                var statearr_15964_16004 = state_15960__$1;
                statearr_15964_16004[2] = null;
                statearr_15964_16004[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15961 === 1) {
                  var state_15960__$1 = state_15960;
                  var statearr_15965_16005 = state_15960__$1;
                  statearr_15965_16005[2] = null;
                  statearr_15965_16005[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15961 === 4) {
                    var inst_15901 = state_15960[13];
                    var inst_15901__$1 = state_15960[2];
                    var inst_15902 = inst_15901__$1 == null;
                    var state_15960__$1 = function() {
                      var statearr_15966 = state_15960;
                      statearr_15966[13] = inst_15901__$1;
                      return statearr_15966;
                    }();
                    if (cljs.core.truth_(inst_15902)) {
                      var statearr_15967_16006 = state_15960__$1;
                      statearr_15967_16006[1] = 5;
                    } else {
                      var statearr_15968_16007 = state_15960__$1;
                      statearr_15968_16007[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15961 === 15) {
                      var state_15960__$1 = state_15960;
                      var statearr_15972_16008 = state_15960__$1;
                      statearr_15972_16008[2] = null;
                      statearr_15972_16008[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15961 === 21) {
                        var state_15960__$1 = state_15960;
                        var statearr_15973_16009 = state_15960__$1;
                        statearr_15973_16009[2] = null;
                        statearr_15973_16009[1] = 23;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_15961 === 13) {
                          var inst_15912 = state_15960[8];
                          var inst_15913 = state_15960[9];
                          var inst_15914 = state_15960[10];
                          var inst_15915 = state_15960[11];
                          var inst_15922 = state_15960[2];
                          var inst_15923 = inst_15915 + 1;
                          var tmp15969 = inst_15912;
                          var tmp15970 = inst_15913;
                          var tmp15971 = inst_15914;
                          var inst_15912__$1 = tmp15969;
                          var inst_15913__$1 = tmp15970;
                          var inst_15914__$1 = tmp15971;
                          var inst_15915__$1 = inst_15923;
                          var state_15960__$1 = function() {
                            var statearr_15974 = state_15960;
                            statearr_15974[8] = inst_15912__$1;
                            statearr_15974[9] = inst_15913__$1;
                            statearr_15974[14] = inst_15922;
                            statearr_15974[10] = inst_15914__$1;
                            statearr_15974[11] = inst_15915__$1;
                            return statearr_15974;
                          }();
                          var statearr_15975_16010 = state_15960__$1;
                          statearr_15975_16010[2] = null;
                          statearr_15975_16010[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_15961 === 22) {
                            var state_15960__$1 = state_15960;
                            var statearr_15976_16011 = state_15960__$1;
                            statearr_15976_16011[2] = null;
                            statearr_15976_16011[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_15961 === 6) {
                              var inst_15901 = state_15960[13];
                              var inst_15910 = f.call(null, inst_15901);
                              var inst_15911 = cljs.core.seq.call(null, inst_15910);
                              var inst_15912 = inst_15911;
                              var inst_15913 = null;
                              var inst_15914 = 0;
                              var inst_15915 = 0;
                              var state_15960__$1 = function() {
                                var statearr_15977 = state_15960;
                                statearr_15977[8] = inst_15912;
                                statearr_15977[9] = inst_15913;
                                statearr_15977[10] = inst_15914;
                                statearr_15977[11] = inst_15915;
                                return statearr_15977;
                              }();
                              var statearr_15978_16012 = state_15960__$1;
                              statearr_15978_16012[2] = null;
                              statearr_15978_16012[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_15961 === 17) {
                                var inst_15926 = state_15960[7];
                                var inst_15930 = cljs.core.chunk_first.call(null, inst_15926);
                                var inst_15931 = cljs.core.chunk_rest.call(null, inst_15926);
                                var inst_15932 = cljs.core.count.call(null, inst_15930);
                                var inst_15912 = inst_15931;
                                var inst_15913 = inst_15930;
                                var inst_15914 = inst_15932;
                                var inst_15915 = 0;
                                var state_15960__$1 = function() {
                                  var statearr_15979 = state_15960;
                                  statearr_15979[8] = inst_15912;
                                  statearr_15979[9] = inst_15913;
                                  statearr_15979[10] = inst_15914;
                                  statearr_15979[11] = inst_15915;
                                  return statearr_15979;
                                }();
                                var statearr_15980_16013 = state_15960__$1;
                                statearr_15980_16013[2] = null;
                                statearr_15980_16013[1] = 8;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15961 === 3) {
                                  var inst_15958 = state_15960[2];
                                  var state_15960__$1 = state_15960;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15960__$1, inst_15958);
                                } else {
                                  if (state_val_15961 === 12) {
                                    var inst_15946 = state_15960[2];
                                    var state_15960__$1 = state_15960;
                                    var statearr_15981_16014 = state_15960__$1;
                                    statearr_15981_16014[2] = inst_15946;
                                    statearr_15981_16014[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_15961 === 2) {
                                      var state_15960__$1 = state_15960;
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15960__$1, 4, in$);
                                    } else {
                                      if (state_val_15961 === 23) {
                                        var inst_15954 = state_15960[2];
                                        var state_15960__$1 = state_15960;
                                        var statearr_15982_16015 = state_15960__$1;
                                        statearr_15982_16015[2] = inst_15954;
                                        statearr_15982_16015[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_15961 === 19) {
                                          var inst_15941 = state_15960[2];
                                          var state_15960__$1 = state_15960;
                                          var statearr_15983_16016 = state_15960__$1;
                                          statearr_15983_16016[2] = inst_15941;
                                          statearr_15983_16016[1] = 16;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_15961 === 11) {
                                            var inst_15912 = state_15960[8];
                                            var inst_15926 = state_15960[7];
                                            var inst_15926__$1 = cljs.core.seq.call(null, inst_15912);
                                            var state_15960__$1 = function() {
                                              var statearr_15984 = state_15960;
                                              statearr_15984[7] = inst_15926__$1;
                                              return statearr_15984;
                                            }();
                                            if (inst_15926__$1) {
                                              var statearr_15985_16017 = state_15960__$1;
                                              statearr_15985_16017[1] = 14;
                                            } else {
                                              var statearr_15986_16018 = state_15960__$1;
                                              statearr_15986_16018[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_15961 === 9) {
                                              var inst_15948 = state_15960[2];
                                              var inst_15949 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                                              var state_15960__$1 = function() {
                                                var statearr_15987 = state_15960;
                                                statearr_15987[15] = inst_15948;
                                                return statearr_15987;
                                              }();
                                              if (cljs.core.truth_(inst_15949)) {
                                                var statearr_15988_16019 = state_15960__$1;
                                                statearr_15988_16019[1] = 21;
                                              } else {
                                                var statearr_15989_16020 = state_15960__$1;
                                                statearr_15989_16020[1] = 22;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_15961 === 5) {
                                                var inst_15904 = cljs.core.async.close_BANG_.call(null, out);
                                                var state_15960__$1 = state_15960;
                                                var statearr_15990_16021 = state_15960__$1;
                                                statearr_15990_16021[2] = inst_15904;
                                                statearr_15990_16021[1] = 7;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_15961 === 14) {
                                                  var inst_15926 = state_15960[7];
                                                  var inst_15928 = cljs.core.chunked_seq_QMARK_.call(null, inst_15926);
                                                  var state_15960__$1 = state_15960;
                                                  if (inst_15928) {
                                                    var statearr_15991_16022 = state_15960__$1;
                                                    statearr_15991_16022[1] = 17;
                                                  } else {
                                                    var statearr_15992_16023 = state_15960__$1;
                                                    statearr_15992_16023[1] = 18;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_15961 === 16) {
                                                    var inst_15944 = state_15960[2];
                                                    var state_15960__$1 = state_15960;
                                                    var statearr_15993_16024 = state_15960__$1;
                                                    statearr_15993_16024[2] = inst_15944;
                                                    statearr_15993_16024[1] = 12;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_15961 === 10) {
                                                      var inst_15913 = state_15960[9];
                                                      var inst_15915 = state_15960[11];
                                                      var inst_15920 = cljs.core._nth.call(null, inst_15913, inst_15915);
                                                      var state_15960__$1 = state_15960;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15960__$1, 13, out, inst_15920);
                                                    } else {
                                                      if (state_val_15961 === 18) {
                                                        var inst_15926 = state_15960[7];
                                                        var inst_15935 = cljs.core.first.call(null, inst_15926);
                                                        var state_15960__$1 = state_15960;
                                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15960__$1, 20, out, inst_15935);
                                                      } else {
                                                        if (state_val_15961 === 8) {
                                                          var inst_15914 = state_15960[10];
                                                          var inst_15915 = state_15960[11];
                                                          var inst_15917 = inst_15915 < inst_15914;
                                                          var inst_15918 = inst_15917;
                                                          var state_15960__$1 = state_15960;
                                                          if (cljs.core.truth_(inst_15918)) {
                                                            var statearr_15994_16025 = state_15960__$1;
                                                            statearr_15994_16025[1] = 10;
                                                          } else {
                                                            var statearr_15995_16026 = state_15960__$1;
                                                            statearr_15995_16026[1] = 11;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10548__auto__);
        return function(switch__10483__auto__, c__10548__auto__) {
          return function() {
            var cljs$core$async$mapcat_STAR__$_state_machine__10484__auto__ = null;
            var cljs$core$async$mapcat_STAR__$_state_machine__10484__auto____0 = function() {
              var statearr_15999 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_15999[0] = cljs$core$async$mapcat_STAR__$_state_machine__10484__auto__;
              statearr_15999[1] = 1;
              return statearr_15999;
            };
            var cljs$core$async$mapcat_STAR__$_state_machine__10484__auto____1 = function(state_15960) {
              while (true) {
                var ret_value__10485__auto__ = function() {
                  try {
                    while (true) {
                      var result__10486__auto__ = switch__10483__auto__.call(null, state_15960);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10486__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__10486__auto__;
                      }
                      break;
                    }
                  } catch (e16000) {
                    if (e16000 instanceof Object) {
                      var ex__10487__auto__ = e16000;
                      var statearr_16001_16027 = state_15960;
                      statearr_16001_16027[5] = ex__10487__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15960);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e16000;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10485__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__16028 = state_15960;
                  state_15960 = G__16028;
                  continue;
                } else {
                  return ret_value__10485__auto__;
                }
                break;
              }
            };
            cljs$core$async$mapcat_STAR__$_state_machine__10484__auto__ = function(state_15960) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mapcat_STAR__$_state_machine__10484__auto____0.call(this);
                case 1:
                  return cljs$core$async$mapcat_STAR__$_state_machine__10484__auto____1.call(this, state_15960);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mapcat_STAR__$_state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mapcat_STAR__$_state_machine__10484__auto____0;
            cljs$core$async$mapcat_STAR__$_state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mapcat_STAR__$_state_machine__10484__auto____1;
            return cljs$core$async$mapcat_STAR__$_state_machine__10484__auto__;
          }();
        }(switch__10483__auto__, c__10548__auto__);
      }();
      var state__10550__auto__ = function() {
        var statearr_16002 = f__10549__auto__.call(null);
        statearr_16002[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10548__auto__;
        return statearr_16002;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10550__auto__);
    };
  }(c__10548__auto__));
  return c__10548__auto__;
};
cljs.core.async.mapcat_LT_ = function cljs$core$async$mapcat_LT_(var_args) {
  var args16029 = [];
  var len__7211__auto___16032 = arguments.length;
  var i__7212__auto___16033 = 0;
  while (true) {
    if (i__7212__auto___16033 < len__7211__auto___16032) {
      args16029.push(arguments[i__7212__auto___16033]);
      var G__16034 = i__7212__auto___16033 + 1;
      i__7212__auto___16033 = G__16034;
      continue;
    } else {
    }
    break;
  }
  var G__16031 = args16029.length;
  switch(G__16031) {
    case 2:
      return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args16029.length)].join(""));;
  }
};
cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = function(f, in$) {
  return cljs.core.async.mapcat_LT_.call(null, f, in$, null);
};
cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = function(f, in$, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
  return out;
};
cljs.core.async.mapcat_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.mapcat_GT_ = function cljs$core$async$mapcat_GT_(var_args) {
  var args16036 = [];
  var len__7211__auto___16039 = arguments.length;
  var i__7212__auto___16040 = 0;
  while (true) {
    if (i__7212__auto___16040 < len__7211__auto___16039) {
      args16036.push(arguments[i__7212__auto___16040]);
      var G__16041 = i__7212__auto___16040 + 1;
      i__7212__auto___16040 = G__16041;
      continue;
    } else {
    }
    break;
  }
  var G__16038 = args16036.length;
  switch(G__16038) {
    case 2:
      return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args16036.length)].join(""));;
  }
};
cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = function(f, out) {
  return cljs.core.async.mapcat_GT_.call(null, f, out, null);
};
cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = function(f, out, buf_or_n) {
  var in$ = cljs.core.async.chan.call(null, buf_or_n);
  cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
  return in$;
};
cljs.core.async.mapcat_GT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.unique = function cljs$core$async$unique(var_args) {
  var args16043 = [];
  var len__7211__auto___16094 = arguments.length;
  var i__7212__auto___16095 = 0;
  while (true) {
    if (i__7212__auto___16095 < len__7211__auto___16094) {
      args16043.push(arguments[i__7212__auto___16095]);
      var G__16096 = i__7212__auto___16095 + 1;
      i__7212__auto___16095 = G__16096;
      continue;
    } else {
    }
    break;
  }
  var G__16045 = args16043.length;
  switch(G__16045) {
    case 1:
      return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args16043.length)].join(""));;
  }
};
cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1 = function(ch) {
  return cljs.core.async.unique.call(null, ch, null);
};
cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2 = function(ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__10548__auto___16098 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10548__auto___16098, out) {
    return function() {
      var f__10549__auto__ = function() {
        var switch__10483__auto__ = function(c__10548__auto___16098, out) {
          return function(state_16069) {
            var state_val_16070 = state_16069[1];
            if (state_val_16070 === 7) {
              var inst_16064 = state_16069[2];
              var state_16069__$1 = state_16069;
              var statearr_16071_16099 = state_16069__$1;
              statearr_16071_16099[2] = inst_16064;
              statearr_16071_16099[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_16070 === 1) {
                var inst_16046 = null;
                var state_16069__$1 = function() {
                  var statearr_16072 = state_16069;
                  statearr_16072[7] = inst_16046;
                  return statearr_16072;
                }();
                var statearr_16073_16100 = state_16069__$1;
                statearr_16073_16100[2] = null;
                statearr_16073_16100[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_16070 === 4) {
                  var inst_16049 = state_16069[8];
                  var inst_16049__$1 = state_16069[2];
                  var inst_16050 = inst_16049__$1 == null;
                  var inst_16051 = cljs.core.not.call(null, inst_16050);
                  var state_16069__$1 = function() {
                    var statearr_16074 = state_16069;
                    statearr_16074[8] = inst_16049__$1;
                    return statearr_16074;
                  }();
                  if (inst_16051) {
                    var statearr_16075_16101 = state_16069__$1;
                    statearr_16075_16101[1] = 5;
                  } else {
                    var statearr_16076_16102 = state_16069__$1;
                    statearr_16076_16102[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_16070 === 6) {
                    var state_16069__$1 = state_16069;
                    var statearr_16077_16103 = state_16069__$1;
                    statearr_16077_16103[2] = null;
                    statearr_16077_16103[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_16070 === 3) {
                      var inst_16066 = state_16069[2];
                      var inst_16067 = cljs.core.async.close_BANG_.call(null, out);
                      var state_16069__$1 = function() {
                        var statearr_16078 = state_16069;
                        statearr_16078[9] = inst_16066;
                        return statearr_16078;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16069__$1, inst_16067);
                    } else {
                      if (state_val_16070 === 2) {
                        var state_16069__$1 = state_16069;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16069__$1, 4, ch);
                      } else {
                        if (state_val_16070 === 11) {
                          var inst_16049 = state_16069[8];
                          var inst_16058 = state_16069[2];
                          var inst_16046 = inst_16049;
                          var state_16069__$1 = function() {
                            var statearr_16079 = state_16069;
                            statearr_16079[10] = inst_16058;
                            statearr_16079[7] = inst_16046;
                            return statearr_16079;
                          }();
                          var statearr_16080_16104 = state_16069__$1;
                          statearr_16080_16104[2] = null;
                          statearr_16080_16104[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_16070 === 9) {
                            var inst_16049 = state_16069[8];
                            var state_16069__$1 = state_16069;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16069__$1, 11, out, inst_16049);
                          } else {
                            if (state_val_16070 === 5) {
                              var inst_16049 = state_16069[8];
                              var inst_16046 = state_16069[7];
                              var inst_16053 = cljs.core._EQ_.call(null, inst_16049, inst_16046);
                              var state_16069__$1 = state_16069;
                              if (inst_16053) {
                                var statearr_16082_16105 = state_16069__$1;
                                statearr_16082_16105[1] = 8;
                              } else {
                                var statearr_16083_16106 = state_16069__$1;
                                statearr_16083_16106[1] = 9;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_16070 === 10) {
                                var inst_16061 = state_16069[2];
                                var state_16069__$1 = state_16069;
                                var statearr_16084_16107 = state_16069__$1;
                                statearr_16084_16107[2] = inst_16061;
                                statearr_16084_16107[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_16070 === 8) {
                                  var inst_16046 = state_16069[7];
                                  var tmp16081 = inst_16046;
                                  var inst_16046__$1 = tmp16081;
                                  var state_16069__$1 = function() {
                                    var statearr_16085 = state_16069;
                                    statearr_16085[7] = inst_16046__$1;
                                    return statearr_16085;
                                  }();
                                  var statearr_16086_16108 = state_16069__$1;
                                  statearr_16086_16108[2] = null;
                                  statearr_16086_16108[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10548__auto___16098, out);
        return function(switch__10483__auto__, c__10548__auto___16098, out) {
          return function() {
            var cljs$core$async$state_machine__10484__auto__ = null;
            var cljs$core$async$state_machine__10484__auto____0 = function() {
              var statearr_16090 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_16090[0] = cljs$core$async$state_machine__10484__auto__;
              statearr_16090[1] = 1;
              return statearr_16090;
            };
            var cljs$core$async$state_machine__10484__auto____1 = function(state_16069) {
              while (true) {
                var ret_value__10485__auto__ = function() {
                  try {
                    while (true) {
                      var result__10486__auto__ = switch__10483__auto__.call(null, state_16069);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10486__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__10486__auto__;
                      }
                      break;
                    }
                  } catch (e16091) {
                    if (e16091 instanceof Object) {
                      var ex__10487__auto__ = e16091;
                      var statearr_16092_16109 = state_16069;
                      statearr_16092_16109[5] = ex__10487__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16069);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e16091;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10485__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__16110 = state_16069;
                  state_16069 = G__16110;
                  continue;
                } else {
                  return ret_value__10485__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__10484__auto__ = function(state_16069) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__10484__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__10484__auto____1.call(this, state_16069);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__10484__auto____0;
            cljs$core$async$state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__10484__auto____1;
            return cljs$core$async$state_machine__10484__auto__;
          }();
        }(switch__10483__auto__, c__10548__auto___16098, out);
      }();
      var state__10550__auto__ = function() {
        var statearr_16093 = f__10549__auto__.call(null);
        statearr_16093[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10548__auto___16098;
        return statearr_16093;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10550__auto__);
    };
  }(c__10548__auto___16098, out));
  return out;
};
cljs.core.async.unique.cljs$lang$maxFixedArity = 2;
cljs.core.async.partition = function cljs$core$async$partition(var_args) {
  var args16111 = [];
  var len__7211__auto___16181 = arguments.length;
  var i__7212__auto___16182 = 0;
  while (true) {
    if (i__7212__auto___16182 < len__7211__auto___16181) {
      args16111.push(arguments[i__7212__auto___16182]);
      var G__16183 = i__7212__auto___16182 + 1;
      i__7212__auto___16182 = G__16183;
      continue;
    } else {
    }
    break;
  }
  var G__16113 = args16111.length;
  switch(G__16113) {
    case 2:
      return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args16111.length)].join(""));;
  }
};
cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2 = function(n, ch) {
  return cljs.core.async.partition.call(null, n, ch, null);
};
cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3 = function(n, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__10548__auto___16185 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10548__auto___16185, out) {
    return function() {
      var f__10549__auto__ = function() {
        var switch__10483__auto__ = function(c__10548__auto___16185, out) {
          return function(state_16151) {
            var state_val_16152 = state_16151[1];
            if (state_val_16152 === 7) {
              var inst_16147 = state_16151[2];
              var state_16151__$1 = state_16151;
              var statearr_16153_16186 = state_16151__$1;
              statearr_16153_16186[2] = inst_16147;
              statearr_16153_16186[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_16152 === 1) {
                var inst_16114 = new Array(n);
                var inst_16115 = inst_16114;
                var inst_16116 = 0;
                var state_16151__$1 = function() {
                  var statearr_16154 = state_16151;
                  statearr_16154[7] = inst_16115;
                  statearr_16154[8] = inst_16116;
                  return statearr_16154;
                }();
                var statearr_16155_16187 = state_16151__$1;
                statearr_16155_16187[2] = null;
                statearr_16155_16187[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_16152 === 4) {
                  var inst_16119 = state_16151[9];
                  var inst_16119__$1 = state_16151[2];
                  var inst_16120 = inst_16119__$1 == null;
                  var inst_16121 = cljs.core.not.call(null, inst_16120);
                  var state_16151__$1 = function() {
                    var statearr_16156 = state_16151;
                    statearr_16156[9] = inst_16119__$1;
                    return statearr_16156;
                  }();
                  if (inst_16121) {
                    var statearr_16157_16188 = state_16151__$1;
                    statearr_16157_16188[1] = 5;
                  } else {
                    var statearr_16158_16189 = state_16151__$1;
                    statearr_16158_16189[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_16152 === 15) {
                    var inst_16141 = state_16151[2];
                    var state_16151__$1 = state_16151;
                    var statearr_16159_16190 = state_16151__$1;
                    statearr_16159_16190[2] = inst_16141;
                    statearr_16159_16190[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_16152 === 13) {
                      var state_16151__$1 = state_16151;
                      var statearr_16160_16191 = state_16151__$1;
                      statearr_16160_16191[2] = null;
                      statearr_16160_16191[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_16152 === 6) {
                        var inst_16116 = state_16151[8];
                        var inst_16137 = inst_16116 > 0;
                        var state_16151__$1 = state_16151;
                        if (cljs.core.truth_(inst_16137)) {
                          var statearr_16161_16192 = state_16151__$1;
                          statearr_16161_16192[1] = 12;
                        } else {
                          var statearr_16162_16193 = state_16151__$1;
                          statearr_16162_16193[1] = 13;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_16152 === 3) {
                          var inst_16149 = state_16151[2];
                          var state_16151__$1 = state_16151;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16151__$1, inst_16149);
                        } else {
                          if (state_val_16152 === 12) {
                            var inst_16115 = state_16151[7];
                            var inst_16139 = cljs.core.vec.call(null, inst_16115);
                            var state_16151__$1 = state_16151;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16151__$1, 15, out, inst_16139);
                          } else {
                            if (state_val_16152 === 2) {
                              var state_16151__$1 = state_16151;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16151__$1, 4, ch);
                            } else {
                              if (state_val_16152 === 11) {
                                var inst_16131 = state_16151[2];
                                var inst_16132 = new Array(n);
                                var inst_16115 = inst_16132;
                                var inst_16116 = 0;
                                var state_16151__$1 = function() {
                                  var statearr_16163 = state_16151;
                                  statearr_16163[7] = inst_16115;
                                  statearr_16163[10] = inst_16131;
                                  statearr_16163[8] = inst_16116;
                                  return statearr_16163;
                                }();
                                var statearr_16164_16194 = state_16151__$1;
                                statearr_16164_16194[2] = null;
                                statearr_16164_16194[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_16152 === 9) {
                                  var inst_16115 = state_16151[7];
                                  var inst_16129 = cljs.core.vec.call(null, inst_16115);
                                  var state_16151__$1 = state_16151;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16151__$1, 11, out, inst_16129);
                                } else {
                                  if (state_val_16152 === 5) {
                                    var inst_16119 = state_16151[9];
                                    var inst_16115 = state_16151[7];
                                    var inst_16124 = state_16151[11];
                                    var inst_16116 = state_16151[8];
                                    var inst_16123 = inst_16115[inst_16116] = inst_16119;
                                    var inst_16124__$1 = inst_16116 + 1;
                                    var inst_16125 = inst_16124__$1 < n;
                                    var state_16151__$1 = function() {
                                      var statearr_16165 = state_16151;
                                      statearr_16165[12] = inst_16123;
                                      statearr_16165[11] = inst_16124__$1;
                                      return statearr_16165;
                                    }();
                                    if (cljs.core.truth_(inst_16125)) {
                                      var statearr_16166_16195 = state_16151__$1;
                                      statearr_16166_16195[1] = 8;
                                    } else {
                                      var statearr_16167_16196 = state_16151__$1;
                                      statearr_16167_16196[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_16152 === 14) {
                                      var inst_16144 = state_16151[2];
                                      var inst_16145 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_16151__$1 = function() {
                                        var statearr_16169 = state_16151;
                                        statearr_16169[13] = inst_16144;
                                        return statearr_16169;
                                      }();
                                      var statearr_16170_16197 = state_16151__$1;
                                      statearr_16170_16197[2] = inst_16145;
                                      statearr_16170_16197[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_16152 === 10) {
                                        var inst_16135 = state_16151[2];
                                        var state_16151__$1 = state_16151;
                                        var statearr_16171_16198 = state_16151__$1;
                                        statearr_16171_16198[2] = inst_16135;
                                        statearr_16171_16198[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_16152 === 8) {
                                          var inst_16115 = state_16151[7];
                                          var inst_16124 = state_16151[11];
                                          var tmp16168 = inst_16115;
                                          var inst_16115__$1 = tmp16168;
                                          var inst_16116 = inst_16124;
                                          var state_16151__$1 = function() {
                                            var statearr_16172 = state_16151;
                                            statearr_16172[7] = inst_16115__$1;
                                            statearr_16172[8] = inst_16116;
                                            return statearr_16172;
                                          }();
                                          var statearr_16173_16199 = state_16151__$1;
                                          statearr_16173_16199[2] = null;
                                          statearr_16173_16199[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10548__auto___16185, out);
        return function(switch__10483__auto__, c__10548__auto___16185, out) {
          return function() {
            var cljs$core$async$state_machine__10484__auto__ = null;
            var cljs$core$async$state_machine__10484__auto____0 = function() {
              var statearr_16177 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_16177[0] = cljs$core$async$state_machine__10484__auto__;
              statearr_16177[1] = 1;
              return statearr_16177;
            };
            var cljs$core$async$state_machine__10484__auto____1 = function(state_16151) {
              while (true) {
                var ret_value__10485__auto__ = function() {
                  try {
                    while (true) {
                      var result__10486__auto__ = switch__10483__auto__.call(null, state_16151);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10486__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__10486__auto__;
                      }
                      break;
                    }
                  } catch (e16178) {
                    if (e16178 instanceof Object) {
                      var ex__10487__auto__ = e16178;
                      var statearr_16179_16200 = state_16151;
                      statearr_16179_16200[5] = ex__10487__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16151);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e16178;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10485__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__16201 = state_16151;
                  state_16151 = G__16201;
                  continue;
                } else {
                  return ret_value__10485__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__10484__auto__ = function(state_16151) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__10484__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__10484__auto____1.call(this, state_16151);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__10484__auto____0;
            cljs$core$async$state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__10484__auto____1;
            return cljs$core$async$state_machine__10484__auto__;
          }();
        }(switch__10483__auto__, c__10548__auto___16185, out);
      }();
      var state__10550__auto__ = function() {
        var statearr_16180 = f__10549__auto__.call(null);
        statearr_16180[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10548__auto___16185;
        return statearr_16180;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10550__auto__);
    };
  }(c__10548__auto___16185, out));
  return out;
};
cljs.core.async.partition.cljs$lang$maxFixedArity = 3;
cljs.core.async.partition_by = function cljs$core$async$partition_by(var_args) {
  var args16202 = [];
  var len__7211__auto___16276 = arguments.length;
  var i__7212__auto___16277 = 0;
  while (true) {
    if (i__7212__auto___16277 < len__7211__auto___16276) {
      args16202.push(arguments[i__7212__auto___16277]);
      var G__16278 = i__7212__auto___16277 + 1;
      i__7212__auto___16277 = G__16278;
      continue;
    } else {
    }
    break;
  }
  var G__16204 = args16202.length;
  switch(G__16204) {
    case 2:
      return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args16202.length)].join(""));;
  }
};
cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, ch) {
  return cljs.core.async.partition_by.call(null, f, ch, null);
};
cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3 = function(f, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__10548__auto___16280 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10548__auto___16280, out) {
    return function() {
      var f__10549__auto__ = function() {
        var switch__10483__auto__ = function(c__10548__auto___16280, out) {
          return function(state_16246) {
            var state_val_16247 = state_16246[1];
            if (state_val_16247 === 7) {
              var inst_16242 = state_16246[2];
              var state_16246__$1 = state_16246;
              var statearr_16248_16281 = state_16246__$1;
              statearr_16248_16281[2] = inst_16242;
              statearr_16248_16281[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_16247 === 1) {
                var inst_16205 = [];
                var inst_16206 = inst_16205;
                var inst_16207 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123);
                var state_16246__$1 = function() {
                  var statearr_16249 = state_16246;
                  statearr_16249[7] = inst_16206;
                  statearr_16249[8] = inst_16207;
                  return statearr_16249;
                }();
                var statearr_16250_16282 = state_16246__$1;
                statearr_16250_16282[2] = null;
                statearr_16250_16282[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_16247 === 4) {
                  var inst_16210 = state_16246[9];
                  var inst_16210__$1 = state_16246[2];
                  var inst_16211 = inst_16210__$1 == null;
                  var inst_16212 = cljs.core.not.call(null, inst_16211);
                  var state_16246__$1 = function() {
                    var statearr_16251 = state_16246;
                    statearr_16251[9] = inst_16210__$1;
                    return statearr_16251;
                  }();
                  if (inst_16212) {
                    var statearr_16252_16283 = state_16246__$1;
                    statearr_16252_16283[1] = 5;
                  } else {
                    var statearr_16253_16284 = state_16246__$1;
                    statearr_16253_16284[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_16247 === 15) {
                    var inst_16236 = state_16246[2];
                    var state_16246__$1 = state_16246;
                    var statearr_16254_16285 = state_16246__$1;
                    statearr_16254_16285[2] = inst_16236;
                    statearr_16254_16285[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_16247 === 13) {
                      var state_16246__$1 = state_16246;
                      var statearr_16255_16286 = state_16246__$1;
                      statearr_16255_16286[2] = null;
                      statearr_16255_16286[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_16247 === 6) {
                        var inst_16206 = state_16246[7];
                        var inst_16231 = inst_16206.length;
                        var inst_16232 = inst_16231 > 0;
                        var state_16246__$1 = state_16246;
                        if (cljs.core.truth_(inst_16232)) {
                          var statearr_16256_16287 = state_16246__$1;
                          statearr_16256_16287[1] = 12;
                        } else {
                          var statearr_16257_16288 = state_16246__$1;
                          statearr_16257_16288[1] = 13;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_16247 === 3) {
                          var inst_16244 = state_16246[2];
                          var state_16246__$1 = state_16246;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16246__$1, inst_16244);
                        } else {
                          if (state_val_16247 === 12) {
                            var inst_16206 = state_16246[7];
                            var inst_16234 = cljs.core.vec.call(null, inst_16206);
                            var state_16246__$1 = state_16246;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16246__$1, 15, out, inst_16234);
                          } else {
                            if (state_val_16247 === 2) {
                              var state_16246__$1 = state_16246;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16246__$1, 4, ch);
                            } else {
                              if (state_val_16247 === 11) {
                                var inst_16214 = state_16246[10];
                                var inst_16210 = state_16246[9];
                                var inst_16224 = state_16246[2];
                                var inst_16225 = [];
                                var inst_16226 = inst_16225.push(inst_16210);
                                var inst_16206 = inst_16225;
                                var inst_16207 = inst_16214;
                                var state_16246__$1 = function() {
                                  var statearr_16258 = state_16246;
                                  statearr_16258[7] = inst_16206;
                                  statearr_16258[8] = inst_16207;
                                  statearr_16258[11] = inst_16224;
                                  statearr_16258[12] = inst_16226;
                                  return statearr_16258;
                                }();
                                var statearr_16259_16289 = state_16246__$1;
                                statearr_16259_16289[2] = null;
                                statearr_16259_16289[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_16247 === 9) {
                                  var inst_16206 = state_16246[7];
                                  var inst_16222 = cljs.core.vec.call(null, inst_16206);
                                  var state_16246__$1 = state_16246;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16246__$1, 11, out, inst_16222);
                                } else {
                                  if (state_val_16247 === 5) {
                                    var inst_16207 = state_16246[8];
                                    var inst_16214 = state_16246[10];
                                    var inst_16210 = state_16246[9];
                                    var inst_16214__$1 = f.call(null, inst_16210);
                                    var inst_16215 = cljs.core._EQ_.call(null, inst_16214__$1, inst_16207);
                                    var inst_16216 = cljs.core.keyword_identical_QMARK_.call(null, inst_16207, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123));
                                    var inst_16217 = inst_16215 || inst_16216;
                                    var state_16246__$1 = function() {
                                      var statearr_16260 = state_16246;
                                      statearr_16260[10] = inst_16214__$1;
                                      return statearr_16260;
                                    }();
                                    if (cljs.core.truth_(inst_16217)) {
                                      var statearr_16261_16290 = state_16246__$1;
                                      statearr_16261_16290[1] = 8;
                                    } else {
                                      var statearr_16262_16291 = state_16246__$1;
                                      statearr_16262_16291[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_16247 === 14) {
                                      var inst_16239 = state_16246[2];
                                      var inst_16240 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_16246__$1 = function() {
                                        var statearr_16264 = state_16246;
                                        statearr_16264[13] = inst_16239;
                                        return statearr_16264;
                                      }();
                                      var statearr_16265_16292 = state_16246__$1;
                                      statearr_16265_16292[2] = inst_16240;
                                      statearr_16265_16292[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_16247 === 10) {
                                        var inst_16229 = state_16246[2];
                                        var state_16246__$1 = state_16246;
                                        var statearr_16266_16293 = state_16246__$1;
                                        statearr_16266_16293[2] = inst_16229;
                                        statearr_16266_16293[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_16247 === 8) {
                                          var inst_16206 = state_16246[7];
                                          var inst_16214 = state_16246[10];
                                          var inst_16210 = state_16246[9];
                                          var inst_16219 = inst_16206.push(inst_16210);
                                          var tmp16263 = inst_16206;
                                          var inst_16206__$1 = tmp16263;
                                          var inst_16207 = inst_16214;
                                          var state_16246__$1 = function() {
                                            var statearr_16267 = state_16246;
                                            statearr_16267[14] = inst_16219;
                                            statearr_16267[7] = inst_16206__$1;
                                            statearr_16267[8] = inst_16207;
                                            return statearr_16267;
                                          }();
                                          var statearr_16268_16294 = state_16246__$1;
                                          statearr_16268_16294[2] = null;
                                          statearr_16268_16294[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__10548__auto___16280, out);
        return function(switch__10483__auto__, c__10548__auto___16280, out) {
          return function() {
            var cljs$core$async$state_machine__10484__auto__ = null;
            var cljs$core$async$state_machine__10484__auto____0 = function() {
              var statearr_16272 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_16272[0] = cljs$core$async$state_machine__10484__auto__;
              statearr_16272[1] = 1;
              return statearr_16272;
            };
            var cljs$core$async$state_machine__10484__auto____1 = function(state_16246) {
              while (true) {
                var ret_value__10485__auto__ = function() {
                  try {
                    while (true) {
                      var result__10486__auto__ = switch__10483__auto__.call(null, state_16246);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10486__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__10486__auto__;
                      }
                      break;
                    }
                  } catch (e16273) {
                    if (e16273 instanceof Object) {
                      var ex__10487__auto__ = e16273;
                      var statearr_16274_16295 = state_16246;
                      statearr_16274_16295[5] = ex__10487__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16246);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e16273;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10485__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__16296 = state_16246;
                  state_16246 = G__16296;
                  continue;
                } else {
                  return ret_value__10485__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__10484__auto__ = function(state_16246) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__10484__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__10484__auto____1.call(this, state_16246);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__10484__auto____0;
            cljs$core$async$state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__10484__auto____1;
            return cljs$core$async$state_machine__10484__auto__;
          }();
        }(switch__10483__auto__, c__10548__auto___16280, out);
      }();
      var state__10550__auto__ = function() {
        var statearr_16275 = f__10549__auto__.call(null);
        statearr_16275[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10548__auto___16280;
        return statearr_16275;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10550__auto__);
    };
  }(c__10548__auto___16280, out));
  return out;
};
cljs.core.async.partition_by.cljs$lang$maxFixedArity = 3;
goog.provide("cljs_http.core");
goog.require("cljs.core");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("cljs.core.async");
goog.require("cljs_http.util");
goog.require("goog.net.Jsonp");
goog.require("clojure.string");
goog.require("goog.net.XhrIo");
cljs_http.core.pending_requests = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
cljs_http.core.abort_BANG_ = function cljs_http$core$abort_BANG_(channel) {
  var temp__4657__auto__ = cljs.core.deref.call(null, cljs_http.core.pending_requests).call(null, channel);
  if (cljs.core.truth_(temp__4657__auto__)) {
    var req = temp__4657__auto__;
    cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.dissoc, channel);
    cljs.core.async.close_BANG_.call(null, channel);
    if (cljs.core.truth_(req.hasOwnProperty("abort"))) {
      return req.abort();
    } else {
      return (new cljs.core.Keyword(null, "jsonp", "jsonp", 226119588)).cljs$core$IFn$_invoke$arity$1(req).cancel((new cljs.core.Keyword(null, "request", "request", 1772954723)).cljs$core$IFn$_invoke$arity$1(req));
    }
  } else {
    return null;
  }
};
cljs_http.core.aborted_QMARK_ = function cljs_http$core$aborted_QMARK_(xhr) {
  return cljs.core._EQ_.call(null, xhr.getLastErrorCode(), goog.net.ErrorCode.ABORT);
};
cljs_http.core.apply_default_headers_BANG_ = function cljs_http$core$apply_default_headers_BANG_(xhr, headers) {
  var formatted_h = cljs.core.zipmap.call(null, cljs.core.map.call(null, cljs_http.util.camelize, cljs.core.keys.call(null, headers)), cljs.core.vals.call(null, headers));
  return cljs.core.dorun.call(null, cljs.core.map.call(null, function(formatted_h) {
    return function(p__16301) {
      var vec__16302 = p__16301;
      var k = cljs.core.nth.call(null, vec__16302, 0, null);
      var v = cljs.core.nth.call(null, vec__16302, 1, null);
      return xhr.headers.set(k, v);
    };
  }(formatted_h), formatted_h));
};
cljs_http.core.apply_response_type_BANG_ = function cljs_http$core$apply_response_type_BANG_(xhr, response_type) {
  return xhr.setResponseType(function() {
    var G__16304 = response_type;
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "array-buffer", "array-buffer", 519008380), G__16304)) {
      return goog.net.XhrIo.ResponseType.ARRAY_BUFFER;
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "blob", "blob", 1636965233), G__16304)) {
        return goog.net.XhrIo.ResponseType.BLOB;
      } else {
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "document", "document", -1329188687), G__16304)) {
          return goog.net.XhrIo.ResponseType.DOCUMENT;
        } else {
          if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "text", "text", -1790561697), G__16304)) {
            return goog.net.XhrIo.ResponseType.TEXT;
          } else {
            if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "default", "default", -1987822328), G__16304)) {
              return goog.net.XhrIo.ResponseType.DEFAULT;
            } else {
              if (cljs.core._EQ_.call(null, null, G__16304)) {
                return goog.net.XhrIo.ResponseType.DEFAULT;
              } else {
                throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(response_type)].join(""));
              }
            }
          }
        }
      }
    }
  }());
};
cljs_http.core.build_xhr = function cljs_http$core$build_xhr(p__16305) {
  var map__16309 = p__16305;
  var map__16309__$1 = (!(map__16309 == null) ? map__16309.cljs$lang$protocol_mask$partition0$ & 64 || map__16309.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16309) : map__16309;
  var request = map__16309__$1;
  var with_credentials_QMARK_ = cljs.core.get.call(null, map__16309__$1, new cljs.core.Keyword(null, "with-credentials?", "with-credentials?", -1773202222));
  var default_headers = cljs.core.get.call(null, map__16309__$1, new cljs.core.Keyword(null, "default-headers", "default-headers", -43146094));
  var response_type = cljs.core.get.call(null, map__16309__$1, new cljs.core.Keyword(null, "response-type", "response-type", -1493770458));
  var timeout = function() {
    var or__6153__auto__ = (new cljs.core.Keyword(null, "timeout", "timeout", -318625318)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(or__6153__auto__)) {
      return or__6153__auto__;
    } else {
      return 0;
    }
  }();
  var send_credentials = with_credentials_QMARK_ == null ? true : with_credentials_QMARK_;
  var G__16311 = new goog.net.XhrIo;
  cljs_http.core.apply_default_headers_BANG_.call(null, G__16311, default_headers);
  cljs_http.core.apply_response_type_BANG_.call(null, G__16311, response_type);
  G__16311.setTimeoutInterval(timeout);
  G__16311.setWithCredentials(send_credentials);
  return G__16311;
};
cljs_http.core.error_kw = cljs.core.PersistentHashMap.fromArrays([0, 7, 1, 4, 6, 3, 2, 9, 5, 8], [new cljs.core.Keyword(null, "no-error", "no-error", 1984610064), new cljs.core.Keyword(null, "abort", "abort", 521193198), new cljs.core.Keyword(null, "access-denied", "access-denied", 959449406), new cljs.core.Keyword(null, "custom-error", "custom-error", -1565161123), new cljs.core.Keyword(null, "http-error", "http-error", -1040049553), new cljs.core.Keyword(null, "ff-silent-error", "ff-silent-error", 
189390514), new cljs.core.Keyword(null, "file-not-found", "file-not-found", -65398940), new cljs.core.Keyword(null, "offline", "offline", -107631935), new cljs.core.Keyword(null, "exception", "exception", -335277064), new cljs.core.Keyword(null, "timeout", "timeout", -318625318)]);
cljs_http.core.xhr = function cljs_http$core$xhr(p__16312) {
  var map__16339 = p__16312;
  var map__16339__$1 = (!(map__16339 == null) ? map__16339.cljs$lang$protocol_mask$partition0$ & 64 || map__16339.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16339) : map__16339;
  var request = map__16339__$1;
  var request_method = cljs.core.get.call(null, map__16339__$1, new cljs.core.Keyword(null, "request-method", "request-method", 1764796830));
  var headers = cljs.core.get.call(null, map__16339__$1, new cljs.core.Keyword(null, "headers", "headers", -835030129));
  var body = cljs.core.get.call(null, map__16339__$1, new cljs.core.Keyword(null, "body", "body", -2049205669));
  var with_credentials_QMARK_ = cljs.core.get.call(null, map__16339__$1, new cljs.core.Keyword(null, "with-credentials?", "with-credentials?", -1773202222));
  var cancel = cljs.core.get.call(null, map__16339__$1, new cljs.core.Keyword(null, "cancel", "cancel", -1964088360));
  var channel = cljs.core.async.chan.call(null);
  var request_url = cljs_http.util.build_url.call(null, request);
  var method = cljs.core.name.call(null, function() {
    var or__6153__auto__ = request_method;
    if (cljs.core.truth_(or__6153__auto__)) {
      return or__6153__auto__;
    } else {
      return new cljs.core.Keyword(null, "get", "get", 1683182755);
    }
  }());
  var headers__$1 = cljs_http.util.build_headers.call(null, headers);
  var xhr__$1 = cljs_http.core.build_xhr.call(null, request);
  cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.assoc, channel, xhr__$1);
  xhr__$1.listen(goog.net.EventType.COMPLETE, function(channel, request_url, method, headers__$1, xhr__$1, map__16339, map__16339__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel) {
    return function(evt) {
      var target = evt.target;
      var response = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "status", "status", -1997798413), target.getStatus(), new cljs.core.Keyword(null, "success", "success", 1890645906), target.isSuccess(), new cljs.core.Keyword(null, "body", "body", -2049205669), target.getResponse(), new cljs.core.Keyword(null, "headers", "headers", -835030129), cljs_http.util.parse_headers.call(null, target.getAllResponseHeaders()), new cljs.core.Keyword(null, "trace-redirects", "trace-redirects", 
      -1149427907), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [request_url, target.getLastUri()], null), new cljs.core.Keyword(null, "error-code", "error-code", 180497232), cljs_http.core.error_kw.call(null, target.getLastErrorCode()), new cljs.core.Keyword(null, "error-text", "error-text", 2021893718), target.getLastError()], null);
      if (cljs.core.not.call(null, cljs_http.core.aborted_QMARK_.call(null, xhr__$1))) {
        cljs.core.async.put_BANG_.call(null, channel, response);
      } else {
      }
      cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.dissoc, channel);
      if (cljs.core.truth_(cancel)) {
        cljs.core.async.close_BANG_.call(null, cancel);
      } else {
      }
      return cljs.core.async.close_BANG_.call(null, channel);
    };
  }(channel, request_url, method, headers__$1, xhr__$1, map__16339, map__16339__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel));
  xhr__$1.send(request_url, method, body, headers__$1);
  if (cljs.core.truth_(cancel)) {
    var c__10548__auto___16365 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__10548__auto___16365, channel, request_url, method, headers__$1, xhr__$1, map__16339, map__16339__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel) {
      return function() {
        var f__10549__auto__ = function() {
          var switch__10483__auto__ = function(c__10548__auto___16365, channel, request_url, method, headers__$1, xhr__$1, map__16339, map__16339__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel) {
            return function(state_16351) {
              var state_val_16352 = state_16351[1];
              if (state_val_16352 === 1) {
                var state_16351__$1 = state_16351;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16351__$1, 2, cancel);
              } else {
                if (state_val_16352 === 2) {
                  var inst_16342 = state_16351[2];
                  var inst_16343 = xhr__$1.isComplete();
                  var inst_16344 = cljs.core.not.call(null, inst_16343);
                  var state_16351__$1 = function() {
                    var statearr_16353 = state_16351;
                    statearr_16353[7] = inst_16342;
                    return statearr_16353;
                  }();
                  if (inst_16344) {
                    var statearr_16354_16366 = state_16351__$1;
                    statearr_16354_16366[1] = 3;
                  } else {
                    var statearr_16355_16367 = state_16351__$1;
                    statearr_16355_16367[1] = 4;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_16352 === 3) {
                    var inst_16346 = xhr__$1.abort();
                    var state_16351__$1 = state_16351;
                    var statearr_16356_16368 = state_16351__$1;
                    statearr_16356_16368[2] = inst_16346;
                    statearr_16356_16368[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_16352 === 4) {
                      var state_16351__$1 = state_16351;
                      var statearr_16357_16369 = state_16351__$1;
                      statearr_16357_16369[2] = null;
                      statearr_16357_16369[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_16352 === 5) {
                        var inst_16349 = state_16351[2];
                        var state_16351__$1 = state_16351;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16351__$1, inst_16349);
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(c__10548__auto___16365, channel, request_url, method, headers__$1, xhr__$1, map__16339, map__16339__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel);
          return function(switch__10483__auto__, c__10548__auto___16365, channel, request_url, method, headers__$1, xhr__$1, map__16339, map__16339__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel) {
            return function() {
              var cljs_http$core$xhr_$_state_machine__10484__auto__ = null;
              var cljs_http$core$xhr_$_state_machine__10484__auto____0 = function() {
                var statearr_16361 = [null, null, null, null, null, null, null, null];
                statearr_16361[0] = cljs_http$core$xhr_$_state_machine__10484__auto__;
                statearr_16361[1] = 1;
                return statearr_16361;
              };
              var cljs_http$core$xhr_$_state_machine__10484__auto____1 = function(state_16351) {
                while (true) {
                  var ret_value__10485__auto__ = function() {
                    try {
                      while (true) {
                        var result__10486__auto__ = switch__10483__auto__.call(null, state_16351);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__10486__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__10486__auto__;
                        }
                        break;
                      }
                    } catch (e16362) {
                      if (e16362 instanceof Object) {
                        var ex__10487__auto__ = e16362;
                        var statearr_16363_16370 = state_16351;
                        statearr_16363_16370[5] = ex__10487__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16351);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e16362;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10485__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__16371 = state_16351;
                    state_16351 = G__16371;
                    continue;
                  } else {
                    return ret_value__10485__auto__;
                  }
                  break;
                }
              };
              cljs_http$core$xhr_$_state_machine__10484__auto__ = function(state_16351) {
                switch(arguments.length) {
                  case 0:
                    return cljs_http$core$xhr_$_state_machine__10484__auto____0.call(this);
                  case 1:
                    return cljs_http$core$xhr_$_state_machine__10484__auto____1.call(this, state_16351);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs_http$core$xhr_$_state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$0 = cljs_http$core$xhr_$_state_machine__10484__auto____0;
              cljs_http$core$xhr_$_state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$1 = cljs_http$core$xhr_$_state_machine__10484__auto____1;
              return cljs_http$core$xhr_$_state_machine__10484__auto__;
            }();
          }(switch__10483__auto__, c__10548__auto___16365, channel, request_url, method, headers__$1, xhr__$1, map__16339, map__16339__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel);
        }();
        var state__10550__auto__ = function() {
          var statearr_16364 = f__10549__auto__.call(null);
          statearr_16364[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10548__auto___16365;
          return statearr_16364;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10550__auto__);
      };
    }(c__10548__auto___16365, channel, request_url, method, headers__$1, xhr__$1, map__16339, map__16339__$1, request, request_method, headers, body, with_credentials_QMARK_, cancel));
  } else {
  }
  return channel;
};
cljs_http.core.jsonp = function cljs_http$core$jsonp(p__16372) {
  var map__16389 = p__16372;
  var map__16389__$1 = (!(map__16389 == null) ? map__16389.cljs$lang$protocol_mask$partition0$ & 64 || map__16389.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16389) : map__16389;
  var request = map__16389__$1;
  var timeout = cljs.core.get.call(null, map__16389__$1, new cljs.core.Keyword(null, "timeout", "timeout", -318625318));
  var callback_name = cljs.core.get.call(null, map__16389__$1, new cljs.core.Keyword(null, "callback-name", "callback-name", 336964714));
  var cancel = cljs.core.get.call(null, map__16389__$1, new cljs.core.Keyword(null, "cancel", "cancel", -1964088360));
  var keywordize_keys_QMARK_ = cljs.core.get.call(null, map__16389__$1, new cljs.core.Keyword(null, "keywordize-keys?", "keywordize-keys?", -254545987), true);
  var channel = cljs.core.async.chan.call(null);
  var jsonp__$1 = new goog.net.Jsonp(cljs_http.util.build_url.call(null, request), callback_name);
  jsonp__$1.setRequestTimeout(timeout);
  var req_16405 = jsonp__$1.send(null, function(channel, jsonp__$1, map__16389, map__16389__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_) {
    return function cljs_http$core$jsonp_$_success_callback(data) {
      var response = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", -1997798413), 200, new cljs.core.Keyword(null, "success", "success", 1890645906), true, new cljs.core.Keyword(null, "body", "body", -2049205669), cljs.core.js__GT_clj.call(null, data, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywordize_keys_QMARK_)], null);
      cljs.core.async.put_BANG_.call(null, channel, response);
      cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.dissoc, channel);
      if (cljs.core.truth_(cancel)) {
        cljs.core.async.close_BANG_.call(null, cancel);
      } else {
      }
      return cljs.core.async.close_BANG_.call(null, channel);
    };
  }(channel, jsonp__$1, map__16389, map__16389__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_), function(channel, jsonp__$1, map__16389, map__16389__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_) {
    return function cljs_http$core$jsonp_$_error_callback() {
      cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.dissoc, channel);
      if (cljs.core.truth_(cancel)) {
        cljs.core.async.close_BANG_.call(null, cancel);
      } else {
      }
      return cljs.core.async.close_BANG_.call(null, channel);
    };
  }(channel, jsonp__$1, map__16389, map__16389__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_));
  cljs.core.swap_BANG_.call(null, cljs_http.core.pending_requests, cljs.core.assoc, channel, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "jsonp", "jsonp", 226119588), jsonp__$1, new cljs.core.Keyword(null, "request", "request", 1772954723), req_16405], null));
  if (cljs.core.truth_(cancel)) {
    var c__10548__auto___16406 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__10548__auto___16406, req_16405, channel, jsonp__$1, map__16389, map__16389__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_) {
      return function() {
        var f__10549__auto__ = function() {
          var switch__10483__auto__ = function(c__10548__auto___16406, req_16405, channel, jsonp__$1, map__16389, map__16389__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_) {
            return function(state_16395) {
              var state_val_16396 = state_16395[1];
              if (state_val_16396 === 1) {
                var state_16395__$1 = state_16395;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16395__$1, 2, cancel);
              } else {
                if (state_val_16396 === 2) {
                  var inst_16392 = state_16395[2];
                  var inst_16393 = jsonp__$1.cancel(req_16405);
                  var state_16395__$1 = function() {
                    var statearr_16397 = state_16395;
                    statearr_16397[7] = inst_16392;
                    return statearr_16397;
                  }();
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16395__$1, inst_16393);
                } else {
                  return null;
                }
              }
            };
          }(c__10548__auto___16406, req_16405, channel, jsonp__$1, map__16389, map__16389__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_);
          return function(switch__10483__auto__, c__10548__auto___16406, req_16405, channel, jsonp__$1, map__16389, map__16389__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_) {
            return function() {
              var cljs_http$core$jsonp_$_state_machine__10484__auto__ = null;
              var cljs_http$core$jsonp_$_state_machine__10484__auto____0 = function() {
                var statearr_16401 = [null, null, null, null, null, null, null, null];
                statearr_16401[0] = cljs_http$core$jsonp_$_state_machine__10484__auto__;
                statearr_16401[1] = 1;
                return statearr_16401;
              };
              var cljs_http$core$jsonp_$_state_machine__10484__auto____1 = function(state_16395) {
                while (true) {
                  var ret_value__10485__auto__ = function() {
                    try {
                      while (true) {
                        var result__10486__auto__ = switch__10483__auto__.call(null, state_16395);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__10486__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__10486__auto__;
                        }
                        break;
                      }
                    } catch (e16402) {
                      if (e16402 instanceof Object) {
                        var ex__10487__auto__ = e16402;
                        var statearr_16403_16407 = state_16395;
                        statearr_16403_16407[5] = ex__10487__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16395);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e16402;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10485__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__16408 = state_16395;
                    state_16395 = G__16408;
                    continue;
                  } else {
                    return ret_value__10485__auto__;
                  }
                  break;
                }
              };
              cljs_http$core$jsonp_$_state_machine__10484__auto__ = function(state_16395) {
                switch(arguments.length) {
                  case 0:
                    return cljs_http$core$jsonp_$_state_machine__10484__auto____0.call(this);
                  case 1:
                    return cljs_http$core$jsonp_$_state_machine__10484__auto____1.call(this, state_16395);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              cljs_http$core$jsonp_$_state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$0 = cljs_http$core$jsonp_$_state_machine__10484__auto____0;
              cljs_http$core$jsonp_$_state_machine__10484__auto__.cljs$core$IFn$_invoke$arity$1 = cljs_http$core$jsonp_$_state_machine__10484__auto____1;
              return cljs_http$core$jsonp_$_state_machine__10484__auto__;
            }();
          }(switch__10483__auto__, c__10548__auto___16406, req_16405, channel, jsonp__$1, map__16389, map__16389__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_);
        }();
        var state__10550__auto__ = function() {
          var statearr_16404 = f__10549__auto__.call(null);
          statearr_16404[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10548__auto___16406;
          return statearr_16404;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10550__auto__);
      };
    }(c__10548__auto___16406, req_16405, channel, jsonp__$1, map__16389, map__16389__$1, request, timeout, callback_name, cancel, keywordize_keys_QMARK_));
  } else {
  }
  return channel;
};
cljs_http.core.request = function cljs_http$core$request(p__16409) {
  var map__16412 = p__16409;
  var map__16412__$1 = (!(map__16412 == null) ? map__16412.cljs$lang$protocol_mask$partition0$ & 64 || map__16412.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16412) : map__16412;
  var request__$1 = map__16412__$1;
  var request_method = cljs.core.get.call(null, map__16412__$1, new cljs.core.Keyword(null, "request-method", "request-method", 1764796830));
  if (cljs.core._EQ_.call(null, request_method, new cljs.core.Keyword(null, "jsonp", "jsonp", 226119588))) {
    return cljs_http.core.jsonp.call(null, request__$1);
  } else {
    return cljs_http.core.xhr.call(null, request__$1);
  }
};
goog.provide("cljs_http.client");
goog.require("cljs.core");
goog.require("goog.Uri");
goog.require("cljs_http.core");
goog.require("cljs.core.async");
goog.require("no.en.core");
goog.require("cljs_http.util");
goog.require("clojure.string");
goog.require("cljs.reader");
cljs_http.client.if_pos = function cljs_http$client$if_pos(v) {
  if (cljs.core.truth_(function() {
    var and__6141__auto__ = v;
    if (cljs.core.truth_(and__6141__auto__)) {
      return v > 0;
    } else {
      return and__6141__auto__;
    }
  }())) {
    return v;
  } else {
    return null;
  }
};
cljs_http.client.parse_query_params = function cljs_http$client$parse_query_params(s) {
  if (!clojure.string.blank_QMARK_.call(null, s)) {
    return cljs.core.reduce.call(null, function(p1__16417_SHARP_, p2__16416_SHARP_) {
      var vec__16419 = clojure.string.split.call(null, p2__16416_SHARP_, /=/);
      var k = cljs.core.nth.call(null, vec__16419, 0, null);
      var v = cljs.core.nth.call(null, vec__16419, 1, null);
      return cljs.core.assoc.call(null, p1__16417_SHARP_, cljs.core.keyword.call(null, no.en.core.url_decode.call(null, k)), no.en.core.url_decode.call(null, v));
    }, cljs.core.PersistentArrayMap.EMPTY, clojure.string.split.call(null, [cljs.core.str(s)].join(""), /&/));
  } else {
    return null;
  }
};
cljs_http.client.parse_url = function cljs_http$client$parse_url(url) {
  if (!clojure.string.blank_QMARK_.call(null, url)) {
    var uri = goog.Uri.parse(url);
    var query_data = uri.getQueryData();
    return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "scheme", "scheme", 90199613), cljs.core.keyword.call(null, uri.getScheme()), new cljs.core.Keyword(null, "server-name", "server-name", -1012104295), uri.getDomain(), new cljs.core.Keyword(null, "server-port", "server-port", 663745648), cljs_http.client.if_pos.call(null, uri.getPort()), new cljs.core.Keyword(null, "uri", "uri", -774711847), uri.getPath(), new cljs.core.Keyword(null, "query-string", "query-string", -1018845061), 
    cljs.core.not.call(null, query_data.isEmpty()) ? [cljs.core.str(query_data)].join("") : null, new cljs.core.Keyword(null, "query-params", "query-params", 900640534), cljs.core.not.call(null, query_data.isEmpty()) ? cljs_http.client.parse_query_params.call(null, [cljs.core.str(query_data)].join("")) : null], null);
  } else {
    return null;
  }
};
cljs_http.client.unexceptional_status_QMARK_ = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [205, null, 206, null, 300, null, 204, null, 307, null, 303, null, 301, null, 201, null, 302, null, 202, null, 200, null, 203, null, 207, null], null), null);
cljs_http.client.encode_val = function cljs_http$client$encode_val(k, v) {
  return [cljs.core.str(no.en.core.url_encode.call(null, cljs.core.name.call(null, k))), cljs.core.str("\x3d"), cljs.core.str(no.en.core.url_encode.call(null, [cljs.core.str(v)].join("")))].join("");
};
cljs_http.client.encode_vals = function cljs_http$client$encode_vals(k, vs) {
  return clojure.string.join.call(null, "\x26", cljs.core.map.call(null, function(p1__16420_SHARP_) {
    return cljs_http.client.encode_val.call(null, k, p1__16420_SHARP_);
  }, vs));
};
cljs_http.client.encode_param = function cljs_http$client$encode_param(p__16421) {
  var vec__16423 = p__16421;
  var k = cljs.core.nth.call(null, vec__16423, 0, null);
  var v = cljs.core.nth.call(null, vec__16423, 1, null);
  if (cljs.core.coll_QMARK_.call(null, v)) {
    return cljs_http.client.encode_vals.call(null, k, v);
  } else {
    return cljs_http.client.encode_val.call(null, k, v);
  }
};
cljs_http.client.generate_query_string = function cljs_http$client$generate_query_string(params) {
  return clojure.string.join.call(null, "\x26", cljs.core.map.call(null, cljs_http.client.encode_param, params));
};
cljs_http.client.regex_char_esc_smap = function() {
  var esc_chars = "()*\x26^%$#!+";
  return cljs.core.zipmap.call(null, esc_chars, cljs.core.map.call(null, function(esc_chars) {
    return function(p1__16424_SHARP_) {
      return [cljs.core.str("\\"), cljs.core.str(p1__16424_SHARP_)].join("");
    };
  }(esc_chars), esc_chars));
}();
cljs_http.client.escape_special = function cljs_http$client$escape_special(string) {
  return cljs.core.reduce.call(null, cljs.core.str, cljs.core.replace.call(null, cljs_http.client.regex_char_esc_smap, string));
};
cljs_http.client.decode_body = function cljs_http$client$decode_body(response, decode_fn, content_type, request_method) {
  if (cljs.core.truth_(function() {
    var and__6141__auto__ = cljs.core.not_EQ_.call(null, new cljs.core.Keyword(null, "head", "head", -771383919), request_method);
    if (and__6141__auto__) {
      var and__6141__auto____$1 = cljs.core.not_EQ_.call(null, 204, (new cljs.core.Keyword(null, "status", "status", -1997798413)).cljs$core$IFn$_invoke$arity$1(response));
      if (and__6141__auto____$1) {
        return cljs.core.re_find.call(null, cljs.core.re_pattern.call(null, [cljs.core.str("(?i)"), cljs.core.str(cljs_http.client.escape_special.call(null, content_type))].join("")), [cljs.core.str(cljs.core.get.call(null, (new cljs.core.Keyword(null, "headers", "headers", -835030129)).cljs$core$IFn$_invoke$arity$1(response), "content-type", ""))].join(""));
      } else {
        return and__6141__auto____$1;
      }
    } else {
      return and__6141__auto__;
    }
  }())) {
    return cljs.core.update_in.call(null, response, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "body", "body", -2049205669)], null), decode_fn);
  } else {
    return response;
  }
};
cljs_http.client.wrap_edn_params = function cljs_http$client$wrap_edn_params(client) {
  return function(request) {
    var temp__4655__auto__ = (new cljs.core.Keyword(null, "edn-params", "edn-params", 894273052)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var params = temp__4655__auto__;
      var headers = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, ["content-type", "application/edn"], null), (new cljs.core.Keyword(null, "headers", "headers", -835030129)).cljs$core$IFn$_invoke$arity$1(request));
      return client.call(null, cljs.core.assoc.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "edn-params", "edn-params", 894273052)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs.core.pr_str.call(null, params)), new cljs.core.Keyword(null, "headers", "headers", -835030129), headers));
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_edn_response = function cljs_http$client$wrap_edn_response(client) {
  return function(request) {
    return cljs.core.async.map.call(null, function(p1__16425_SHARP_) {
      return cljs_http.client.decode_body.call(null, p1__16425_SHARP_, cljs.reader.read_string, "application/edn", (new cljs.core.Keyword(null, "request-method", "request-method", 1764796830)).cljs$core$IFn$_invoke$arity$1(request));
    }, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [client.call(null, request)], null));
  };
};
cljs_http.client.wrap_default_headers = function cljs_http$client$wrap_default_headers(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___16430 = arguments.length;
  var i__7212__auto___16431 = 0;
  while (true) {
    if (i__7212__auto___16431 < len__7211__auto___16430) {
      args__7218__auto__.push(arguments[i__7212__auto___16431]);
      var G__16432 = i__7212__auto___16431 + 1;
      i__7212__auto___16431 = G__16432;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return cljs_http.client.wrap_default_headers.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
cljs_http.client.wrap_default_headers.cljs$core$IFn$_invoke$arity$variadic = function(client, p__16428) {
  var vec__16429 = p__16428;
  var default_headers = cljs.core.nth.call(null, vec__16429, 0, null);
  return function(vec__16429, default_headers) {
    return function(request) {
      var temp__4655__auto__ = function() {
        var or__6153__auto__ = (new cljs.core.Keyword(null, "default-headers", "default-headers", -43146094)).cljs$core$IFn$_invoke$arity$1(request);
        if (cljs.core.truth_(or__6153__auto__)) {
          return or__6153__auto__;
        } else {
          return default_headers;
        }
      }();
      if (cljs.core.truth_(temp__4655__auto__)) {
        var default_headers__$1 = temp__4655__auto__;
        return client.call(null, cljs.core.assoc.call(null, request, new cljs.core.Keyword(null, "default-headers", "default-headers", -43146094), default_headers__$1));
      } else {
        return client.call(null, request);
      }
    };
  }(vec__16429, default_headers);
};
cljs_http.client.wrap_default_headers.cljs$lang$maxFixedArity = 1;
cljs_http.client.wrap_default_headers.cljs$lang$applyTo = function(seq16426) {
  var G__16427 = cljs.core.first.call(null, seq16426);
  var seq16426__$1 = cljs.core.next.call(null, seq16426);
  return cljs_http.client.wrap_default_headers.cljs$core$IFn$_invoke$arity$variadic(G__16427, seq16426__$1);
};
cljs_http.client.wrap_accept = function cljs_http$client$wrap_accept(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___16437 = arguments.length;
  var i__7212__auto___16438 = 0;
  while (true) {
    if (i__7212__auto___16438 < len__7211__auto___16437) {
      args__7218__auto__.push(arguments[i__7212__auto___16438]);
      var G__16439 = i__7212__auto___16438 + 1;
      i__7212__auto___16438 = G__16439;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return cljs_http.client.wrap_accept.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
cljs_http.client.wrap_accept.cljs$core$IFn$_invoke$arity$variadic = function(client, p__16435) {
  var vec__16436 = p__16435;
  var accept = cljs.core.nth.call(null, vec__16436, 0, null);
  return function(vec__16436, accept) {
    return function(request) {
      var temp__4655__auto__ = function() {
        var or__6153__auto__ = (new cljs.core.Keyword(null, "accept", "accept", 1874130431)).cljs$core$IFn$_invoke$arity$1(request);
        if (cljs.core.truth_(or__6153__auto__)) {
          return or__6153__auto__;
        } else {
          return accept;
        }
      }();
      if (cljs.core.truth_(temp__4655__auto__)) {
        var accept__$1 = temp__4655__auto__;
        return client.call(null, cljs.core.assoc_in.call(null, request, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "accept"], null), accept__$1));
      } else {
        return client.call(null, request);
      }
    };
  }(vec__16436, accept);
};
cljs_http.client.wrap_accept.cljs$lang$maxFixedArity = 1;
cljs_http.client.wrap_accept.cljs$lang$applyTo = function(seq16433) {
  var G__16434 = cljs.core.first.call(null, seq16433);
  var seq16433__$1 = cljs.core.next.call(null, seq16433);
  return cljs_http.client.wrap_accept.cljs$core$IFn$_invoke$arity$variadic(G__16434, seq16433__$1);
};
cljs_http.client.wrap_content_type = function cljs_http$client$wrap_content_type(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___16444 = arguments.length;
  var i__7212__auto___16445 = 0;
  while (true) {
    if (i__7212__auto___16445 < len__7211__auto___16444) {
      args__7218__auto__.push(arguments[i__7212__auto___16445]);
      var G__16446 = i__7212__auto___16445 + 1;
      i__7212__auto___16445 = G__16446;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return cljs_http.client.wrap_content_type.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
cljs_http.client.wrap_content_type.cljs$core$IFn$_invoke$arity$variadic = function(client, p__16442) {
  var vec__16443 = p__16442;
  var content_type = cljs.core.nth.call(null, vec__16443, 0, null);
  return function(vec__16443, content_type) {
    return function(request) {
      var temp__4655__auto__ = function() {
        var or__6153__auto__ = (new cljs.core.Keyword(null, "content-type", "content-type", -508222634)).cljs$core$IFn$_invoke$arity$1(request);
        if (cljs.core.truth_(or__6153__auto__)) {
          return or__6153__auto__;
        } else {
          return content_type;
        }
      }();
      if (cljs.core.truth_(temp__4655__auto__)) {
        var content_type__$1 = temp__4655__auto__;
        return client.call(null, cljs.core.assoc_in.call(null, request, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "content-type"], null), content_type__$1));
      } else {
        return client.call(null, request);
      }
    };
  }(vec__16443, content_type);
};
cljs_http.client.wrap_content_type.cljs$lang$maxFixedArity = 1;
cljs_http.client.wrap_content_type.cljs$lang$applyTo = function(seq16440) {
  var G__16441 = cljs.core.first.call(null, seq16440);
  var seq16440__$1 = cljs.core.next.call(null, seq16440);
  return cljs_http.client.wrap_content_type.cljs$core$IFn$_invoke$arity$variadic(G__16441, seq16440__$1);
};
cljs_http.client.default_transit_opts = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "encoding", "encoding", 1728578272), new cljs.core.Keyword(null, "json", "json", 1279968570), new cljs.core.Keyword(null, "encoding-opts", "encoding-opts", -1805664631), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "decoding", "decoding", -568180903), new cljs.core.Keyword(null, "json", "json", 1279968570), new cljs.core.Keyword(null, "decoding-opts", "decoding-opts", 
1050289140), cljs.core.PersistentArrayMap.EMPTY], null);
cljs_http.client.wrap_transit_params = function cljs_http$client$wrap_transit_params(client) {
  return function(request) {
    var temp__4655__auto__ = (new cljs.core.Keyword(null, "transit-params", "transit-params", 357261095)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var params = temp__4655__auto__;
      var map__16449 = cljs.core.merge.call(null, cljs_http.client.default_transit_opts, (new cljs.core.Keyword(null, "transit-opts", "transit-opts", 1104386010)).cljs$core$IFn$_invoke$arity$1(request));
      var map__16449__$1 = (!(map__16449 == null) ? map__16449.cljs$lang$protocol_mask$partition0$ & 64 || map__16449.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16449) : map__16449;
      var encoding = cljs.core.get.call(null, map__16449__$1, new cljs.core.Keyword(null, "encoding", "encoding", 1728578272));
      var encoding_opts = cljs.core.get.call(null, map__16449__$1, new cljs.core.Keyword(null, "encoding-opts", "encoding-opts", -1805664631));
      var headers = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, ["content-type", "application/transit+json"], null), (new cljs.core.Keyword(null, "headers", "headers", -835030129)).cljs$core$IFn$_invoke$arity$1(request));
      return client.call(null, cljs.core.assoc.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "transit-params", "transit-params", 357261095)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs_http.util.transit_encode.call(null, params, encoding, encoding_opts)), new cljs.core.Keyword(null, "headers", "headers", -835030129), headers));
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_transit_response = function cljs_http$client$wrap_transit_response(client) {
  return function(request) {
    var map__16455 = cljs.core.merge.call(null, cljs_http.client.default_transit_opts, (new cljs.core.Keyword(null, "transit-opts", "transit-opts", 1104386010)).cljs$core$IFn$_invoke$arity$1(request));
    var map__16455__$1 = (!(map__16455 == null) ? map__16455.cljs$lang$protocol_mask$partition0$ & 64 || map__16455.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16455) : map__16455;
    var decoding = cljs.core.get.call(null, map__16455__$1, new cljs.core.Keyword(null, "decoding", "decoding", -568180903));
    var decoding_opts = cljs.core.get.call(null, map__16455__$1, new cljs.core.Keyword(null, "decoding-opts", "decoding-opts", 1050289140));
    var transit_decode = function(map__16455, map__16455__$1, decoding, decoding_opts) {
      return function(p1__16451_SHARP_) {
        return cljs_http.util.transit_decode.call(null, p1__16451_SHARP_, decoding, decoding_opts);
      };
    }(map__16455, map__16455__$1, decoding, decoding_opts);
    return cljs.core.async.map.call(null, function(map__16455, map__16455__$1, decoding, decoding_opts, transit_decode) {
      return function(p1__16452_SHARP_) {
        return cljs_http.client.decode_body.call(null, p1__16452_SHARP_, transit_decode, "application/transit+json", (new cljs.core.Keyword(null, "request-method", "request-method", 1764796830)).cljs$core$IFn$_invoke$arity$1(request));
      };
    }(map__16455, map__16455__$1, decoding, decoding_opts, transit_decode), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [client.call(null, request)], null));
  };
};
cljs_http.client.wrap_json_params = function cljs_http$client$wrap_json_params(client) {
  return function(request) {
    var temp__4655__auto__ = (new cljs.core.Keyword(null, "json-params", "json-params", -1112693596)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var params = temp__4655__auto__;
      var headers = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, ["content-type", "application/json"], null), (new cljs.core.Keyword(null, "headers", "headers", -835030129)).cljs$core$IFn$_invoke$arity$1(request));
      return client.call(null, cljs.core.assoc.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "json-params", "json-params", -1112693596)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs_http.util.json_encode.call(null, params)), new cljs.core.Keyword(null, "headers", "headers", -835030129), headers));
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_json_response = function cljs_http$client$wrap_json_response(client) {
  return function(request) {
    return cljs.core.async.map.call(null, function(p1__16457_SHARP_) {
      return cljs_http.client.decode_body.call(null, p1__16457_SHARP_, cljs_http.util.json_decode, "application/json", (new cljs.core.Keyword(null, "request-method", "request-method", 1764796830)).cljs$core$IFn$_invoke$arity$1(request));
    }, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [client.call(null, request)], null));
  };
};
cljs_http.client.wrap_query_params = function cljs_http$client$wrap_query_params(client) {
  return function(p__16461) {
    var map__16462 = p__16461;
    var map__16462__$1 = (!(map__16462 == null) ? map__16462.cljs$lang$protocol_mask$partition0$ & 64 || map__16462.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16462) : map__16462;
    var req = map__16462__$1;
    var query_params = cljs.core.get.call(null, map__16462__$1, new cljs.core.Keyword(null, "query-params", "query-params", 900640534));
    if (cljs.core.truth_(query_params)) {
      return client.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, req, new cljs.core.Keyword(null, "query-params", "query-params", 900640534)), new cljs.core.Keyword(null, "query-string", "query-string", -1018845061), cljs_http.client.generate_query_string.call(null, query_params)));
    } else {
      return client.call(null, req);
    }
  };
};
cljs_http.client.wrap_form_params = function cljs_http$client$wrap_form_params(client) {
  return function(p__16467) {
    var map__16468 = p__16467;
    var map__16468__$1 = (!(map__16468 == null) ? map__16468.cljs$lang$protocol_mask$partition0$ & 64 || map__16468.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16468) : map__16468;
    var request = map__16468__$1;
    var form_params = cljs.core.get.call(null, map__16468__$1, new cljs.core.Keyword(null, "form-params", "form-params", 1884296467));
    var request_method = cljs.core.get.call(null, map__16468__$1, new cljs.core.Keyword(null, "request-method", "request-method", 1764796830));
    var headers = cljs.core.get.call(null, map__16468__$1, new cljs.core.Keyword(null, "headers", "headers", -835030129));
    if (cljs.core.truth_(function() {
      var and__6141__auto__ = form_params;
      if (cljs.core.truth_(and__6141__auto__)) {
        return (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "patch", "patch", 380775109), null, new cljs.core.Keyword(null, "delete", "delete", -1768633620), null, new cljs.core.Keyword(null, "post", "post", 269697687), null, new cljs.core.Keyword(null, "put", "put", 1299772570), null], null), null)).call(null, request_method);
      } else {
        return and__6141__auto__;
      }
    }())) {
      var headers__$1 = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, ["content-type", "application/x-www-form-urlencoded"], null), headers);
      return client.call(null, cljs.core.assoc.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "form-params", "form-params", 1884296467)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs_http.client.generate_query_string.call(null, form_params)), new cljs.core.Keyword(null, "headers", "headers", -835030129), headers__$1));
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.generate_form_data = function cljs_http$client$generate_form_data(params) {
  var form_data = new FormData;
  var seq__16476_16482 = cljs.core.seq.call(null, params);
  var chunk__16477_16483 = null;
  var count__16478_16484 = 0;
  var i__16479_16485 = 0;
  while (true) {
    if (i__16479_16485 < count__16478_16484) {
      var vec__16480_16486 = cljs.core._nth.call(null, chunk__16477_16483, i__16479_16485);
      var k_16487 = cljs.core.nth.call(null, vec__16480_16486, 0, null);
      var v_16488 = cljs.core.nth.call(null, vec__16480_16486, 1, null);
      if (cljs.core.coll_QMARK_.call(null, v_16488)) {
        form_data.append(cljs.core.name.call(null, k_16487), cljs.core.first.call(null, v_16488), cljs.core.second.call(null, v_16488));
      } else {
        form_data.append(cljs.core.name.call(null, k_16487), v_16488);
      }
      var G__16489 = seq__16476_16482;
      var G__16490 = chunk__16477_16483;
      var G__16491 = count__16478_16484;
      var G__16492 = i__16479_16485 + 1;
      seq__16476_16482 = G__16489;
      chunk__16477_16483 = G__16490;
      count__16478_16484 = G__16491;
      i__16479_16485 = G__16492;
      continue;
    } else {
      var temp__4657__auto___16493 = cljs.core.seq.call(null, seq__16476_16482);
      if (temp__4657__auto___16493) {
        var seq__16476_16494__$1 = temp__4657__auto___16493;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16476_16494__$1)) {
          var c__6956__auto___16495 = cljs.core.chunk_first.call(null, seq__16476_16494__$1);
          var G__16496 = cljs.core.chunk_rest.call(null, seq__16476_16494__$1);
          var G__16497 = c__6956__auto___16495;
          var G__16498 = cljs.core.count.call(null, c__6956__auto___16495);
          var G__16499 = 0;
          seq__16476_16482 = G__16496;
          chunk__16477_16483 = G__16497;
          count__16478_16484 = G__16498;
          i__16479_16485 = G__16499;
          continue;
        } else {
          var vec__16481_16500 = cljs.core.first.call(null, seq__16476_16494__$1);
          var k_16501 = cljs.core.nth.call(null, vec__16481_16500, 0, null);
          var v_16502 = cljs.core.nth.call(null, vec__16481_16500, 1, null);
          if (cljs.core.coll_QMARK_.call(null, v_16502)) {
            form_data.append(cljs.core.name.call(null, k_16501), cljs.core.first.call(null, v_16502), cljs.core.second.call(null, v_16502));
          } else {
            form_data.append(cljs.core.name.call(null, k_16501), v_16502);
          }
          var G__16503 = cljs.core.next.call(null, seq__16476_16494__$1);
          var G__16504 = null;
          var G__16505 = 0;
          var G__16506 = 0;
          seq__16476_16482 = G__16503;
          chunk__16477_16483 = G__16504;
          count__16478_16484 = G__16505;
          i__16479_16485 = G__16506;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return form_data;
};
cljs_http.client.wrap_multipart_params = function cljs_http$client$wrap_multipart_params(client) {
  return function(p__16510) {
    var map__16511 = p__16510;
    var map__16511__$1 = (!(map__16511 == null) ? map__16511.cljs$lang$protocol_mask$partition0$ & 64 || map__16511.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16511) : map__16511;
    var request = map__16511__$1;
    var multipart_params = cljs.core.get.call(null, map__16511__$1, new cljs.core.Keyword(null, "multipart-params", "multipart-params", -1033508707));
    var request_method = cljs.core.get.call(null, map__16511__$1, new cljs.core.Keyword(null, "request-method", "request-method", 1764796830));
    if (cljs.core.truth_(function() {
      var and__6141__auto__ = multipart_params;
      if (cljs.core.truth_(and__6141__auto__)) {
        return (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "patch", "patch", 380775109), null, new cljs.core.Keyword(null, "delete", "delete", -1768633620), null, new cljs.core.Keyword(null, "post", "post", 269697687), null, new cljs.core.Keyword(null, "put", "put", 1299772570), null], null), null)).call(null, request_method);
      } else {
        return and__6141__auto__;
      }
    }())) {
      return client.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, request, new cljs.core.Keyword(null, "multipart-params", "multipart-params", -1033508707)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs_http.client.generate_form_data.call(null, multipart_params)));
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_method = function cljs_http$client$wrap_method(client) {
  return function(req) {
    var temp__4655__auto__ = (new cljs.core.Keyword(null, "method", "method", 55703592)).cljs$core$IFn$_invoke$arity$1(req);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var m = temp__4655__auto__;
      return client.call(null, cljs.core.assoc.call(null, cljs.core.dissoc.call(null, req, new cljs.core.Keyword(null, "method", "method", 55703592)), new cljs.core.Keyword(null, "request-method", "request-method", 1764796830), m));
    } else {
      return client.call(null, req);
    }
  };
};
cljs_http.client.wrap_server_name = function cljs_http$client$wrap_server_name(client, server_name) {
  return function(p1__16513_SHARP_) {
    return client.call(null, cljs.core.assoc.call(null, p1__16513_SHARP_, new cljs.core.Keyword(null, "server-name", "server-name", -1012104295), server_name));
  };
};
cljs_http.client.wrap_url = function cljs_http$client$wrap_url(client) {
  return function(p__16518) {
    var map__16519 = p__16518;
    var map__16519__$1 = (!(map__16519 == null) ? map__16519.cljs$lang$protocol_mask$partition0$ & 64 || map__16519.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16519) : map__16519;
    var req = map__16519__$1;
    var query_params = cljs.core.get.call(null, map__16519__$1, new cljs.core.Keyword(null, "query-params", "query-params", 900640534));
    var temp__4655__auto__ = cljs_http.client.parse_url.call(null, (new cljs.core.Keyword(null, "url", "url", 276297046)).cljs$core$IFn$_invoke$arity$1(req));
    if (cljs.core.truth_(temp__4655__auto__)) {
      var spec = temp__4655__auto__;
      return client.call(null, cljs.core.update_in.call(null, cljs.core.dissoc.call(null, cljs.core.merge.call(null, req, spec), new cljs.core.Keyword(null, "url", "url", 276297046)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "query-params", "query-params", 900640534)], null), function(spec, temp__4655__auto__, map__16519, map__16519__$1, req, query_params) {
        return function(p1__16514_SHARP_) {
          return cljs.core.merge.call(null, p1__16514_SHARP_, query_params);
        };
      }(spec, temp__4655__auto__, map__16519, map__16519__$1, req, query_params)));
    } else {
      return client.call(null, req);
    }
  };
};
cljs_http.client.wrap_basic_auth = function cljs_http$client$wrap_basic_auth(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___16525 = arguments.length;
  var i__7212__auto___16526 = 0;
  while (true) {
    if (i__7212__auto___16526 < len__7211__auto___16525) {
      args__7218__auto__.push(arguments[i__7212__auto___16526]);
      var G__16527 = i__7212__auto___16526 + 1;
      i__7212__auto___16526 = G__16527;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return cljs_http.client.wrap_basic_auth.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
cljs_http.client.wrap_basic_auth.cljs$core$IFn$_invoke$arity$variadic = function(client, p__16523) {
  var vec__16524 = p__16523;
  var credentials = cljs.core.nth.call(null, vec__16524, 0, null);
  return function(vec__16524, credentials) {
    return function(req) {
      var credentials__$1 = function() {
        var or__6153__auto__ = (new cljs.core.Keyword(null, "basic-auth", "basic-auth", -673163332)).cljs$core$IFn$_invoke$arity$1(req);
        if (cljs.core.truth_(or__6153__auto__)) {
          return or__6153__auto__;
        } else {
          return credentials;
        }
      }();
      if (!cljs.core.empty_QMARK_.call(null, credentials__$1)) {
        return client.call(null, cljs.core.assoc_in.call(null, cljs.core.dissoc.call(null, req, new cljs.core.Keyword(null, "basic-auth", "basic-auth", -673163332)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "authorization"], null), cljs_http.util.basic_auth.call(null, credentials__$1)));
      } else {
        return client.call(null, req);
      }
    };
  }(vec__16524, credentials);
};
cljs_http.client.wrap_basic_auth.cljs$lang$maxFixedArity = 1;
cljs_http.client.wrap_basic_auth.cljs$lang$applyTo = function(seq16521) {
  var G__16522 = cljs.core.first.call(null, seq16521);
  var seq16521__$1 = cljs.core.next.call(null, seq16521);
  return cljs_http.client.wrap_basic_auth.cljs$core$IFn$_invoke$arity$variadic(G__16522, seq16521__$1);
};
cljs_http.client.wrap_oauth = function cljs_http$client$wrap_oauth(client) {
  return function(req) {
    var temp__4655__auto__ = (new cljs.core.Keyword(null, "oauth-token", "oauth-token", 311415191)).cljs$core$IFn$_invoke$arity$1(req);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var oauth_token = temp__4655__auto__;
      return client.call(null, cljs.core.assoc_in.call(null, cljs.core.dissoc.call(null, req, new cljs.core.Keyword(null, "oauth-token", "oauth-token", 311415191)), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "headers", "headers", -835030129), "authorization"], null), [cljs.core.str("Bearer "), cljs.core.str(oauth_token)].join("")));
    } else {
      return client.call(null, req);
    }
  };
};
cljs_http.client.wrap_channel_from_request_map = function cljs_http$client$wrap_channel_from_request_map(client) {
  return function(request) {
    var temp__4655__auto__ = (new cljs.core.Keyword(null, "channel", "channel", 734187692)).cljs$core$IFn$_invoke$arity$1(request);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var custom_channel = temp__4655__auto__;
      return cljs.core.async.pipe.call(null, client.call(null, request), custom_channel);
    } else {
      return client.call(null, request);
    }
  };
};
cljs_http.client.wrap_request = function cljs_http$client$wrap_request(request) {
  return cljs_http.client.wrap_default_headers.call(null, cljs_http.client.wrap_channel_from_request_map.call(null, cljs_http.client.wrap_url.call(null, cljs_http.client.wrap_method.call(null, cljs_http.client.wrap_oauth.call(null, cljs_http.client.wrap_basic_auth.call(null, cljs_http.client.wrap_query_params.call(null, cljs_http.client.wrap_content_type.call(null, cljs_http.client.wrap_json_response.call(null, cljs_http.client.wrap_json_params.call(null, cljs_http.client.wrap_transit_response.call(null, 
  cljs_http.client.wrap_transit_params.call(null, cljs_http.client.wrap_edn_response.call(null, cljs_http.client.wrap_edn_params.call(null, cljs_http.client.wrap_multipart_params.call(null, cljs_http.client.wrap_form_params.call(null, cljs_http.client.wrap_accept.call(null, request)))))))))))))))));
};
cljs_http.client.request = cljs_http.client.wrap_request.call(null, cljs_http.core.request);
cljs_http.client.delete$ = function cljs_http$client$delete(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___16532 = arguments.length;
  var i__7212__auto___16533 = 0;
  while (true) {
    if (i__7212__auto___16533 < len__7211__auto___16532) {
      args__7218__auto__.push(arguments[i__7212__auto___16533]);
      var G__16534 = i__7212__auto___16533 + 1;
      i__7212__auto___16533 = G__16534;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return cljs_http.client.delete$.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
cljs_http.client.delete$.cljs$core$IFn$_invoke$arity$variadic = function(url, p__16530) {
  var vec__16531 = p__16530;
  var req = cljs.core.nth.call(null, vec__16531, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "delete", "delete", -1768633620), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.delete$.cljs$lang$maxFixedArity = 1;
cljs_http.client.delete$.cljs$lang$applyTo = function(seq16528) {
  var G__16529 = cljs.core.first.call(null, seq16528);
  var seq16528__$1 = cljs.core.next.call(null, seq16528);
  return cljs_http.client.delete$.cljs$core$IFn$_invoke$arity$variadic(G__16529, seq16528__$1);
};
cljs_http.client.get = function cljs_http$client$get(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___16539 = arguments.length;
  var i__7212__auto___16540 = 0;
  while (true) {
    if (i__7212__auto___16540 < len__7211__auto___16539) {
      args__7218__auto__.push(arguments[i__7212__auto___16540]);
      var G__16541 = i__7212__auto___16540 + 1;
      i__7212__auto___16540 = G__16541;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return cljs_http.client.get.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
cljs_http.client.get.cljs$core$IFn$_invoke$arity$variadic = function(url, p__16537) {
  var vec__16538 = p__16537;
  var req = cljs.core.nth.call(null, vec__16538, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "get", "get", 1683182755), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.get.cljs$lang$maxFixedArity = 1;
cljs_http.client.get.cljs$lang$applyTo = function(seq16535) {
  var G__16536 = cljs.core.first.call(null, seq16535);
  var seq16535__$1 = cljs.core.next.call(null, seq16535);
  return cljs_http.client.get.cljs$core$IFn$_invoke$arity$variadic(G__16536, seq16535__$1);
};
cljs_http.client.head = function cljs_http$client$head(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___16546 = arguments.length;
  var i__7212__auto___16547 = 0;
  while (true) {
    if (i__7212__auto___16547 < len__7211__auto___16546) {
      args__7218__auto__.push(arguments[i__7212__auto___16547]);
      var G__16548 = i__7212__auto___16547 + 1;
      i__7212__auto___16547 = G__16548;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return cljs_http.client.head.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
cljs_http.client.head.cljs$core$IFn$_invoke$arity$variadic = function(url, p__16544) {
  var vec__16545 = p__16544;
  var req = cljs.core.nth.call(null, vec__16545, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "head", "head", -771383919), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.head.cljs$lang$maxFixedArity = 1;
cljs_http.client.head.cljs$lang$applyTo = function(seq16542) {
  var G__16543 = cljs.core.first.call(null, seq16542);
  var seq16542__$1 = cljs.core.next.call(null, seq16542);
  return cljs_http.client.head.cljs$core$IFn$_invoke$arity$variadic(G__16543, seq16542__$1);
};
cljs_http.client.jsonp = function cljs_http$client$jsonp(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___16553 = arguments.length;
  var i__7212__auto___16554 = 0;
  while (true) {
    if (i__7212__auto___16554 < len__7211__auto___16553) {
      args__7218__auto__.push(arguments[i__7212__auto___16554]);
      var G__16555 = i__7212__auto___16554 + 1;
      i__7212__auto___16554 = G__16555;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return cljs_http.client.jsonp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
cljs_http.client.jsonp.cljs$core$IFn$_invoke$arity$variadic = function(url, p__16551) {
  var vec__16552 = p__16551;
  var req = cljs.core.nth.call(null, vec__16552, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "jsonp", "jsonp", 226119588), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.jsonp.cljs$lang$maxFixedArity = 1;
cljs_http.client.jsonp.cljs$lang$applyTo = function(seq16549) {
  var G__16550 = cljs.core.first.call(null, seq16549);
  var seq16549__$1 = cljs.core.next.call(null, seq16549);
  return cljs_http.client.jsonp.cljs$core$IFn$_invoke$arity$variadic(G__16550, seq16549__$1);
};
cljs_http.client.move = function cljs_http$client$move(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___16560 = arguments.length;
  var i__7212__auto___16561 = 0;
  while (true) {
    if (i__7212__auto___16561 < len__7211__auto___16560) {
      args__7218__auto__.push(arguments[i__7212__auto___16561]);
      var G__16562 = i__7212__auto___16561 + 1;
      i__7212__auto___16561 = G__16562;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return cljs_http.client.move.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
cljs_http.client.move.cljs$core$IFn$_invoke$arity$variadic = function(url, p__16558) {
  var vec__16559 = p__16558;
  var req = cljs.core.nth.call(null, vec__16559, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "move", "move", -2110884309), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.move.cljs$lang$maxFixedArity = 1;
cljs_http.client.move.cljs$lang$applyTo = function(seq16556) {
  var G__16557 = cljs.core.first.call(null, seq16556);
  var seq16556__$1 = cljs.core.next.call(null, seq16556);
  return cljs_http.client.move.cljs$core$IFn$_invoke$arity$variadic(G__16557, seq16556__$1);
};
cljs_http.client.options = function cljs_http$client$options(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___16567 = arguments.length;
  var i__7212__auto___16568 = 0;
  while (true) {
    if (i__7212__auto___16568 < len__7211__auto___16567) {
      args__7218__auto__.push(arguments[i__7212__auto___16568]);
      var G__16569 = i__7212__auto___16568 + 1;
      i__7212__auto___16568 = G__16569;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return cljs_http.client.options.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
cljs_http.client.options.cljs$core$IFn$_invoke$arity$variadic = function(url, p__16565) {
  var vec__16566 = p__16565;
  var req = cljs.core.nth.call(null, vec__16566, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "options", "options", 99638489), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.options.cljs$lang$maxFixedArity = 1;
cljs_http.client.options.cljs$lang$applyTo = function(seq16563) {
  var G__16564 = cljs.core.first.call(null, seq16563);
  var seq16563__$1 = cljs.core.next.call(null, seq16563);
  return cljs_http.client.options.cljs$core$IFn$_invoke$arity$variadic(G__16564, seq16563__$1);
};
cljs_http.client.patch = function cljs_http$client$patch(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___16574 = arguments.length;
  var i__7212__auto___16575 = 0;
  while (true) {
    if (i__7212__auto___16575 < len__7211__auto___16574) {
      args__7218__auto__.push(arguments[i__7212__auto___16575]);
      var G__16576 = i__7212__auto___16575 + 1;
      i__7212__auto___16575 = G__16576;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return cljs_http.client.patch.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
cljs_http.client.patch.cljs$core$IFn$_invoke$arity$variadic = function(url, p__16572) {
  var vec__16573 = p__16572;
  var req = cljs.core.nth.call(null, vec__16573, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "patch", "patch", 380775109), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.patch.cljs$lang$maxFixedArity = 1;
cljs_http.client.patch.cljs$lang$applyTo = function(seq16570) {
  var G__16571 = cljs.core.first.call(null, seq16570);
  var seq16570__$1 = cljs.core.next.call(null, seq16570);
  return cljs_http.client.patch.cljs$core$IFn$_invoke$arity$variadic(G__16571, seq16570__$1);
};
cljs_http.client.post = function cljs_http$client$post(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___16581 = arguments.length;
  var i__7212__auto___16582 = 0;
  while (true) {
    if (i__7212__auto___16582 < len__7211__auto___16581) {
      args__7218__auto__.push(arguments[i__7212__auto___16582]);
      var G__16583 = i__7212__auto___16582 + 1;
      i__7212__auto___16582 = G__16583;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return cljs_http.client.post.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
cljs_http.client.post.cljs$core$IFn$_invoke$arity$variadic = function(url, p__16579) {
  var vec__16580 = p__16579;
  var req = cljs.core.nth.call(null, vec__16580, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "post", "post", 269697687), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.post.cljs$lang$maxFixedArity = 1;
cljs_http.client.post.cljs$lang$applyTo = function(seq16577) {
  var G__16578 = cljs.core.first.call(null, seq16577);
  var seq16577__$1 = cljs.core.next.call(null, seq16577);
  return cljs_http.client.post.cljs$core$IFn$_invoke$arity$variadic(G__16578, seq16577__$1);
};
cljs_http.client.put = function cljs_http$client$put(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___16588 = arguments.length;
  var i__7212__auto___16589 = 0;
  while (true) {
    if (i__7212__auto___16589 < len__7211__auto___16588) {
      args__7218__auto__.push(arguments[i__7212__auto___16589]);
      var G__16590 = i__7212__auto___16589 + 1;
      i__7212__auto___16589 = G__16590;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return cljs_http.client.put.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
cljs_http.client.put.cljs$core$IFn$_invoke$arity$variadic = function(url, p__16586) {
  var vec__16587 = p__16586;
  var req = cljs.core.nth.call(null, vec__16587, 0, null);
  return cljs_http.client.request.call(null, cljs.core.merge.call(null, req, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), new cljs.core.Keyword(null, "put", "put", 1299772570), new cljs.core.Keyword(null, "url", "url", 276297046), url], null)));
};
cljs_http.client.put.cljs$lang$maxFixedArity = 1;
cljs_http.client.put.cljs$lang$applyTo = function(seq16584) {
  var G__16585 = cljs.core.first.call(null, seq16584);
  var seq16584__$1 = cljs.core.next.call(null, seq16584);
  return cljs_http.client.put.cljs$core$IFn$_invoke$arity$variadic(G__16585, seq16584__$1);
};
goog.provide("goog.dom.InputType");
goog.dom.InputType = {BUTTON:"button", CHECKBOX:"checkbox", COLOR:"color", DATE:"date", DATETIME:"datetime", DATETIME_LOCAL:"datetime-local", EMAIL:"email", FILE:"file", HIDDEN:"hidden", IMAGE:"image", MENU:"menu", MONTH:"month", NUMBER:"number", PASSWORD:"password", RADIO:"radio", RANGE:"range", RESET:"reset", SEARCH:"search", SELECT_MULTIPLE:"select-multiple", SELECT_ONE:"select-one", SUBMIT:"submit", TEL:"tel", TEXT:"text", TEXTAREA:"textarea", TIME:"time", URL:"url", WEEK:"week"};
goog.provide("goog.dom.forms");
goog.require("goog.dom.InputType");
goog.require("goog.dom.TagName");
goog.require("goog.structs.Map");
goog.dom.forms.getFormDataMap = function(form) {
  var map = new goog.structs.Map;
  goog.dom.forms.getFormDataHelper_(form, map, goog.dom.forms.addFormDataToMap_);
  return map;
};
goog.dom.forms.getFormDataString = function(form) {
  var sb = [];
  goog.dom.forms.getFormDataHelper_(form, sb, goog.dom.forms.addFormDataToStringBuffer_);
  return sb.join("\x26");
};
goog.dom.forms.getFormDataHelper_ = function(form, result, fnAppend) {
  var els = form.elements;
  for (var el, i = 0;el = els[i];i++) {
    if (el.form != form || el.disabled || el.tagName == goog.dom.TagName.FIELDSET) {
      continue;
    }
    var name = el.name;
    switch(el.type.toLowerCase()) {
      case goog.dom.InputType.FILE:
      ;
      case goog.dom.InputType.SUBMIT:
      ;
      case goog.dom.InputType.RESET:
      ;
      case goog.dom.InputType.BUTTON:
        break;
      case goog.dom.InputType.SELECT_MULTIPLE:
        var values = goog.dom.forms.getValue(el);
        if (values != null) {
          for (var value, j = 0;value = values[j];j++) {
            fnAppend(result, name, value);
          }
        }
        break;
      default:
        var value = goog.dom.forms.getValue(el);
        if (value != null) {
          fnAppend(result, name, value);
        }
      ;
    }
  }
  var inputs = form.getElementsByTagName(goog.dom.TagName.INPUT);
  for (var input, i = 0;input = inputs[i];i++) {
    if (input.form == form && input.type.toLowerCase() == goog.dom.InputType.IMAGE) {
      name = input.name;
      fnAppend(result, name, input.value);
      fnAppend(result, name + ".x", "0");
      fnAppend(result, name + ".y", "0");
    }
  }
};
goog.dom.forms.addFormDataToMap_ = function(map, name, value) {
  var array = map.get(name);
  if (!array) {
    array = [];
    map.set(name, array);
  }
  array.push(value);
};
goog.dom.forms.addFormDataToStringBuffer_ = function(sb, name, value) {
  sb.push(encodeURIComponent(name) + "\x3d" + encodeURIComponent(value));
};
goog.dom.forms.hasFileInput = function(form) {
  var els = form.elements;
  for (var el, i = 0;el = els[i];i++) {
    if (!el.disabled && el.type && el.type.toLowerCase() == goog.dom.InputType.FILE) {
      return true;
    }
  }
  return false;
};
goog.dom.forms.setDisabled = function(el, disabled) {
  if (el.tagName == goog.dom.TagName.FORM) {
    var els = el.elements;
    for (var i = 0;el = els[i];i++) {
      goog.dom.forms.setDisabled(el, disabled);
    }
  } else {
    if (disabled == true) {
      el.blur();
    }
    el.disabled = disabled;
  }
};
goog.dom.forms.focusAndSelect = function(el) {
  el.focus();
  if (el.select) {
    el.select();
  }
};
goog.dom.forms.hasValue = function(el) {
  var value = goog.dom.forms.getValue(el);
  return !!value;
};
goog.dom.forms.hasValueByName = function(form, name) {
  var value = goog.dom.forms.getValueByName(form, name);
  return !!value;
};
goog.dom.forms.getValue = function(el) {
  var type = el.type;
  if (!goog.isDef(type)) {
    return null;
  }
  switch(type.toLowerCase()) {
    case goog.dom.InputType.CHECKBOX:
    ;
    case goog.dom.InputType.RADIO:
      return goog.dom.forms.getInputChecked_(el);
    case goog.dom.InputType.SELECT_ONE:
      return goog.dom.forms.getSelectSingle_(el);
    case goog.dom.InputType.SELECT_MULTIPLE:
      return goog.dom.forms.getSelectMultiple_(el);
    default:
      return goog.isDef(el.value) ? el.value : null;
  }
};
goog.dom.$F = goog.dom.forms.getValue;
goog.dom.forms.getValueByName = function(form, name) {
  var els = form.elements[name];
  if (els) {
    if (els.type) {
      return goog.dom.forms.getValue(els);
    } else {
      for (var i = 0;i < els.length;i++) {
        var val = goog.dom.forms.getValue(els[i]);
        if (val) {
          return val;
        }
      }
    }
  }
  return null;
};
goog.dom.forms.getInputChecked_ = function(el) {
  return el.checked ? el.value : null;
};
goog.dom.forms.getSelectSingle_ = function(el) {
  var selectedIndex = el.selectedIndex;
  return selectedIndex >= 0 ? el.options[selectedIndex].value : null;
};
goog.dom.forms.getSelectMultiple_ = function(el) {
  var values = [];
  for (var option, i = 0;option = el.options[i];i++) {
    if (option.selected) {
      values.push(option.value);
    }
  }
  return values.length ? values : null;
};
goog.dom.forms.setValue = function(el, opt_value) {
  var type = el.type;
  if (goog.isDef(type)) {
    switch(type.toLowerCase()) {
      case goog.dom.InputType.CHECKBOX:
      ;
      case goog.dom.InputType.RADIO:
        goog.dom.forms.setInputChecked_(el, (opt_value));
        break;
      case goog.dom.InputType.SELECT_ONE:
        goog.dom.forms.setSelectSingle_(el, (opt_value));
        break;
      case goog.dom.InputType.SELECT_MULTIPLE:
        goog.dom.forms.setSelectMultiple_(el, (opt_value));
        break;
      default:
        el.value = goog.isDefAndNotNull(opt_value) ? opt_value : "";
    }
  }
};
goog.dom.forms.setInputChecked_ = function(el, opt_value) {
  el.checked = opt_value;
};
goog.dom.forms.setSelectSingle_ = function(el, opt_value) {
  el.selectedIndex = -1;
  if (goog.isString(opt_value)) {
    for (var option, i = 0;option = el.options[i];i++) {
      if (option.value == opt_value) {
        option.selected = true;
        break;
      }
    }
  }
};
goog.dom.forms.setSelectMultiple_ = function(el, opt_value) {
  if (goog.isString(opt_value)) {
    opt_value = [opt_value];
  }
  for (var option, i = 0;option = el.options[i];i++) {
    option.selected = false;
    if (opt_value) {
      for (var value, j = 0;value = opt_value[j];j++) {
        if (option.value == value) {
          option.selected = true;
        }
      }
    }
  }
};
goog.provide("goog.dom.classes");
goog.require("goog.array");
goog.dom.classes.set = function(element, className) {
  element.className = className;
};
goog.dom.classes.get = function(element) {
  var className = element.className;
  return goog.isString(className) && className.match(/\S+/g) || [];
};
goog.dom.classes.add = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var expectedCount = classes.length + args.length;
  goog.dom.classes.add_(classes, args);
  goog.dom.classes.set(element, classes.join(" "));
  return classes.length == expectedCount;
};
goog.dom.classes.remove = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var newClasses = goog.dom.classes.getDifference_(classes, args);
  goog.dom.classes.set(element, newClasses.join(" "));
  return newClasses.length == classes.length - args.length;
};
goog.dom.classes.add_ = function(classes, args) {
  for (var i = 0;i < args.length;i++) {
    if (!goog.array.contains(classes, args[i])) {
      classes.push(args[i]);
    }
  }
};
goog.dom.classes.getDifference_ = function(arr1, arr2) {
  return goog.array.filter(arr1, function(item) {
    return !goog.array.contains(arr2, item);
  });
};
goog.dom.classes.swap = function(element, fromClass, toClass) {
  var classes = goog.dom.classes.get(element);
  var removed = false;
  for (var i = 0;i < classes.length;i++) {
    if (classes[i] == fromClass) {
      goog.array.splice(classes, i--, 1);
      removed = true;
    }
  }
  if (removed) {
    classes.push(toClass);
    goog.dom.classes.set(element, classes.join(" "));
  }
  return removed;
};
goog.dom.classes.addRemove = function(element, classesToRemove, classesToAdd) {
  var classes = goog.dom.classes.get(element);
  if (goog.isString(classesToRemove)) {
    goog.array.remove(classes, classesToRemove);
  } else {
    if (goog.isArray(classesToRemove)) {
      classes = goog.dom.classes.getDifference_(classes, classesToRemove);
    }
  }
  if (goog.isString(classesToAdd) && !goog.array.contains(classes, classesToAdd)) {
    classes.push(classesToAdd);
  } else {
    if (goog.isArray(classesToAdd)) {
      goog.dom.classes.add_(classes, classesToAdd);
    }
  }
  goog.dom.classes.set(element, classes.join(" "));
};
goog.dom.classes.has = function(element, className) {
  return goog.array.contains(goog.dom.classes.get(element), className);
};
goog.dom.classes.enable = function(element, className, enabled) {
  if (enabled) {
    goog.dom.classes.add(element, className);
  } else {
    goog.dom.classes.remove(element, className);
  }
};
goog.dom.classes.toggle = function(element, className) {
  var add = !goog.dom.classes.has(element, className);
  goog.dom.classes.enable(element, className, add);
  return add;
};
goog.provide("domina.support");
goog.require("cljs.core");
goog.require("goog.dom");
goog.require("goog.events");
var div_13072 = document.createElement("div");
var test_html_13073 = "   \x3clink/\x3e\x3ctable\x3e\x3c/table\x3e\x3ca href\x3d'/a' style\x3d'top:1px;float:left;opacity:.55;'\x3ea\x3c/a\x3e\x3cinput type\x3d'checkbox'/\x3e";
div_13072.innerHTML = test_html_13073;
domina.support.leading_whitespace_QMARK_ = cljs.core._EQ_.call(null, div_13072.firstChild.nodeType, 3);
domina.support.extraneous_tbody_QMARK_ = cljs.core._EQ_.call(null, div_13072.getElementsByTagName("tbody").length, 0);
domina.support.unscoped_html_elements_QMARK_ = cljs.core._EQ_.call(null, div_13072.getElementsByTagName("link").length, 0);
goog.provide("goog.dom.vendor");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.dom.vendor.getVendorJsPrefix = function() {
  if (goog.userAgent.WEBKIT) {
    return "Webkit";
  } else {
    if (goog.userAgent.GECKO) {
      return "Moz";
    } else {
      if (goog.userAgent.IE) {
        return "ms";
      } else {
        if (goog.userAgent.OPERA) {
          return "O";
        }
      }
    }
  }
  return null;
};
goog.dom.vendor.getVendorPrefix = function() {
  if (goog.userAgent.WEBKIT) {
    return "-webkit";
  } else {
    if (goog.userAgent.GECKO) {
      return "-moz";
    } else {
      if (goog.userAgent.IE) {
        return "-ms";
      } else {
        if (goog.userAgent.OPERA) {
          return "-o";
        }
      }
    }
  }
  return null;
};
goog.dom.vendor.getPrefixedPropertyName = function(propertyName, opt_object) {
  if (opt_object && propertyName in opt_object) {
    return propertyName;
  }
  var prefix = goog.dom.vendor.getVendorJsPrefix();
  if (prefix) {
    prefix = prefix.toLowerCase();
    var prefixedPropertyName = prefix + goog.string.toTitleCase(propertyName);
    return !goog.isDef(opt_object) || prefixedPropertyName in opt_object ? prefixedPropertyName : null;
  }
  return null;
};
goog.dom.vendor.getPrefixedEventType = function(eventType) {
  var prefix = goog.dom.vendor.getVendorJsPrefix() || "";
  return (prefix + eventType).toLowerCase();
};
goog.provide("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.math.Box = function(top, right, bottom, left) {
  this.top = top;
  this.right = right;
  this.bottom = bottom;
  this.left = left;
};
goog.math.Box.boundingBox = function(var_args) {
  var box = new goog.math.Box(arguments[0].y, arguments[0].x, arguments[0].y, arguments[0].x);
  for (var i = 1;i < arguments.length;i++) {
    box.expandToIncludeCoordinate(arguments[i]);
  }
  return box;
};
goog.math.Box.prototype.getWidth = function() {
  return this.right - this.left;
};
goog.math.Box.prototype.getHeight = function() {
  return this.bottom - this.top;
};
goog.math.Box.prototype.clone = function() {
  return new goog.math.Box(this.top, this.right, this.bottom, this.left);
};
if (goog.DEBUG) {
  goog.math.Box.prototype.toString = function() {
    return "(" + this.top + "t, " + this.right + "r, " + this.bottom + "b, " + this.left + "l)";
  };
}
goog.math.Box.prototype.contains = function(other) {
  return goog.math.Box.contains(this, other);
};
goog.math.Box.prototype.expand = function(top, opt_right, opt_bottom, opt_left) {
  if (goog.isObject(top)) {
    this.top -= top.top;
    this.right += top.right;
    this.bottom += top.bottom;
    this.left -= top.left;
  } else {
    this.top -= top;
    this.right += opt_right;
    this.bottom += opt_bottom;
    this.left -= opt_left;
  }
  return this;
};
goog.math.Box.prototype.expandToInclude = function(box) {
  this.left = Math.min(this.left, box.left);
  this.top = Math.min(this.top, box.top);
  this.right = Math.max(this.right, box.right);
  this.bottom = Math.max(this.bottom, box.bottom);
};
goog.math.Box.prototype.expandToIncludeCoordinate = function(coord) {
  this.top = Math.min(this.top, coord.y);
  this.right = Math.max(this.right, coord.x);
  this.bottom = Math.max(this.bottom, coord.y);
  this.left = Math.min(this.left, coord.x);
};
goog.math.Box.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.top == b.top && a.right == b.right && a.bottom == b.bottom && a.left == b.left;
};
goog.math.Box.contains = function(box, other) {
  if (!box || !other) {
    return false;
  }
  if (other instanceof goog.math.Box) {
    return other.left >= box.left && other.right <= box.right && other.top >= box.top && other.bottom <= box.bottom;
  }
  return other.x >= box.left && other.x <= box.right && other.y >= box.top && other.y <= box.bottom;
};
goog.math.Box.relativePositionX = function(box, coord) {
  if (coord.x < box.left) {
    return coord.x - box.left;
  } else {
    if (coord.x > box.right) {
      return coord.x - box.right;
    }
  }
  return 0;
};
goog.math.Box.relativePositionY = function(box, coord) {
  if (coord.y < box.top) {
    return coord.y - box.top;
  } else {
    if (coord.y > box.bottom) {
      return coord.y - box.bottom;
    }
  }
  return 0;
};
goog.math.Box.distance = function(box, coord) {
  var x = goog.math.Box.relativePositionX(box, coord);
  var y = goog.math.Box.relativePositionY(box, coord);
  return Math.sqrt(x * x + y * y);
};
goog.math.Box.intersects = function(a, b) {
  return a.left <= b.right && b.left <= a.right && a.top <= b.bottom && b.top <= a.bottom;
};
goog.math.Box.intersectsWithPadding = function(a, b, padding) {
  return a.left <= b.right + padding && b.left <= a.right + padding && a.top <= b.bottom + padding && b.top <= a.bottom + padding;
};
goog.math.Box.prototype.ceil = function() {
  this.top = Math.ceil(this.top);
  this.right = Math.ceil(this.right);
  this.bottom = Math.ceil(this.bottom);
  this.left = Math.ceil(this.left);
  return this;
};
goog.math.Box.prototype.floor = function() {
  this.top = Math.floor(this.top);
  this.right = Math.floor(this.right);
  this.bottom = Math.floor(this.bottom);
  this.left = Math.floor(this.left);
  return this;
};
goog.math.Box.prototype.round = function() {
  this.top = Math.round(this.top);
  this.right = Math.round(this.right);
  this.bottom = Math.round(this.bottom);
  this.left = Math.round(this.left);
  return this;
};
goog.math.Box.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.left += tx.x;
    this.right += tx.x;
    this.top += tx.y;
    this.bottom += tx.y;
  } else {
    this.left += tx;
    this.right += tx;
    if (goog.isNumber(opt_ty)) {
      this.top += opt_ty;
      this.bottom += opt_ty;
    }
  }
  return this;
};
goog.math.Box.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.left *= sx;
  this.right *= sx;
  this.top *= sy;
  this.bottom *= sy;
  return this;
};
goog.provide("goog.math.Rect");
goog.require("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.math.Rect = function(x, y, w, h) {
  this.left = x;
  this.top = y;
  this.width = w;
  this.height = h;
};
goog.math.Rect.prototype.clone = function() {
  return new goog.math.Rect(this.left, this.top, this.width, this.height);
};
goog.math.Rect.prototype.toBox = function() {
  var right = this.left + this.width;
  var bottom = this.top + this.height;
  return new goog.math.Box(this.top, right, bottom, this.left);
};
goog.math.Rect.createFromPositionAndSize = function(position, size) {
  return new goog.math.Rect(position.x, position.y, size.width, size.height);
};
goog.math.Rect.createFromBox = function(box) {
  return new goog.math.Rect(box.left, box.top, box.right - box.left, box.bottom - box.top);
};
if (goog.DEBUG) {
  goog.math.Rect.prototype.toString = function() {
    return "(" + this.left + ", " + this.top + " - " + this.width + "w x " + this.height + "h)";
  };
}
goog.math.Rect.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.left == b.left && a.width == b.width && a.top == b.top && a.height == b.height;
};
goog.math.Rect.prototype.intersection = function(rect) {
  var x0 = Math.max(this.left, rect.left);
  var x1 = Math.min(this.left + this.width, rect.left + rect.width);
  if (x0 <= x1) {
    var y0 = Math.max(this.top, rect.top);
    var y1 = Math.min(this.top + this.height, rect.top + rect.height);
    if (y0 <= y1) {
      this.left = x0;
      this.top = y0;
      this.width = x1 - x0;
      this.height = y1 - y0;
      return true;
    }
  }
  return false;
};
goog.math.Rect.intersection = function(a, b) {
  var x0 = Math.max(a.left, b.left);
  var x1 = Math.min(a.left + a.width, b.left + b.width);
  if (x0 <= x1) {
    var y0 = Math.max(a.top, b.top);
    var y1 = Math.min(a.top + a.height, b.top + b.height);
    if (y0 <= y1) {
      return new goog.math.Rect(x0, y0, x1 - x0, y1 - y0);
    }
  }
  return null;
};
goog.math.Rect.intersects = function(a, b) {
  return a.left <= b.left + b.width && b.left <= a.left + a.width && a.top <= b.top + b.height && b.top <= a.top + a.height;
};
goog.math.Rect.prototype.intersects = function(rect) {
  return goog.math.Rect.intersects(this, rect);
};
goog.math.Rect.difference = function(a, b) {
  var intersection = goog.math.Rect.intersection(a, b);
  if (!intersection || !intersection.height || !intersection.width) {
    return [a.clone()];
  }
  var result = [];
  var top = a.top;
  var height = a.height;
  var ar = a.left + a.width;
  var ab = a.top + a.height;
  var br = b.left + b.width;
  var bb = b.top + b.height;
  if (b.top > a.top) {
    result.push(new goog.math.Rect(a.left, a.top, a.width, b.top - a.top));
    top = b.top;
    height -= b.top - a.top;
  }
  if (bb < ab) {
    result.push(new goog.math.Rect(a.left, bb, a.width, ab - bb));
    height = bb - top;
  }
  if (b.left > a.left) {
    result.push(new goog.math.Rect(a.left, top, b.left - a.left, height));
  }
  if (br < ar) {
    result.push(new goog.math.Rect(br, top, ar - br, height));
  }
  return result;
};
goog.math.Rect.prototype.difference = function(rect) {
  return goog.math.Rect.difference(this, rect);
};
goog.math.Rect.prototype.boundingRect = function(rect) {
  var right = Math.max(this.left + this.width, rect.left + rect.width);
  var bottom = Math.max(this.top + this.height, rect.top + rect.height);
  this.left = Math.min(this.left, rect.left);
  this.top = Math.min(this.top, rect.top);
  this.width = right - this.left;
  this.height = bottom - this.top;
};
goog.math.Rect.boundingRect = function(a, b) {
  if (!a || !b) {
    return null;
  }
  var clone = a.clone();
  clone.boundingRect(b);
  return clone;
};
goog.math.Rect.prototype.contains = function(another) {
  if (another instanceof goog.math.Rect) {
    return this.left <= another.left && this.left + this.width >= another.left + another.width && this.top <= another.top && this.top + this.height >= another.top + another.height;
  } else {
    return another.x >= this.left && another.x <= this.left + this.width && another.y >= this.top && another.y <= this.top + this.height;
  }
};
goog.math.Rect.prototype.squaredDistance = function(point) {
  var dx = point.x < this.left ? this.left - point.x : Math.max(point.x - (this.left + this.width), 0);
  var dy = point.y < this.top ? this.top - point.y : Math.max(point.y - (this.top + this.height), 0);
  return dx * dx + dy * dy;
};
goog.math.Rect.prototype.distance = function(point) {
  return Math.sqrt(this.squaredDistance(point));
};
goog.math.Rect.prototype.getSize = function() {
  return new goog.math.Size(this.width, this.height);
};
goog.math.Rect.prototype.getTopLeft = function() {
  return new goog.math.Coordinate(this.left, this.top);
};
goog.math.Rect.prototype.getCenter = function() {
  return new goog.math.Coordinate(this.left + this.width / 2, this.top + this.height / 2);
};
goog.math.Rect.prototype.getBottomRight = function() {
  return new goog.math.Coordinate(this.left + this.width, this.top + this.height);
};
goog.math.Rect.prototype.ceil = function() {
  this.left = Math.ceil(this.left);
  this.top = Math.ceil(this.top);
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Rect.prototype.floor = function() {
  this.left = Math.floor(this.left);
  this.top = Math.floor(this.top);
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Rect.prototype.round = function() {
  this.left = Math.round(this.left);
  this.top = Math.round(this.top);
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Rect.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.left += tx.x;
    this.top += tx.y;
  } else {
    this.left += tx;
    if (goog.isNumber(opt_ty)) {
      this.top += opt_ty;
    }
  }
  return this;
};
goog.math.Rect.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.left *= sx;
  this.width *= sx;
  this.top *= sy;
  this.height *= sy;
  return this;
};
goog.provide("goog.style");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.TagName");
goog.require("goog.dom.vendor");
goog.require("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Rect");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.forwardDeclare("goog.events.BrowserEvent");
goog.forwardDeclare("goog.events.Event");
goog.style.setStyle = function(element, style, opt_value) {
  if (goog.isString(style)) {
    goog.style.setStyle_(element, opt_value, style);
  } else {
    for (var key in style) {
      goog.style.setStyle_(element, style[key], key);
    }
  }
};
goog.style.setStyle_ = function(element, value, style) {
  var propertyName = goog.style.getVendorJsStyleName_(element, style);
  if (propertyName) {
    element.style[propertyName] = value;
  }
};
goog.style.styleNameCache_ = {};
goog.style.getVendorJsStyleName_ = function(element, style) {
  var propertyName = goog.style.styleNameCache_[style];
  if (!propertyName) {
    var camelStyle = goog.string.toCamelCase(style);
    propertyName = camelStyle;
    if (element.style[camelStyle] === undefined) {
      var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() + goog.string.toTitleCase(camelStyle);
      if (element.style[prefixedStyle] !== undefined) {
        propertyName = prefixedStyle;
      }
    }
    goog.style.styleNameCache_[style] = propertyName;
  }
  return propertyName;
};
goog.style.getVendorStyleName_ = function(element, style) {
  var camelStyle = goog.string.toCamelCase(style);
  if (element.style[camelStyle] === undefined) {
    var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() + goog.string.toTitleCase(camelStyle);
    if (element.style[prefixedStyle] !== undefined) {
      return goog.dom.vendor.getVendorPrefix() + "-" + style;
    }
  }
  return style;
};
goog.style.getStyle = function(element, property) {
  var styleValue = element.style[goog.string.toCamelCase(property)];
  if (typeof styleValue !== "undefined") {
    return styleValue;
  }
  return element.style[goog.style.getVendorJsStyleName_(element, property)] || "";
};
goog.style.getComputedStyle = function(element, property) {
  var doc = goog.dom.getOwnerDocument(element);
  if (doc.defaultView && doc.defaultView.getComputedStyle) {
    var styles = doc.defaultView.getComputedStyle(element, null);
    if (styles) {
      return styles[property] || styles.getPropertyValue(property) || "";
    }
  }
  return "";
};
goog.style.getCascadedStyle = function(element, style) {
  return element.currentStyle ? element.currentStyle[style] : null;
};
goog.style.getStyle_ = function(element, style) {
  return goog.style.getComputedStyle(element, style) || goog.style.getCascadedStyle(element, style) || element.style && element.style[style];
};
goog.style.getComputedBoxSizing = function(element) {
  return goog.style.getStyle_(element, "boxSizing") || goog.style.getStyle_(element, "MozBoxSizing") || goog.style.getStyle_(element, "WebkitBoxSizing") || null;
};
goog.style.getComputedPosition = function(element) {
  return goog.style.getStyle_(element, "position");
};
goog.style.getBackgroundColor = function(element) {
  return goog.style.getStyle_(element, "backgroundColor");
};
goog.style.getComputedOverflowX = function(element) {
  return goog.style.getStyle_(element, "overflowX");
};
goog.style.getComputedOverflowY = function(element) {
  return goog.style.getStyle_(element, "overflowY");
};
goog.style.getComputedZIndex = function(element) {
  return goog.style.getStyle_(element, "zIndex");
};
goog.style.getComputedTextAlign = function(element) {
  return goog.style.getStyle_(element, "textAlign");
};
goog.style.getComputedCursor = function(element) {
  return goog.style.getStyle_(element, "cursor");
};
goog.style.getComputedTransform = function(element) {
  var property = goog.style.getVendorStyleName_(element, "transform");
  return goog.style.getStyle_(element, property) || goog.style.getStyle_(element, "transform");
};
goog.style.setPosition = function(el, arg1, opt_arg2) {
  var x, y;
  if (arg1 instanceof goog.math.Coordinate) {
    x = arg1.x;
    y = arg1.y;
  } else {
    x = arg1;
    y = opt_arg2;
  }
  el.style.left = goog.style.getPixelStyleValue_((x), false);
  el.style.top = goog.style.getPixelStyleValue_((y), false);
};
goog.style.getPosition = function(element) {
  return new goog.math.Coordinate((element).offsetLeft, (element).offsetTop);
};
goog.style.getClientViewportElement = function(opt_node) {
  var doc;
  if (opt_node) {
    doc = goog.dom.getOwnerDocument(opt_node);
  } else {
    doc = goog.dom.getDocument();
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9) && !goog.dom.getDomHelper(doc).isCss1CompatMode()) {
    return doc.body;
  }
  return doc.documentElement;
};
goog.style.getViewportPageOffset = function(doc) {
  var body = doc.body;
  var documentElement = doc.documentElement;
  var scrollLeft = body.scrollLeft || documentElement.scrollLeft;
  var scrollTop = body.scrollTop || documentElement.scrollTop;
  return new goog.math.Coordinate(scrollLeft, scrollTop);
};
goog.style.getBoundingClientRect_ = function(el) {
  var rect;
  try {
    rect = el.getBoundingClientRect();
  } catch (e) {
    return {"left":0, "top":0, "right":0, "bottom":0};
  }
  if (goog.userAgent.IE && el.ownerDocument.body) {
    var doc = el.ownerDocument;
    rect.left -= doc.documentElement.clientLeft + doc.body.clientLeft;
    rect.top -= doc.documentElement.clientTop + doc.body.clientTop;
  }
  return rect;
};
goog.style.getOffsetParent = function(element) {
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(8)) {
    return element.offsetParent;
  }
  var doc = goog.dom.getOwnerDocument(element);
  var positionStyle = goog.style.getStyle_(element, "position");
  var skipStatic = positionStyle == "fixed" || positionStyle == "absolute";
  for (var parent = element.parentNode;parent && parent != doc;parent = parent.parentNode) {
    if (parent.nodeType == goog.dom.NodeType.DOCUMENT_FRAGMENT && parent.host) {
      parent = parent.host;
    }
    positionStyle = goog.style.getStyle_((parent), "position");
    skipStatic = skipStatic && positionStyle == "static" && parent != doc.documentElement && parent != doc.body;
    if (!skipStatic && (parent.scrollWidth > parent.clientWidth || parent.scrollHeight > parent.clientHeight || positionStyle == "fixed" || positionStyle == "absolute" || positionStyle == "relative")) {
      return (parent);
    }
  }
  return null;
};
goog.style.getVisibleRectForElement = function(element) {
  var visibleRect = new goog.math.Box(0, Infinity, Infinity, 0);
  var dom = goog.dom.getDomHelper(element);
  var body = dom.getDocument().body;
  var documentElement = dom.getDocument().documentElement;
  var scrollEl = dom.getDocumentScrollElement();
  for (var el = element;el = goog.style.getOffsetParent(el);) {
    if ((!goog.userAgent.IE || el.clientWidth != 0) && (!goog.userAgent.WEBKIT || el.clientHeight != 0 || el != body) && (el != body && el != documentElement && goog.style.getStyle_(el, "overflow") != "visible")) {
      var pos = goog.style.getPageOffset(el);
      var client = goog.style.getClientLeftTop(el);
      pos.x += client.x;
      pos.y += client.y;
      visibleRect.top = Math.max(visibleRect.top, pos.y);
      visibleRect.right = Math.min(visibleRect.right, pos.x + el.clientWidth);
      visibleRect.bottom = Math.min(visibleRect.bottom, pos.y + el.clientHeight);
      visibleRect.left = Math.max(visibleRect.left, pos.x);
    }
  }
  var scrollX = scrollEl.scrollLeft, scrollY = scrollEl.scrollTop;
  visibleRect.left = Math.max(visibleRect.left, scrollX);
  visibleRect.top = Math.max(visibleRect.top, scrollY);
  var winSize = dom.getViewportSize();
  visibleRect.right = Math.min(visibleRect.right, scrollX + winSize.width);
  visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + winSize.height);
  return visibleRect.top >= 0 && visibleRect.left >= 0 && visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left ? visibleRect : null;
};
goog.style.getContainerOffsetToScrollInto = function(element, opt_container, opt_center) {
  var container = opt_container || goog.dom.getDocumentScrollElement();
  var elementPos = goog.style.getPageOffset(element);
  var containerPos = goog.style.getPageOffset(container);
  var containerBorder = goog.style.getBorderBox(container);
  if (container == goog.dom.getDocumentScrollElement()) {
    var relX = elementPos.x - container.scrollLeft;
    var relY = elementPos.y - container.scrollTop;
    if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(10)) {
      relX += containerBorder.left;
      relY += containerBorder.top;
    }
  } else {
    var relX = elementPos.x - containerPos.x - containerBorder.left;
    var relY = elementPos.y - containerPos.y - containerBorder.top;
  }
  var spaceX = container.clientWidth - (element).offsetWidth;
  var spaceY = container.clientHeight - (element).offsetHeight;
  var scrollLeft = container.scrollLeft;
  var scrollTop = container.scrollTop;
  if (opt_center) {
    scrollLeft += relX - spaceX / 2;
    scrollTop += relY - spaceY / 2;
  } else {
    scrollLeft += Math.min(relX, Math.max(relX - spaceX, 0));
    scrollTop += Math.min(relY, Math.max(relY - spaceY, 0));
  }
  return new goog.math.Coordinate(scrollLeft, scrollTop);
};
goog.style.scrollIntoContainerView = function(element, opt_container, opt_center) {
  var container = opt_container || goog.dom.getDocumentScrollElement();
  var offset = goog.style.getContainerOffsetToScrollInto(element, container, opt_center);
  container.scrollLeft = offset.x;
  container.scrollTop = offset.y;
};
goog.style.getClientLeftTop = function(el) {
  return new goog.math.Coordinate(el.clientLeft, el.clientTop);
};
goog.style.getPageOffset = function(el) {
  var doc = goog.dom.getOwnerDocument(el);
  goog.asserts.assertObject(el, "Parameter is required");
  var pos = new goog.math.Coordinate(0, 0);
  var viewportElement = goog.style.getClientViewportElement(doc);
  if (el == viewportElement) {
    return pos;
  }
  var box = goog.style.getBoundingClientRect_(el);
  var scrollCoord = goog.dom.getDomHelper(doc).getDocumentScroll();
  pos.x = box.left + scrollCoord.x;
  pos.y = box.top + scrollCoord.y;
  return pos;
};
goog.style.getPageOffsetLeft = function(el) {
  return goog.style.getPageOffset(el).x;
};
goog.style.getPageOffsetTop = function(el) {
  return goog.style.getPageOffset(el).y;
};
goog.style.getFramedPageOffset = function(el, relativeWin) {
  var position = new goog.math.Coordinate(0, 0);
  var currentWin = goog.dom.getWindow(goog.dom.getOwnerDocument(el));
  var currentEl = el;
  do {
    var offset = currentWin == relativeWin ? goog.style.getPageOffset(currentEl) : goog.style.getClientPositionForElement_(goog.asserts.assert(currentEl));
    position.x += offset.x;
    position.y += offset.y;
  } while (currentWin && currentWin != relativeWin && currentWin != currentWin.parent && (currentEl = currentWin.frameElement) && (currentWin = currentWin.parent));
  return position;
};
goog.style.translateRectForAnotherFrame = function(rect, origBase, newBase) {
  if (origBase.getDocument() != newBase.getDocument()) {
    var body = origBase.getDocument().body;
    var pos = goog.style.getFramedPageOffset(body, newBase.getWindow());
    pos = goog.math.Coordinate.difference(pos, goog.style.getPageOffset(body));
    if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9) && !origBase.isCss1CompatMode()) {
      pos = goog.math.Coordinate.difference(pos, origBase.getDocumentScroll());
    }
    rect.left += pos.x;
    rect.top += pos.y;
  }
};
goog.style.getRelativePosition = function(a, b) {
  var ap = goog.style.getClientPosition(a);
  var bp = goog.style.getClientPosition(b);
  return new goog.math.Coordinate(ap.x - bp.x, ap.y - bp.y);
};
goog.style.getClientPositionForElement_ = function(el) {
  var box = goog.style.getBoundingClientRect_(el);
  return new goog.math.Coordinate(box.left, box.top);
};
goog.style.getClientPosition = function(el) {
  goog.asserts.assert(el);
  if (el.nodeType == goog.dom.NodeType.ELEMENT) {
    return goog.style.getClientPositionForElement_((el));
  } else {
    var targetEvent = el.changedTouches ? el.changedTouches[0] : el;
    return new goog.math.Coordinate(targetEvent.clientX, targetEvent.clientY);
  }
};
goog.style.setPageOffset = function(el, x, opt_y) {
  var cur = goog.style.getPageOffset(el);
  if (x instanceof goog.math.Coordinate) {
    opt_y = x.y;
    x = x.x;
  }
  var dx = x - cur.x;
  var dy = opt_y - cur.y;
  goog.style.setPosition(el, (el).offsetLeft + dx, (el).offsetTop + dy);
};
goog.style.setSize = function(element, w, opt_h) {
  var h;
  if (w instanceof goog.math.Size) {
    h = w.height;
    w = w.width;
  } else {
    if (opt_h == undefined) {
      throw Error("missing height argument");
    }
    h = opt_h;
  }
  goog.style.setWidth(element, (w));
  goog.style.setHeight(element, h);
};
goog.style.getPixelStyleValue_ = function(value, round) {
  if (typeof value == "number") {
    value = (round ? Math.round(value) : value) + "px";
  }
  return value;
};
goog.style.setHeight = function(element, height) {
  element.style.height = goog.style.getPixelStyleValue_(height, true);
};
goog.style.setWidth = function(element, width) {
  element.style.width = goog.style.getPixelStyleValue_(width, true);
};
goog.style.getSize = function(element) {
  return goog.style.evaluateWithTemporaryDisplay_(goog.style.getSizeWithDisplay_, (element));
};
goog.style.evaluateWithTemporaryDisplay_ = function(fn, element) {
  if (goog.style.getStyle_(element, "display") != "none") {
    return fn(element);
  }
  var style = element.style;
  var originalDisplay = style.display;
  var originalVisibility = style.visibility;
  var originalPosition = style.position;
  style.visibility = "hidden";
  style.position = "absolute";
  style.display = "inline";
  var retVal = fn(element);
  style.display = originalDisplay;
  style.position = originalPosition;
  style.visibility = originalVisibility;
  return retVal;
};
goog.style.getSizeWithDisplay_ = function(element) {
  var offsetWidth = (element).offsetWidth;
  var offsetHeight = (element).offsetHeight;
  var webkitOffsetsZero = goog.userAgent.WEBKIT && !offsetWidth && !offsetHeight;
  if ((!goog.isDef(offsetWidth) || webkitOffsetsZero) && element.getBoundingClientRect) {
    var clientRect = goog.style.getBoundingClientRect_(element);
    return new goog.math.Size(clientRect.right - clientRect.left, clientRect.bottom - clientRect.top);
  }
  return new goog.math.Size(offsetWidth, offsetHeight);
};
goog.style.getTransformedSize = function(element) {
  if (!element.getBoundingClientRect) {
    return null;
  }
  var clientRect = goog.style.evaluateWithTemporaryDisplay_(goog.style.getBoundingClientRect_, element);
  return new goog.math.Size(clientRect.right - clientRect.left, clientRect.bottom - clientRect.top);
};
goog.style.getBounds = function(element) {
  var o = goog.style.getPageOffset(element);
  var s = goog.style.getSize(element);
  return new goog.math.Rect(o.x, o.y, s.width, s.height);
};
goog.style.toCamelCase = function(selector) {
  return goog.string.toCamelCase(String(selector));
};
goog.style.toSelectorCase = function(selector) {
  return goog.string.toSelectorCase(selector);
};
goog.style.getOpacity = function(el) {
  var style = el.style;
  var result = "";
  if ("opacity" in style) {
    result = style.opacity;
  } else {
    if ("MozOpacity" in style) {
      result = style.MozOpacity;
    } else {
      if ("filter" in style) {
        var match = style.filter.match(/alpha\(opacity=([\d.]+)\)/);
        if (match) {
          result = String(match[1] / 100);
        }
      }
    }
  }
  return result == "" ? result : Number(result);
};
goog.style.setOpacity = function(el, alpha) {
  var style = el.style;
  if ("opacity" in style) {
    style.opacity = alpha;
  } else {
    if ("MozOpacity" in style) {
      style.MozOpacity = alpha;
    } else {
      if ("filter" in style) {
        if (alpha === "") {
          style.filter = "";
        } else {
          style.filter = "alpha(opacity\x3d" + alpha * 100 + ")";
        }
      }
    }
  }
};
goog.style.setTransparentBackgroundImage = function(el, src) {
  var style = el.style;
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("8")) {
    style.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(" + 'src\x3d"' + src + '", sizingMethod\x3d"crop")';
  } else {
    style.backgroundImage = "url(" + src + ")";
    style.backgroundPosition = "top left";
    style.backgroundRepeat = "no-repeat";
  }
};
goog.style.clearTransparentBackgroundImage = function(el) {
  var style = el.style;
  if ("filter" in style) {
    style.filter = "";
  } else {
    style.backgroundImage = "none";
  }
};
goog.style.showElement = function(el, display) {
  goog.style.setElementShown(el, display);
};
goog.style.setElementShown = function(el, isShown) {
  el.style.display = isShown ? "" : "none";
};
goog.style.isElementShown = function(el) {
  return el.style.display != "none";
};
goog.style.installStyles = function(stylesString, opt_node) {
  var dh = goog.dom.getDomHelper(opt_node);
  var styleSheet = null;
  var doc = dh.getDocument();
  if (goog.userAgent.IE && doc.createStyleSheet) {
    styleSheet = doc.createStyleSheet();
    goog.style.setStyles(styleSheet, stylesString);
  } else {
    var head = dh.getElementsByTagNameAndClass(goog.dom.TagName.HEAD)[0];
    if (!head) {
      var body = dh.getElementsByTagNameAndClass(goog.dom.TagName.BODY)[0];
      head = dh.createDom(goog.dom.TagName.HEAD);
      body.parentNode.insertBefore(head, body);
    }
    styleSheet = dh.createDom(goog.dom.TagName.STYLE);
    goog.style.setStyles(styleSheet, stylesString);
    dh.appendChild(head, styleSheet);
  }
  return styleSheet;
};
goog.style.uninstallStyles = function(styleSheet) {
  var node = styleSheet.ownerNode || styleSheet.owningElement || (styleSheet);
  goog.dom.removeNode(node);
};
goog.style.setStyles = function(element, stylesString) {
  if (goog.userAgent.IE && goog.isDef(element.cssText)) {
    element.cssText = stylesString;
  } else {
    element.innerHTML = stylesString;
  }
};
goog.style.setPreWrap = function(el) {
  var style = el.style;
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("8")) {
    style.whiteSpace = "pre";
    style.wordWrap = "break-word";
  } else {
    if (goog.userAgent.GECKO) {
      style.whiteSpace = "-moz-pre-wrap";
    } else {
      style.whiteSpace = "pre-wrap";
    }
  }
};
goog.style.setInlineBlock = function(el) {
  var style = el.style;
  style.position = "relative";
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("8")) {
    style.zoom = "1";
    style.display = "inline";
  } else {
    style.display = "inline-block";
  }
};
goog.style.isRightToLeft = function(el) {
  return "rtl" == goog.style.getStyle_(el, "direction");
};
goog.style.unselectableStyle_ = goog.userAgent.GECKO ? "MozUserSelect" : goog.userAgent.WEBKIT ? "WebkitUserSelect" : null;
goog.style.isUnselectable = function(el) {
  if (goog.style.unselectableStyle_) {
    return el.style[goog.style.unselectableStyle_].toLowerCase() == "none";
  } else {
    if (goog.userAgent.IE || goog.userAgent.OPERA) {
      return el.getAttribute("unselectable") == "on";
    }
  }
  return false;
};
goog.style.setUnselectable = function(el, unselectable, opt_noRecurse) {
  var descendants = !opt_noRecurse ? el.getElementsByTagName("*") : null;
  var name = goog.style.unselectableStyle_;
  if (name) {
    var value = unselectable ? "none" : "";
    if (el.style) {
      el.style[name] = value;
    }
    if (descendants) {
      for (var i = 0, descendant;descendant = descendants[i];i++) {
        if (descendant.style) {
          descendant.style[name] = value;
        }
      }
    }
  } else {
    if (goog.userAgent.IE || goog.userAgent.OPERA) {
      var value = unselectable ? "on" : "";
      el.setAttribute("unselectable", value);
      if (descendants) {
        for (var i = 0, descendant;descendant = descendants[i];i++) {
          descendant.setAttribute("unselectable", value);
        }
      }
    }
  }
};
goog.style.getBorderBoxSize = function(element) {
  return new goog.math.Size((element).offsetWidth, (element).offsetHeight);
};
goog.style.setBorderBoxSize = function(element, size) {
  var doc = goog.dom.getOwnerDocument(element);
  var isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("10") && (!isCss1CompatMode || !goog.userAgent.isVersionOrHigher("8"))) {
    var style = element.style;
    if (isCss1CompatMode) {
      var paddingBox = goog.style.getPaddingBox(element);
      var borderBox = goog.style.getBorderBox(element);
      style.pixelWidth = size.width - borderBox.left - paddingBox.left - paddingBox.right - borderBox.right;
      style.pixelHeight = size.height - borderBox.top - paddingBox.top - paddingBox.bottom - borderBox.bottom;
    } else {
      style.pixelWidth = size.width;
      style.pixelHeight = size.height;
    }
  } else {
    goog.style.setBoxSizingSize_(element, size, "border-box");
  }
};
goog.style.getContentBoxSize = function(element) {
  var doc = goog.dom.getOwnerDocument(element);
  var ieCurrentStyle = goog.userAgent.IE && element.currentStyle;
  if (ieCurrentStyle && goog.dom.getDomHelper(doc).isCss1CompatMode() && ieCurrentStyle.width != "auto" && ieCurrentStyle.height != "auto" && !ieCurrentStyle.boxSizing) {
    var width = goog.style.getIePixelValue_(element, ieCurrentStyle.width, "width", "pixelWidth");
    var height = goog.style.getIePixelValue_(element, ieCurrentStyle.height, "height", "pixelHeight");
    return new goog.math.Size(width, height);
  } else {
    var borderBoxSize = goog.style.getBorderBoxSize(element);
    var paddingBox = goog.style.getPaddingBox(element);
    var borderBox = goog.style.getBorderBox(element);
    return new goog.math.Size(borderBoxSize.width - borderBox.left - paddingBox.left - paddingBox.right - borderBox.right, borderBoxSize.height - borderBox.top - paddingBox.top - paddingBox.bottom - borderBox.bottom);
  }
};
goog.style.setContentBoxSize = function(element, size) {
  var doc = goog.dom.getOwnerDocument(element);
  var isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("10") && (!isCss1CompatMode || !goog.userAgent.isVersionOrHigher("8"))) {
    var style = element.style;
    if (isCss1CompatMode) {
      style.pixelWidth = size.width;
      style.pixelHeight = size.height;
    } else {
      var paddingBox = goog.style.getPaddingBox(element);
      var borderBox = goog.style.getBorderBox(element);
      style.pixelWidth = size.width + borderBox.left + paddingBox.left + paddingBox.right + borderBox.right;
      style.pixelHeight = size.height + borderBox.top + paddingBox.top + paddingBox.bottom + borderBox.bottom;
    }
  } else {
    goog.style.setBoxSizingSize_(element, size, "content-box");
  }
};
goog.style.setBoxSizingSize_ = function(element, size, boxSizing) {
  var style = element.style;
  if (goog.userAgent.GECKO) {
    style.MozBoxSizing = boxSizing;
  } else {
    if (goog.userAgent.WEBKIT) {
      style.WebkitBoxSizing = boxSizing;
    } else {
      style.boxSizing = boxSizing;
    }
  }
  style.width = Math.max(size.width, 0) + "px";
  style.height = Math.max(size.height, 0) + "px";
};
goog.style.getIePixelValue_ = function(element, value, name, pixelName) {
  if (/^\d+px?$/.test(value)) {
    return parseInt(value, 10);
  } else {
    var oldStyleValue = element.style[name];
    var oldRuntimeValue = element.runtimeStyle[name];
    element.runtimeStyle[name] = element.currentStyle[name];
    element.style[name] = value;
    var pixelValue = element.style[pixelName];
    element.style[name] = oldStyleValue;
    element.runtimeStyle[name] = oldRuntimeValue;
    return pixelValue;
  }
};
goog.style.getIePixelDistance_ = function(element, propName) {
  var value = goog.style.getCascadedStyle(element, propName);
  return value ? goog.style.getIePixelValue_(element, value, "left", "pixelLeft") : 0;
};
goog.style.getBox_ = function(element, stylePrefix) {
  if (goog.userAgent.IE) {
    var left = goog.style.getIePixelDistance_(element, stylePrefix + "Left");
    var right = goog.style.getIePixelDistance_(element, stylePrefix + "Right");
    var top = goog.style.getIePixelDistance_(element, stylePrefix + "Top");
    var bottom = goog.style.getIePixelDistance_(element, stylePrefix + "Bottom");
    return new goog.math.Box(top, right, bottom, left);
  } else {
    var left = goog.style.getComputedStyle(element, stylePrefix + "Left");
    var right = goog.style.getComputedStyle(element, stylePrefix + "Right");
    var top = goog.style.getComputedStyle(element, stylePrefix + "Top");
    var bottom = goog.style.getComputedStyle(element, stylePrefix + "Bottom");
    return new goog.math.Box(parseFloat(top), parseFloat(right), parseFloat(bottom), parseFloat(left));
  }
};
goog.style.getPaddingBox = function(element) {
  return goog.style.getBox_(element, "padding");
};
goog.style.getMarginBox = function(element) {
  return goog.style.getBox_(element, "margin");
};
goog.style.ieBorderWidthKeywords_ = {"thin":2, "medium":4, "thick":6};
goog.style.getIePixelBorder_ = function(element, prop) {
  if (goog.style.getCascadedStyle(element, prop + "Style") == "none") {
    return 0;
  }
  var width = goog.style.getCascadedStyle(element, prop + "Width");
  if (width in goog.style.ieBorderWidthKeywords_) {
    return goog.style.ieBorderWidthKeywords_[width];
  }
  return goog.style.getIePixelValue_(element, width, "left", "pixelLeft");
};
goog.style.getBorderBox = function(element) {
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    var left = goog.style.getIePixelBorder_(element, "borderLeft");
    var right = goog.style.getIePixelBorder_(element, "borderRight");
    var top = goog.style.getIePixelBorder_(element, "borderTop");
    var bottom = goog.style.getIePixelBorder_(element, "borderBottom");
    return new goog.math.Box(top, right, bottom, left);
  } else {
    var left = goog.style.getComputedStyle(element, "borderLeftWidth");
    var right = goog.style.getComputedStyle(element, "borderRightWidth");
    var top = goog.style.getComputedStyle(element, "borderTopWidth");
    var bottom = goog.style.getComputedStyle(element, "borderBottomWidth");
    return new goog.math.Box(parseFloat(top), parseFloat(right), parseFloat(bottom), parseFloat(left));
  }
};
goog.style.getFontFamily = function(el) {
  var doc = goog.dom.getOwnerDocument(el);
  var font = "";
  if (doc.body.createTextRange && goog.dom.contains(doc, el)) {
    var range = doc.body.createTextRange();
    range.moveToElementText(el);
    try {
      font = range.queryCommandValue("FontName");
    } catch (e) {
      font = "";
    }
  }
  if (!font) {
    font = goog.style.getStyle_(el, "fontFamily");
  }
  var fontsArray = font.split(",");
  if (fontsArray.length > 1) {
    font = fontsArray[0];
  }
  return goog.string.stripQuotes(font, "\"'");
};
goog.style.lengthUnitRegex_ = /[^\d]+$/;
goog.style.getLengthUnits = function(value) {
  var units = value.match(goog.style.lengthUnitRegex_);
  return units && units[0] || null;
};
goog.style.ABSOLUTE_CSS_LENGTH_UNITS_ = {"cm":1, "in":1, "mm":1, "pc":1, "pt":1};
goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_ = {"em":1, "ex":1};
goog.style.getFontSize = function(el) {
  var fontSize = goog.style.getStyle_(el, "fontSize");
  var sizeUnits = goog.style.getLengthUnits(fontSize);
  if (fontSize && "px" == sizeUnits) {
    return parseInt(fontSize, 10);
  }
  if (goog.userAgent.IE) {
    if (sizeUnits in goog.style.ABSOLUTE_CSS_LENGTH_UNITS_) {
      return goog.style.getIePixelValue_(el, fontSize, "left", "pixelLeft");
    } else {
      if (el.parentNode && el.parentNode.nodeType == goog.dom.NodeType.ELEMENT && sizeUnits in goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_) {
        var parentElement = (el.parentNode);
        var parentSize = goog.style.getStyle_(parentElement, "fontSize");
        return goog.style.getIePixelValue_(parentElement, fontSize == parentSize ? "1em" : fontSize, "left", "pixelLeft");
      }
    }
  }
  var sizeElement = goog.dom.createDom(goog.dom.TagName.SPAN, {"style":"visibility:hidden;position:absolute;" + "line-height:0;padding:0;margin:0;border:0;height:1em;"});
  goog.dom.appendChild(el, sizeElement);
  fontSize = sizeElement.offsetHeight;
  goog.dom.removeNode(sizeElement);
  return fontSize;
};
goog.style.parseStyleAttribute = function(value) {
  var result = {};
  goog.array.forEach(value.split(/\s*;\s*/), function(pair) {
    var keyValue = pair.match(/\s*([\w-]+)\s*\:(.+)/);
    if (keyValue) {
      var styleName = keyValue[1];
      var styleValue = goog.string.trim(keyValue[2]);
      result[goog.string.toCamelCase(styleName.toLowerCase())] = styleValue;
    }
  });
  return result;
};
goog.style.toStyleAttribute = function(obj) {
  var buffer = [];
  goog.object.forEach(obj, function(value, key) {
    buffer.push(goog.string.toSelectorCase(key), ":", value, ";");
  });
  return buffer.join("");
};
goog.style.setFloat = function(el, value) {
  el.style[goog.userAgent.IE ? "styleFloat" : "cssFloat"] = value;
};
goog.style.getFloat = function(el) {
  return el.style[goog.userAgent.IE ? "styleFloat" : "cssFloat"] || "";
};
goog.style.getScrollbarWidth = function(opt_className) {
  var outerDiv = goog.dom.createElement(goog.dom.TagName.DIV);
  if (opt_className) {
    outerDiv.className = opt_className;
  }
  outerDiv.style.cssText = "overflow:auto;" + "position:absolute;top:0;width:100px;height:100px";
  var innerDiv = goog.dom.createElement(goog.dom.TagName.DIV);
  goog.style.setSize(innerDiv, "200px", "200px");
  outerDiv.appendChild(innerDiv);
  goog.dom.appendChild(goog.dom.getDocument().body, outerDiv);
  var width = outerDiv.offsetWidth - outerDiv.clientWidth;
  goog.dom.removeNode(outerDiv);
  return width;
};
goog.style.MATRIX_TRANSLATION_REGEX_ = new RegExp("matrix\\([0-9\\.\\-]+, [0-9\\.\\-]+, " + "[0-9\\.\\-]+, [0-9\\.\\-]+, " + "([0-9\\.\\-]+)p?x?, ([0-9\\.\\-]+)p?x?\\)");
goog.style.getCssTranslation = function(element) {
  var transform = goog.style.getComputedTransform(element);
  if (!transform) {
    return new goog.math.Coordinate(0, 0);
  }
  var matches = transform.match(goog.style.MATRIX_TRANSLATION_REGEX_);
  if (!matches) {
    return new goog.math.Coordinate(0, 0);
  }
  return new goog.math.Coordinate(parseFloat(matches[1]), parseFloat(matches[2]));
};
goog.provide("goog.dom.xml");
goog.require("goog.dom");
goog.require("goog.dom.NodeType");
goog.require("goog.userAgent");
goog.dom.xml.MAX_XML_SIZE_KB = 2 * 1024;
goog.dom.xml.MAX_ELEMENT_DEPTH = 256;
goog.dom.xml.hasActiveXObjectSupport_ = function() {
  if (!goog.userAgent.IE) {
    return false;
  }
  try {
    new ActiveXObject("MSXML2.DOMDocument");
    return true;
  } catch (e) {
    return false;
  }
};
goog.dom.xml.ACTIVEX_SUPPORT = goog.userAgent.IE && goog.dom.xml.hasActiveXObjectSupport_();
goog.dom.xml.createDocument = function(opt_rootTagName, opt_namespaceUri, opt_preferActiveX) {
  if (opt_namespaceUri && !opt_rootTagName) {
    throw Error("Can't create document with namespace and no root tag");
  }
  if (document.implementation && document.implementation.createDocument && !(goog.dom.xml.ACTIVEX_SUPPORT && opt_preferActiveX)) {
    return document.implementation.createDocument(opt_namespaceUri || "", opt_rootTagName || "", null);
  } else {
    if (goog.dom.xml.ACTIVEX_SUPPORT) {
      var doc = goog.dom.xml.createMsXmlDocument_();
      if (doc) {
        if (opt_rootTagName) {
          doc.appendChild(doc.createNode(goog.dom.NodeType.ELEMENT, opt_rootTagName, opt_namespaceUri || ""));
        }
        return doc;
      }
    }
  }
  throw Error("Your browser does not support creating new documents");
};
goog.dom.xml.loadXml = function(xml, opt_preferActiveX) {
  if (typeof DOMParser != "undefined" && !(goog.dom.xml.ACTIVEX_SUPPORT && opt_preferActiveX)) {
    return (new DOMParser).parseFromString(xml, "application/xml");
  } else {
    if (goog.dom.xml.ACTIVEX_SUPPORT) {
      var doc = goog.dom.xml.createMsXmlDocument_();
      doc.loadXML(xml);
      return doc;
    }
  }
  throw Error("Your browser does not support loading xml documents");
};
goog.dom.xml.serialize = function(xml) {
  var text = xml.xml;
  if (text) {
    return text;
  }
  if (typeof XMLSerializer != "undefined") {
    return (new XMLSerializer).serializeToString(xml);
  }
  throw Error("Your browser does not support serializing XML documents");
};
goog.dom.xml.selectSingleNode = function(node, path) {
  if (typeof node.selectSingleNode != "undefined") {
    var doc = goog.dom.getOwnerDocument(node);
    if (typeof doc.setProperty != "undefined") {
      doc.setProperty("SelectionLanguage", "XPath");
    }
    return node.selectSingleNode(path);
  } else {
    if (document.implementation.hasFeature("XPath", "3.0")) {
      var doc = goog.dom.getOwnerDocument(node);
      var resolver = doc.createNSResolver(doc.documentElement);
      var result = doc.evaluate(path, node, resolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
      return result.singleNodeValue;
    }
  }
  return null;
};
goog.dom.xml.selectNodes = function(node, path) {
  if (typeof node.selectNodes != "undefined") {
    var doc = goog.dom.getOwnerDocument(node);
    if (typeof doc.setProperty != "undefined") {
      doc.setProperty("SelectionLanguage", "XPath");
    }
    return node.selectNodes(path);
  } else {
    if (document.implementation.hasFeature("XPath", "3.0")) {
      var doc = goog.dom.getOwnerDocument(node);
      var resolver = doc.createNSResolver(doc.documentElement);
      var nodes = doc.evaluate(path, node, resolver, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
      var results = [];
      var count = nodes.snapshotLength;
      for (var i = 0;i < count;i++) {
        results.push(nodes.snapshotItem(i));
      }
      return results;
    } else {
      return [];
    }
  }
};
goog.dom.xml.setAttributes = function(element, attributes) {
  for (var key in attributes) {
    if (attributes.hasOwnProperty(key)) {
      element.setAttribute(key, attributes[key]);
    }
  }
};
goog.dom.xml.createMsXmlDocument_ = function() {
  var doc = new ActiveXObject("MSXML2.DOMDocument");
  if (doc) {
    doc.resolveExternals = false;
    doc.validateOnParse = false;
    try {
      doc.setProperty("ProhibitDTD", true);
      doc.setProperty("MaxXMLSize", goog.dom.xml.MAX_XML_SIZE_KB);
      doc.setProperty("MaxElementDepth", goog.dom.xml.MAX_ELEMENT_DEPTH);
    } catch (e) {
    }
  }
  return doc;
};
goog.provide("domina");
goog.require("cljs.core");
goog.require("goog.dom.forms");
goog.require("goog.dom");
goog.require("goog.dom.classes");
goog.require("goog.dom.xml");
goog.require("goog.string");
goog.require("cljs.core");
goog.require("domina.support");
goog.require("goog.events");
goog.require("goog.style");
goog.require("clojure.string");
domina.re_html = /<|&#?\w+;/;
domina.re_leading_whitespace = /^\s+/;
domina.re_xhtml_tag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/i;
domina.re_tag_name = /<([\w:]+)/;
domina.re_no_inner_html = /<(?:script|style)/i;
domina.re_tbody = /<tbody/i;
var opt_wrapper_13091 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3cselect multiple\x3d'multiple'\x3e", "\x3c/select\x3e"], null);
var table_section_wrapper_13092 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3ctable\x3e", "\x3c/table\x3e"], null);
var cell_wrapper_13093 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, "\x3ctable\x3e\x3ctbody\x3e\x3ctr\x3e", "\x3c/tr\x3e\x3c/tbody\x3e\x3c/table\x3e"], null);
domina.wrap_map = cljs.core.PersistentHashMap.fromArrays(["td", "optgroup", "tfoot", "tr", "area", new cljs.core.Keyword(null, "default", "default", -1987822328), "option", "legend", "thead", "col", "caption", "th", "colgroup", "tbody"], [cell_wrapper_13093, opt_wrapper_13091, table_section_wrapper_13092, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, "\x3ctable\x3e\x3ctbody\x3e", "\x3c/tbody\x3e\x3c/table\x3e"], null), new cljs.core.PersistentVector(null, 3, 
5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3cmap\x3e", "\x3c/map\x3e"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, "", ""], null), opt_wrapper_13091, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3cfieldset\x3e", "\x3c/fieldset\x3e"], null), table_section_wrapper_13092, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, "\x3ctable\x3e\x3ctbody\x3e\x3c/tbody\x3e\x3ccolgroup\x3e", 
"\x3c/colgroup\x3e\x3c/table\x3e"], null), table_section_wrapper_13092, cell_wrapper_13093, table_section_wrapper_13092, table_section_wrapper_13092]);
domina.remove_extraneous_tbody_BANG_ = function domina$remove_extraneous_tbody_BANG_(div, html, tag_name, start_wrap) {
  var no_tbody_QMARK_ = cljs.core.not.call(null, cljs.core.re_find.call(null, domina.re_tbody, html));
  var tbody = cljs.core._EQ_.call(null, tag_name, "table") && no_tbody_QMARK_ ? function() {
    var and__6141__auto__ = div.firstChild;
    if (cljs.core.truth_(and__6141__auto__)) {
      return div.firstChild.childNodes;
    } else {
      return and__6141__auto__;
    }
  }() : cljs.core._EQ_.call(null, start_wrap, "\x3ctable\x3e") && no_tbody_QMARK_ ? div.childNodes : cljs.core.PersistentVector.EMPTY;
  var seq__13098 = cljs.core.seq.call(null, tbody);
  var chunk__13099 = null;
  var count__13100 = 0;
  var i__13101 = 0;
  while (true) {
    if (i__13101 < count__13100) {
      var child = cljs.core._nth.call(null, chunk__13099, i__13101);
      if (cljs.core._EQ_.call(null, child.nodeName, "tbody") && cljs.core._EQ_.call(null, child.childNodes.length, 0)) {
        child.parentNode.removeChild(child);
      } else {
      }
      var G__13102 = seq__13098;
      var G__13103 = chunk__13099;
      var G__13104 = count__13100;
      var G__13105 = i__13101 + 1;
      seq__13098 = G__13102;
      chunk__13099 = G__13103;
      count__13100 = G__13104;
      i__13101 = G__13105;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq.call(null, seq__13098);
      if (temp__4657__auto__) {
        var seq__13098__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13098__$1)) {
          var c__6956__auto__ = cljs.core.chunk_first.call(null, seq__13098__$1);
          var G__13106 = cljs.core.chunk_rest.call(null, seq__13098__$1);
          var G__13107 = c__6956__auto__;
          var G__13108 = cljs.core.count.call(null, c__6956__auto__);
          var G__13109 = 0;
          seq__13098 = G__13106;
          chunk__13099 = G__13107;
          count__13100 = G__13108;
          i__13101 = G__13109;
          continue;
        } else {
          var child = cljs.core.first.call(null, seq__13098__$1);
          if (cljs.core._EQ_.call(null, child.nodeName, "tbody") && cljs.core._EQ_.call(null, child.childNodes.length, 0)) {
            child.parentNode.removeChild(child);
          } else {
          }
          var G__13110 = cljs.core.next.call(null, seq__13098__$1);
          var G__13111 = null;
          var G__13112 = 0;
          var G__13113 = 0;
          seq__13098 = G__13110;
          chunk__13099 = G__13111;
          count__13100 = G__13112;
          i__13101 = G__13113;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
domina.restore_leading_whitespace_BANG_ = function domina$restore_leading_whitespace_BANG_(div, html) {
  return div.insertBefore(document.createTextNode(cljs.core.first.call(null, cljs.core.re_find.call(null, domina.re_leading_whitespace, html))), div.firstChild);
};
domina.html_to_dom = function domina$html_to_dom(html) {
  var html__$1 = clojure.string.replace.call(null, html, domina.re_xhtml_tag, "\x3c$1\x3e\x3c/$2\x3e");
  var tag_name = [cljs.core.str(cljs.core.second.call(null, cljs.core.re_find.call(null, domina.re_tag_name, html__$1)))].join("").toLowerCase();
  var vec__13115 = cljs.core.get.call(null, domina.wrap_map, tag_name, (new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(domina.wrap_map));
  var depth = cljs.core.nth.call(null, vec__13115, 0, null);
  var start_wrap = cljs.core.nth.call(null, vec__13115, 1, null);
  var end_wrap = cljs.core.nth.call(null, vec__13115, 2, null);
  var div = function() {
    var wrapper = function() {
      var div = document.createElement("div");
      div.innerHTML = [cljs.core.str(start_wrap), cljs.core.str(html__$1), cljs.core.str(end_wrap)].join("");
      return div;
    }();
    var level = depth;
    while (true) {
      if (level > 0) {
        var G__13116 = wrapper.lastChild;
        var G__13117 = level - 1;
        wrapper = G__13116;
        level = G__13117;
        continue;
      } else {
        return wrapper;
      }
      break;
    }
  }();
  if (cljs.core.truth_(domina.support.extraneous_tbody_QMARK_)) {
    domina.remove_extraneous_tbody_BANG_.call(null, div, html__$1, tag_name, start_wrap);
  } else {
  }
  if (cljs.core.truth_(function() {
    var and__6141__auto__ = cljs.core.not.call(null, domina.support.leading_whitespace_QMARK_);
    if (and__6141__auto__) {
      return cljs.core.re_find.call(null, domina.re_leading_whitespace, html__$1);
    } else {
      return and__6141__auto__;
    }
  }())) {
    domina.restore_leading_whitespace_BANG_.call(null, div, html__$1);
  } else {
  }
  return div.childNodes;
};
domina.string_to_dom = function domina$string_to_dom(s) {
  if (cljs.core.truth_(cljs.core.re_find.call(null, domina.re_html, s))) {
    return domina.html_to_dom.call(null, s);
  } else {
    return document.createTextNode(s);
  }
};
domina.DomContent = function() {
};
domina.nodes = function domina$nodes(content) {
  if (!(content == null) && !(content.domina$DomContent$nodes$arity$1 == null)) {
    return content.domina$DomContent$nodes$arity$1(content);
  } else {
    var x__6808__auto__ = content == null ? null : content;
    var m__6809__auto__ = domina.nodes[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, content);
    } else {
      var m__6809__auto____$1 = domina.nodes["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, content);
      } else {
        throw cljs.core.missing_protocol.call(null, "DomContent.nodes", content);
      }
    }
  }
};
domina.single_node = function domina$single_node(nodeseq) {
  if (!(nodeseq == null) && !(nodeseq.domina$DomContent$single_node$arity$1 == null)) {
    return nodeseq.domina$DomContent$single_node$arity$1(nodeseq);
  } else {
    var x__6808__auto__ = nodeseq == null ? null : nodeseq;
    var m__6809__auto__ = domina.single_node[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, nodeseq);
    } else {
      var m__6809__auto____$1 = domina.single_node["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, nodeseq);
      } else {
        throw cljs.core.missing_protocol.call(null, "DomContent.single-node", nodeseq);
      }
    }
  }
};
domina._STAR_debug_STAR_ = true;
domina.log_debug = function domina$log_debug(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___13119 = arguments.length;
  var i__7212__auto___13120 = 0;
  while (true) {
    if (i__7212__auto___13120 < len__7211__auto___13119) {
      args__7218__auto__.push(arguments[i__7212__auto___13120]);
      var G__13121 = i__7212__auto___13120 + 1;
      i__7212__auto___13120 = G__13121;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return domina.log_debug.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
domina.log_debug.cljs$core$IFn$_invoke$arity$variadic = function(mesg) {
  if (cljs.core.truth_(function() {
    var and__6141__auto__ = domina._STAR_debug_STAR_;
    if (cljs.core.truth_(and__6141__auto__)) {
      return !cljs.core._EQ_.call(null, window.console, undefined);
    } else {
      return and__6141__auto__;
    }
  }())) {
    return console.log(cljs.core.apply.call(null, cljs.core.str, mesg));
  } else {
    return null;
  }
};
domina.log_debug.cljs$lang$maxFixedArity = 0;
domina.log_debug.cljs$lang$applyTo = function(seq13118) {
  return domina.log_debug.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq13118));
};
domina.log = function domina$log(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___13123 = arguments.length;
  var i__7212__auto___13124 = 0;
  while (true) {
    if (i__7212__auto___13124 < len__7211__auto___13123) {
      args__7218__auto__.push(arguments[i__7212__auto___13124]);
      var G__13125 = i__7212__auto___13124 + 1;
      i__7212__auto___13124 = G__13125;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return domina.log.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
domina.log.cljs$core$IFn$_invoke$arity$variadic = function(mesg) {
  if (cljs.core.truth_(window.console)) {
    return console.log(cljs.core.apply.call(null, cljs.core.str, mesg));
  } else {
    return null;
  }
};
domina.log.cljs$lang$maxFixedArity = 0;
domina.log.cljs$lang$applyTo = function(seq13122) {
  return domina.log.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq13122));
};
domina.by_id = function domina$by_id(id) {
  return goog.dom.getElement(cljs.core.name.call(null, id));
};
domina.by_class = function domina$by_class(class_name) {
  return domina.normalize_seq.call(null, goog.dom.getElementsByClass(cljs.core.name.call(null, class_name)));
};
domina.children = function domina$children(content) {
  return cljs.core.doall.call(null, cljs.core.mapcat.call(null, goog.dom.getChildren, domina.nodes.call(null, content)));
};
domina.common_ancestor = function domina$common_ancestor(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___13127 = arguments.length;
  var i__7212__auto___13128 = 0;
  while (true) {
    if (i__7212__auto___13128 < len__7211__auto___13127) {
      args__7218__auto__.push(arguments[i__7212__auto___13128]);
      var G__13129 = i__7212__auto___13128 + 1;
      i__7212__auto___13128 = G__13129;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return domina.common_ancestor.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
domina.common_ancestor.cljs$core$IFn$_invoke$arity$variadic = function(contents) {
  return cljs.core.apply.call(null, goog.dom.findCommonAncestor, cljs.core.map.call(null, domina.single_node, contents));
};
domina.common_ancestor.cljs$lang$maxFixedArity = 0;
domina.common_ancestor.cljs$lang$applyTo = function(seq13126) {
  return domina.common_ancestor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq13126));
};
domina.ancestor_QMARK_ = function domina$ancestor_QMARK_(ancestor_content, descendant_content) {
  return cljs.core._EQ_.call(null, domina.common_ancestor.call(null, ancestor_content, descendant_content), domina.single_node.call(null, ancestor_content));
};
domina.clone = function domina$clone(content) {
  return cljs.core.map.call(null, function(p1__13130_SHARP_) {
    return p1__13130_SHARP_.cloneNode(true);
  }, domina.nodes.call(null, content));
};
domina.append_BANG_ = function domina$append_BANG_(parent_content, child_content) {
  domina.apply_with_cloning.call(null, goog.dom.appendChild, parent_content, child_content);
  return parent_content;
};
domina.insert_BANG_ = function domina$insert_BANG_(parent_content, child_content, idx) {
  domina.apply_with_cloning.call(null, function(p1__13131_SHARP_, p2__13132_SHARP_) {
    return goog.dom.insertChildAt(p1__13131_SHARP_, p2__13132_SHARP_, idx);
  }, parent_content, child_content);
  return parent_content;
};
domina.prepend_BANG_ = function domina$prepend_BANG_(parent_content, child_content) {
  domina.insert_BANG_.call(null, parent_content, child_content, 0);
  return parent_content;
};
domina.insert_before_BANG_ = function domina$insert_before_BANG_(content, new_content) {
  domina.apply_with_cloning.call(null, function(p1__13134_SHARP_, p2__13133_SHARP_) {
    return goog.dom.insertSiblingBefore(p2__13133_SHARP_, p1__13134_SHARP_);
  }, content, new_content);
  return content;
};
domina.insert_after_BANG_ = function domina$insert_after_BANG_(content, new_content) {
  domina.apply_with_cloning.call(null, function(p1__13136_SHARP_, p2__13135_SHARP_) {
    return goog.dom.insertSiblingAfter(p2__13135_SHARP_, p1__13136_SHARP_);
  }, content, new_content);
  return content;
};
domina.swap_content_BANG_ = function domina$swap_content_BANG_(old_content, new_content) {
  domina.apply_with_cloning.call(null, function(p1__13138_SHARP_, p2__13137_SHARP_) {
    return goog.dom.replaceNode(p2__13137_SHARP_, p1__13138_SHARP_);
  }, old_content, new_content);
  return old_content;
};
domina.detach_BANG_ = function domina$detach_BANG_(content) {
  return cljs.core.doall.call(null, cljs.core.map.call(null, goog.dom.removeNode, domina.nodes.call(null, content)));
};
domina.destroy_BANG_ = function domina$destroy_BANG_(content) {
  return cljs.core.dorun.call(null, cljs.core.map.call(null, goog.dom.removeNode, domina.nodes.call(null, content)));
};
domina.destroy_children_BANG_ = function domina$destroy_children_BANG_(content) {
  cljs.core.dorun.call(null, cljs.core.map.call(null, goog.dom.removeChildren, domina.nodes.call(null, content)));
  return content;
};
domina.style = function domina$style(content, name) {
  var s = goog.style.getStyle(domina.single_node.call(null, content), cljs.core.name.call(null, name));
  if (clojure.string.blank_QMARK_.call(null, s)) {
    return null;
  } else {
    return s;
  }
};
domina.attr = function domina$attr(content, name) {
  return domina.single_node.call(null, content).getAttribute(cljs.core.name.call(null, name));
};
domina.set_style_BANG_ = function domina$set_style_BANG_(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___13146 = arguments.length;
  var i__7212__auto___13147 = 0;
  while (true) {
    if (i__7212__auto___13147 < len__7211__auto___13146) {
      args__7218__auto__.push(arguments[i__7212__auto___13147]);
      var G__13148 = i__7212__auto___13147 + 1;
      i__7212__auto___13147 = G__13148;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 2 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(2), 0) : null;
  return domina.set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7219__auto__);
};
domina.set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(content, name, value) {
  var seq__13142_13149 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__13143_13150 = null;
  var count__13144_13151 = 0;
  var i__13145_13152 = 0;
  while (true) {
    if (i__13145_13152 < count__13144_13151) {
      var n_13153 = cljs.core._nth.call(null, chunk__13143_13150, i__13145_13152);
      goog.style.setStyle(n_13153, cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
      var G__13154 = seq__13142_13149;
      var G__13155 = chunk__13143_13150;
      var G__13156 = count__13144_13151;
      var G__13157 = i__13145_13152 + 1;
      seq__13142_13149 = G__13154;
      chunk__13143_13150 = G__13155;
      count__13144_13151 = G__13156;
      i__13145_13152 = G__13157;
      continue;
    } else {
      var temp__4657__auto___13158 = cljs.core.seq.call(null, seq__13142_13149);
      if (temp__4657__auto___13158) {
        var seq__13142_13159__$1 = temp__4657__auto___13158;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13142_13159__$1)) {
          var c__6956__auto___13160 = cljs.core.chunk_first.call(null, seq__13142_13159__$1);
          var G__13161 = cljs.core.chunk_rest.call(null, seq__13142_13159__$1);
          var G__13162 = c__6956__auto___13160;
          var G__13163 = cljs.core.count.call(null, c__6956__auto___13160);
          var G__13164 = 0;
          seq__13142_13149 = G__13161;
          chunk__13143_13150 = G__13162;
          count__13144_13151 = G__13163;
          i__13145_13152 = G__13164;
          continue;
        } else {
          var n_13165 = cljs.core.first.call(null, seq__13142_13159__$1);
          goog.style.setStyle(n_13165, cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
          var G__13166 = cljs.core.next.call(null, seq__13142_13159__$1);
          var G__13167 = null;
          var G__13168 = 0;
          var G__13169 = 0;
          seq__13142_13149 = G__13166;
          chunk__13143_13150 = G__13167;
          count__13144_13151 = G__13168;
          i__13145_13152 = G__13169;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.set_style_BANG_.cljs$lang$maxFixedArity = 2;
domina.set_style_BANG_.cljs$lang$applyTo = function(seq13139) {
  var G__13140 = cljs.core.first.call(null, seq13139);
  var seq13139__$1 = cljs.core.next.call(null, seq13139);
  var G__13141 = cljs.core.first.call(null, seq13139__$1);
  var seq13139__$2 = cljs.core.next.call(null, seq13139__$1);
  return domina.set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__13140, G__13141, seq13139__$2);
};
domina.set_attr_BANG_ = function domina$set_attr_BANG_(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___13177 = arguments.length;
  var i__7212__auto___13178 = 0;
  while (true) {
    if (i__7212__auto___13178 < len__7211__auto___13177) {
      args__7218__auto__.push(arguments[i__7212__auto___13178]);
      var G__13179 = i__7212__auto___13178 + 1;
      i__7212__auto___13178 = G__13179;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 2 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(2), 0) : null;
  return domina.set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7219__auto__);
};
domina.set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(content, name, value) {
  var seq__13173_13180 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__13174_13181 = null;
  var count__13175_13182 = 0;
  var i__13176_13183 = 0;
  while (true) {
    if (i__13176_13183 < count__13175_13182) {
      var n_13184 = cljs.core._nth.call(null, chunk__13174_13181, i__13176_13183);
      n_13184.setAttribute(cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
      var G__13185 = seq__13173_13180;
      var G__13186 = chunk__13174_13181;
      var G__13187 = count__13175_13182;
      var G__13188 = i__13176_13183 + 1;
      seq__13173_13180 = G__13185;
      chunk__13174_13181 = G__13186;
      count__13175_13182 = G__13187;
      i__13176_13183 = G__13188;
      continue;
    } else {
      var temp__4657__auto___13189 = cljs.core.seq.call(null, seq__13173_13180);
      if (temp__4657__auto___13189) {
        var seq__13173_13190__$1 = temp__4657__auto___13189;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13173_13190__$1)) {
          var c__6956__auto___13191 = cljs.core.chunk_first.call(null, seq__13173_13190__$1);
          var G__13192 = cljs.core.chunk_rest.call(null, seq__13173_13190__$1);
          var G__13193 = c__6956__auto___13191;
          var G__13194 = cljs.core.count.call(null, c__6956__auto___13191);
          var G__13195 = 0;
          seq__13173_13180 = G__13192;
          chunk__13174_13181 = G__13193;
          count__13175_13182 = G__13194;
          i__13176_13183 = G__13195;
          continue;
        } else {
          var n_13196 = cljs.core.first.call(null, seq__13173_13190__$1);
          n_13196.setAttribute(cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
          var G__13197 = cljs.core.next.call(null, seq__13173_13190__$1);
          var G__13198 = null;
          var G__13199 = 0;
          var G__13200 = 0;
          seq__13173_13180 = G__13197;
          chunk__13174_13181 = G__13198;
          count__13175_13182 = G__13199;
          i__13176_13183 = G__13200;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.set_attr_BANG_.cljs$lang$maxFixedArity = 2;
domina.set_attr_BANG_.cljs$lang$applyTo = function(seq13170) {
  var G__13171 = cljs.core.first.call(null, seq13170);
  var seq13170__$1 = cljs.core.next.call(null, seq13170);
  var G__13172 = cljs.core.first.call(null, seq13170__$1);
  var seq13170__$2 = cljs.core.next.call(null, seq13170__$1);
  return domina.set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__13171, G__13172, seq13170__$2);
};
domina.remove_attr_BANG_ = function domina$remove_attr_BANG_(content, name) {
  var seq__13205_13209 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__13206_13210 = null;
  var count__13207_13211 = 0;
  var i__13208_13212 = 0;
  while (true) {
    if (i__13208_13212 < count__13207_13211) {
      var n_13213 = cljs.core._nth.call(null, chunk__13206_13210, i__13208_13212);
      n_13213.removeAttribute(cljs.core.name.call(null, name));
      var G__13214 = seq__13205_13209;
      var G__13215 = chunk__13206_13210;
      var G__13216 = count__13207_13211;
      var G__13217 = i__13208_13212 + 1;
      seq__13205_13209 = G__13214;
      chunk__13206_13210 = G__13215;
      count__13207_13211 = G__13216;
      i__13208_13212 = G__13217;
      continue;
    } else {
      var temp__4657__auto___13218 = cljs.core.seq.call(null, seq__13205_13209);
      if (temp__4657__auto___13218) {
        var seq__13205_13219__$1 = temp__4657__auto___13218;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13205_13219__$1)) {
          var c__6956__auto___13220 = cljs.core.chunk_first.call(null, seq__13205_13219__$1);
          var G__13221 = cljs.core.chunk_rest.call(null, seq__13205_13219__$1);
          var G__13222 = c__6956__auto___13220;
          var G__13223 = cljs.core.count.call(null, c__6956__auto___13220);
          var G__13224 = 0;
          seq__13205_13209 = G__13221;
          chunk__13206_13210 = G__13222;
          count__13207_13211 = G__13223;
          i__13208_13212 = G__13224;
          continue;
        } else {
          var n_13225 = cljs.core.first.call(null, seq__13205_13219__$1);
          n_13225.removeAttribute(cljs.core.name.call(null, name));
          var G__13226 = cljs.core.next.call(null, seq__13205_13219__$1);
          var G__13227 = null;
          var G__13228 = 0;
          var G__13229 = 0;
          seq__13205_13209 = G__13226;
          chunk__13206_13210 = G__13227;
          count__13207_13211 = G__13228;
          i__13208_13212 = G__13229;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.parse_style_attributes = function domina$parse_style_attributes(style) {
  return cljs.core.reduce.call(null, function(acc, pair) {
    var vec__13231 = pair.split(/\s*:\s*/);
    var k = cljs.core.nth.call(null, vec__13231, 0, null);
    var v = cljs.core.nth.call(null, vec__13231, 1, null);
    if (cljs.core.truth_(function() {
      var and__6141__auto__ = k;
      if (cljs.core.truth_(and__6141__auto__)) {
        return v;
      } else {
        return and__6141__auto__;
      }
    }())) {
      return cljs.core.assoc.call(null, acc, cljs.core.keyword.call(null, k.toLowerCase()), v);
    } else {
      return acc;
    }
  }, cljs.core.PersistentArrayMap.EMPTY, style.split(/\s*;\s*/));
};
domina.styles = function domina$styles(content) {
  var style = domina.attr.call(null, content, "style");
  if (typeof style === "string") {
    return domina.parse_style_attributes.call(null, style);
  } else {
    if (style == null) {
      return cljs.core.PersistentArrayMap.EMPTY;
    } else {
      if (cljs.core.truth_(style.cssText)) {
        return domina.parse_style_attributes.call(null, style.cssText);
      } else {
        return cljs.core.PersistentArrayMap.EMPTY;
      }
    }
  }
};
domina.attrs = function domina$attrs(content) {
  var node = domina.single_node.call(null, content);
  var attrs__$1 = node.attributes;
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.filter.call(null, cljs.core.complement.call(null, cljs.core.nil_QMARK_), cljs.core.map.call(null, function(node, attrs__$1) {
    return function(p1__13232_SHARP_) {
      var attr = attrs__$1.item(p1__13232_SHARP_);
      var value = attr.nodeValue;
      if (cljs.core.not_EQ_.call(null, null, value) && cljs.core.not_EQ_.call(null, "", value)) {
        return cljs.core.PersistentArrayMap.fromArray([cljs.core.keyword.call(null, attr.nodeName.toLowerCase()), attr.nodeValue], true, false);
      } else {
        return null;
      }
    };
  }(node, attrs__$1), cljs.core.range.call(null, attrs__$1.length))));
};
domina.set_styles_BANG_ = function domina$set_styles_BANG_(content, styles) {
  var seq__13239_13245 = cljs.core.seq.call(null, styles);
  var chunk__13240_13246 = null;
  var count__13241_13247 = 0;
  var i__13242_13248 = 0;
  while (true) {
    if (i__13242_13248 < count__13241_13247) {
      var vec__13243_13249 = cljs.core._nth.call(null, chunk__13240_13246, i__13242_13248);
      var name_13250 = cljs.core.nth.call(null, vec__13243_13249, 0, null);
      var value_13251 = cljs.core.nth.call(null, vec__13243_13249, 1, null);
      domina.set_style_BANG_.call(null, content, name_13250, value_13251);
      var G__13252 = seq__13239_13245;
      var G__13253 = chunk__13240_13246;
      var G__13254 = count__13241_13247;
      var G__13255 = i__13242_13248 + 1;
      seq__13239_13245 = G__13252;
      chunk__13240_13246 = G__13253;
      count__13241_13247 = G__13254;
      i__13242_13248 = G__13255;
      continue;
    } else {
      var temp__4657__auto___13256 = cljs.core.seq.call(null, seq__13239_13245);
      if (temp__4657__auto___13256) {
        var seq__13239_13257__$1 = temp__4657__auto___13256;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13239_13257__$1)) {
          var c__6956__auto___13258 = cljs.core.chunk_first.call(null, seq__13239_13257__$1);
          var G__13259 = cljs.core.chunk_rest.call(null, seq__13239_13257__$1);
          var G__13260 = c__6956__auto___13258;
          var G__13261 = cljs.core.count.call(null, c__6956__auto___13258);
          var G__13262 = 0;
          seq__13239_13245 = G__13259;
          chunk__13240_13246 = G__13260;
          count__13241_13247 = G__13261;
          i__13242_13248 = G__13262;
          continue;
        } else {
          var vec__13244_13263 = cljs.core.first.call(null, seq__13239_13257__$1);
          var name_13264 = cljs.core.nth.call(null, vec__13244_13263, 0, null);
          var value_13265 = cljs.core.nth.call(null, vec__13244_13263, 1, null);
          domina.set_style_BANG_.call(null, content, name_13264, value_13265);
          var G__13266 = cljs.core.next.call(null, seq__13239_13257__$1);
          var G__13267 = null;
          var G__13268 = 0;
          var G__13269 = 0;
          seq__13239_13245 = G__13266;
          chunk__13240_13246 = G__13267;
          count__13241_13247 = G__13268;
          i__13242_13248 = G__13269;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.set_attrs_BANG_ = function domina$set_attrs_BANG_(content, attrs) {
  var seq__13276_13282 = cljs.core.seq.call(null, attrs);
  var chunk__13277_13283 = null;
  var count__13278_13284 = 0;
  var i__13279_13285 = 0;
  while (true) {
    if (i__13279_13285 < count__13278_13284) {
      var vec__13280_13286 = cljs.core._nth.call(null, chunk__13277_13283, i__13279_13285);
      var name_13287 = cljs.core.nth.call(null, vec__13280_13286, 0, null);
      var value_13288 = cljs.core.nth.call(null, vec__13280_13286, 1, null);
      domina.set_attr_BANG_.call(null, content, name_13287, value_13288);
      var G__13289 = seq__13276_13282;
      var G__13290 = chunk__13277_13283;
      var G__13291 = count__13278_13284;
      var G__13292 = i__13279_13285 + 1;
      seq__13276_13282 = G__13289;
      chunk__13277_13283 = G__13290;
      count__13278_13284 = G__13291;
      i__13279_13285 = G__13292;
      continue;
    } else {
      var temp__4657__auto___13293 = cljs.core.seq.call(null, seq__13276_13282);
      if (temp__4657__auto___13293) {
        var seq__13276_13294__$1 = temp__4657__auto___13293;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13276_13294__$1)) {
          var c__6956__auto___13295 = cljs.core.chunk_first.call(null, seq__13276_13294__$1);
          var G__13296 = cljs.core.chunk_rest.call(null, seq__13276_13294__$1);
          var G__13297 = c__6956__auto___13295;
          var G__13298 = cljs.core.count.call(null, c__6956__auto___13295);
          var G__13299 = 0;
          seq__13276_13282 = G__13296;
          chunk__13277_13283 = G__13297;
          count__13278_13284 = G__13298;
          i__13279_13285 = G__13299;
          continue;
        } else {
          var vec__13281_13300 = cljs.core.first.call(null, seq__13276_13294__$1);
          var name_13301 = cljs.core.nth.call(null, vec__13281_13300, 0, null);
          var value_13302 = cljs.core.nth.call(null, vec__13281_13300, 1, null);
          domina.set_attr_BANG_.call(null, content, name_13301, value_13302);
          var G__13303 = cljs.core.next.call(null, seq__13276_13294__$1);
          var G__13304 = null;
          var G__13305 = 0;
          var G__13306 = 0;
          seq__13276_13282 = G__13303;
          chunk__13277_13283 = G__13304;
          count__13278_13284 = G__13305;
          i__13279_13285 = G__13306;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.has_class_QMARK_ = function domina$has_class_QMARK_(content, class$) {
  return goog.dom.classes.has(domina.single_node.call(null, content), class$);
};
domina.add_class_BANG_ = function domina$add_class_BANG_(content, class$) {
  var seq__13311_13315 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__13312_13316 = null;
  var count__13313_13317 = 0;
  var i__13314_13318 = 0;
  while (true) {
    if (i__13314_13318 < count__13313_13317) {
      var node_13319 = cljs.core._nth.call(null, chunk__13312_13316, i__13314_13318);
      goog.dom.classes.add(node_13319, class$);
      var G__13320 = seq__13311_13315;
      var G__13321 = chunk__13312_13316;
      var G__13322 = count__13313_13317;
      var G__13323 = i__13314_13318 + 1;
      seq__13311_13315 = G__13320;
      chunk__13312_13316 = G__13321;
      count__13313_13317 = G__13322;
      i__13314_13318 = G__13323;
      continue;
    } else {
      var temp__4657__auto___13324 = cljs.core.seq.call(null, seq__13311_13315);
      if (temp__4657__auto___13324) {
        var seq__13311_13325__$1 = temp__4657__auto___13324;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13311_13325__$1)) {
          var c__6956__auto___13326 = cljs.core.chunk_first.call(null, seq__13311_13325__$1);
          var G__13327 = cljs.core.chunk_rest.call(null, seq__13311_13325__$1);
          var G__13328 = c__6956__auto___13326;
          var G__13329 = cljs.core.count.call(null, c__6956__auto___13326);
          var G__13330 = 0;
          seq__13311_13315 = G__13327;
          chunk__13312_13316 = G__13328;
          count__13313_13317 = G__13329;
          i__13314_13318 = G__13330;
          continue;
        } else {
          var node_13331 = cljs.core.first.call(null, seq__13311_13325__$1);
          goog.dom.classes.add(node_13331, class$);
          var G__13332 = cljs.core.next.call(null, seq__13311_13325__$1);
          var G__13333 = null;
          var G__13334 = 0;
          var G__13335 = 0;
          seq__13311_13315 = G__13332;
          chunk__13312_13316 = G__13333;
          count__13313_13317 = G__13334;
          i__13314_13318 = G__13335;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.remove_class_BANG_ = function domina$remove_class_BANG_(content, class$) {
  var seq__13340_13344 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__13341_13345 = null;
  var count__13342_13346 = 0;
  var i__13343_13347 = 0;
  while (true) {
    if (i__13343_13347 < count__13342_13346) {
      var node_13348 = cljs.core._nth.call(null, chunk__13341_13345, i__13343_13347);
      goog.dom.classes.remove(node_13348, class$);
      var G__13349 = seq__13340_13344;
      var G__13350 = chunk__13341_13345;
      var G__13351 = count__13342_13346;
      var G__13352 = i__13343_13347 + 1;
      seq__13340_13344 = G__13349;
      chunk__13341_13345 = G__13350;
      count__13342_13346 = G__13351;
      i__13343_13347 = G__13352;
      continue;
    } else {
      var temp__4657__auto___13353 = cljs.core.seq.call(null, seq__13340_13344);
      if (temp__4657__auto___13353) {
        var seq__13340_13354__$1 = temp__4657__auto___13353;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13340_13354__$1)) {
          var c__6956__auto___13355 = cljs.core.chunk_first.call(null, seq__13340_13354__$1);
          var G__13356 = cljs.core.chunk_rest.call(null, seq__13340_13354__$1);
          var G__13357 = c__6956__auto___13355;
          var G__13358 = cljs.core.count.call(null, c__6956__auto___13355);
          var G__13359 = 0;
          seq__13340_13344 = G__13356;
          chunk__13341_13345 = G__13357;
          count__13342_13346 = G__13358;
          i__13343_13347 = G__13359;
          continue;
        } else {
          var node_13360 = cljs.core.first.call(null, seq__13340_13354__$1);
          goog.dom.classes.remove(node_13360, class$);
          var G__13361 = cljs.core.next.call(null, seq__13340_13354__$1);
          var G__13362 = null;
          var G__13363 = 0;
          var G__13364 = 0;
          seq__13340_13344 = G__13361;
          chunk__13341_13345 = G__13362;
          count__13342_13346 = G__13363;
          i__13343_13347 = G__13364;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.toggle_class_BANG_ = function domina$toggle_class_BANG_(content, class$) {
  var seq__13369_13373 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__13370_13374 = null;
  var count__13371_13375 = 0;
  var i__13372_13376 = 0;
  while (true) {
    if (i__13372_13376 < count__13371_13375) {
      var node_13377 = cljs.core._nth.call(null, chunk__13370_13374, i__13372_13376);
      goog.dom.classes.toggle(node_13377, class$);
      var G__13378 = seq__13369_13373;
      var G__13379 = chunk__13370_13374;
      var G__13380 = count__13371_13375;
      var G__13381 = i__13372_13376 + 1;
      seq__13369_13373 = G__13378;
      chunk__13370_13374 = G__13379;
      count__13371_13375 = G__13380;
      i__13372_13376 = G__13381;
      continue;
    } else {
      var temp__4657__auto___13382 = cljs.core.seq.call(null, seq__13369_13373);
      if (temp__4657__auto___13382) {
        var seq__13369_13383__$1 = temp__4657__auto___13382;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13369_13383__$1)) {
          var c__6956__auto___13384 = cljs.core.chunk_first.call(null, seq__13369_13383__$1);
          var G__13385 = cljs.core.chunk_rest.call(null, seq__13369_13383__$1);
          var G__13386 = c__6956__auto___13384;
          var G__13387 = cljs.core.count.call(null, c__6956__auto___13384);
          var G__13388 = 0;
          seq__13369_13373 = G__13385;
          chunk__13370_13374 = G__13386;
          count__13371_13375 = G__13387;
          i__13372_13376 = G__13388;
          continue;
        } else {
          var node_13389 = cljs.core.first.call(null, seq__13369_13383__$1);
          goog.dom.classes.toggle(node_13389, class$);
          var G__13390 = cljs.core.next.call(null, seq__13369_13383__$1);
          var G__13391 = null;
          var G__13392 = 0;
          var G__13393 = 0;
          seq__13369_13373 = G__13390;
          chunk__13370_13374 = G__13391;
          count__13371_13375 = G__13392;
          i__13372_13376 = G__13393;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.classes = function domina$classes(content) {
  return cljs.core.seq.call(null, goog.dom.classes.get(domina.single_node.call(null, content)));
};
domina.set_classes_BANG_ = function domina$set_classes_BANG_(content, classes) {
  var classes_13402__$1 = cljs.core.coll_QMARK_.call(null, classes) ? clojure.string.join.call(null, " ", classes) : classes;
  var seq__13398_13403 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__13399_13404 = null;
  var count__13400_13405 = 0;
  var i__13401_13406 = 0;
  while (true) {
    if (i__13401_13406 < count__13400_13405) {
      var node_13407 = cljs.core._nth.call(null, chunk__13399_13404, i__13401_13406);
      goog.dom.classes.set(node_13407, classes_13402__$1);
      var G__13408 = seq__13398_13403;
      var G__13409 = chunk__13399_13404;
      var G__13410 = count__13400_13405;
      var G__13411 = i__13401_13406 + 1;
      seq__13398_13403 = G__13408;
      chunk__13399_13404 = G__13409;
      count__13400_13405 = G__13410;
      i__13401_13406 = G__13411;
      continue;
    } else {
      var temp__4657__auto___13412 = cljs.core.seq.call(null, seq__13398_13403);
      if (temp__4657__auto___13412) {
        var seq__13398_13413__$1 = temp__4657__auto___13412;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13398_13413__$1)) {
          var c__6956__auto___13414 = cljs.core.chunk_first.call(null, seq__13398_13413__$1);
          var G__13415 = cljs.core.chunk_rest.call(null, seq__13398_13413__$1);
          var G__13416 = c__6956__auto___13414;
          var G__13417 = cljs.core.count.call(null, c__6956__auto___13414);
          var G__13418 = 0;
          seq__13398_13403 = G__13415;
          chunk__13399_13404 = G__13416;
          count__13400_13405 = G__13417;
          i__13401_13406 = G__13418;
          continue;
        } else {
          var node_13419 = cljs.core.first.call(null, seq__13398_13413__$1);
          goog.dom.classes.set(node_13419, classes_13402__$1);
          var G__13420 = cljs.core.next.call(null, seq__13398_13413__$1);
          var G__13421 = null;
          var G__13422 = 0;
          var G__13423 = 0;
          seq__13398_13403 = G__13420;
          chunk__13399_13404 = G__13421;
          count__13400_13405 = G__13422;
          i__13401_13406 = G__13423;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.text = function domina$text(content) {
  return goog.string.trim(goog.dom.getTextContent(domina.single_node.call(null, content)));
};
domina.set_text_BANG_ = function domina$set_text_BANG_(content, value) {
  var seq__13428_13432 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__13429_13433 = null;
  var count__13430_13434 = 0;
  var i__13431_13435 = 0;
  while (true) {
    if (i__13431_13435 < count__13430_13434) {
      var node_13436 = cljs.core._nth.call(null, chunk__13429_13433, i__13431_13435);
      goog.dom.setTextContent(node_13436, value);
      var G__13437 = seq__13428_13432;
      var G__13438 = chunk__13429_13433;
      var G__13439 = count__13430_13434;
      var G__13440 = i__13431_13435 + 1;
      seq__13428_13432 = G__13437;
      chunk__13429_13433 = G__13438;
      count__13430_13434 = G__13439;
      i__13431_13435 = G__13440;
      continue;
    } else {
      var temp__4657__auto___13441 = cljs.core.seq.call(null, seq__13428_13432);
      if (temp__4657__auto___13441) {
        var seq__13428_13442__$1 = temp__4657__auto___13441;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13428_13442__$1)) {
          var c__6956__auto___13443 = cljs.core.chunk_first.call(null, seq__13428_13442__$1);
          var G__13444 = cljs.core.chunk_rest.call(null, seq__13428_13442__$1);
          var G__13445 = c__6956__auto___13443;
          var G__13446 = cljs.core.count.call(null, c__6956__auto___13443);
          var G__13447 = 0;
          seq__13428_13432 = G__13444;
          chunk__13429_13433 = G__13445;
          count__13430_13434 = G__13446;
          i__13431_13435 = G__13447;
          continue;
        } else {
          var node_13448 = cljs.core.first.call(null, seq__13428_13442__$1);
          goog.dom.setTextContent(node_13448, value);
          var G__13449 = cljs.core.next.call(null, seq__13428_13442__$1);
          var G__13450 = null;
          var G__13451 = 0;
          var G__13452 = 0;
          seq__13428_13432 = G__13449;
          chunk__13429_13433 = G__13450;
          count__13430_13434 = G__13451;
          i__13431_13435 = G__13452;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.value = function domina$value(content) {
  return goog.dom.forms.getValue(domina.single_node.call(null, content));
};
domina.set_value_BANG_ = function domina$set_value_BANG_(content, value) {
  var seq__13457_13461 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__13458_13462 = null;
  var count__13459_13463 = 0;
  var i__13460_13464 = 0;
  while (true) {
    if (i__13460_13464 < count__13459_13463) {
      var node_13465 = cljs.core._nth.call(null, chunk__13458_13462, i__13460_13464);
      goog.dom.forms.setValue(node_13465, value);
      var G__13466 = seq__13457_13461;
      var G__13467 = chunk__13458_13462;
      var G__13468 = count__13459_13463;
      var G__13469 = i__13460_13464 + 1;
      seq__13457_13461 = G__13466;
      chunk__13458_13462 = G__13467;
      count__13459_13463 = G__13468;
      i__13460_13464 = G__13469;
      continue;
    } else {
      var temp__4657__auto___13470 = cljs.core.seq.call(null, seq__13457_13461);
      if (temp__4657__auto___13470) {
        var seq__13457_13471__$1 = temp__4657__auto___13470;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13457_13471__$1)) {
          var c__6956__auto___13472 = cljs.core.chunk_first.call(null, seq__13457_13471__$1);
          var G__13473 = cljs.core.chunk_rest.call(null, seq__13457_13471__$1);
          var G__13474 = c__6956__auto___13472;
          var G__13475 = cljs.core.count.call(null, c__6956__auto___13472);
          var G__13476 = 0;
          seq__13457_13461 = G__13473;
          chunk__13458_13462 = G__13474;
          count__13459_13463 = G__13475;
          i__13460_13464 = G__13476;
          continue;
        } else {
          var node_13477 = cljs.core.first.call(null, seq__13457_13471__$1);
          goog.dom.forms.setValue(node_13477, value);
          var G__13478 = cljs.core.next.call(null, seq__13457_13471__$1);
          var G__13479 = null;
          var G__13480 = 0;
          var G__13481 = 0;
          seq__13457_13461 = G__13478;
          chunk__13458_13462 = G__13479;
          count__13459_13463 = G__13480;
          i__13460_13464 = G__13481;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.html = function domina$html(content) {
  return domina.single_node.call(null, content).innerHTML;
};
domina.replace_children_BANG_ = function domina$replace_children_BANG_(content, inner_content) {
  return domina.append_BANG_.call(null, domina.destroy_children_BANG_.call(null, content), inner_content);
};
domina.set_inner_html_BANG_ = function domina$set_inner_html_BANG_(content, html_string) {
  var allows_inner_html_QMARK_ = cljs.core.not.call(null, cljs.core.re_find.call(null, domina.re_no_inner_html, html_string));
  var leading_whitespace_QMARK_ = cljs.core.re_find.call(null, domina.re_leading_whitespace, html_string);
  var tag_name = [cljs.core.str(cljs.core.second.call(null, cljs.core.re_find.call(null, domina.re_tag_name, html_string)))].join("").toLowerCase();
  var special_tag_QMARK_ = cljs.core.contains_QMARK_.call(null, domina.wrap_map, tag_name);
  if (cljs.core.truth_(function() {
    var and__6141__auto__ = allows_inner_html_QMARK_;
    if (and__6141__auto__) {
      var and__6141__auto____$1 = function() {
        var or__6153__auto__ = domina.support.leading_whitespace_QMARK_;
        if (cljs.core.truth_(or__6153__auto__)) {
          return or__6153__auto__;
        } else {
          return cljs.core.not.call(null, leading_whitespace_QMARK_);
        }
      }();
      if (cljs.core.truth_(and__6141__auto____$1)) {
        return !special_tag_QMARK_;
      } else {
        return and__6141__auto____$1;
      }
    } else {
      return and__6141__auto__;
    }
  }())) {
    var value_13492 = clojure.string.replace.call(null, html_string, domina.re_xhtml_tag, "\x3c$1\x3e\x3c/$2\x3e");
    try {
      var seq__13488_13493 = cljs.core.seq.call(null, domina.nodes.call(null, content));
      var chunk__13489_13494 = null;
      var count__13490_13495 = 0;
      var i__13491_13496 = 0;
      while (true) {
        if (i__13491_13496 < count__13490_13495) {
          var node_13497 = cljs.core._nth.call(null, chunk__13489_13494, i__13491_13496);
          node_13497.innerHTML = value_13492;
          var G__13498 = seq__13488_13493;
          var G__13499 = chunk__13489_13494;
          var G__13500 = count__13490_13495;
          var G__13501 = i__13491_13496 + 1;
          seq__13488_13493 = G__13498;
          chunk__13489_13494 = G__13499;
          count__13490_13495 = G__13500;
          i__13491_13496 = G__13501;
          continue;
        } else {
          var temp__4657__auto___13502 = cljs.core.seq.call(null, seq__13488_13493);
          if (temp__4657__auto___13502) {
            var seq__13488_13503__$1 = temp__4657__auto___13502;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__13488_13503__$1)) {
              var c__6956__auto___13504 = cljs.core.chunk_first.call(null, seq__13488_13503__$1);
              var G__13505 = cljs.core.chunk_rest.call(null, seq__13488_13503__$1);
              var G__13506 = c__6956__auto___13504;
              var G__13507 = cljs.core.count.call(null, c__6956__auto___13504);
              var G__13508 = 0;
              seq__13488_13493 = G__13505;
              chunk__13489_13494 = G__13506;
              count__13490_13495 = G__13507;
              i__13491_13496 = G__13508;
              continue;
            } else {
              var node_13509 = cljs.core.first.call(null, seq__13488_13503__$1);
              node_13509.innerHTML = value_13492;
              var G__13510 = cljs.core.next.call(null, seq__13488_13503__$1);
              var G__13511 = null;
              var G__13512 = 0;
              var G__13513 = 0;
              seq__13488_13493 = G__13510;
              chunk__13489_13494 = G__13511;
              count__13490_13495 = G__13512;
              i__13491_13496 = G__13513;
              continue;
            }
          } else {
          }
        }
        break;
      }
    } catch (e13487) {
      if (e13487 instanceof Error) {
        var e_13514 = e13487;
        domina.replace_children_BANG_.call(null, content, value_13492);
      } else {
        throw e13487;
      }
    }
  } else {
    domina.replace_children_BANG_.call(null, content, html_string);
  }
  return content;
};
domina.set_html_BANG_ = function domina$set_html_BANG_(content, inner_content) {
  if (typeof inner_content === "string") {
    return domina.set_inner_html_BANG_.call(null, content, inner_content);
  } else {
    return domina.replace_children_BANG_.call(null, content, inner_content);
  }
};
domina.get_data = function domina$get_data(var_args) {
  var args13515 = [];
  var len__7211__auto___13518 = arguments.length;
  var i__7212__auto___13519 = 0;
  while (true) {
    if (i__7212__auto___13519 < len__7211__auto___13518) {
      args13515.push(arguments[i__7212__auto___13519]);
      var G__13520 = i__7212__auto___13519 + 1;
      i__7212__auto___13519 = G__13520;
      continue;
    } else {
    }
    break;
  }
  var G__13517 = args13515.length;
  switch(G__13517) {
    case 2:
      return domina.get_data.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return domina.get_data.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13515.length)].join(""));;
  }
};
domina.get_data.cljs$core$IFn$_invoke$arity$2 = function(node, key) {
  return domina.get_data.call(null, node, key, false);
};
domina.get_data.cljs$core$IFn$_invoke$arity$3 = function(node, key, bubble) {
  var m = domina.single_node.call(null, node).__domina_data;
  var value = cljs.core.truth_(m) ? cljs.core.get.call(null, m, key) : null;
  if (cljs.core.truth_(function() {
    var and__6141__auto__ = bubble;
    if (cljs.core.truth_(and__6141__auto__)) {
      return value == null;
    } else {
      return and__6141__auto__;
    }
  }())) {
    var temp__4657__auto__ = domina.single_node.call(null, node).parentNode;
    if (cljs.core.truth_(temp__4657__auto__)) {
      var parent = temp__4657__auto__;
      return domina.get_data.call(null, parent, key, true);
    } else {
      return null;
    }
  } else {
    return value;
  }
};
domina.get_data.cljs$lang$maxFixedArity = 3;
domina.set_data_BANG_ = function domina$set_data_BANG_(node, key, value) {
  var m = function() {
    var or__6153__auto__ = domina.single_node.call(null, node).__domina_data;
    if (cljs.core.truth_(or__6153__auto__)) {
      return or__6153__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }();
  return domina.single_node.call(null, node).__domina_data = cljs.core.assoc.call(null, m, key, value);
};
domina.apply_with_cloning = function domina$apply_with_cloning(f, parent_content, child_content) {
  var parents = domina.nodes.call(null, parent_content);
  var children = domina.nodes.call(null, child_content);
  var first_child = function() {
    var frag = document.createDocumentFragment();
    var seq__13528_13532 = cljs.core.seq.call(null, children);
    var chunk__13529_13533 = null;
    var count__13530_13534 = 0;
    var i__13531_13535 = 0;
    while (true) {
      if (i__13531_13535 < count__13530_13534) {
        var child_13536 = cljs.core._nth.call(null, chunk__13529_13533, i__13531_13535);
        frag.appendChild(child_13536);
        var G__13537 = seq__13528_13532;
        var G__13538 = chunk__13529_13533;
        var G__13539 = count__13530_13534;
        var G__13540 = i__13531_13535 + 1;
        seq__13528_13532 = G__13537;
        chunk__13529_13533 = G__13538;
        count__13530_13534 = G__13539;
        i__13531_13535 = G__13540;
        continue;
      } else {
        var temp__4657__auto___13541 = cljs.core.seq.call(null, seq__13528_13532);
        if (temp__4657__auto___13541) {
          var seq__13528_13542__$1 = temp__4657__auto___13541;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__13528_13542__$1)) {
            var c__6956__auto___13543 = cljs.core.chunk_first.call(null, seq__13528_13542__$1);
            var G__13544 = cljs.core.chunk_rest.call(null, seq__13528_13542__$1);
            var G__13545 = c__6956__auto___13543;
            var G__13546 = cljs.core.count.call(null, c__6956__auto___13543);
            var G__13547 = 0;
            seq__13528_13532 = G__13544;
            chunk__13529_13533 = G__13545;
            count__13530_13534 = G__13546;
            i__13531_13535 = G__13547;
            continue;
          } else {
            var child_13548 = cljs.core.first.call(null, seq__13528_13542__$1);
            frag.appendChild(child_13548);
            var G__13549 = cljs.core.next.call(null, seq__13528_13542__$1);
            var G__13550 = null;
            var G__13551 = 0;
            var G__13552 = 0;
            seq__13528_13532 = G__13549;
            chunk__13529_13533 = G__13550;
            count__13530_13534 = G__13551;
            i__13531_13535 = G__13552;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return frag;
  }();
  var other_children = cljs.core.doall.call(null, cljs.core.repeatedly.call(null, cljs.core.count.call(null, parents) - 1, function(parents, children, first_child) {
    return function() {
      return first_child.cloneNode(true);
    };
  }(parents, children, first_child)));
  if (cljs.core.seq.call(null, parents)) {
    f.call(null, cljs.core.first.call(null, parents), first_child);
    return cljs.core.doall.call(null, cljs.core.map.call(null, function(parents, children, first_child, other_children) {
      return function(p1__13522_SHARP_, p2__13523_SHARP_) {
        return f.call(null, p1__13522_SHARP_, p2__13523_SHARP_);
      };
    }(parents, children, first_child, other_children), cljs.core.rest.call(null, parents), other_children));
  } else {
    return null;
  }
};
domina.lazy_nl_via_item = function domina$lazy_nl_via_item(var_args) {
  var args13553 = [];
  var len__7211__auto___13556 = arguments.length;
  var i__7212__auto___13557 = 0;
  while (true) {
    if (i__7212__auto___13557 < len__7211__auto___13556) {
      args13553.push(arguments[i__7212__auto___13557]);
      var G__13558 = i__7212__auto___13557 + 1;
      i__7212__auto___13557 = G__13558;
      continue;
    } else {
    }
    break;
  }
  var G__13555 = args13553.length;
  switch(G__13555) {
    case 1:
      return domina.lazy_nl_via_item.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return domina.lazy_nl_via_item.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13553.length)].join(""));;
  }
};
domina.lazy_nl_via_item.cljs$core$IFn$_invoke$arity$1 = function(nl) {
  return domina.lazy_nl_via_item.call(null, nl, 0);
};
domina.lazy_nl_via_item.cljs$core$IFn$_invoke$arity$2 = function(nl, n) {
  if (n < nl.length) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, nl.item(n), domina.lazy_nl_via_item.call(null, nl, n + 1));
    }, null, null);
  } else {
    return null;
  }
};
domina.lazy_nl_via_item.cljs$lang$maxFixedArity = 2;
domina.lazy_nl_via_array_ref = function domina$lazy_nl_via_array_ref(var_args) {
  var args13560 = [];
  var len__7211__auto___13563 = arguments.length;
  var i__7212__auto___13564 = 0;
  while (true) {
    if (i__7212__auto___13564 < len__7211__auto___13563) {
      args13560.push(arguments[i__7212__auto___13564]);
      var G__13565 = i__7212__auto___13564 + 1;
      i__7212__auto___13564 = G__13565;
      continue;
    } else {
    }
    break;
  }
  var G__13562 = args13560.length;
  switch(G__13562) {
    case 1:
      return domina.lazy_nl_via_array_ref.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return domina.lazy_nl_via_array_ref.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13560.length)].join(""));;
  }
};
domina.lazy_nl_via_array_ref.cljs$core$IFn$_invoke$arity$1 = function(nl) {
  return domina.lazy_nl_via_array_ref.call(null, nl, 0);
};
domina.lazy_nl_via_array_ref.cljs$core$IFn$_invoke$arity$2 = function(nl, n) {
  if (n < nl.length) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, nl[n], domina.lazy_nl_via_array_ref.call(null, nl, n + 1));
    }, null, null);
  } else {
    return null;
  }
};
domina.lazy_nl_via_array_ref.cljs$lang$maxFixedArity = 2;
domina.lazy_nodelist = function domina$lazy_nodelist(nl) {
  if (cljs.core.truth_(nl.item)) {
    return domina.lazy_nl_via_item.call(null, nl);
  } else {
    return domina.lazy_nl_via_array_ref.call(null, nl);
  }
};
domina.array_like_QMARK_ = function domina$array_like_QMARK_(obj) {
  var and__6141__auto__ = obj;
  if (cljs.core.truth_(and__6141__auto__)) {
    var and__6141__auto____$1 = cljs.core.not.call(null, obj.nodeName);
    if (and__6141__auto____$1) {
      return obj.length;
    } else {
      return and__6141__auto____$1;
    }
  } else {
    return and__6141__auto__;
  }
};
domina.normalize_seq = function domina$normalize_seq(list_thing) {
  if (list_thing == null) {
    return cljs.core.List.EMPTY;
  } else {
    if (!(list_thing == null) ? list_thing.cljs$lang$protocol_mask$partition0$ & 8388608 || list_thing.cljs$core$ISeqable$ ? true : !list_thing.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, list_thing) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, list_thing)) {
      return cljs.core.seq.call(null, list_thing);
    } else {
      if (cljs.core.truth_(domina.array_like_QMARK_.call(null, list_thing))) {
        return domina.lazy_nodelist.call(null, list_thing);
      } else {
        return cljs.core.seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [list_thing], null));
      }
    }
  }
};
domina.DomContent["string"] = true;
domina.nodes["string"] = function(s) {
  return cljs.core.doall.call(null, domina.nodes.call(null, domina.string_to_dom.call(null, s)));
};
domina.single_node["string"] = function(s) {
  return domina.single_node.call(null, domina.string_to_dom.call(null, s));
};
domina.DomContent["_"] = true;
domina.nodes["_"] = function(content) {
  if (content == null) {
    return cljs.core.List.EMPTY;
  } else {
    if (!(content == null) ? content.cljs$lang$protocol_mask$partition0$ & 8388608 || content.cljs$core$ISeqable$ ? true : !content.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, content) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, content)) {
      return cljs.core.seq.call(null, content);
    } else {
      if (cljs.core.truth_(domina.array_like_QMARK_.call(null, content))) {
        return domina.lazy_nodelist.call(null, content);
      } else {
        return cljs.core.seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [content], null));
      }
    }
  }
};
domina.single_node["_"] = function(content) {
  if (content == null) {
    return null;
  } else {
    if (!(content == null) ? content.cljs$lang$protocol_mask$partition0$ & 8388608 || content.cljs$core$ISeqable$ ? true : !content.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, content) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, content)) {
      return cljs.core.first.call(null, content);
    } else {
      if (cljs.core.truth_(domina.array_like_QMARK_.call(null, content))) {
        return content.item(0);
      } else {
        return content;
      }
    }
  }
};
if (cljs.core.truth_(typeof NodeList != "undefined")) {
  NodeList.prototype.cljs$core$ICounted$ = true;
  NodeList.prototype.cljs$core$ICounted$_count$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return nodelist__$1.length;
  };
  NodeList.prototype.cljs$core$IIndexed$ = true;
  NodeList.prototype.cljs$core$IIndexed$_nth$arity$2 = function(nodelist, n) {
    var nodelist__$1 = this;
    return nodelist__$1.item(n);
  };
  NodeList.prototype.cljs$core$IIndexed$_nth$arity$3 = function(nodelist, n, not_found) {
    var nodelist__$1 = this;
    if (nodelist__$1.length <= n) {
      return not_found;
    } else {
      return cljs.core.nth.call(null, nodelist__$1, n);
    }
  };
  NodeList.prototype.cljs$core$ISeqable$ = true;
  NodeList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return domina.lazy_nodelist.call(null, nodelist__$1);
  };
} else {
}
if (cljs.core.truth_(typeof StaticNodeList != "undefined")) {
  StaticNodeList.prototype.cljs$core$ICounted$ = true;
  StaticNodeList.prototype.cljs$core$ICounted$_count$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return nodelist__$1.length;
  };
  StaticNodeList.prototype.cljs$core$IIndexed$ = true;
  StaticNodeList.prototype.cljs$core$IIndexed$_nth$arity$2 = function(nodelist, n) {
    var nodelist__$1 = this;
    return nodelist__$1.item(n);
  };
  StaticNodeList.prototype.cljs$core$IIndexed$_nth$arity$3 = function(nodelist, n, not_found) {
    var nodelist__$1 = this;
    if (nodelist__$1.length <= n) {
      return not_found;
    } else {
      return cljs.core.nth.call(null, nodelist__$1, n);
    }
  };
  StaticNodeList.prototype.cljs$core$ISeqable$ = true;
  StaticNodeList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return domina.lazy_nodelist.call(null, nodelist__$1);
  };
} else {
}
if (cljs.core.truth_(typeof HTMLCollection != "undefined")) {
  HTMLCollection.prototype.cljs$core$ICounted$ = true;
  HTMLCollection.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
    var coll__$1 = this;
    return coll__$1.length;
  };
  HTMLCollection.prototype.cljs$core$IIndexed$ = true;
  HTMLCollection.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
    var coll__$1 = this;
    return coll__$1.item(n);
  };
  HTMLCollection.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
    var coll__$1 = this;
    if (coll__$1.length <= n) {
      return not_found;
    } else {
      return cljs.core.nth.call(null, coll__$1, n);
    }
  };
  HTMLCollection.prototype.cljs$core$ISeqable$ = true;
  HTMLCollection.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
    var coll__$1 = this;
    return domina.lazy_nodelist.call(null, coll__$1);
  };
} else {
}
;/*
 Portions of this code are from the Dojo Toolkit, received by
 The Closure Library Authors under the BSD license. All other code is
 Copyright 2005-2009 The Closure Library Authors. All Rights Reserved.

The "New" BSD License:

Copyright (c) 2005-2009, The Dojo Foundation
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
 Neither the name of the Dojo Foundation nor the names of its contributors
    may be used to endorse or promote products derived from this software
    without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
goog.provide("goog.dom.query");
goog.require("goog.array");
goog.require("goog.dom");
goog.require("goog.functions");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.dom.query = function() {
  var cssCaseBug = goog.userAgent.WEBKIT && goog.dom.getDocument().compatMode == "BackCompat";
  var legacyIE = goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9");
  var childNodesName = !!goog.dom.getDocument().firstChild["children"] ? "children" : "childNodes";
  var specials = "\x3e~+";
  var caseSensitive = false;
  var getQueryParts = function(query) {
    if (specials.indexOf(query.slice(-1)) >= 0) {
      query += " * ";
    } else {
      query += " ";
    }
    var ts = function(s, e) {
      return goog.string.trim(query.slice(s, e));
    };
    var queryParts = [];
    var inBrackets = -1, inParens = -1, inMatchFor = -1, inPseudo = -1, inClass = -1, inId = -1, inTag = -1, lc = "", cc = "", pStart;
    var x = 0, ql = query.length, currentPart = null, cp = null;
    var endTag = function() {
      if (inTag >= 0) {
        var tv = inTag == x ? null : ts(inTag, x);
        if (specials.indexOf(tv) < 0) {
          currentPart.tag = tv;
        } else {
          currentPart.oper = tv;
        }
        inTag = -1;
      }
    };
    var endId = function() {
      if (inId >= 0) {
        currentPart.id = ts(inId, x).replace(/\\/g, "");
        inId = -1;
      }
    };
    var endClass = function() {
      if (inClass >= 0) {
        currentPart.classes.push(ts(inClass + 1, x).replace(/\\/g, ""));
        inClass = -1;
      }
    };
    var endAll = function() {
      endId();
      endTag();
      endClass();
    };
    var endPart = function() {
      endAll();
      if (inPseudo >= 0) {
        currentPart.pseudos.push({name:ts(inPseudo + 1, x)});
      }
      currentPart.loops = currentPart.pseudos.length || currentPart.attrs.length || currentPart.classes.length;
      currentPart.oquery = currentPart.query = ts(pStart, x);
      currentPart.otag = currentPart.tag = currentPart.oper ? null : currentPart.tag || "*";
      if (currentPart.tag) {
        currentPart.tag = currentPart.tag.toUpperCase();
      }
      if (queryParts.length && queryParts[queryParts.length - 1].oper) {
        currentPart.infixOper = queryParts.pop();
        currentPart.query = currentPart.infixOper.query + " " + currentPart.query;
      }
      queryParts.push(currentPart);
      currentPart = null;
    };
    for (;lc = cc, cc = query.charAt(x), x < ql;x++) {
      if (lc == "\\") {
        continue;
      }
      if (!currentPart) {
        pStart = x;
        currentPart = {query:null, pseudos:[], attrs:[], classes:[], tag:null, oper:null, id:null, getTag:function() {
          return caseSensitive ? this.otag : this.tag;
        }};
        inTag = x;
      }
      if (inBrackets >= 0) {
        if (cc == "]") {
          if (!cp.attr) {
            cp.attr = ts(inBrackets + 1, x);
          } else {
            cp.matchFor = ts(inMatchFor || inBrackets + 1, x);
          }
          var cmf = cp.matchFor;
          if (cmf) {
            if (cmf.charAt(0) == '"' || cmf.charAt(0) == "'") {
              cp.matchFor = cmf.slice(1, -1);
            }
          }
          currentPart.attrs.push(cp);
          cp = null;
          inBrackets = inMatchFor = -1;
        } else {
          if (cc == "\x3d") {
            var addToCc = "|~^$*".indexOf(lc) >= 0 ? lc : "";
            cp.type = addToCc + cc;
            cp.attr = ts(inBrackets + 1, x - addToCc.length);
            inMatchFor = x + 1;
          }
        }
      } else {
        if (inParens >= 0) {
          if (cc == ")") {
            if (inPseudo >= 0) {
              cp.value = ts(inParens + 1, x);
            }
            inPseudo = inParens = -1;
          }
        } else {
          if (cc == "#") {
            endAll();
            inId = x + 1;
          } else {
            if (cc == ".") {
              endAll();
              inClass = x;
            } else {
              if (cc == ":") {
                endAll();
                inPseudo = x;
              } else {
                if (cc == "[") {
                  endAll();
                  inBrackets = x;
                  cp = {};
                } else {
                  if (cc == "(") {
                    if (inPseudo >= 0) {
                      cp = {name:ts(inPseudo + 1, x), value:null};
                      currentPart.pseudos.push(cp);
                    }
                    inParens = x;
                  } else {
                    if (cc == " " && lc != cc) {
                      endPart();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return queryParts;
  };
  var agree = function(first, second) {
    if (!first) {
      return second;
    }
    if (!second) {
      return first;
    }
    return function() {
      return first.apply(window, arguments) && second.apply(window, arguments);
    };
  };
  function getArr(i, opt_arr) {
    var r = opt_arr || [];
    if (i) {
      r.push(i);
    }
    return r;
  }
  var isElement = function(n) {
    return 1 == n.nodeType;
  };
  var blank = "";
  var getAttr = function(elem, attr) {
    if (!elem) {
      return blank;
    }
    if (attr == "class") {
      return elem.className || blank;
    }
    if (attr == "for") {
      return elem.htmlFor || blank;
    }
    if (attr == "style") {
      return elem.style.cssText || blank;
    }
    return (caseSensitive ? elem.getAttribute(attr) : elem.getAttribute(attr, 2)) || blank;
  };
  var attrs = {"*\x3d":function(attr, value) {
    return function(elem) {
      return getAttr(elem, attr).indexOf(value) >= 0;
    };
  }, "^\x3d":function(attr, value) {
    return function(elem) {
      return getAttr(elem, attr).indexOf(value) == 0;
    };
  }, "$\x3d":function(attr, value) {
    var tval = " " + value;
    return function(elem) {
      var ea = " " + getAttr(elem, attr);
      return ea.lastIndexOf(value) == ea.length - value.length;
    };
  }, "~\x3d":function(attr, value) {
    var tval = " " + value + " ";
    return function(elem) {
      var ea = " " + getAttr(elem, attr) + " ";
      return ea.indexOf(tval) >= 0;
    };
  }, "|\x3d":function(attr, value) {
    value = " " + value;
    return function(elem) {
      var ea = " " + getAttr(elem, attr);
      return ea == value || ea.indexOf(value + "-") == 0;
    };
  }, "\x3d":function(attr, value) {
    return function(elem) {
      return getAttr(elem, attr) == value;
    };
  }};
  var noNextElementSibling = typeof goog.dom.getDocument().firstChild.nextElementSibling == "undefined";
  var nSibling = !noNextElementSibling ? "nextElementSibling" : "nextSibling";
  var pSibling = !noNextElementSibling ? "previousElementSibling" : "previousSibling";
  var simpleNodeTest = noNextElementSibling ? isElement : goog.functions.TRUE;
  var _lookLeft = function(node) {
    while (node = node[pSibling]) {
      if (simpleNodeTest(node)) {
        return false;
      }
    }
    return true;
  };
  var _lookRight = function(node) {
    while (node = node[nSibling]) {
      if (simpleNodeTest(node)) {
        return false;
      }
    }
    return true;
  };
  var getNodeIndex = function(node) {
    var root = node.parentNode;
    var i = 0, tret = root[childNodesName], ci = node["_i"] || -1, cl = root["_l"] || -1;
    if (!tret) {
      return -1;
    }
    var l = tret.length;
    if (cl == l && ci >= 0 && cl >= 0) {
      return ci;
    }
    root["_l"] = l;
    ci = -1;
    var te = root["firstElementChild"] || root["firstChild"];
    for (;te;te = te[nSibling]) {
      if (simpleNodeTest(te)) {
        te["_i"] = ++i;
        if (node === te) {
          ci = i;
        }
      }
    }
    return ci;
  };
  var isEven = function(elem) {
    return !(getNodeIndex(elem) % 2);
  };
  var isOdd = function(elem) {
    return getNodeIndex(elem) % 2;
  };
  var pseudos = {"checked":function(name, condition) {
    return function(elem) {
      return elem.checked || elem.attributes["checked"];
    };
  }, "first-child":function() {
    return _lookLeft;
  }, "last-child":function() {
    return _lookRight;
  }, "only-child":function(name, condition) {
    return function(node) {
      if (!_lookLeft(node)) {
        return false;
      }
      if (!_lookRight(node)) {
        return false;
      }
      return true;
    };
  }, "empty":function(name, condition) {
    return function(elem) {
      var cn = elem.childNodes;
      var cnl = elem.childNodes.length;
      for (var x = cnl - 1;x >= 0;x--) {
        var nt = cn[x].nodeType;
        if (nt === 1 || nt == 3) {
          return false;
        }
      }
      return true;
    };
  }, "contains":function(name, condition) {
    var cz = condition.charAt(0);
    if (cz == '"' || cz == "'") {
      condition = condition.slice(1, -1);
    }
    return function(elem) {
      return elem.innerHTML.indexOf(condition) >= 0;
    };
  }, "not":function(name, condition) {
    var p = getQueryParts(condition)[0];
    var ignores = {el:1};
    if (p.tag != "*") {
      ignores.tag = 1;
    }
    if (!p.classes.length) {
      ignores.classes = 1;
    }
    var ntf = getSimpleFilterFunc(p, ignores);
    return function(elem) {
      return !ntf(elem);
    };
  }, "nth-child":function(name, condition) {
    function pi(n) {
      return parseInt(n, 10);
    }
    if (condition == "odd") {
      return isOdd;
    } else {
      if (condition == "even") {
        return isEven;
      }
    }
    if (condition.indexOf("n") != -1) {
      var tparts = condition.split("n", 2);
      var pred = tparts[0] ? tparts[0] == "-" ? -1 : pi(tparts[0]) : 1;
      var idx = tparts[1] ? pi(tparts[1]) : 0;
      var lb = 0, ub = -1;
      if (pred > 0) {
        if (idx < 0) {
          idx = idx % pred && pred + idx % pred;
        } else {
          if (idx > 0) {
            if (idx >= pred) {
              lb = idx - idx % pred;
            }
            idx = idx % pred;
          }
        }
      } else {
        if (pred < 0) {
          pred *= -1;
          if (idx > 0) {
            ub = idx;
            idx = idx % pred;
          }
        }
      }
      if (pred > 0) {
        return function(elem) {
          var i = getNodeIndex(elem);
          return i >= lb && (ub < 0 || i <= ub) && i % pred == idx;
        };
      } else {
        condition = idx;
      }
    }
    var ncount = pi(condition);
    return function(elem) {
      return getNodeIndex(elem) == ncount;
    };
  }};
  var defaultGetter = legacyIE ? function(cond) {
    var clc = cond.toLowerCase();
    if (clc == "class") {
      cond = "className";
    }
    return function(elem) {
      return caseSensitive ? elem.getAttribute(cond) : elem[cond] || elem[clc];
    };
  } : function(cond) {
    return function(elem) {
      return elem && elem.getAttribute && elem.hasAttribute(cond);
    };
  };
  var getSimpleFilterFunc = function(query, ignores) {
    if (!query) {
      return goog.functions.TRUE;
    }
    ignores = ignores || {};
    var ff = null;
    if (!ignores.el) {
      ff = agree(ff, isElement);
    }
    if (!ignores.tag) {
      if (query.tag != "*") {
        ff = agree(ff, function(elem) {
          return elem && elem.tagName == query.getTag();
        });
      }
    }
    if (!ignores.classes) {
      goog.array.forEach(query.classes, function(cname, idx, arr) {
        var re = new RegExp("(?:^|\\s)" + cname + "(?:\\s|$)");
        ff = agree(ff, function(elem) {
          return re.test(elem.className);
        });
        ff.count = idx;
      });
    }
    if (!ignores.pseudos) {
      goog.array.forEach(query.pseudos, function(pseudo) {
        var pn = pseudo.name;
        if (pseudos[pn]) {
          ff = agree(ff, pseudos[pn](pn, pseudo.value));
        }
      });
    }
    if (!ignores.attrs) {
      goog.array.forEach(query.attrs, function(attr) {
        var matcher;
        var a = attr.attr;
        if (attr.type && attrs[attr.type]) {
          matcher = attrs[attr.type](a, attr.matchFor);
        } else {
          if (a.length) {
            matcher = defaultGetter(a);
          }
        }
        if (matcher) {
          ff = agree(ff, matcher);
        }
      });
    }
    if (!ignores.id) {
      if (query.id) {
        ff = agree(ff, function(elem) {
          return !!elem && elem.id == query.id;
        });
      }
    }
    if (!ff) {
      if (!("default" in ignores)) {
        ff = goog.functions.TRUE;
      }
    }
    return ff;
  };
  var nextSiblingIterator = function(filterFunc) {
    return function(node, ret, bag) {
      while (node = node[nSibling]) {
        if (noNextElementSibling && !isElement(node)) {
          continue;
        }
        if ((!bag || _isUnique(node, bag)) && filterFunc(node)) {
          ret.push(node);
        }
        break;
      }
      return ret;
    };
  };
  var nextSiblingsIterator = function(filterFunc) {
    return function(root, ret, bag) {
      var te = root[nSibling];
      while (te) {
        if (simpleNodeTest(te)) {
          if (bag && !_isUnique(te, bag)) {
            break;
          }
          if (filterFunc(te)) {
            ret.push(te);
          }
        }
        te = te[nSibling];
      }
      return ret;
    };
  };
  var _childElements = function(filterFunc) {
    filterFunc = filterFunc || goog.functions.TRUE;
    return function(root, ret, bag) {
      var te, x = 0, tret = root[childNodesName];
      while (te = tret[x++]) {
        if (simpleNodeTest(te) && (!bag || _isUnique(te, bag)) && filterFunc(te, x)) {
          ret.push(te);
        }
      }
      return ret;
    };
  };
  var _isDescendant = function(node, root) {
    var pn = node.parentNode;
    while (pn) {
      if (pn == root) {
        break;
      }
      pn = pn.parentNode;
    }
    return !!pn;
  };
  var _getElementsFuncCache = {};
  var getElementsFunc = function(query) {
    var retFunc = _getElementsFuncCache[query.query];
    if (retFunc) {
      return retFunc;
    }
    var io = query.infixOper;
    var oper = io ? io.oper : "";
    var filterFunc = getSimpleFilterFunc(query, {el:1});
    var qt = query.tag;
    var wildcardTag = "*" == qt;
    var ecs = goog.dom.getDocument()["getElementsByClassName"];
    if (!oper) {
      if (query.id) {
        filterFunc = !query.loops && wildcardTag ? goog.functions.TRUE : getSimpleFilterFunc(query, {el:1, id:1});
        retFunc = function(root, arr) {
          var te = goog.dom.getDomHelper(root).getElement(query.id);
          if (!te || !filterFunc(te)) {
            return;
          }
          if (9 == root.nodeType) {
            return getArr(te, arr);
          } else {
            if (_isDescendant(te, root)) {
              return getArr(te, arr);
            }
          }
        };
      } else {
        if (ecs && /\{\s*\[native code\]\s*\}/.test(String(ecs)) && query.classes.length && !cssCaseBug) {
          filterFunc = getSimpleFilterFunc(query, {el:1, classes:1, id:1});
          var classesString = query.classes.join(" ");
          retFunc = function(root, arr) {
            var ret = getArr(0, arr), te, x = 0;
            var tret = root.getElementsByClassName(classesString);
            while (te = tret[x++]) {
              if (filterFunc(te, root)) {
                ret.push(te);
              }
            }
            return ret;
          };
        } else {
          if (!wildcardTag && !query.loops) {
            retFunc = function(root, arr) {
              var ret = getArr(0, arr), te, x = 0;
              var tret = root.getElementsByTagName(query.getTag());
              while (te = tret[x++]) {
                ret.push(te);
              }
              return ret;
            };
          } else {
            filterFunc = getSimpleFilterFunc(query, {el:1, tag:1, id:1});
            retFunc = function(root, arr) {
              var ret = getArr(0, arr), te, x = 0;
              var tret = root.getElementsByTagName(query.getTag());
              while (te = tret[x++]) {
                if (filterFunc(te, root)) {
                  ret.push(te);
                }
              }
              return ret;
            };
          }
        }
      }
    } else {
      var skipFilters = {el:1};
      if (wildcardTag) {
        skipFilters.tag = 1;
      }
      filterFunc = getSimpleFilterFunc(query, skipFilters);
      if ("+" == oper) {
        retFunc = nextSiblingIterator(filterFunc);
      } else {
        if ("~" == oper) {
          retFunc = nextSiblingsIterator(filterFunc);
        } else {
          if ("\x3e" == oper) {
            retFunc = _childElements(filterFunc);
          }
        }
      }
    }
    return _getElementsFuncCache[query.query] = retFunc;
  };
  var filterDown = function(root, queryParts) {
    var candidates = getArr(root), qp, x, te, qpl = queryParts.length, bag, ret;
    for (var i = 0;i < qpl;i++) {
      ret = [];
      qp = queryParts[i];
      x = candidates.length - 1;
      if (x > 0) {
        bag = {};
        ret.nozip = true;
      }
      var gef = getElementsFunc(qp);
      for (var j = 0;te = candidates[j];j++) {
        gef(te, ret, bag);
      }
      if (!ret.length) {
        break;
      }
      candidates = ret;
    }
    return ret;
  };
  var _queryFuncCacheDOM = {}, _queryFuncCacheQSA = {};
  var getStepQueryFunc = function(query) {
    var qparts = getQueryParts(goog.string.trim(query));
    if (qparts.length == 1) {
      var tef = getElementsFunc(qparts[0]);
      return function(root) {
        var r = tef(root, []);
        if (r) {
          r.nozip = true;
        }
        return r;
      };
    }
    return function(root) {
      return filterDown(root, qparts);
    };
  };
  var qsa = "querySelectorAll";
  var qsaAvail = !!goog.dom.getDocument()[qsa] && (!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("526"));
  var getQueryFunc = function(query, opt_forceDOM) {
    if (qsaAvail) {
      var qsaCached = _queryFuncCacheQSA[query];
      if (qsaCached && !opt_forceDOM) {
        return qsaCached;
      }
    }
    var domCached = _queryFuncCacheDOM[query];
    if (domCached) {
      return domCached;
    }
    var qcz = query.charAt(0);
    var nospace = -1 == query.indexOf(" ");
    if (query.indexOf("#") >= 0 && nospace) {
      opt_forceDOM = true;
    }
    var useQSA = qsaAvail && !opt_forceDOM && specials.indexOf(qcz) == -1 && (!legacyIE || query.indexOf(":") == -1) && !(cssCaseBug && query.indexOf(".") >= 0) && query.indexOf(":contains") == -1 && query.indexOf("|\x3d") == -1;
    if (useQSA) {
      var tq = specials.indexOf(query.charAt(query.length - 1)) >= 0 ? query + " *" : query;
      return _queryFuncCacheQSA[query] = function(root) {
        try {
          if (!(9 == root.nodeType || nospace)) {
            throw new Error("");
          }
          var r = root[qsa](tq);
          if (legacyIE) {
            r.commentStrip = true;
          } else {
            r.nozip = true;
          }
          return r;
        } catch (e) {
          return getQueryFunc(query, true)(root);
        }
      };
    } else {
      var parts = query.split(/\s*,\s*/);
      return _queryFuncCacheDOM[query] = parts.length < 2 ? getStepQueryFunc(query) : function(root) {
        var pindex = 0, ret = [], tp;
        while (tp = parts[pindex++]) {
          ret = ret.concat(getStepQueryFunc(tp)(root));
        }
        return ret;
      };
    }
  };
  var _zipIdx = 0;
  var _nodeUID = legacyIE ? function(node) {
    if (caseSensitive) {
      return node.getAttribute("_uid") || node.setAttribute("_uid", ++_zipIdx) || _zipIdx;
    } else {
      return node.uniqueID;
    }
  } : function(node) {
    return node["_uid"] || (node["_uid"] = ++_zipIdx);
  };
  var _isUnique = function(node, bag) {
    if (!bag) {
      return 1;
    }
    var id = _nodeUID(node);
    if (!bag[id]) {
      return bag[id] = 1;
    }
    return 0;
  };
  var _zipIdxName = "_zipIdx";
  var _zip = function(arr) {
    if (arr && arr.nozip) {
      return arr;
    }
    var ret = [];
    if (!arr || !arr.length) {
      return ret;
    }
    if (arr[0]) {
      ret.push(arr[0]);
    }
    if (arr.length < 2) {
      return ret;
    }
    _zipIdx++;
    if (legacyIE && caseSensitive) {
      var szidx = _zipIdx + "";
      arr[0].setAttribute(_zipIdxName, szidx);
      for (var x = 1, te;te = arr[x];x++) {
        if (arr[x].getAttribute(_zipIdxName) != szidx) {
          ret.push(te);
        }
        te.setAttribute(_zipIdxName, szidx);
      }
    } else {
      if (legacyIE && arr.commentStrip) {
        try {
          for (var x = 1, te;te = arr[x];x++) {
            if (isElement(te)) {
              ret.push(te);
            }
          }
        } catch (e) {
        }
      } else {
        if (arr[0]) {
          arr[0][_zipIdxName] = _zipIdx;
        }
        for (var x = 1, te;te = arr[x];x++) {
          if (arr[x][_zipIdxName] != _zipIdx) {
            ret.push(te);
          }
          te[_zipIdxName] = _zipIdx;
        }
      }
    }
    return ret;
  };
  var query = function(query, root) {
    if (!query) {
      return [];
    }
    if (query.constructor == Array) {
      return (query);
    }
    if (!goog.isString(query)) {
      return [query];
    }
    if (goog.isString(root)) {
      root = goog.dom.getElement(root);
      if (!root) {
        return [];
      }
    }
    root = root || goog.dom.getDocument();
    var od = root.ownerDocument || root.documentElement;
    caseSensitive = root.contentType && root.contentType == "application/xml" || goog.userAgent.OPERA && (root.doctype || od.toString() == "[object XMLDocument]") || !!od && (legacyIE ? od.xml : root.xmlVersion || od.xmlVersion);
    var r = getQueryFunc(query)(root);
    if (r && r.nozip) {
      return r;
    }
    return _zip(r);
  };
  query.pseudos = pseudos;
  return query;
}();
goog.exportSymbol("goog.dom.query", goog.dom.query);
goog.exportSymbol("goog.dom.query.pseudos", goog.dom.query.pseudos);
goog.provide("domina.css");
goog.require("cljs.core");
goog.require("domina");
goog.require("goog.dom");
goog.require("goog.dom.query");
domina.css.root_element = function domina$css$root_element() {
  return goog.dom.getElementsByTagNameAndClass("html")[0];
};
domina.css.sel = function domina$css$sel(var_args) {
  var args13575 = [];
  var len__7211__auto___13581 = arguments.length;
  var i__7212__auto___13582 = 0;
  while (true) {
    if (i__7212__auto___13582 < len__7211__auto___13581) {
      args13575.push(arguments[i__7212__auto___13582]);
      var G__13583 = i__7212__auto___13582 + 1;
      i__7212__auto___13582 = G__13583;
      continue;
    } else {
    }
    break;
  }
  var G__13577 = args13575.length;
  switch(G__13577) {
    case 1:
      return domina.css.sel.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return domina.css.sel.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13575.length)].join(""));;
  }
};
domina.css.sel.cljs$core$IFn$_invoke$arity$1 = function(expr) {
  return domina.css.sel.call(null, domina.css.root_element.call(null), expr);
};
domina.css.sel.cljs$core$IFn$_invoke$arity$2 = function(base, expr) {
  if (typeof domina.css.t_domina$css13578 !== "undefined") {
  } else {
    domina.css.t_domina$css13578 = function(base, expr, meta13579) {
      this.base = base;
      this.expr = expr;
      this.meta13579 = meta13579;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    domina.css.t_domina$css13578.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13580, meta13579__$1) {
      var self__ = this;
      var _13580__$1 = this;
      return new domina.css.t_domina$css13578(self__.base, self__.expr, meta13579__$1);
    };
    domina.css.t_domina$css13578.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13580) {
      var self__ = this;
      var _13580__$1 = this;
      return self__.meta13579;
    };
    domina.css.t_domina$css13578.prototype.domina$DomContent$ = true;
    domina.css.t_domina$css13578.prototype.domina$DomContent$nodes$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.mapcat.call(null, function(___$1) {
        return function(p1__13573_SHARP_) {
          return domina.normalize_seq.call(null, goog.dom.query(self__.expr, p1__13573_SHARP_));
        };
      }(___$1), domina.nodes.call(null, self__.base));
    };
    domina.css.t_domina$css13578.prototype.domina$DomContent$single_node$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.first.call(null, cljs.core.filter.call(null, cljs.core.complement.call(null, cljs.core.nil_QMARK_), cljs.core.mapcat.call(null, function(___$1) {
        return function(p1__13574_SHARP_) {
          return domina.normalize_seq.call(null, goog.dom.query(self__.expr, p1__13574_SHARP_));
        };
      }(___$1), domina.nodes.call(null, self__.base))));
    };
    domina.css.t_domina$css13578.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "base", "base", 1825810849, null), new cljs.core.Symbol(null, "expr", "expr", -1908713478, null), new cljs.core.Symbol(null, "meta13579", "meta13579", -136046031, null)], null);
    };
    domina.css.t_domina$css13578.cljs$lang$type = true;
    domina.css.t_domina$css13578.cljs$lang$ctorStr = "domina.css/t_domina$css13578";
    domina.css.t_domina$css13578.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
      return cljs.core._write.call(null, writer__6752__auto__, "domina.css/t_domina$css13578");
    };
    domina.css.__GT_t_domina$css13578 = function domina$css$__GT_t_domina$css13578(base__$1, expr__$1, meta13579) {
      return new domina.css.t_domina$css13578(base__$1, expr__$1, meta13579);
    };
  }
  return new domina.css.t_domina$css13578(base, expr, cljs.core.PersistentArrayMap.EMPTY);
};
domina.css.sel.cljs$lang$maxFixedArity = 2;
goog.provide("goog.dom.ViewportSizeMonitor");
goog.require("goog.dom");
goog.require("goog.events");
goog.require("goog.events.EventTarget");
goog.require("goog.events.EventType");
goog.require("goog.math.Size");
goog.dom.ViewportSizeMonitor = function(opt_window) {
  goog.dom.ViewportSizeMonitor.base(this, "constructor");
  this.window_ = opt_window || window;
  this.listenerKey_ = goog.events.listen(this.window_, goog.events.EventType.RESIZE, this.handleResize_, false, this);
  this.size_ = goog.dom.getViewportSize(this.window_);
};
goog.inherits(goog.dom.ViewportSizeMonitor, goog.events.EventTarget);
goog.dom.ViewportSizeMonitor.getInstanceForWindow = function(opt_window) {
  var currentWindow = opt_window || window;
  var uid = goog.getUid(currentWindow);
  return goog.dom.ViewportSizeMonitor.windowInstanceMap_[uid] = goog.dom.ViewportSizeMonitor.windowInstanceMap_[uid] || new goog.dom.ViewportSizeMonitor(currentWindow);
};
goog.dom.ViewportSizeMonitor.removeInstanceForWindow = function(opt_window) {
  var uid = goog.getUid(opt_window || window);
  goog.dispose(goog.dom.ViewportSizeMonitor.windowInstanceMap_[uid]);
  delete goog.dom.ViewportSizeMonitor.windowInstanceMap_[uid];
};
goog.dom.ViewportSizeMonitor.windowInstanceMap_ = {};
goog.dom.ViewportSizeMonitor.prototype.getSize = function() {
  return this.size_ ? this.size_.clone() : null;
};
goog.dom.ViewportSizeMonitor.prototype.disposeInternal = function() {
  goog.dom.ViewportSizeMonitor.superClass_.disposeInternal.call(this);
  if (this.listenerKey_) {
    goog.events.unlistenByKey(this.listenerKey_);
    this.listenerKey_ = null;
  }
  this.window_ = null;
  this.size_ = null;
};
goog.dom.ViewportSizeMonitor.prototype.handleResize_ = function(event) {
  var size = goog.dom.getViewportSize(this.window_);
  if (!goog.math.Size.equals(size, this.size_)) {
    this.size_ = size;
    this.dispatchEvent(goog.events.EventType.RESIZE);
  }
};
goog.provide("domina.xpath");
goog.require("cljs.core");
goog.require("domina");
goog.require("goog.dom");
domina.xpath.select_node_STAR_ = function domina$xpath$select_node_STAR_(path, node, technique_1, technique_2) {
  var doc = goog.dom.getOwnerDocument(node);
  if (cljs.core.truth_(function() {
    var and__6141__auto__ = node.selectSingleNode;
    if (cljs.core.truth_(and__6141__auto__)) {
      return doc.setProperty;
    } else {
      return and__6141__auto__;
    }
  }())) {
    doc.setProperty("SelectionLanguage", "XPath");
    return technique_1.call(null, node, path);
  } else {
    if (cljs.core.truth_(doc.evaluate)) {
      return technique_2.call(null, null, doc, node, path);
    } else {
      throw new Error("Could not find XPath support in this browser.");
    }
  }
};
domina.xpath.select_node = function domina$xpath$select_node(expr, node) {
  return domina.xpath.select_node_STAR_.call(null, expr, node, function(node__$1, expr__$1) {
    return node__$1.selectSingleNode(expr__$1);
  }, function(resolver, doc, node__$1, expr__$1) {
    var result = doc.evaluate(expr__$1, node__$1, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
    return result.singleNodeValue;
  });
};
domina.xpath.select_nodes = function domina$xpath$select_nodes(expr, node) {
  return domina.xpath.select_node_STAR_.call(null, expr, node, function(node__$1, expr__$1) {
    return node__$1.selectNodes(expr__$1);
  }, function(resolver, doc, node__$1, expr__$1) {
    var result = doc.evaluate(expr__$1, node__$1, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
    var num_results = result.snapshotLength;
    var i = 0;
    var acc = null;
    while (true) {
      if (i < num_results) {
        var G__13587 = i + 1;
        var G__13588 = cljs.core.cons.call(null, result.snapshotItem(i), acc);
        i = G__13587;
        acc = G__13588;
        continue;
      } else {
        return acc;
      }
      break;
    }
  });
};
domina.xpath.root_element = function domina$xpath$root_element() {
  return goog.dom.getElementsByTagNameAndClass("html")[0];
};
domina.xpath.xpath = function domina$xpath$xpath(var_args) {
  var args13589 = [];
  var len__7211__auto___13595 = arguments.length;
  var i__7212__auto___13596 = 0;
  while (true) {
    if (i__7212__auto___13596 < len__7211__auto___13595) {
      args13589.push(arguments[i__7212__auto___13596]);
      var G__13597 = i__7212__auto___13596 + 1;
      i__7212__auto___13596 = G__13597;
      continue;
    } else {
    }
    break;
  }
  var G__13591 = args13589.length;
  switch(G__13591) {
    case 1:
      return domina.xpath.xpath.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return domina.xpath.xpath.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13589.length)].join(""));;
  }
};
domina.xpath.xpath.cljs$core$IFn$_invoke$arity$1 = function(expr) {
  return domina.xpath.xpath.call(null, domina.xpath.root_element.call(null), expr);
};
domina.xpath.xpath.cljs$core$IFn$_invoke$arity$2 = function(base, expr) {
  if (typeof domina.xpath.t_domina$xpath13592 !== "undefined") {
  } else {
    domina.xpath.t_domina$xpath13592 = function(base, expr, meta13593) {
      this.base = base;
      this.expr = expr;
      this.meta13593 = meta13593;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    domina.xpath.t_domina$xpath13592.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13594, meta13593__$1) {
      var self__ = this;
      var _13594__$1 = this;
      return new domina.xpath.t_domina$xpath13592(self__.base, self__.expr, meta13593__$1);
    };
    domina.xpath.t_domina$xpath13592.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13594) {
      var self__ = this;
      var _13594__$1 = this;
      return self__.meta13593;
    };
    domina.xpath.t_domina$xpath13592.prototype.domina$DomContent$ = true;
    domina.xpath.t_domina$xpath13592.prototype.domina$DomContent$nodes$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.mapcat.call(null, cljs.core.partial.call(null, domina.xpath.select_nodes, self__.expr), domina.nodes.call(null, self__.base));
    };
    domina.xpath.t_domina$xpath13592.prototype.domina$DomContent$single_node$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.first.call(null, cljs.core.filter.call(null, cljs.core.complement.call(null, cljs.core.nil_QMARK_), cljs.core.map.call(null, cljs.core.partial.call(null, domina.xpath.select_node, self__.expr), domina.nodes.call(null, self__.base))));
    };
    domina.xpath.t_domina$xpath13592.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "base", "base", 1825810849, null), new cljs.core.Symbol(null, "expr", "expr", -1908713478, null), new cljs.core.Symbol(null, "meta13593", "meta13593", 205530552, null)], null);
    };
    domina.xpath.t_domina$xpath13592.cljs$lang$type = true;
    domina.xpath.t_domina$xpath13592.cljs$lang$ctorStr = "domina.xpath/t_domina$xpath13592";
    domina.xpath.t_domina$xpath13592.cljs$lang$ctorPrWriter = function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
      return cljs.core._write.call(null, writer__6752__auto__, "domina.xpath/t_domina$xpath13592");
    };
    domina.xpath.__GT_t_domina$xpath13592 = function domina$xpath$__GT_t_domina$xpath13592(base__$1, expr__$1, meta13593) {
      return new domina.xpath.t_domina$xpath13592(base__$1, expr__$1, meta13593);
    };
  }
  return new domina.xpath.t_domina$xpath13592(base, expr, cljs.core.PersistentArrayMap.EMPTY);
};
domina.xpath.xpath.cljs$lang$maxFixedArity = 2;
goog.provide("enfocus.enlive.syntax");
goog.require("cljs.core");
enfocus.enlive.syntax.sel_to_str = function enfocus$enlive$syntax$sel_to_str(input) {
  var item = cljs.core.first.call(null, input);
  var rest = cljs.core.rest.call(null, input);
  var end = cljs.core.empty_QMARK_.call(null, rest) ? cljs.core.list(cljs.core.List.EMPTY) : enfocus$enlive$syntax$sel_to_str.call(null, rest);
  if (item instanceof cljs.core.Keyword) {
    return cljs.core.map.call(null, function(item, rest, end) {
      return function(p1__13601_SHARP_) {
        return cljs.core.conj.call(null, p1__13601_SHARP_, cljs.core.name.call(null, item));
      };
    }(item, rest, end), end);
  } else {
    if (typeof item === "string") {
      return cljs.core.map.call(null, function(item, rest, end) {
        return function(p1__13602_SHARP_) {
          return cljs.core.conj.call(null, p1__13602_SHARP_, item);
        };
      }(item, rest, end), end);
    } else {
      if (cljs.core.set_QMARK_.call(null, item)) {
        return cljs.core.reduce.call(null, function(item, rest, end) {
          return function(r1, it) {
            return cljs.core.concat.call(null, r1, cljs.core.map.call(null, function(item, rest, end) {
              return function(p1__13603_SHARP_) {
                return cljs.core.conj.call(null, p1__13603_SHARP_, it);
              };
            }(item, rest, end), end));
          };
        }(item, rest, end), cljs.core.PersistentVector.EMPTY, cljs.core.flatten.call(null, enfocus$enlive$syntax$sel_to_str.call(null, item)));
      } else {
        if (cljs.core.coll_QMARK_.call(null, item)) {
          var x1 = enfocus$enlive$syntax$sel_to_str.call(null, item);
          var sub = cljs.core.map.call(null, function(x1, item, rest, end) {
            return function(p1__13604_SHARP_) {
              return cljs.core.apply.call(null, cljs.core.str, p1__13604_SHARP_);
            };
          }(x1, item, rest, end), enfocus$enlive$syntax$sel_to_str.call(null, item));
          var iter__6925__auto__ = function(x1, sub, item, rest, end) {
            return function enfocus$enlive$syntax$sel_to_str_$_iter__13611(s__13612) {
              return new cljs.core.LazySeq(null, function(x1, sub, item, rest, end) {
                return function() {
                  var s__13612__$1 = s__13612;
                  while (true) {
                    var temp__4657__auto__ = cljs.core.seq.call(null, s__13612__$1);
                    if (temp__4657__auto__) {
                      var xs__5205__auto__ = temp__4657__auto__;
                      var s = cljs.core.first.call(null, xs__5205__auto__);
                      var iterys__6921__auto__ = function(s__13612__$1, s, xs__5205__auto__, temp__4657__auto__, x1, sub, item, rest, end) {
                        return function enfocus$enlive$syntax$sel_to_str_$_iter__13611_$_iter__13613(s__13614) {
                          return new cljs.core.LazySeq(null, function(s__13612__$1, s, xs__5205__auto__, temp__4657__auto__, x1, sub, item, rest, end) {
                            return function() {
                              var s__13614__$1 = s__13614;
                              while (true) {
                                var temp__4657__auto____$1 = cljs.core.seq.call(null, s__13614__$1);
                                if (temp__4657__auto____$1) {
                                  var s__13614__$2 = temp__4657__auto____$1;
                                  if (cljs.core.chunked_seq_QMARK_.call(null, s__13614__$2)) {
                                    var c__6923__auto__ = cljs.core.chunk_first.call(null, s__13614__$2);
                                    var size__6924__auto__ = cljs.core.count.call(null, c__6923__auto__);
                                    var b__13616 = cljs.core.chunk_buffer.call(null, size__6924__auto__);
                                    if (function() {
                                      var i__13615 = 0;
                                      while (true) {
                                        if (i__13615 < size__6924__auto__) {
                                          var e = cljs.core._nth.call(null, c__6923__auto__, i__13615);
                                          cljs.core.chunk_append.call(null, b__13616, function() {
                                            cljs.core.println.call(null, s, e);
                                            return cljs.core.conj.call(null, e, s);
                                          }());
                                          var G__13617 = i__13615 + 1;
                                          i__13615 = G__13617;
                                          continue;
                                        } else {
                                          return true;
                                        }
                                        break;
                                      }
                                    }()) {
                                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13616), enfocus$enlive$syntax$sel_to_str_$_iter__13611_$_iter__13613.call(null, cljs.core.chunk_rest.call(null, s__13614__$2)));
                                    } else {
                                      return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13616), null);
                                    }
                                  } else {
                                    var e = cljs.core.first.call(null, s__13614__$2);
                                    return cljs.core.cons.call(null, function() {
                                      cljs.core.println.call(null, s, e);
                                      return cljs.core.conj.call(null, e, s);
                                    }(), enfocus$enlive$syntax$sel_to_str_$_iter__13611_$_iter__13613.call(null, cljs.core.rest.call(null, s__13614__$2)));
                                  }
                                } else {
                                  return null;
                                }
                                break;
                              }
                            };
                          }(s__13612__$1, s, xs__5205__auto__, temp__4657__auto__, x1, sub, item, rest, end), null, null);
                        };
                      }(s__13612__$1, s, xs__5205__auto__, temp__4657__auto__, x1, sub, item, rest, end);
                      var fs__6922__auto__ = cljs.core.seq.call(null, iterys__6921__auto__.call(null, end));
                      if (fs__6922__auto__) {
                        return cljs.core.concat.call(null, fs__6922__auto__, enfocus$enlive$syntax$sel_to_str_$_iter__13611.call(null, cljs.core.rest.call(null, s__13612__$1)));
                      } else {
                        var G__13618 = cljs.core.rest.call(null, s__13612__$1);
                        s__13612__$1 = G__13618;
                        continue;
                      }
                    } else {
                      return null;
                    }
                    break;
                  }
                };
              }(x1, sub, item, rest, end), null, null);
            };
          }(x1, sub, item, rest, end);
          return iter__6925__auto__.call(null, sub);
        } else {
          return input;
        }
      }
    }
  }
};
enfocus.enlive.syntax.convert = function enfocus$enlive$syntax$convert(sel) {
  if (typeof sel === "string") {
    return sel;
  } else {
    var temp__4655__auto__ = enfocus.enlive.syntax.sel_to_str.call(null, sel);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var ors = temp__4655__auto__;
      return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, " ", cljs.core.apply.call(null, cljs.core.concat, cljs.core.interpose.call(null, ",", ors))));
    } else {
      return null;
    }
  }
};
enfocus.enlive.syntax.attr_pairs = function enfocus$enlive$syntax$attr_pairs(op, elms) {
  var ts = function(p__13621) {
    var vec__13622 = p__13621;
    var x = cljs.core.nth.call(null, vec__13622, 0, null);
    var y = cljs.core.nth.call(null, vec__13622, 1, null);
    return [cljs.core.str("["), cljs.core.str(cljs.core.name.call(null, x)), cljs.core.str(op), cljs.core.str("\x3d'"), cljs.core.str(y), cljs.core.str("']")].join("");
  };
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, ts, cljs.core.partition.call(null, 2, elms)));
};
enfocus.enlive.syntax.attr_QMARK_ = function enfocus$enlive$syntax$attr_QMARK_(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___13625 = arguments.length;
  var i__7212__auto___13626 = 0;
  while (true) {
    if (i__7212__auto___13626 < len__7211__auto___13625) {
      args__7218__auto__.push(arguments[i__7212__auto___13626]);
      var G__13627 = i__7212__auto___13626 + 1;
      i__7212__auto___13626 = G__13627;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return enfocus.enlive.syntax.attr_QMARK_.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
enfocus.enlive.syntax.attr_QMARK_.cljs$core$IFn$_invoke$arity$variadic = function(elms) {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, function(p1__13623_SHARP_) {
    return [cljs.core.str("["), cljs.core.str(cljs.core.name.call(null, p1__13623_SHARP_)), cljs.core.str("]")].join("");
  }, elms));
};
enfocus.enlive.syntax.attr_QMARK_.cljs$lang$maxFixedArity = 0;
enfocus.enlive.syntax.attr_QMARK_.cljs$lang$applyTo = function(seq13624) {
  return enfocus.enlive.syntax.attr_QMARK_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq13624));
};
enfocus.enlive.syntax.attr_EQ_ = function enfocus$enlive$syntax$attr_EQ_(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___13629 = arguments.length;
  var i__7212__auto___13630 = 0;
  while (true) {
    if (i__7212__auto___13630 < len__7211__auto___13629) {
      args__7218__auto__.push(arguments[i__7212__auto___13630]);
      var G__13631 = i__7212__auto___13630 + 1;
      i__7212__auto___13630 = G__13631;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return enfocus.enlive.syntax.attr_EQ_.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
enfocus.enlive.syntax.attr_EQ_.cljs$core$IFn$_invoke$arity$variadic = function(elms) {
  return enfocus.enlive.syntax.attr_pairs.call(null, "", elms);
};
enfocus.enlive.syntax.attr_EQ_.cljs$lang$maxFixedArity = 0;
enfocus.enlive.syntax.attr_EQ_.cljs$lang$applyTo = function(seq13628) {
  return enfocus.enlive.syntax.attr_EQ_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq13628));
};
enfocus.enlive.syntax.attr_has = function enfocus$enlive$syntax$attr_has(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___13634 = arguments.length;
  var i__7212__auto___13635 = 0;
  while (true) {
    if (i__7212__auto___13635 < len__7211__auto___13634) {
      args__7218__auto__.push(arguments[i__7212__auto___13635]);
      var G__13636 = i__7212__auto___13635 + 1;
      i__7212__auto___13635 = G__13636;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return enfocus.enlive.syntax.attr_has.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
enfocus.enlive.syntax.attr_has.cljs$core$IFn$_invoke$arity$variadic = function(x, vals) {
  var ts = function(y) {
    return [cljs.core.str("["), cljs.core.str(cljs.core.name.call(null, x)), cljs.core.str("~\x3d'"), cljs.core.str(y), cljs.core.str("']")].join("");
  };
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, ts, vals));
};
enfocus.enlive.syntax.attr_has.cljs$lang$maxFixedArity = 1;
enfocus.enlive.syntax.attr_has.cljs$lang$applyTo = function(seq13632) {
  var G__13633 = cljs.core.first.call(null, seq13632);
  var seq13632__$1 = cljs.core.next.call(null, seq13632);
  return enfocus.enlive.syntax.attr_has.cljs$core$IFn$_invoke$arity$variadic(G__13633, seq13632__$1);
};
enfocus.enlive.syntax.attr_starts = function enfocus$enlive$syntax$attr_starts(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___13638 = arguments.length;
  var i__7212__auto___13639 = 0;
  while (true) {
    if (i__7212__auto___13639 < len__7211__auto___13638) {
      args__7218__auto__.push(arguments[i__7212__auto___13639]);
      var G__13640 = i__7212__auto___13639 + 1;
      i__7212__auto___13639 = G__13640;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return enfocus.enlive.syntax.attr_starts.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
enfocus.enlive.syntax.attr_starts.cljs$core$IFn$_invoke$arity$variadic = function(elms) {
  return enfocus.enlive.syntax.attr_pairs.call(null, "^", elms);
};
enfocus.enlive.syntax.attr_starts.cljs$lang$maxFixedArity = 0;
enfocus.enlive.syntax.attr_starts.cljs$lang$applyTo = function(seq13637) {
  return enfocus.enlive.syntax.attr_starts.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq13637));
};
enfocus.enlive.syntax.attr_ends = function enfocus$enlive$syntax$attr_ends(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___13642 = arguments.length;
  var i__7212__auto___13643 = 0;
  while (true) {
    if (i__7212__auto___13643 < len__7211__auto___13642) {
      args__7218__auto__.push(arguments[i__7212__auto___13643]);
      var G__13644 = i__7212__auto___13643 + 1;
      i__7212__auto___13643 = G__13644;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return enfocus.enlive.syntax.attr_ends.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
enfocus.enlive.syntax.attr_ends.cljs$core$IFn$_invoke$arity$variadic = function(elms) {
  return enfocus.enlive.syntax.attr_pairs.call(null, "$", elms);
};
enfocus.enlive.syntax.attr_ends.cljs$lang$maxFixedArity = 0;
enfocus.enlive.syntax.attr_ends.cljs$lang$applyTo = function(seq13641) {
  return enfocus.enlive.syntax.attr_ends.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq13641));
};
enfocus.enlive.syntax.attr_contains = function enfocus$enlive$syntax$attr_contains(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___13646 = arguments.length;
  var i__7212__auto___13647 = 0;
  while (true) {
    if (i__7212__auto___13647 < len__7211__auto___13646) {
      args__7218__auto__.push(arguments[i__7212__auto___13647]);
      var G__13648 = i__7212__auto___13647 + 1;
      i__7212__auto___13647 = G__13648;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return enfocus.enlive.syntax.attr_contains.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
enfocus.enlive.syntax.attr_contains.cljs$core$IFn$_invoke$arity$variadic = function(elms) {
  return enfocus.enlive.syntax.attr_pairs.call(null, "*", elms);
};
enfocus.enlive.syntax.attr_contains.cljs$lang$maxFixedArity = 0;
enfocus.enlive.syntax.attr_contains.cljs$lang$applyTo = function(seq13645) {
  return enfocus.enlive.syntax.attr_contains.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq13645));
};
enfocus.enlive.syntax.attr_BAR__EQ_ = function enfocus$enlive$syntax$attr_BAR__EQ_(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___13650 = arguments.length;
  var i__7212__auto___13651 = 0;
  while (true) {
    if (i__7212__auto___13651 < len__7211__auto___13650) {
      args__7218__auto__.push(arguments[i__7212__auto___13651]);
      var G__13652 = i__7212__auto___13651 + 1;
      i__7212__auto___13651 = G__13652;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return enfocus.enlive.syntax.attr_BAR__EQ_.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
enfocus.enlive.syntax.attr_BAR__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(elms) {
  return enfocus.enlive.syntax.attr_pairs.call(null, "|", elms);
};
enfocus.enlive.syntax.attr_BAR__EQ_.cljs$lang$maxFixedArity = 0;
enfocus.enlive.syntax.attr_BAR__EQ_.cljs$lang$applyTo = function(seq13649) {
  return enfocus.enlive.syntax.attr_BAR__EQ_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq13649));
};
enfocus.enlive.syntax.nth_op = function enfocus$enlive$syntax$nth_op(var_args) {
  var args13653 = [];
  var len__7211__auto___13656 = arguments.length;
  var i__7212__auto___13657 = 0;
  while (true) {
    if (i__7212__auto___13657 < len__7211__auto___13656) {
      args13653.push(arguments[i__7212__auto___13657]);
      var G__13658 = i__7212__auto___13657 + 1;
      i__7212__auto___13657 = G__13658;
      continue;
    } else {
    }
    break;
  }
  var G__13655 = args13653.length;
  switch(G__13655) {
    case 2:
      return enfocus.enlive.syntax.nth_op.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return enfocus.enlive.syntax.nth_op.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13653.length)].join(""));;
  }
};
enfocus.enlive.syntax.nth_op.cljs$core$IFn$_invoke$arity$2 = function(op, x) {
  return [cljs.core.str(":nth-"), cljs.core.str(op), cljs.core.str("("), cljs.core.str(x), cljs.core.str(")")].join("");
};
enfocus.enlive.syntax.nth_op.cljs$core$IFn$_invoke$arity$3 = function(op, x, y) {
  return [cljs.core.str(":nth-"), cljs.core.str(op), cljs.core.str("("), cljs.core.str(x), cljs.core.str("n"), cljs.core.str(y > 0 ? "+" : null), cljs.core.str(y)].join("");
};
enfocus.enlive.syntax.nth_op.cljs$lang$maxFixedArity = 3;
enfocus.enlive.syntax.nth_child = function enfocus$enlive$syntax$nth_child(var_args) {
  var args13660 = [];
  var len__7211__auto___13663 = arguments.length;
  var i__7212__auto___13664 = 0;
  while (true) {
    if (i__7212__auto___13664 < len__7211__auto___13663) {
      args13660.push(arguments[i__7212__auto___13664]);
      var G__13665 = i__7212__auto___13664 + 1;
      i__7212__auto___13664 = G__13665;
      continue;
    } else {
    }
    break;
  }
  var G__13662 = args13660.length;
  switch(G__13662) {
    case 1:
      return enfocus.enlive.syntax.nth_child.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.enlive.syntax.nth_child.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13660.length)].join(""));;
  }
};
enfocus.enlive.syntax.nth_child.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return enfocus.enlive.syntax.nth_op.call(null, "child", x);
};
enfocus.enlive.syntax.nth_child.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return enfocus.enlive.syntax.nth_op.call(null, "child", x, y);
};
enfocus.enlive.syntax.nth_child.cljs$lang$maxFixedArity = 2;
enfocus.enlive.syntax.nth_last_child = function enfocus$enlive$syntax$nth_last_child(var_args) {
  var args13667 = [];
  var len__7211__auto___13670 = arguments.length;
  var i__7212__auto___13671 = 0;
  while (true) {
    if (i__7212__auto___13671 < len__7211__auto___13670) {
      args13667.push(arguments[i__7212__auto___13671]);
      var G__13672 = i__7212__auto___13671 + 1;
      i__7212__auto___13671 = G__13672;
      continue;
    } else {
    }
    break;
  }
  var G__13669 = args13667.length;
  switch(G__13669) {
    case 1:
      return enfocus.enlive.syntax.nth_last_child.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.enlive.syntax.nth_last_child.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13667.length)].join(""));;
  }
};
enfocus.enlive.syntax.nth_last_child.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return enfocus.enlive.syntax.nth_op.call(null, "last-child", x);
};
enfocus.enlive.syntax.nth_last_child.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return enfocus.enlive.syntax.nth_op.call(null, "last-child", x, y);
};
enfocus.enlive.syntax.nth_last_child.cljs$lang$maxFixedArity = 2;
enfocus.enlive.syntax.nth_of_type = function enfocus$enlive$syntax$nth_of_type(var_args) {
  var args13674 = [];
  var len__7211__auto___13677 = arguments.length;
  var i__7212__auto___13678 = 0;
  while (true) {
    if (i__7212__auto___13678 < len__7211__auto___13677) {
      args13674.push(arguments[i__7212__auto___13678]);
      var G__13679 = i__7212__auto___13678 + 1;
      i__7212__auto___13678 = G__13679;
      continue;
    } else {
    }
    break;
  }
  var G__13676 = args13674.length;
  switch(G__13676) {
    case 1:
      return enfocus.enlive.syntax.nth_of_type.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.enlive.syntax.nth_of_type.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13674.length)].join(""));;
  }
};
enfocus.enlive.syntax.nth_of_type.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return enfocus.enlive.syntax.nth_op.call(null, "of-type", x);
};
enfocus.enlive.syntax.nth_of_type.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return enfocus.enlive.syntax.nth_op.call(null, "of-type", x, y);
};
enfocus.enlive.syntax.nth_of_type.cljs$lang$maxFixedArity = 2;
enfocus.enlive.syntax.nth_last_of_type = function enfocus$enlive$syntax$nth_last_of_type(var_args) {
  var args13681 = [];
  var len__7211__auto___13684 = arguments.length;
  var i__7212__auto___13685 = 0;
  while (true) {
    if (i__7212__auto___13685 < len__7211__auto___13684) {
      args13681.push(arguments[i__7212__auto___13685]);
      var G__13686 = i__7212__auto___13685 + 1;
      i__7212__auto___13685 = G__13686;
      continue;
    } else {
    }
    break;
  }
  var G__13683 = args13681.length;
  switch(G__13683) {
    case 1:
      return enfocus.enlive.syntax.nth_last_of_type.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.enlive.syntax.nth_last_of_type.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13681.length)].join(""));;
  }
};
enfocus.enlive.syntax.nth_last_of_type.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return enfocus.enlive.syntax.nth_op.call(null, "last-of-type", x);
};
enfocus.enlive.syntax.nth_last_of_type.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return enfocus.enlive.syntax.nth_op.call(null, "last-of-type", x, y);
};
enfocus.enlive.syntax.nth_last_of_type.cljs$lang$maxFixedArity = 2;
enfocus.enlive.syntax.but = function enfocus$enlive$syntax$but(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___13689 = arguments.length;
  var i__7212__auto___13690 = 0;
  while (true) {
    if (i__7212__auto___13690 < len__7211__auto___13689) {
      args__7218__auto__.push(arguments[i__7212__auto___13690]);
      var G__13691 = i__7212__auto___13690 + 1;
      i__7212__auto___13690 = G__13691;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return enfocus.enlive.syntax.but.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
enfocus.enlive.syntax.but.cljs$core$IFn$_invoke$arity$variadic = function(sel) {
  return [cljs.core.str("not("), cljs.core.str(enfocus.enlive.syntax.convert.call(null, sel)), cljs.core.str(")")].join("");
};
enfocus.enlive.syntax.but.cljs$lang$maxFixedArity = 0;
enfocus.enlive.syntax.but.cljs$lang$applyTo = function(seq13688) {
  return enfocus.enlive.syntax.but.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq13688));
};
goog.provide("enfocus.core");
goog.require("cljs.core");
goog.require("goog.dom.forms");
goog.require("goog.dom.query");
goog.require("goog.dom");
goog.require("goog.dom.classes");
goog.require("domina.css");
goog.require("goog.Timer");
goog.require("goog.net.XhrIo");
goog.require("goog.dom.ViewportSizeMonitor");
goog.require("domina");
goog.require("goog.async.Delay");
goog.require("goog.events");
goog.require("domina.xpath");
goog.require("clojure.string");
goog.require("goog.style");
goog.require("enfocus.enlive.syntax");
enfocus.core.ISelector = function() {
};
enfocus.core.select = function enfocus$core$select(var_args) {
  var args13839 = [];
  var len__7211__auto___13842 = arguments.length;
  var i__7212__auto___13843 = 0;
  while (true) {
    if (i__7212__auto___13843 < len__7211__auto___13842) {
      args13839.push(arguments[i__7212__auto___13843]);
      var G__13844 = i__7212__auto___13843 + 1;
      i__7212__auto___13843 = G__13844;
      continue;
    } else {
    }
    break;
  }
  var G__13841 = args13839.length;
  switch(G__13841) {
    case 1:
      return enfocus.core.select.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.core.select.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return enfocus.core.select.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13839.length)].join(""));;
  }
};
enfocus.core.select.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (!(this$ == null) && !(this$.enfocus$core$ISelector$select$arity$1 == null)) {
    return this$.enfocus$core$ISelector$select$arity$1(this$);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = enfocus.core.select[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, this$);
    } else {
      var m__6809__auto____$1 = enfocus.core.select["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "ISelector.select", this$);
      }
    }
  }
};
enfocus.core.select.cljs$core$IFn$_invoke$arity$2 = function(this$, root) {
  if (!(this$ == null) && !(this$.enfocus$core$ISelector$select$arity$2 == null)) {
    return this$.enfocus$core$ISelector$select$arity$2(this$, root);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = enfocus.core.select[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, this$, root);
    } else {
      var m__6809__auto____$1 = enfocus.core.select["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, this$, root);
      } else {
        throw cljs.core.missing_protocol.call(null, "ISelector.select", this$);
      }
    }
  }
};
enfocus.core.select.cljs$core$IFn$_invoke$arity$3 = function(this$, root, id_mask) {
  if (!(this$ == null) && !(this$.enfocus$core$ISelector$select$arity$3 == null)) {
    return this$.enfocus$core$ISelector$select$arity$3(this$, root, id_mask);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = enfocus.core.select[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, this$, root, id_mask);
    } else {
      var m__6809__auto____$1 = enfocus.core.select["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, this$, root, id_mask);
      } else {
        throw cljs.core.missing_protocol.call(null, "ISelector.select", this$);
      }
    }
  }
};
enfocus.core.select.cljs$lang$maxFixedArity = 3;
enfocus.core.ITransform = function() {
};
enfocus.core.apply_transform = function enfocus$core$apply_transform(var_args) {
  var args13846 = [];
  var len__7211__auto___13849 = arguments.length;
  var i__7212__auto___13850 = 0;
  while (true) {
    if (i__7212__auto___13850 < len__7211__auto___13849) {
      args13846.push(arguments[i__7212__auto___13850]);
      var G__13851 = i__7212__auto___13850 + 1;
      i__7212__auto___13850 = G__13851;
      continue;
    } else {
    }
    break;
  }
  var G__13848 = args13846.length;
  switch(G__13848) {
    case 2:
      return enfocus.core.apply_transform.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return enfocus.core.apply_transform.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13846.length)].join(""));;
  }
};
enfocus.core.apply_transform.cljs$core$IFn$_invoke$arity$2 = function(this$, nodes) {
  if (!(this$ == null) && !(this$.enfocus$core$ITransform$apply_transform$arity$2 == null)) {
    return this$.enfocus$core$ITransform$apply_transform$arity$2(this$, nodes);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = enfocus.core.apply_transform[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, this$, nodes);
    } else {
      var m__6809__auto____$1 = enfocus.core.apply_transform["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, this$, nodes);
      } else {
        throw cljs.core.missing_protocol.call(null, "ITransform.apply-transform", this$);
      }
    }
  }
};
enfocus.core.apply_transform.cljs$core$IFn$_invoke$arity$3 = function(this$, nodes, callback) {
  if (!(this$ == null) && !(this$.enfocus$core$ITransform$apply_transform$arity$3 == null)) {
    return this$.enfocus$core$ITransform$apply_transform$arity$3(this$, nodes, callback);
  } else {
    var x__6808__auto__ = this$ == null ? null : this$;
    var m__6809__auto__ = enfocus.core.apply_transform[goog.typeOf(x__6808__auto__)];
    if (!(m__6809__auto__ == null)) {
      return m__6809__auto__.call(null, this$, nodes, callback);
    } else {
      var m__6809__auto____$1 = enfocus.core.apply_transform["_"];
      if (!(m__6809__auto____$1 == null)) {
        return m__6809__auto____$1.call(null, this$, nodes, callback);
      } else {
        throw cljs.core.missing_protocol.call(null, "ITransform.apply-transform", this$);
      }
    }
  }
};
enfocus.core.apply_transform.cljs$lang$maxFixedArity = 3;
enfocus.core.debug = false;
enfocus.core.log_debug = function enfocus$core$log_debug(mesg) {
  if (cljs.core.truth_(function() {
    var and__6141__auto__ = enfocus.core.debug;
    if (cljs.core.truth_(and__6141__auto__)) {
      return !cljs.core._EQ_.call(null, window.console, undefined);
    } else {
      return and__6141__auto__;
    }
  }())) {
    return console.log(mesg);
  } else {
    return null;
  }
};
enfocus.core.setTimeout = function enfocus$core$setTimeout(func, ttime) {
  return goog.Timer.callOnce(func, ttime);
};
enfocus.core.node_QMARK_ = function enfocus$core$node_QMARK_(tst) {
  return goog.dom.isNodeLike(tst);
};
enfocus.core.nodelist_QMARK_ = function enfocus$core$nodelist_QMARK_(tst) {
  return tst instanceof NodeList;
};
enfocus.core.nodes__GT_coll = function enfocus$core$nodes__GT_coll(nl) {
  if (nl === window) {
    return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [nl], null);
  } else {
    return domina.nodes.call(null, nl);
  }
};
enfocus.core.flatten_nodes_coll = function enfocus$core$flatten_nodes_coll(values) {
  return cljs.core.mapcat.call(null, function(p1__13853_SHARP_) {
    if (typeof p1__13853_SHARP_ === "string") {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [goog.dom.createTextNode(p1__13853_SHARP_)], null);
    } else {
      return enfocus.core.nodes__GT_coll.call(null, p1__13853_SHARP_);
    }
  }, values);
};
enfocus.core.style_set = function enfocus$core$style_set(obj, values) {
  var seq__13860_13866 = cljs.core.seq.call(null, cljs.core.apply.call(null, cljs.core.hash_map, values));
  var chunk__13861_13867 = null;
  var count__13862_13868 = 0;
  var i__13863_13869 = 0;
  while (true) {
    if (i__13863_13869 < count__13862_13868) {
      var vec__13864_13870 = cljs.core._nth.call(null, chunk__13861_13867, i__13863_13869);
      var attr_13871 = cljs.core.nth.call(null, vec__13864_13870, 0, null);
      var value_13872 = cljs.core.nth.call(null, vec__13864_13870, 1, null);
      goog.style.setStyle(obj, cljs.core.name.call(null, attr_13871), value_13872);
      var G__13873 = seq__13860_13866;
      var G__13874 = chunk__13861_13867;
      var G__13875 = count__13862_13868;
      var G__13876 = i__13863_13869 + 1;
      seq__13860_13866 = G__13873;
      chunk__13861_13867 = G__13874;
      count__13862_13868 = G__13875;
      i__13863_13869 = G__13876;
      continue;
    } else {
      var temp__4657__auto___13877 = cljs.core.seq.call(null, seq__13860_13866);
      if (temp__4657__auto___13877) {
        var seq__13860_13878__$1 = temp__4657__auto___13877;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13860_13878__$1)) {
          var c__6956__auto___13879 = cljs.core.chunk_first.call(null, seq__13860_13878__$1);
          var G__13880 = cljs.core.chunk_rest.call(null, seq__13860_13878__$1);
          var G__13881 = c__6956__auto___13879;
          var G__13882 = cljs.core.count.call(null, c__6956__auto___13879);
          var G__13883 = 0;
          seq__13860_13866 = G__13880;
          chunk__13861_13867 = G__13881;
          count__13862_13868 = G__13882;
          i__13863_13869 = G__13883;
          continue;
        } else {
          var vec__13865_13884 = cljs.core.first.call(null, seq__13860_13878__$1);
          var attr_13885 = cljs.core.nth.call(null, vec__13865_13884, 0, null);
          var value_13886 = cljs.core.nth.call(null, vec__13865_13884, 1, null);
          goog.style.setStyle(obj, cljs.core.name.call(null, attr_13885), value_13886);
          var G__13887 = cljs.core.next.call(null, seq__13860_13878__$1);
          var G__13888 = null;
          var G__13889 = 0;
          var G__13890 = 0;
          seq__13860_13866 = G__13887;
          chunk__13861_13867 = G__13888;
          count__13862_13868 = G__13889;
          i__13863_13869 = G__13890;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
enfocus.core.style_remove = function enfocus$core$style_remove(obj, values) {
  var seq__13895 = cljs.core.seq.call(null, values);
  var chunk__13896 = null;
  var count__13897 = 0;
  var i__13898 = 0;
  while (true) {
    if (i__13898 < count__13897) {
      var attr = cljs.core._nth.call(null, chunk__13896, i__13898);
      if (cljs.core.truth_(goog.userAgent.IE)) {
        goog.style.setStyle(obj, cljs.core.name.call(null, attr), "");
      } else {
        obj.style.removeProperty(cljs.core.name.call(null, attr));
      }
      var G__13899 = seq__13895;
      var G__13900 = chunk__13896;
      var G__13901 = count__13897;
      var G__13902 = i__13898 + 1;
      seq__13895 = G__13899;
      chunk__13896 = G__13900;
      count__13897 = G__13901;
      i__13898 = G__13902;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq.call(null, seq__13895);
      if (temp__4657__auto__) {
        var seq__13895__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13895__$1)) {
          var c__6956__auto__ = cljs.core.chunk_first.call(null, seq__13895__$1);
          var G__13903 = cljs.core.chunk_rest.call(null, seq__13895__$1);
          var G__13904 = c__6956__auto__;
          var G__13905 = cljs.core.count.call(null, c__6956__auto__);
          var G__13906 = 0;
          seq__13895 = G__13903;
          chunk__13896 = G__13904;
          count__13897 = G__13905;
          i__13898 = G__13906;
          continue;
        } else {
          var attr = cljs.core.first.call(null, seq__13895__$1);
          if (cljs.core.truth_(goog.userAgent.IE)) {
            goog.style.setStyle(obj, cljs.core.name.call(null, attr), "");
          } else {
            obj.style.removeProperty(cljs.core.name.call(null, attr));
          }
          var G__13907 = cljs.core.next.call(null, seq__13895__$1);
          var G__13908 = null;
          var G__13909 = 0;
          var G__13910 = 0;
          seq__13895 = G__13907;
          chunk__13896 = G__13908;
          count__13897 = G__13909;
          i__13898 = G__13910;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
enfocus.core.get_eff_prop_name = function enfocus$core$get_eff_prop_name(etype) {
  return [cljs.core.str("__ef_effect_"), cljs.core.str(etype)].join("");
};
enfocus.core.get_mills = function enfocus$core$get_mills() {
  return (new Date).getMilliseconds();
};
enfocus.core.pix_round = function enfocus$core$pix_round(step) {
  if (step < 0) {
    return Math.floor(step);
  } else {
    return Math.ceil(step);
  }
};
enfocus.core.add_map_attrs = function enfocus$core$add_map_attrs(var_args) {
  var args13911 = [];
  var len__7211__auto___13920 = arguments.length;
  var i__7212__auto___13921 = 0;
  while (true) {
    if (i__7212__auto___13921 < len__7211__auto___13920) {
      args13911.push(arguments[i__7212__auto___13921]);
      var G__13922 = i__7212__auto___13921 + 1;
      i__7212__auto___13921 = G__13922;
      continue;
    } else {
    }
    break;
  }
  var G__13913 = args13911.length;
  switch(G__13913) {
    case 2:
      return enfocus.core.add_map_attrs.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return enfocus.core.add_map_attrs.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13911.length)].join(""));;
  }
};
enfocus.core.add_map_attrs.cljs$core$IFn$_invoke$arity$2 = function(elem, ats) {
  if (cljs.core.truth_(elem)) {
    if (cljs.core.map_QMARK_.call(null, ats)) {
      var seq__13914_13924 = cljs.core.seq.call(null, ats);
      var chunk__13915_13925 = null;
      var count__13916_13926 = 0;
      var i__13917_13927 = 0;
      while (true) {
        if (i__13917_13927 < count__13916_13926) {
          var vec__13918_13928 = cljs.core._nth.call(null, chunk__13915_13925, i__13917_13927);
          var k_13929 = cljs.core.nth.call(null, vec__13918_13928, 0, null);
          var v_13930 = cljs.core.nth.call(null, vec__13918_13928, 1, null);
          enfocus.core.add_map_attrs.call(null, elem, k_13929, v_13930);
          var G__13931 = seq__13914_13924;
          var G__13932 = chunk__13915_13925;
          var G__13933 = count__13916_13926;
          var G__13934 = i__13917_13927 + 1;
          seq__13914_13924 = G__13931;
          chunk__13915_13925 = G__13932;
          count__13916_13926 = G__13933;
          i__13917_13927 = G__13934;
          continue;
        } else {
          var temp__4657__auto___13935 = cljs.core.seq.call(null, seq__13914_13924);
          if (temp__4657__auto___13935) {
            var seq__13914_13936__$1 = temp__4657__auto___13935;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__13914_13936__$1)) {
              var c__6956__auto___13937 = cljs.core.chunk_first.call(null, seq__13914_13936__$1);
              var G__13938 = cljs.core.chunk_rest.call(null, seq__13914_13936__$1);
              var G__13939 = c__6956__auto___13937;
              var G__13940 = cljs.core.count.call(null, c__6956__auto___13937);
              var G__13941 = 0;
              seq__13914_13924 = G__13938;
              chunk__13915_13925 = G__13939;
              count__13916_13926 = G__13940;
              i__13917_13927 = G__13941;
              continue;
            } else {
              var vec__13919_13942 = cljs.core.first.call(null, seq__13914_13936__$1);
              var k_13943 = cljs.core.nth.call(null, vec__13919_13942, 0, null);
              var v_13944 = cljs.core.nth.call(null, vec__13919_13942, 1, null);
              enfocus.core.add_map_attrs.call(null, elem, k_13943, v_13944);
              var G__13945 = cljs.core.next.call(null, seq__13914_13936__$1);
              var G__13946 = null;
              var G__13947 = 0;
              var G__13948 = 0;
              seq__13914_13924 = G__13945;
              chunk__13915_13925 = G__13946;
              count__13916_13926 = G__13947;
              i__13917_13927 = G__13948;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return elem;
    } else {
      return null;
    }
  } else {
    return null;
  }
};
enfocus.core.add_map_attrs.cljs$core$IFn$_invoke$arity$3 = function(elem, k, v) {
  elem.setAttribute(cljs.core.name.call(null, k), v);
  return elem;
};
enfocus.core.add_map_attrs.cljs$lang$maxFixedArity = 3;
enfocus.core.tpl_load_cnt = cljs.core.atom.call(null, 0);
enfocus.core.tpl_cache = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
enfocus.core.hide_style = (new cljs.core.PersistentArrayMap(null, 1, ["style", "display: none; width: 0px; height: 0px"], null)).strobj;
enfocus.core.create_hidden_dom = function enfocus$core$create_hidden_dom(child) {
  var div = goog.dom.createDom("div", enfocus.core.hide_style);
  if (cljs.core._EQ_.call(null, child.nodeType, 11)) {
    goog.dom.appendChild(div, child);
  } else {
    enfocus.core.log_debug.call(null, cljs.core.count.call(null, domina.nodes.call(null, child)));
    var seq__13953_13957 = cljs.core.seq.call(null, domina.nodes.call(null, child));
    var chunk__13954_13958 = null;
    var count__13955_13959 = 0;
    var i__13956_13960 = 0;
    while (true) {
      if (i__13956_13960 < count__13955_13959) {
        var node_13961 = cljs.core._nth.call(null, chunk__13954_13958, i__13956_13960);
        goog.dom.appendChild(div, node_13961);
        var G__13962 = seq__13953_13957;
        var G__13963 = chunk__13954_13958;
        var G__13964 = count__13955_13959;
        var G__13965 = i__13956_13960 + 1;
        seq__13953_13957 = G__13962;
        chunk__13954_13958 = G__13963;
        count__13955_13959 = G__13964;
        i__13956_13960 = G__13965;
        continue;
      } else {
        var temp__4657__auto___13966 = cljs.core.seq.call(null, seq__13953_13957);
        if (temp__4657__auto___13966) {
          var seq__13953_13967__$1 = temp__4657__auto___13966;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__13953_13967__$1)) {
            var c__6956__auto___13968 = cljs.core.chunk_first.call(null, seq__13953_13967__$1);
            var G__13969 = cljs.core.chunk_rest.call(null, seq__13953_13967__$1);
            var G__13970 = c__6956__auto___13968;
            var G__13971 = cljs.core.count.call(null, c__6956__auto___13968);
            var G__13972 = 0;
            seq__13953_13957 = G__13969;
            chunk__13954_13958 = G__13970;
            count__13955_13959 = G__13971;
            i__13956_13960 = G__13972;
            continue;
          } else {
            var node_13973 = cljs.core.first.call(null, seq__13953_13967__$1);
            goog.dom.appendChild(div, node_13973);
            var G__13974 = cljs.core.next.call(null, seq__13953_13967__$1);
            var G__13975 = null;
            var G__13976 = 0;
            var G__13977 = 0;
            seq__13953_13957 = G__13974;
            chunk__13954_13958 = G__13975;
            count__13955_13959 = G__13976;
            i__13956_13960 = G__13977;
            continue;
          }
        } else {
        }
      }
      break;
    }
  }
  goog.dom.appendChild(goog.dom.getDocument().documentElement, div);
  return div;
};
enfocus.core.remove_node_return_child = function enfocus$core$remove_node_return_child(div) {
  var child = div.childNodes;
  var frag = document.createDocumentFragment();
  goog.dom.append(frag, child);
  goog.dom.removeNode(div);
  return frag;
};
enfocus.core.last_element_child = function enfocus$core$last_element_child(node) {
  return goog.dom.getLastElementChild(node);
};
enfocus.core.replace_ids = function enfocus$core$replace_ids(var_args) {
  var args13978 = [];
  var len__7211__auto___13981 = arguments.length;
  var i__7212__auto___13982 = 0;
  while (true) {
    if (i__7212__auto___13982 < len__7211__auto___13981) {
      args13978.push(arguments[i__7212__auto___13982]);
      var G__13983 = i__7212__auto___13982 + 1;
      i__7212__auto___13982 = G__13983;
      continue;
    } else {
    }
    break;
  }
  var G__13980 = args13978.length;
  switch(G__13980) {
    case 1:
      return enfocus.core.replace_ids.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.core.replace_ids.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args13978.length)].join(""));;
  }
};
enfocus.core.replace_ids.cljs$core$IFn$_invoke$arity$1 = function(text) {
  return enfocus.core.replace_ids.call(null, [cljs.core.str(cljs.core.name.call(null, cljs.core.gensym.call(null, "id"))), cljs.core.str("_")].join(""), text);
};
enfocus.core.replace_ids.cljs$core$IFn$_invoke$arity$2 = function(id_mask, text) {
  var re = new RegExp("(\x3c.*?\\sid\x3d['\"])(.*?)(['\"].*?\x3e)", "g");
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id_mask, text.replace(re, function(re) {
    return function(a, b, c, d) {
      return [cljs.core.str(b), cljs.core.str(id_mask), cljs.core.str(c), cljs.core.str(d)].join("");
    };
  }(re))], null);
};
enfocus.core.replace_ids.cljs$lang$maxFixedArity = 2;
enfocus.core.reset_ids = function enfocus$core$reset_ids(sym, nod) {
  var id_nodes = enfocus.core.css_select.call(null, nod, "*[id]");
  var nod_col = enfocus.core.nodes__GT_coll.call(null, id_nodes);
  return cljs.core.doall.call(null, cljs.core.map.call(null, function(id_nodes, nod_col) {
    return function(p1__13985_SHARP_) {
      var id = p1__13985_SHARP_.getAttribute("id");
      var rid = id.replace(sym, "");
      return p1__13985_SHARP_.setAttribute("id", rid);
    };
  }(id_nodes, nod_col), nod_col));
};
enfocus.core.load_remote_dom = function enfocus$core$load_remote_dom(uri, dom_key, id_mask) {
  if (cljs.core.deref.call(null, enfocus.core.tpl_cache).call(null, dom_key) == null) {
    cljs.core.swap_BANG_.call(null, enfocus.core.tpl_load_cnt, cljs.core.inc);
    var req = new goog.net.XhrIo;
    var callback = function(req) {
      return function(req__$1) {
        var text = req__$1.getResponseText();
        var vec__13987 = enfocus.core.replace_ids.call(null, id_mask, text);
        var sym = cljs.core.nth.call(null, vec__13987, 0, null);
        var txt = cljs.core.nth.call(null, vec__13987, 1, null);
        return cljs.core.swap_BANG_.call(null, enfocus.core.tpl_cache, cljs.core.assoc, dom_key, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [sym, txt], null));
      };
    }(req);
    goog.events.listen(req, goog.net.EventType.COMPLETE, function(req, callback) {
      return function() {
        callback.call(null, req);
        return cljs.core.swap_BANG_.call(null, enfocus.core.tpl_load_cnt, cljs.core.dec);
      };
    }(req, callback));
    return req.send(uri, "GET");
  } else {
    return null;
  }
};
enfocus.core.html_to_dom = function enfocus$core$html_to_dom(html) {
  var dfa = enfocus.core.nodes__GT_coll.call(null, domina.html_to_dom.call(null, html));
  var frag = document.createDocumentFragment();
  enfocus.core.log_debug.call(null, cljs.core.count.call(null, dfa));
  var seq__13992_13996 = cljs.core.seq.call(null, dfa);
  var chunk__13993_13997 = null;
  var count__13994_13998 = 0;
  var i__13995_13999 = 0;
  while (true) {
    if (i__13995_13999 < count__13994_13998) {
      var df_14000 = cljs.core._nth.call(null, chunk__13993_13997, i__13995_13999);
      goog.dom.append(frag, df_14000);
      var G__14001 = seq__13992_13996;
      var G__14002 = chunk__13993_13997;
      var G__14003 = count__13994_13998;
      var G__14004 = i__13995_13999 + 1;
      seq__13992_13996 = G__14001;
      chunk__13993_13997 = G__14002;
      count__13994_13998 = G__14003;
      i__13995_13999 = G__14004;
      continue;
    } else {
      var temp__4657__auto___14005 = cljs.core.seq.call(null, seq__13992_13996);
      if (temp__4657__auto___14005) {
        var seq__13992_14006__$1 = temp__4657__auto___14005;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13992_14006__$1)) {
          var c__6956__auto___14007 = cljs.core.chunk_first.call(null, seq__13992_14006__$1);
          var G__14008 = cljs.core.chunk_rest.call(null, seq__13992_14006__$1);
          var G__14009 = c__6956__auto___14007;
          var G__14010 = cljs.core.count.call(null, c__6956__auto___14007);
          var G__14011 = 0;
          seq__13992_13996 = G__14008;
          chunk__13993_13997 = G__14009;
          count__13994_13998 = G__14010;
          i__13995_13999 = G__14011;
          continue;
        } else {
          var df_14012 = cljs.core.first.call(null, seq__13992_14006__$1);
          goog.dom.append(frag, df_14012);
          var G__14013 = cljs.core.next.call(null, seq__13992_14006__$1);
          var G__14014 = null;
          var G__14015 = 0;
          var G__14016 = 0;
          seq__13992_13996 = G__14013;
          chunk__13993_13997 = G__14014;
          count__13994_13998 = G__14015;
          i__13995_13999 = G__14016;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return frag;
};
enfocus.core.get_cached_dom = function enfocus$core$get_cached_dom(uri) {
  var nod = cljs.core.deref.call(null, enfocus.core.tpl_cache).call(null, uri);
  if (cljs.core.truth_(nod)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, nod), enfocus.core.html_to_dom.call(null, cljs.core.second.call(null, nod))], null);
  } else {
    return null;
  }
};
enfocus.core.get_cached_snippet = function enfocus$core$get_cached_snippet(uri, sel) {
  var sel_str = enfocus.core.create_sel_str.call(null, sel);
  var cache = cljs.core.deref.call(null, enfocus.core.tpl_cache).call(null, [cljs.core.str(uri), cljs.core.str(sel_str)].join(""));
  if (cljs.core.truth_(cache)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, cache), enfocus.core.html_to_dom.call(null, cljs.core.second.call(null, cache))], null);
  } else {
    var vec__14019 = enfocus.core.get_cached_dom.call(null, uri);
    var sym = cljs.core.nth.call(null, vec__14019, 0, null);
    var tdom = cljs.core.nth.call(null, vec__14019, 1, null);
    var dom = enfocus.core.create_hidden_dom.call(null, tdom);
    var tsnip = domina.nodes.call(null, enfocus.core.css_select.call(null, sym, dom, sel));
    var html_snip = cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, function(vec__14019, sym, tdom, dom, tsnip, sel_str, cache) {
      return function(p1__14017_SHARP_) {
        return p1__14017_SHARP_.outerHTML;
      };
    }(vec__14019, sym, tdom, dom, tsnip, sel_str, cache), tsnip));
    enfocus.core.remove_node_return_child.call(null, dom);
    cljs.core.swap_BANG_.call(null, enfocus.core.tpl_cache, cljs.core.assoc, [cljs.core.str(uri), cljs.core.str(sel_str)].join(""), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [sym, html_snip], null));
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [sym, enfocus.core.html_to_dom.call(null, html_snip)], null);
  }
};
enfocus.core.extr_multi_node = function enfocus$core$extr_multi_node(var_args) {
  var args14020 = [];
  var len__7211__auto___14027 = arguments.length;
  var i__7212__auto___14028 = 0;
  while (true) {
    if (i__7212__auto___14028 < len__7211__auto___14027) {
      args14020.push(arguments[i__7212__auto___14028]);
      var G__14029 = i__7212__auto___14028 + 1;
      i__7212__auto___14028 = G__14029;
      continue;
    } else {
    }
    break;
  }
  var G__14022 = args14020.length;
  switch(G__14022) {
    case 1:
      return enfocus.core.extr_multi_node.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.core.extr_multi_node.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args14020.length)].join(""));;
  }
};
enfocus.core.extr_multi_node.cljs$core$IFn$_invoke$arity$1 = function(func) {
  return enfocus.core.extr_multi_node.call(null, func, null);
};
enfocus.core.extr_multi_node.cljs$core$IFn$_invoke$arity$2 = function(func, filt) {
  var trans = function enfocus$core$trans(pnodes, chain) {
    var pnod_col = enfocus.core.nodes__GT_coll.call(null, pnodes);
    var result = cljs.core.map.call(null, func, pnod_col);
    var result__$1 = cljs.core.truth_(filt) ? cljs.core.filter.call(null, filt, result) : result;
    if (cljs.core.count.call(null, result__$1) <= 1) {
      return cljs.core.first.call(null, result__$1);
    } else {
      return result__$1;
    }
  };
  if (typeof enfocus.core.t_enfocus$core14023 !== "undefined") {
  } else {
    enfocus.core.t_enfocus$core14023 = function(func, filt, trans, meta14024) {
      this.func = func;
      this.filt = filt;
      this.trans = trans;
      this.meta14024 = meta14024;
      this.cljs$lang$protocol_mask$partition0$ = 393217;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    enfocus.core.t_enfocus$core14023.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(trans) {
      return function(_14025, meta14024__$1) {
        var self__ = this;
        var _14025__$1 = this;
        return new enfocus.core.t_enfocus$core14023(self__.func, self__.filt, self__.trans, meta14024__$1);
      };
    }(trans);
    enfocus.core.t_enfocus$core14023.prototype.cljs$core$IMeta$_meta$arity$1 = function(trans) {
      return function(_14025) {
        var self__ = this;
        var _14025__$1 = this;
        return self__.meta14024;
      };
    }(trans);
    enfocus.core.t_enfocus$core14023.prototype.enfocus$core$ITransform$ = true;
    enfocus.core.t_enfocus$core14023.prototype.enfocus$core$ITransform$apply_transform$arity$2 = function(trans) {
      return function(_, nodes) {
        var self__ = this;
        var ___$1 = this;
        return self__.trans.call(null, nodes, null);
      };
    }(trans);
    enfocus.core.t_enfocus$core14023.prototype.enfocus$core$ITransform$apply_transform$arity$3 = function(trans) {
      return function(_, nodes, chain) {
        var self__ = this;
        var ___$1 = this;
        return self__.trans.call(null, nodes, chain);
      };
    }(trans);
    enfocus.core.t_enfocus$core14023.prototype.call = function(trans) {
      return function() {
        var G__14031 = null;
        var G__14031__2 = function(self__, nodes) {
          var self__ = this;
          var self____$1 = this;
          var _ = self____$1;
          return self__.trans.call(null, nodes, null);
        };
        var G__14031__3 = function(self__, nodes, chain) {
          var self__ = this;
          var self____$1 = this;
          var _ = self____$1;
          return self__.trans.call(null, nodes, chain);
        };
        G__14031 = function(self__, nodes, chain) {
          switch(arguments.length) {
            case 2:
              return G__14031__2.call(this, self__, nodes);
            case 3:
              return G__14031__3.call(this, self__, nodes, chain);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__14031.cljs$core$IFn$_invoke$arity$2 = G__14031__2;
        G__14031.cljs$core$IFn$_invoke$arity$3 = G__14031__3;
        return G__14031;
      }();
    }(trans);
    enfocus.core.t_enfocus$core14023.prototype.apply = function(trans) {
      return function(self__, args14026) {
        var self__ = this;
        var self____$1 = this;
        return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14026)));
      };
    }(trans);
    enfocus.core.t_enfocus$core14023.prototype.cljs$core$IFn$_invoke$arity$1 = function(trans) {
      return function(nodes) {
        var self__ = this;
        var _ = this;
        return self__.trans.call(null, nodes, null);
      };
    }(trans);
    enfocus.core.t_enfocus$core14023.prototype.cljs$core$IFn$_invoke$arity$2 = function(trans) {
      return function(nodes, chain) {
        var self__ = this;
        var _ = this;
        return self__.trans.call(null, nodes, chain);
      };
    }(trans);
    enfocus.core.t_enfocus$core14023.getBasis = function(trans) {
      return function() {
        return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "func", "func", 1401825487, null), new cljs.core.Symbol(null, "filt", "filt", 1809760609, null), new cljs.core.Symbol(null, "trans", "trans", 322027676, null), new cljs.core.Symbol(null, "meta14024", "meta14024", -293582625, null)], null);
      };
    }(trans);
    enfocus.core.t_enfocus$core14023.cljs$lang$type = true;
    enfocus.core.t_enfocus$core14023.cljs$lang$ctorStr = "enfocus.core/t_enfocus$core14023";
    enfocus.core.t_enfocus$core14023.cljs$lang$ctorPrWriter = function(trans) {
      return function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
        return cljs.core._write.call(null, writer__6752__auto__, "enfocus.core/t_enfocus$core14023");
      };
    }(trans);
    enfocus.core.__GT_t_enfocus$core14023 = function(trans) {
      return function enfocus$core$__GT_t_enfocus$core14023(func__$1, filt__$1, trans__$1, meta14024) {
        return new enfocus.core.t_enfocus$core14023(func__$1, filt__$1, trans__$1, meta14024);
      };
    }(trans);
  }
  return new enfocus.core.t_enfocus$core14023(func, filt, trans, cljs.core.PersistentArrayMap.EMPTY);
};
enfocus.core.extr_multi_node.cljs$lang$maxFixedArity = 2;
enfocus.core.multi_node_chain = function enfocus$core$multi_node_chain(var_args) {
  var args14033 = [];
  var len__7211__auto___14044 = arguments.length;
  var i__7212__auto___14045 = 0;
  while (true) {
    if (i__7212__auto___14045 < len__7211__auto___14044) {
      args14033.push(arguments[i__7212__auto___14045]);
      var G__14046 = i__7212__auto___14045 + 1;
      i__7212__auto___14045 = G__14046;
      continue;
    } else {
    }
    break;
  }
  var G__14035 = args14033.length;
  switch(G__14035) {
    case 1:
      return enfocus.core.multi_node_chain.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.core.multi_node_chain.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args14033.length)].join(""));;
  }
};
enfocus.core.multi_node_chain.cljs$core$IFn$_invoke$arity$1 = function(func) {
  var trans = function(nodes, chain) {
    var val = func.call(null, nodes);
    if (cljs.core.truth_(chain)) {
      return enfocus.core.apply_transform.call(null, chain, nodes);
    } else {
      return val;
    }
  };
  if (typeof enfocus.core.t_enfocus$core14036 !== "undefined") {
  } else {
    enfocus.core.t_enfocus$core14036 = function(func, trans, meta14037) {
      this.func = func;
      this.trans = trans;
      this.meta14037 = meta14037;
      this.cljs$lang$protocol_mask$partition0$ = 393217;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    enfocus.core.t_enfocus$core14036.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(trans) {
      return function(_14038, meta14037__$1) {
        var self__ = this;
        var _14038__$1 = this;
        return new enfocus.core.t_enfocus$core14036(self__.func, self__.trans, meta14037__$1);
      };
    }(trans);
    enfocus.core.t_enfocus$core14036.prototype.cljs$core$IMeta$_meta$arity$1 = function(trans) {
      return function(_14038) {
        var self__ = this;
        var _14038__$1 = this;
        return self__.meta14037;
      };
    }(trans);
    enfocus.core.t_enfocus$core14036.prototype.enfocus$core$ITransform$ = true;
    enfocus.core.t_enfocus$core14036.prototype.enfocus$core$ITransform$apply_transform$arity$2 = function(trans) {
      return function(_, nodes) {
        var self__ = this;
        var ___$1 = this;
        return self__.trans.call(null, nodes, null);
      };
    }(trans);
    enfocus.core.t_enfocus$core14036.prototype.enfocus$core$ITransform$apply_transform$arity$3 = function(trans) {
      return function(_, nodes, chain) {
        var self__ = this;
        var ___$1 = this;
        return self__.trans.call(null, nodes, chain);
      };
    }(trans);
    enfocus.core.t_enfocus$core14036.prototype.call = function(trans) {
      return function() {
        var G__14048 = null;
        var G__14048__2 = function(self__, nodes) {
          var self__ = this;
          var self____$1 = this;
          var _ = self____$1;
          return self__.trans.call(null, nodes, null);
        };
        var G__14048__3 = function(self__, nodes, chain) {
          var self__ = this;
          var self____$1 = this;
          var _ = self____$1;
          return self__.trans.call(null, nodes, chain);
        };
        G__14048 = function(self__, nodes, chain) {
          switch(arguments.length) {
            case 2:
              return G__14048__2.call(this, self__, nodes);
            case 3:
              return G__14048__3.call(this, self__, nodes, chain);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__14048.cljs$core$IFn$_invoke$arity$2 = G__14048__2;
        G__14048.cljs$core$IFn$_invoke$arity$3 = G__14048__3;
        return G__14048;
      }();
    }(trans);
    enfocus.core.t_enfocus$core14036.prototype.apply = function(trans) {
      return function(self__, args14039) {
        var self__ = this;
        var self____$1 = this;
        return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14039)));
      };
    }(trans);
    enfocus.core.t_enfocus$core14036.prototype.cljs$core$IFn$_invoke$arity$1 = function(trans) {
      return function(nodes) {
        var self__ = this;
        var _ = this;
        return self__.trans.call(null, nodes, null);
      };
    }(trans);
    enfocus.core.t_enfocus$core14036.prototype.cljs$core$IFn$_invoke$arity$2 = function(trans) {
      return function(nodes, chain) {
        var self__ = this;
        var _ = this;
        return self__.trans.call(null, nodes, chain);
      };
    }(trans);
    enfocus.core.t_enfocus$core14036.getBasis = function(trans) {
      return function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "func", "func", 1401825487, null), new cljs.core.Symbol(null, "trans", "trans", 322027676, null), new cljs.core.Symbol(null, "meta14037", "meta14037", 1900692756, null)], null);
      };
    }(trans);
    enfocus.core.t_enfocus$core14036.cljs$lang$type = true;
    enfocus.core.t_enfocus$core14036.cljs$lang$ctorStr = "enfocus.core/t_enfocus$core14036";
    enfocus.core.t_enfocus$core14036.cljs$lang$ctorPrWriter = function(trans) {
      return function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
        return cljs.core._write.call(null, writer__6752__auto__, "enfocus.core/t_enfocus$core14036");
      };
    }(trans);
    enfocus.core.__GT_t_enfocus$core14036 = function(trans) {
      return function enfocus$core$__GT_t_enfocus$core14036(func__$1, trans__$1, meta14037) {
        return new enfocus.core.t_enfocus$core14036(func__$1, trans__$1, meta14037);
      };
    }(trans);
  }
  return new enfocus.core.t_enfocus$core14036(func, trans, cljs.core.PersistentArrayMap.EMPTY);
};
enfocus.core.multi_node_chain.cljs$core$IFn$_invoke$arity$2 = function(values, func) {
  var trans = function(nodes, chain) {
    var vnodes = cljs.core.mapcat.call(null, function(p1__14032_SHARP_) {
      return domina.nodes.call(null, p1__14032_SHARP_);
    }, values);
    var val = func.call(null, nodes, vnodes);
    if (cljs.core.truth_(chain)) {
      return enfocus.core.apply_transform.call(null, chain, nodes);
    } else {
      return val;
    }
  };
  if (typeof enfocus.core.t_enfocus$core14040 !== "undefined") {
  } else {
    enfocus.core.t_enfocus$core14040 = function(values, func, trans, meta14041) {
      this.values = values;
      this.func = func;
      this.trans = trans;
      this.meta14041 = meta14041;
      this.cljs$lang$protocol_mask$partition0$ = 393217;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    enfocus.core.t_enfocus$core14040.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(trans) {
      return function(_14042, meta14041__$1) {
        var self__ = this;
        var _14042__$1 = this;
        return new enfocus.core.t_enfocus$core14040(self__.values, self__.func, self__.trans, meta14041__$1);
      };
    }(trans);
    enfocus.core.t_enfocus$core14040.prototype.cljs$core$IMeta$_meta$arity$1 = function(trans) {
      return function(_14042) {
        var self__ = this;
        var _14042__$1 = this;
        return self__.meta14041;
      };
    }(trans);
    enfocus.core.t_enfocus$core14040.prototype.enfocus$core$ITransform$ = true;
    enfocus.core.t_enfocus$core14040.prototype.enfocus$core$ITransform$apply_transform$arity$2 = function(trans) {
      return function(_, nodes) {
        var self__ = this;
        var ___$1 = this;
        return self__.trans.call(null, nodes, null);
      };
    }(trans);
    enfocus.core.t_enfocus$core14040.prototype.enfocus$core$ITransform$apply_transform$arity$3 = function(trans) {
      return function(_, nodes, chain) {
        var self__ = this;
        var ___$1 = this;
        return self__.trans.call(null, nodes, chain);
      };
    }(trans);
    enfocus.core.t_enfocus$core14040.prototype.call = function(trans) {
      return function() {
        var G__14049 = null;
        var G__14049__2 = function(self__, nodes) {
          var self__ = this;
          var self____$1 = this;
          var _ = self____$1;
          return self__.trans.call(null, nodes, null);
        };
        var G__14049__3 = function(self__, nodes, chain) {
          var self__ = this;
          var self____$1 = this;
          var _ = self____$1;
          return self__.trans.call(null, nodes, chain);
        };
        G__14049 = function(self__, nodes, chain) {
          switch(arguments.length) {
            case 2:
              return G__14049__2.call(this, self__, nodes);
            case 3:
              return G__14049__3.call(this, self__, nodes, chain);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__14049.cljs$core$IFn$_invoke$arity$2 = G__14049__2;
        G__14049.cljs$core$IFn$_invoke$arity$3 = G__14049__3;
        return G__14049;
      }();
    }(trans);
    enfocus.core.t_enfocus$core14040.prototype.apply = function(trans) {
      return function(self__, args14043) {
        var self__ = this;
        var self____$1 = this;
        return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14043)));
      };
    }(trans);
    enfocus.core.t_enfocus$core14040.prototype.cljs$core$IFn$_invoke$arity$1 = function(trans) {
      return function(nodes) {
        var self__ = this;
        var _ = this;
        return self__.trans.call(null, nodes, null);
      };
    }(trans);
    enfocus.core.t_enfocus$core14040.prototype.cljs$core$IFn$_invoke$arity$2 = function(trans) {
      return function(nodes, chain) {
        var self__ = this;
        var _ = this;
        return self__.trans.call(null, nodes, chain);
      };
    }(trans);
    enfocus.core.t_enfocus$core14040.getBasis = function(trans) {
      return function() {
        return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "values", "values", 2013177083, null), new cljs.core.Symbol(null, "func", "func", 1401825487, null), new cljs.core.Symbol(null, "trans", "trans", 322027676, null), new cljs.core.Symbol(null, "meta14041", "meta14041", 170389346, null)], null);
      };
    }(trans);
    enfocus.core.t_enfocus$core14040.cljs$lang$type = true;
    enfocus.core.t_enfocus$core14040.cljs$lang$ctorStr = "enfocus.core/t_enfocus$core14040";
    enfocus.core.t_enfocus$core14040.cljs$lang$ctorPrWriter = function(trans) {
      return function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
        return cljs.core._write.call(null, writer__6752__auto__, "enfocus.core/t_enfocus$core14040");
      };
    }(trans);
    enfocus.core.__GT_t_enfocus$core14040 = function(trans) {
      return function enfocus$core$__GT_t_enfocus$core14040(values__$1, func__$1, trans__$1, meta14041) {
        return new enfocus.core.t_enfocus$core14040(values__$1, func__$1, trans__$1, meta14041);
      };
    }(trans);
  }
  return new enfocus.core.t_enfocus$core14040(values, func, trans, cljs.core.PersistentArrayMap.EMPTY);
};
enfocus.core.multi_node_chain.cljs$lang$maxFixedArity = 2;
enfocus.core.content = function enfocus$core$content(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___14053 = arguments.length;
  var i__7212__auto___14054 = 0;
  while (true) {
    if (i__7212__auto___14054 < len__7211__auto___14053) {
      args__7218__auto__.push(arguments[i__7212__auto___14054]);
      var G__14055 = i__7212__auto___14054 + 1;
      i__7212__auto___14054 = G__14055;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return enfocus.core.content.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
enfocus.core.content.cljs$core$IFn$_invoke$arity$variadic = function(values) {
  return enfocus.core.multi_node_chain.call(null, values, function(p1__14050_SHARP_, p2__14051_SHARP_) {
    domina.destroy_children_BANG_.call(null, p1__14050_SHARP_);
    return domina.append_BANG_.call(null, p1__14050_SHARP_, p2__14051_SHARP_);
  });
};
enfocus.core.content.cljs$lang$maxFixedArity = 0;
enfocus.core.content.cljs$lang$applyTo = function(seq14052) {
  return enfocus.core.content.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq14052));
};
enfocus.core.html_content = function enfocus$core$html_content(txt) {
  return enfocus.core.multi_node_chain.call(null, function(p1__14056_SHARP_) {
    return domina.set_html_BANG_.call(null, p1__14056_SHARP_, txt);
  });
};
enfocus.core.set_attr = function enfocus$core$set_attr(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___14065 = arguments.length;
  var i__7212__auto___14066 = 0;
  while (true) {
    if (i__7212__auto___14066 < len__7211__auto___14065) {
      args__7218__auto__.push(arguments[i__7212__auto___14066]);
      var G__14067 = i__7212__auto___14066 + 1;
      i__7212__auto___14066 = G__14067;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return enfocus.core.set_attr.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
enfocus.core.set_attr.cljs$core$IFn$_invoke$arity$variadic = function(values) {
  var pairs = cljs.core.partition.call(null, 2, values);
  return enfocus.core.multi_node_chain.call(null, function(pairs) {
    return function(p1__14057_SHARP_) {
      var seq__14059 = cljs.core.seq.call(null, pairs);
      var chunk__14060 = null;
      var count__14061 = 0;
      var i__14062 = 0;
      while (true) {
        if (i__14062 < count__14061) {
          var vec__14063 = cljs.core._nth.call(null, chunk__14060, i__14062);
          var name = cljs.core.nth.call(null, vec__14063, 0, null);
          var value = cljs.core.nth.call(null, vec__14063, 1, null);
          domina.set_attr_BANG_.call(null, p1__14057_SHARP_, name, value);
          var G__14068 = seq__14059;
          var G__14069 = chunk__14060;
          var G__14070 = count__14061;
          var G__14071 = i__14062 + 1;
          seq__14059 = G__14068;
          chunk__14060 = G__14069;
          count__14061 = G__14070;
          i__14062 = G__14071;
          continue;
        } else {
          var temp__4657__auto__ = cljs.core.seq.call(null, seq__14059);
          if (temp__4657__auto__) {
            var seq__14059__$1 = temp__4657__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__14059__$1)) {
              var c__6956__auto__ = cljs.core.chunk_first.call(null, seq__14059__$1);
              var G__14072 = cljs.core.chunk_rest.call(null, seq__14059__$1);
              var G__14073 = c__6956__auto__;
              var G__14074 = cljs.core.count.call(null, c__6956__auto__);
              var G__14075 = 0;
              seq__14059 = G__14072;
              chunk__14060 = G__14073;
              count__14061 = G__14074;
              i__14062 = G__14075;
              continue;
            } else {
              var vec__14064 = cljs.core.first.call(null, seq__14059__$1);
              var name = cljs.core.nth.call(null, vec__14064, 0, null);
              var value = cljs.core.nth.call(null, vec__14064, 1, null);
              domina.set_attr_BANG_.call(null, p1__14057_SHARP_, name, value);
              var G__14076 = cljs.core.next.call(null, seq__14059__$1);
              var G__14077 = null;
              var G__14078 = 0;
              var G__14079 = 0;
              seq__14059 = G__14076;
              chunk__14060 = G__14077;
              count__14061 = G__14078;
              i__14062 = G__14079;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    };
  }(pairs));
};
enfocus.core.set_attr.cljs$lang$maxFixedArity = 0;
enfocus.core.set_attr.cljs$lang$applyTo = function(seq14058) {
  return enfocus.core.set_attr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq14058));
};
enfocus.core.remove_attr = function enfocus$core$remove_attr(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___14086 = arguments.length;
  var i__7212__auto___14087 = 0;
  while (true) {
    if (i__7212__auto___14087 < len__7211__auto___14086) {
      args__7218__auto__.push(arguments[i__7212__auto___14087]);
      var G__14088 = i__7212__auto___14087 + 1;
      i__7212__auto___14087 = G__14088;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return enfocus.core.remove_attr.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
enfocus.core.remove_attr.cljs$core$IFn$_invoke$arity$variadic = function(values) {
  return enfocus.core.multi_node_chain.call(null, function(p1__14080_SHARP_) {
    var seq__14082 = cljs.core.seq.call(null, values);
    var chunk__14083 = null;
    var count__14084 = 0;
    var i__14085 = 0;
    while (true) {
      if (i__14085 < count__14084) {
        var name = cljs.core._nth.call(null, chunk__14083, i__14085);
        domina.remove_attr_BANG_.call(null, p1__14080_SHARP_, name);
        var G__14089 = seq__14082;
        var G__14090 = chunk__14083;
        var G__14091 = count__14084;
        var G__14092 = i__14085 + 1;
        seq__14082 = G__14089;
        chunk__14083 = G__14090;
        count__14084 = G__14091;
        i__14085 = G__14092;
        continue;
      } else {
        var temp__4657__auto__ = cljs.core.seq.call(null, seq__14082);
        if (temp__4657__auto__) {
          var seq__14082__$1 = temp__4657__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14082__$1)) {
            var c__6956__auto__ = cljs.core.chunk_first.call(null, seq__14082__$1);
            var G__14093 = cljs.core.chunk_rest.call(null, seq__14082__$1);
            var G__14094 = c__6956__auto__;
            var G__14095 = cljs.core.count.call(null, c__6956__auto__);
            var G__14096 = 0;
            seq__14082 = G__14093;
            chunk__14083 = G__14094;
            count__14084 = G__14095;
            i__14085 = G__14096;
            continue;
          } else {
            var name = cljs.core.first.call(null, seq__14082__$1);
            domina.remove_attr_BANG_.call(null, p1__14080_SHARP_, name);
            var G__14097 = cljs.core.next.call(null, seq__14082__$1);
            var G__14098 = null;
            var G__14099 = 0;
            var G__14100 = 0;
            seq__14082 = G__14097;
            chunk__14083 = G__14098;
            count__14084 = G__14099;
            i__14085 = G__14100;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  });
};
enfocus.core.remove_attr.cljs$lang$maxFixedArity = 0;
enfocus.core.remove_attr.cljs$lang$applyTo = function(seq14081) {
  return enfocus.core.remove_attr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq14081));
};
enfocus.core.set_prop = function enfocus$core$set_prop(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___14104 = arguments.length;
  var i__7212__auto___14105 = 0;
  while (true) {
    if (i__7212__auto___14105 < len__7211__auto___14104) {
      args__7218__auto__.push(arguments[i__7212__auto___14105]);
      var G__14106 = i__7212__auto___14105 + 1;
      i__7212__auto___14105 = G__14106;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return enfocus.core.set_prop.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
enfocus.core.set_prop.cljs$core$IFn$_invoke$arity$variadic = function(forms) {
  return function(node) {
    var h = cljs.core.mapcat.call(null, function(p__14102) {
      var vec__14103 = p__14102;
      var n = cljs.core.nth.call(null, vec__14103, 0, null);
      var v = cljs.core.nth.call(null, vec__14103, 1, null);
      return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, v), cljs.core.name.call(null, n));
    }, cljs.core.partition.call(null, 2, forms));
    return goog.dom.setProperties(node, cljs.core.apply.call(null, cljs.core.js_obj, h));
  };
};
enfocus.core.set_prop.cljs$lang$maxFixedArity = 0;
enfocus.core.set_prop.cljs$lang$applyTo = function(seq14101) {
  return enfocus.core.set_prop.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq14101));
};
enfocus.core.has_class = function enfocus$core$has_class(el, cls) {
  return goog.dom.classes.hasClass(el, cls);
};
enfocus.core.add_class = function enfocus$core$add_class(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___14113 = arguments.length;
  var i__7212__auto___14114 = 0;
  while (true) {
    if (i__7212__auto___14114 < len__7211__auto___14113) {
      args__7218__auto__.push(arguments[i__7212__auto___14114]);
      var G__14115 = i__7212__auto___14114 + 1;
      i__7212__auto___14114 = G__14115;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return enfocus.core.add_class.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
enfocus.core.add_class.cljs$core$IFn$_invoke$arity$variadic = function(values) {
  return enfocus.core.multi_node_chain.call(null, function(p1__14107_SHARP_) {
    var seq__14109 = cljs.core.seq.call(null, values);
    var chunk__14110 = null;
    var count__14111 = 0;
    var i__14112 = 0;
    while (true) {
      if (i__14112 < count__14111) {
        var val = cljs.core._nth.call(null, chunk__14110, i__14112);
        domina.add_class_BANG_.call(null, p1__14107_SHARP_, val);
        var G__14116 = seq__14109;
        var G__14117 = chunk__14110;
        var G__14118 = count__14111;
        var G__14119 = i__14112 + 1;
        seq__14109 = G__14116;
        chunk__14110 = G__14117;
        count__14111 = G__14118;
        i__14112 = G__14119;
        continue;
      } else {
        var temp__4657__auto__ = cljs.core.seq.call(null, seq__14109);
        if (temp__4657__auto__) {
          var seq__14109__$1 = temp__4657__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14109__$1)) {
            var c__6956__auto__ = cljs.core.chunk_first.call(null, seq__14109__$1);
            var G__14120 = cljs.core.chunk_rest.call(null, seq__14109__$1);
            var G__14121 = c__6956__auto__;
            var G__14122 = cljs.core.count.call(null, c__6956__auto__);
            var G__14123 = 0;
            seq__14109 = G__14120;
            chunk__14110 = G__14121;
            count__14111 = G__14122;
            i__14112 = G__14123;
            continue;
          } else {
            var val = cljs.core.first.call(null, seq__14109__$1);
            domina.add_class_BANG_.call(null, p1__14107_SHARP_, val);
            var G__14124 = cljs.core.next.call(null, seq__14109__$1);
            var G__14125 = null;
            var G__14126 = 0;
            var G__14127 = 0;
            seq__14109 = G__14124;
            chunk__14110 = G__14125;
            count__14111 = G__14126;
            i__14112 = G__14127;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  });
};
enfocus.core.add_class.cljs$lang$maxFixedArity = 0;
enfocus.core.add_class.cljs$lang$applyTo = function(seq14108) {
  return enfocus.core.add_class.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq14108));
};
enfocus.core.remove_class = function enfocus$core$remove_class(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___14134 = arguments.length;
  var i__7212__auto___14135 = 0;
  while (true) {
    if (i__7212__auto___14135 < len__7211__auto___14134) {
      args__7218__auto__.push(arguments[i__7212__auto___14135]);
      var G__14136 = i__7212__auto___14135 + 1;
      i__7212__auto___14135 = G__14136;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return enfocus.core.remove_class.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
enfocus.core.remove_class.cljs$core$IFn$_invoke$arity$variadic = function(values) {
  return enfocus.core.multi_node_chain.call(null, function(p1__14128_SHARP_) {
    var seq__14130 = cljs.core.seq.call(null, values);
    var chunk__14131 = null;
    var count__14132 = 0;
    var i__14133 = 0;
    while (true) {
      if (i__14133 < count__14132) {
        var val = cljs.core._nth.call(null, chunk__14131, i__14133);
        domina.remove_class_BANG_.call(null, p1__14128_SHARP_, val);
        var G__14137 = seq__14130;
        var G__14138 = chunk__14131;
        var G__14139 = count__14132;
        var G__14140 = i__14133 + 1;
        seq__14130 = G__14137;
        chunk__14131 = G__14138;
        count__14132 = G__14139;
        i__14133 = G__14140;
        continue;
      } else {
        var temp__4657__auto__ = cljs.core.seq.call(null, seq__14130);
        if (temp__4657__auto__) {
          var seq__14130__$1 = temp__4657__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14130__$1)) {
            var c__6956__auto__ = cljs.core.chunk_first.call(null, seq__14130__$1);
            var G__14141 = cljs.core.chunk_rest.call(null, seq__14130__$1);
            var G__14142 = c__6956__auto__;
            var G__14143 = cljs.core.count.call(null, c__6956__auto__);
            var G__14144 = 0;
            seq__14130 = G__14141;
            chunk__14131 = G__14142;
            count__14132 = G__14143;
            i__14133 = G__14144;
            continue;
          } else {
            var val = cljs.core.first.call(null, seq__14130__$1);
            domina.remove_class_BANG_.call(null, p1__14128_SHARP_, val);
            var G__14145 = cljs.core.next.call(null, seq__14130__$1);
            var G__14146 = null;
            var G__14147 = 0;
            var G__14148 = 0;
            seq__14130 = G__14145;
            chunk__14131 = G__14146;
            count__14132 = G__14147;
            i__14133 = G__14148;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  });
};
enfocus.core.remove_class.cljs$lang$maxFixedArity = 0;
enfocus.core.remove_class.cljs$lang$applyTo = function(seq14129) {
  return enfocus.core.remove_class.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq14129));
};
enfocus.core.set_class = function enfocus$core$set_class(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___14151 = arguments.length;
  var i__7212__auto___14152 = 0;
  while (true) {
    if (i__7212__auto___14152 < len__7211__auto___14151) {
      args__7218__auto__.push(arguments[i__7212__auto___14152]);
      var G__14153 = i__7212__auto___14152 + 1;
      i__7212__auto___14152 = G__14153;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return enfocus.core.set_class.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
enfocus.core.set_class.cljs$core$IFn$_invoke$arity$variadic = function(values) {
  return enfocus.core.multi_node_chain.call(null, function(p1__14149_SHARP_) {
    return domina.set_classes_BANG_.call(null, p1__14149_SHARP_, values);
  });
};
enfocus.core.set_class.cljs$lang$maxFixedArity = 0;
enfocus.core.set_class.cljs$lang$applyTo = function(seq14150) {
  return enfocus.core.set_class.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq14150));
};
enfocus.core.do__GT_ = function enfocus$core$do__GT_(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___14159 = arguments.length;
  var i__7212__auto___14160 = 0;
  while (true) {
    if (i__7212__auto___14160 < len__7211__auto___14159) {
      args__7218__auto__.push(arguments[i__7212__auto___14160]);
      var G__14161 = i__7212__auto___14160 + 1;
      i__7212__auto___14160 = G__14161;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return enfocus.core.do__GT_.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
enfocus.core.do__GT_.cljs$core$IFn$_invoke$arity$variadic = function(forms) {
  return function(pnod) {
    var seq__14155 = cljs.core.seq.call(null, forms);
    var chunk__14156 = null;
    var count__14157 = 0;
    var i__14158 = 0;
    while (true) {
      if (i__14158 < count__14157) {
        var fun = cljs.core._nth.call(null, chunk__14156, i__14158);
        enfocus.core.apply_transform.call(null, fun, pnod);
        var G__14162 = seq__14155;
        var G__14163 = chunk__14156;
        var G__14164 = count__14157;
        var G__14165 = i__14158 + 1;
        seq__14155 = G__14162;
        chunk__14156 = G__14163;
        count__14157 = G__14164;
        i__14158 = G__14165;
        continue;
      } else {
        var temp__4657__auto__ = cljs.core.seq.call(null, seq__14155);
        if (temp__4657__auto__) {
          var seq__14155__$1 = temp__4657__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14155__$1)) {
            var c__6956__auto__ = cljs.core.chunk_first.call(null, seq__14155__$1);
            var G__14166 = cljs.core.chunk_rest.call(null, seq__14155__$1);
            var G__14167 = c__6956__auto__;
            var G__14168 = cljs.core.count.call(null, c__6956__auto__);
            var G__14169 = 0;
            seq__14155 = G__14166;
            chunk__14156 = G__14167;
            count__14157 = G__14168;
            i__14158 = G__14169;
            continue;
          } else {
            var fun = cljs.core.first.call(null, seq__14155__$1);
            enfocus.core.apply_transform.call(null, fun, pnod);
            var G__14170 = cljs.core.next.call(null, seq__14155__$1);
            var G__14171 = null;
            var G__14172 = 0;
            var G__14173 = 0;
            seq__14155 = G__14170;
            chunk__14156 = G__14171;
            count__14157 = G__14172;
            i__14158 = G__14173;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
};
enfocus.core.do__GT_.cljs$lang$maxFixedArity = 0;
enfocus.core.do__GT_.cljs$lang$applyTo = function(seq14154) {
  return enfocus.core.do__GT_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq14154));
};
enfocus.core.append = function enfocus$core$append(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___14177 = arguments.length;
  var i__7212__auto___14178 = 0;
  while (true) {
    if (i__7212__auto___14178 < len__7211__auto___14177) {
      args__7218__auto__.push(arguments[i__7212__auto___14178]);
      var G__14179 = i__7212__auto___14178 + 1;
      i__7212__auto___14178 = G__14179;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return enfocus.core.append.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
enfocus.core.append.cljs$core$IFn$_invoke$arity$variadic = function(values) {
  return enfocus.core.multi_node_chain.call(null, values, function(p1__14174_SHARP_, p2__14175_SHARP_) {
    return domina.append_BANG_.call(null, p1__14174_SHARP_, p2__14175_SHARP_);
  });
};
enfocus.core.append.cljs$lang$maxFixedArity = 0;
enfocus.core.append.cljs$lang$applyTo = function(seq14176) {
  return enfocus.core.append.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq14176));
};
enfocus.core.prepend = function enfocus$core$prepend(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___14183 = arguments.length;
  var i__7212__auto___14184 = 0;
  while (true) {
    if (i__7212__auto___14184 < len__7211__auto___14183) {
      args__7218__auto__.push(arguments[i__7212__auto___14184]);
      var G__14185 = i__7212__auto___14184 + 1;
      i__7212__auto___14184 = G__14185;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return enfocus.core.prepend.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
enfocus.core.prepend.cljs$core$IFn$_invoke$arity$variadic = function(values) {
  return enfocus.core.multi_node_chain.call(null, values, function(p1__14180_SHARP_, p2__14181_SHARP_) {
    return domina.prepend_BANG_.call(null, p1__14180_SHARP_, p2__14181_SHARP_);
  });
};
enfocus.core.prepend.cljs$lang$maxFixedArity = 0;
enfocus.core.prepend.cljs$lang$applyTo = function(seq14182) {
  return enfocus.core.prepend.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq14182));
};
enfocus.core.before = function enfocus$core$before(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___14189 = arguments.length;
  var i__7212__auto___14190 = 0;
  while (true) {
    if (i__7212__auto___14190 < len__7211__auto___14189) {
      args__7218__auto__.push(arguments[i__7212__auto___14190]);
      var G__14191 = i__7212__auto___14190 + 1;
      i__7212__auto___14190 = G__14191;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return enfocus.core.before.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
enfocus.core.before.cljs$core$IFn$_invoke$arity$variadic = function(values) {
  return enfocus.core.multi_node_chain.call(null, values, function(p1__14186_SHARP_, p2__14187_SHARP_) {
    return domina.insert_before_BANG_.call(null, p1__14186_SHARP_, p2__14187_SHARP_);
  });
};
enfocus.core.before.cljs$lang$maxFixedArity = 0;
enfocus.core.before.cljs$lang$applyTo = function(seq14188) {
  return enfocus.core.before.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq14188));
};
enfocus.core.after = function enfocus$core$after(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___14195 = arguments.length;
  var i__7212__auto___14196 = 0;
  while (true) {
    if (i__7212__auto___14196 < len__7211__auto___14195) {
      args__7218__auto__.push(arguments[i__7212__auto___14196]);
      var G__14197 = i__7212__auto___14196 + 1;
      i__7212__auto___14196 = G__14197;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return enfocus.core.after.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
enfocus.core.after.cljs$core$IFn$_invoke$arity$variadic = function(values) {
  return enfocus.core.multi_node_chain.call(null, values, function(p1__14192_SHARP_, p2__14193_SHARP_) {
    return domina.insert_after_BANG_.call(null, p1__14192_SHARP_, p2__14193_SHARP_);
  });
};
enfocus.core.after.cljs$lang$maxFixedArity = 0;
enfocus.core.after.cljs$lang$applyTo = function(seq14194) {
  return enfocus.core.after.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq14194));
};
enfocus.core.substitute = function enfocus$core$substitute(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___14201 = arguments.length;
  var i__7212__auto___14202 = 0;
  while (true) {
    if (i__7212__auto___14202 < len__7211__auto___14201) {
      args__7218__auto__.push(arguments[i__7212__auto___14202]);
      var G__14203 = i__7212__auto___14202 + 1;
      i__7212__auto___14202 = G__14203;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return enfocus.core.substitute.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
enfocus.core.substitute.cljs$core$IFn$_invoke$arity$variadic = function(values) {
  return enfocus.core.multi_node_chain.call(null, values, function(p1__14198_SHARP_, p2__14199_SHARP_) {
    return domina.swap_content_BANG_.call(null, p1__14198_SHARP_, p2__14199_SHARP_);
  });
};
enfocus.core.substitute.cljs$lang$maxFixedArity = 0;
enfocus.core.substitute.cljs$lang$applyTo = function(seq14200) {
  return enfocus.core.substitute.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq14200));
};
enfocus.core.remove_node = function enfocus$core$remove_node() {
  return enfocus.core.multi_node_chain.call(null, function(p1__14204_SHARP_) {
    return domina.detach_BANG_.call(null, p1__14204_SHARP_);
  });
};
enfocus.core.wrap = function enfocus$core$wrap(elm, mattr) {
  return function(pnod) {
    var elem = goog.dom.createElement(cljs.core.name.call(null, elm));
    enfocus.core.add_map_attrs.call(null, elem, mattr);
    enfocus.core.at.call(null, elem, enfocus.core.content.call(null, pnod.cloneNode(true)));
    return enfocus.core.at.call(null, pnod, enfocus.core.do__GT_.call(null, enfocus.core.after.call(null, elem), enfocus.core.remove_node.call(null)));
  };
};
enfocus.core.unwrap = function enfocus$core$unwrap() {
  return function(pnod) {
    var frag = document.createDocumentFragment();
    goog.dom.append(frag, pnod.childNodes);
    return goog.dom.replaceNode(frag, pnod);
  };
};
enfocus.core.set_style = function enfocus$core$set_style(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___14213 = arguments.length;
  var i__7212__auto___14214 = 0;
  while (true) {
    if (i__7212__auto___14214 < len__7211__auto___14213) {
      args__7218__auto__.push(arguments[i__7212__auto___14214]);
      var G__14215 = i__7212__auto___14214 + 1;
      i__7212__auto___14214 = G__14215;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return enfocus.core.set_style.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
enfocus.core.set_style.cljs$core$IFn$_invoke$arity$variadic = function(values) {
  var pairs = cljs.core.partition.call(null, 2, values);
  return enfocus.core.multi_node_chain.call(null, function(pairs) {
    return function(p1__14205_SHARP_) {
      var seq__14207 = cljs.core.seq.call(null, pairs);
      var chunk__14208 = null;
      var count__14209 = 0;
      var i__14210 = 0;
      while (true) {
        if (i__14210 < count__14209) {
          var vec__14211 = cljs.core._nth.call(null, chunk__14208, i__14210);
          var name = cljs.core.nth.call(null, vec__14211, 0, null);
          var value = cljs.core.nth.call(null, vec__14211, 1, null);
          domina.set_style_BANG_.call(null, p1__14205_SHARP_, name, value);
          var G__14216 = seq__14207;
          var G__14217 = chunk__14208;
          var G__14218 = count__14209;
          var G__14219 = i__14210 + 1;
          seq__14207 = G__14216;
          chunk__14208 = G__14217;
          count__14209 = G__14218;
          i__14210 = G__14219;
          continue;
        } else {
          var temp__4657__auto__ = cljs.core.seq.call(null, seq__14207);
          if (temp__4657__auto__) {
            var seq__14207__$1 = temp__4657__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__14207__$1)) {
              var c__6956__auto__ = cljs.core.chunk_first.call(null, seq__14207__$1);
              var G__14220 = cljs.core.chunk_rest.call(null, seq__14207__$1);
              var G__14221 = c__6956__auto__;
              var G__14222 = cljs.core.count.call(null, c__6956__auto__);
              var G__14223 = 0;
              seq__14207 = G__14220;
              chunk__14208 = G__14221;
              count__14209 = G__14222;
              i__14210 = G__14223;
              continue;
            } else {
              var vec__14212 = cljs.core.first.call(null, seq__14207__$1);
              var name = cljs.core.nth.call(null, vec__14212, 0, null);
              var value = cljs.core.nth.call(null, vec__14212, 1, null);
              domina.set_style_BANG_.call(null, p1__14205_SHARP_, name, value);
              var G__14224 = cljs.core.next.call(null, seq__14207__$1);
              var G__14225 = null;
              var G__14226 = 0;
              var G__14227 = 0;
              seq__14207 = G__14224;
              chunk__14208 = G__14225;
              count__14209 = G__14226;
              i__14210 = G__14227;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    };
  }(pairs));
};
enfocus.core.set_style.cljs$lang$maxFixedArity = 0;
enfocus.core.set_style.cljs$lang$applyTo = function(seq14206) {
  return enfocus.core.set_style.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq14206));
};
enfocus.core.remove_style = function enfocus$core$remove_style(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___14229 = arguments.length;
  var i__7212__auto___14230 = 0;
  while (true) {
    if (i__7212__auto___14230 < len__7211__auto___14229) {
      args__7218__auto__.push(arguments[i__7212__auto___14230]);
      var G__14231 = i__7212__auto___14230 + 1;
      i__7212__auto___14230 = G__14231;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return enfocus.core.remove_style.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
enfocus.core.remove_style.cljs$core$IFn$_invoke$arity$variadic = function(values) {
  return function(pnod) {
    return enfocus.core.style_remove.call(null, pnod, values);
  };
};
enfocus.core.remove_style.cljs$lang$maxFixedArity = 0;
enfocus.core.remove_style.cljs$lang$applyTo = function(seq14228) {
  return enfocus.core.remove_style.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq14228));
};
enfocus.core.focus = function enfocus$core$focus() {
  return function(node) {
    return node.focus();
  };
};
enfocus.core.blur = function enfocus$core$blur() {
  return function(node) {
    return node.blur();
  };
};
enfocus.core.set_data = function enfocus$core$set_data(ky, val) {
  return enfocus.core.multi_node_chain.call(null, function(p1__14232_SHARP_) {
    return domina.set_data_BANG_.call(null, p1__14232_SHARP_, ky, val);
  });
};
enfocus.core.delay = function enfocus$core$delay(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___14235 = arguments.length;
  var i__7212__auto___14236 = 0;
  while (true) {
    if (i__7212__auto___14236 < len__7211__auto___14235) {
      args__7218__auto__.push(arguments[i__7212__auto___14236]);
      var G__14237 = i__7212__auto___14236 + 1;
      i__7212__auto___14236 = G__14237;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return enfocus.core.delay.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
enfocus.core.delay.cljs$core$IFn$_invoke$arity$variadic = function(ttime, funcs) {
  return function(pnod) {
    return enfocus.core.setTimeout.call(null, function() {
      return cljs.core.apply.call(null, enfocus.core.at, pnod, funcs);
    }, ttime);
  };
};
enfocus.core.delay.cljs$lang$maxFixedArity = 1;
enfocus.core.delay.cljs$lang$applyTo = function(seq14233) {
  var G__14234 = cljs.core.first.call(null, seq14233);
  var seq14233__$1 = cljs.core.next.call(null, seq14233);
  return enfocus.core.delay.cljs$core$IFn$_invoke$arity$variadic(G__14234, seq14233__$1);
};
enfocus.core.replace_vars = function enfocus$core$replace_vars(vars) {
  var rep_str = function enfocus$core$replace_vars_$_rep_str(text) {
    return clojure.string.replace.call(null, text, /\$\{\s*(\S+)\s*}/, function(p1__14239_SHARP_, p2__14238_SHARP_) {
      return vars.call(null, cljs.core.keyword.call(null, p2__14238_SHARP_));
    });
  };
  return function enfocus$core$replace_vars_$_rep_node(pnod) {
    if (cljs.core.truth_(pnod.attributes)) {
      var seq__14264_14272 = cljs.core.seq.call(null, cljs.core.range.call(null, pnod.attributes.length));
      var chunk__14265_14273 = null;
      var count__14266_14274 = 0;
      var i__14267_14275 = 0;
      while (true) {
        if (i__14267_14275 < count__14266_14274) {
          var idx_14276 = cljs.core._nth.call(null, chunk__14265_14273, i__14267_14275);
          var attr_14277 = pnod.attributes.item(idx_14276);
          if (cljs.core.truth_(attr_14277.specified)) {
            attr_14277.value = rep_str.call(null, attr_14277.value);
          } else {
          }
          var G__14278 = seq__14264_14272;
          var G__14279 = chunk__14265_14273;
          var G__14280 = count__14266_14274;
          var G__14281 = i__14267_14275 + 1;
          seq__14264_14272 = G__14278;
          chunk__14265_14273 = G__14279;
          count__14266_14274 = G__14280;
          i__14267_14275 = G__14281;
          continue;
        } else {
          var temp__4657__auto___14282 = cljs.core.seq.call(null, seq__14264_14272);
          if (temp__4657__auto___14282) {
            var seq__14264_14283__$1 = temp__4657__auto___14282;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__14264_14283__$1)) {
              var c__6956__auto___14284 = cljs.core.chunk_first.call(null, seq__14264_14283__$1);
              var G__14285 = cljs.core.chunk_rest.call(null, seq__14264_14283__$1);
              var G__14286 = c__6956__auto___14284;
              var G__14287 = cljs.core.count.call(null, c__6956__auto___14284);
              var G__14288 = 0;
              seq__14264_14272 = G__14285;
              chunk__14265_14273 = G__14286;
              count__14266_14274 = G__14287;
              i__14267_14275 = G__14288;
              continue;
            } else {
              var idx_14289 = cljs.core.first.call(null, seq__14264_14283__$1);
              var attr_14290 = pnod.attributes.item(idx_14289);
              if (cljs.core.truth_(attr_14290.specified)) {
                attr_14290.value = rep_str.call(null, attr_14290.value);
              } else {
              }
              var G__14291 = cljs.core.next.call(null, seq__14264_14283__$1);
              var G__14292 = null;
              var G__14293 = 0;
              var G__14294 = 0;
              seq__14264_14272 = G__14291;
              chunk__14265_14273 = G__14292;
              count__14266_14274 = G__14293;
              i__14267_14275 = G__14294;
              continue;
            }
          } else {
          }
        }
        break;
      }
    } else {
    }
    if (cljs.core._EQ_.call(null, pnod.nodeType, 3)) {
      return pnod.nodeValue = rep_str.call(null, pnod.nodeValue);
    } else {
      var seq__14268 = cljs.core.seq.call(null, enfocus.core.nodes__GT_coll.call(null, pnod.childNodes));
      var chunk__14269 = null;
      var count__14270 = 0;
      var i__14271 = 0;
      while (true) {
        if (i__14271 < count__14270) {
          var cnode = cljs.core._nth.call(null, chunk__14269, i__14271);
          enfocus$core$replace_vars_$_rep_node.call(null, cnode);
          var G__14295 = seq__14268;
          var G__14296 = chunk__14269;
          var G__14297 = count__14270;
          var G__14298 = i__14271 + 1;
          seq__14268 = G__14295;
          chunk__14269 = G__14296;
          count__14270 = G__14297;
          i__14271 = G__14298;
          continue;
        } else {
          var temp__4657__auto__ = cljs.core.seq.call(null, seq__14268);
          if (temp__4657__auto__) {
            var seq__14268__$1 = temp__4657__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__14268__$1)) {
              var c__6956__auto__ = cljs.core.chunk_first.call(null, seq__14268__$1);
              var G__14299 = cljs.core.chunk_rest.call(null, seq__14268__$1);
              var G__14300 = c__6956__auto__;
              var G__14301 = cljs.core.count.call(null, c__6956__auto__);
              var G__14302 = 0;
              seq__14268 = G__14299;
              chunk__14269 = G__14300;
              count__14270 = G__14301;
              i__14271 = G__14302;
              continue;
            } else {
              var cnode = cljs.core.first.call(null, seq__14268__$1);
              enfocus$core$replace_vars_$_rep_node.call(null, cnode);
              var G__14303 = cljs.core.next.call(null, seq__14268__$1);
              var G__14304 = null;
              var G__14305 = 0;
              var G__14306 = 0;
              seq__14268 = G__14303;
              chunk__14269 = G__14304;
              count__14270 = G__14305;
              i__14271 = G__14306;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    }
  };
};
enfocus.core.exists_in_QMARK_ = function enfocus$core$exists_in_QMARK_(col_or_val, val) {
  if (cljs.core.coll_QMARK_.call(null, col_or_val)) {
    return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([val], true), col_or_val);
  } else {
    return cljs.core._EQ_.call(null, col_or_val, val);
  }
};
enfocus.core.set_form_input = function enfocus$core$set_form_input(val) {
  return function(el) {
    if (cljs.core._EQ_.call(null, el.type, "checkbox") || cljs.core._EQ_.call(null, el.type, "radio")) {
      return el.checked = enfocus.core.exists_in_QMARK_.call(null, val, el.value);
    } else {
      var nval = cljs.core.coll_QMARK_.call(null, val) && !(typeof val === "string") ? cljs.core.vec.call(null, val) : cljs.core._EQ_.call(null, el.type, "select-multiple") ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [val], null) : val;
      return goog.dom.forms.setValue(el, cljs.core.clj__GT_js.call(null, nval));
    }
  };
};
enfocus.core.set_form = function enfocus$core$set_form(value_map) {
  return function(form_node) {
    if (cljs.core._EQ_.call(null, form_node.nodeName, "FORM")) {
      var seq__14311 = cljs.core.seq.call(null, cljs.core.range.call(null, form_node.length));
      var chunk__14312 = null;
      var count__14313 = 0;
      var i__14314 = 0;
      while (true) {
        if (i__14314 < count__14313) {
          var idx = cljs.core._nth.call(null, chunk__14312, i__14314);
          var el_14315 = form_node.elements[idx];
          var ky_14316 = cljs.core.keyword.call(null, el_14315.name);
          var val_14317 = ky_14316.call(null, value_map);
          if (cljs.core.contains_QMARK_.call(null, value_map, ky_14316)) {
            var val_14318__$1 = cljs.core.truth_(val_14317) ? val_14317 : "";
            enfocus.core.set_form_input.call(null, val_14318__$1).call(null, el_14315);
          } else {
          }
          var G__14319 = seq__14311;
          var G__14320 = chunk__14312;
          var G__14321 = count__14313;
          var G__14322 = i__14314 + 1;
          seq__14311 = G__14319;
          chunk__14312 = G__14320;
          count__14313 = G__14321;
          i__14314 = G__14322;
          continue;
        } else {
          var temp__4657__auto__ = cljs.core.seq.call(null, seq__14311);
          if (temp__4657__auto__) {
            var seq__14311__$1 = temp__4657__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__14311__$1)) {
              var c__6956__auto__ = cljs.core.chunk_first.call(null, seq__14311__$1);
              var G__14323 = cljs.core.chunk_rest.call(null, seq__14311__$1);
              var G__14324 = c__6956__auto__;
              var G__14325 = cljs.core.count.call(null, c__6956__auto__);
              var G__14326 = 0;
              seq__14311 = G__14323;
              chunk__14312 = G__14324;
              count__14313 = G__14325;
              i__14314 = G__14326;
              continue;
            } else {
              var idx = cljs.core.first.call(null, seq__14311__$1);
              var el_14327 = form_node.elements[idx];
              var ky_14328 = cljs.core.keyword.call(null, el_14327.name);
              var val_14329 = ky_14328.call(null, value_map);
              if (cljs.core.contains_QMARK_.call(null, value_map, ky_14328)) {
                var val_14330__$1 = cljs.core.truth_(val_14329) ? val_14329 : "";
                enfocus.core.set_form_input.call(null, val_14330__$1).call(null, el_14327);
              } else {
              }
              var G__14331 = cljs.core.next.call(null, seq__14311__$1);
              var G__14332 = null;
              var G__14333 = 0;
              var G__14334 = 0;
              seq__14311 = G__14331;
              chunk__14312 = G__14332;
              count__14313 = G__14333;
              i__14314 = G__14334;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    } else {
      return null;
    }
  };
};
enfocus.core.html = function enfocus$core$html(node_spec) {
  if (typeof node_spec === "string") {
    return document.createTextNode(node_spec);
  } else {
    if (cljs.core.vector_QMARK_.call(null, node_spec)) {
      var vec__14344 = node_spec;
      var tag = cljs.core.nth.call(null, vec__14344, 0, null);
      var vec__14345 = cljs.core.nthnext.call(null, vec__14344, 1);
      var m = cljs.core.nth.call(null, vec__14345, 0, null);
      var ms = cljs.core.nthnext.call(null, vec__14345, 1);
      var more = vec__14345;
      var vec__14346 = cljs.core.name.call(null, tag).split(/(?=[#.])/);
      var tag_name = cljs.core.nth.call(null, vec__14346, 0, null);
      var segments = cljs.core.nthnext.call(null, vec__14346, 1);
      var id = cljs.core.some.call(null, function(vec__14344, tag, vec__14345, m, ms, more, vec__14346, tag_name, segments) {
        return function(seg) {
          if (cljs.core._EQ_.call(null, "#", seg.charAt(0))) {
            return cljs.core.subs.call(null, seg, 1);
          } else {
            return null;
          }
        };
      }(vec__14344, tag, vec__14345, m, ms, more, vec__14346, tag_name, segments), segments);
      var classes = cljs.core.keep.call(null, function(vec__14344, tag, vec__14345, m, ms, more, vec__14346, tag_name, segments, id) {
        return function(seg) {
          if (cljs.core._EQ_.call(null, ".", seg.charAt(0))) {
            return cljs.core.subs.call(null, seg, 1);
          } else {
            return null;
          }
        };
      }(vec__14344, tag, vec__14345, m, ms, more, vec__14346, tag_name, segments, id), segments);
      var attrs = cljs.core.map_QMARK_.call(null, m) ? m : cljs.core.PersistentArrayMap.EMPTY;
      var attrs__$1 = cljs.core.truth_(id) ? cljs.core.assoc.call(null, attrs, new cljs.core.Keyword(null, "id", "id", -1388402092), id) : attrs;
      var attrs__$2 = !cljs.core.empty_QMARK_.call(null, classes) ? cljs.core.assoc.call(null, attrs__$1, new cljs.core.Keyword(null, "class", "class", -2030961996), cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, " ", classes))) : attrs__$1;
      var content = cljs.core.flatten.call(null, cljs.core.map.call(null, enfocus$core$html, cljs.core.map_QMARK_.call(null, m) ? ms : more));
      var node = document.createElement(tag_name);
      var seq__14347_14353 = cljs.core.seq.call(null, attrs__$2);
      var chunk__14348_14354 = null;
      var count__14349_14355 = 0;
      var i__14350_14356 = 0;
      while (true) {
        if (i__14350_14356 < count__14349_14355) {
          var vec__14351_14357 = cljs.core._nth.call(null, chunk__14348_14354, i__14350_14356);
          var key_14358 = cljs.core.nth.call(null, vec__14351_14357, 0, null);
          var val_14359 = cljs.core.nth.call(null, vec__14351_14357, 1, null);
          node.setAttribute(cljs.core.name.call(null, key_14358), val_14359);
          var G__14360 = seq__14347_14353;
          var G__14361 = chunk__14348_14354;
          var G__14362 = count__14349_14355;
          var G__14363 = i__14350_14356 + 1;
          seq__14347_14353 = G__14360;
          chunk__14348_14354 = G__14361;
          count__14349_14355 = G__14362;
          i__14350_14356 = G__14363;
          continue;
        } else {
          var temp__4657__auto___14364 = cljs.core.seq.call(null, seq__14347_14353);
          if (temp__4657__auto___14364) {
            var seq__14347_14365__$1 = temp__4657__auto___14364;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__14347_14365__$1)) {
              var c__6956__auto___14366 = cljs.core.chunk_first.call(null, seq__14347_14365__$1);
              var G__14367 = cljs.core.chunk_rest.call(null, seq__14347_14365__$1);
              var G__14368 = c__6956__auto___14366;
              var G__14369 = cljs.core.count.call(null, c__6956__auto___14366);
              var G__14370 = 0;
              seq__14347_14353 = G__14367;
              chunk__14348_14354 = G__14368;
              count__14349_14355 = G__14369;
              i__14350_14356 = G__14370;
              continue;
            } else {
              var vec__14352_14371 = cljs.core.first.call(null, seq__14347_14365__$1);
              var key_14372 = cljs.core.nth.call(null, vec__14352_14371, 0, null);
              var val_14373 = cljs.core.nth.call(null, vec__14352_14371, 1, null);
              node.setAttribute(cljs.core.name.call(null, key_14372), val_14373);
              var G__14374 = cljs.core.next.call(null, seq__14347_14365__$1);
              var G__14375 = null;
              var G__14376 = 0;
              var G__14377 = 0;
              seq__14347_14353 = G__14374;
              chunk__14348_14354 = G__14375;
              count__14349_14355 = G__14376;
              i__14350_14356 = G__14377;
              continue;
            }
          } else {
          }
        }
        break;
      }
      if (cljs.core.truth_(content)) {
        return domina.append_BANG_.call(null, node, content);
      } else {
        return null;
      }
    } else {
      if (cljs.core.sequential_QMARK_.call(null, node_spec)) {
        return cljs.core.flatten.call(null, cljs.core.map.call(null, enfocus$core$html, node_spec));
      } else {
        return document.createTextNode([cljs.core.str(node_spec)].join(""));
      }
    }
  }
};
enfocus.core.get_attr = function enfocus$core$get_attr(attr) {
  return enfocus.core.extr_multi_node.call(null, function(pnod) {
    return pnod.getAttribute(cljs.core.name.call(null, attr));
  });
};
enfocus.core.get_text = function enfocus$core$get_text() {
  return enfocus.core.extr_multi_node.call(null, function(pnod) {
    return goog.dom.getTextContent(pnod);
  });
};
enfocus.core.get_data = function enfocus$core$get_data(var_args) {
  var args14378 = [];
  var len__7211__auto___14381 = arguments.length;
  var i__7212__auto___14382 = 0;
  while (true) {
    if (i__7212__auto___14382 < len__7211__auto___14381) {
      args14378.push(arguments[i__7212__auto___14382]);
      var G__14383 = i__7212__auto___14382 + 1;
      i__7212__auto___14382 = G__14383;
      continue;
    } else {
    }
    break;
  }
  var G__14380 = args14378.length;
  switch(G__14380) {
    case 1:
      return enfocus.core.get_data.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.core.get_data.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args14378.length)].join(""));;
  }
};
enfocus.core.get_data.cljs$core$IFn$_invoke$arity$1 = function(ky) {
  return enfocus.core.get_data.call(null, ky, false);
};
enfocus.core.get_data.cljs$core$IFn$_invoke$arity$2 = function(ky, bubble) {
  return enfocus.core.extr_multi_node.call(null, function(node) {
    return domina.get_data.call(null, node, ky, bubble);
  });
};
enfocus.core.get_data.cljs$lang$maxFixedArity = 2;
enfocus.core.get_prop = function enfocus$core$get_prop(prop) {
  return enfocus.core.extr_multi_node.call(null, function(pnod) {
    return pnod[cljs.core.name.call(null, prop)];
  });
};
enfocus.core.merge_form_val = function enfocus$core$merge_form_val(form_map, ky, val) {
  var mval = form_map.call(null, ky);
  if (cljs.core.truth_(val)) {
    if (cljs.core.coll_QMARK_.call(null, mval) && cljs.core.coll_QMARK_.call(null, val)) {
      return cljs.core.assoc.call(null, form_map, ky, cljs.core.into.call(null, mval, val));
    } else {
      if (cljs.core.coll_QMARK_.call(null, mval)) {
        return cljs.core.assoc.call(null, form_map, ky, cljs.core.conj.call(null, mval, val));
      } else {
        if (cljs.core.truth_(mval)) {
          return cljs.core.assoc.call(null, form_map, ky, cljs.core.PersistentHashSet.fromArray([mval, val], true));
        } else {
          return cljs.core.assoc.call(null, form_map, ky, val);
        }
      }
    }
  } else {
    return form_map;
  }
};
enfocus.core.read_form_input = function enfocus$core$read_form_input() {
  var trans = function(nodes, chain) {
    var nod_col = enfocus.core.nodes__GT_coll.call(null, nodes);
    var result = cljs.core.reduce.call(null, function(nod_col) {
      return function(p1__14386_SHARP_, p2__14385_SHARP_) {
        var vals = cljs.core.js__GT_clj.call(null, goog.dom.forms.getValue(p2__14385_SHARP_));
        if (!(typeof vals === "string") && cljs.core.coll_QMARK_.call(null, vals)) {
          return cljs.core.into.call(null, p1__14386_SHARP_, vals);
        } else {
          if (cljs.core.truth_(vals)) {
            return cljs.core.conj.call(null, p1__14386_SHARP_, vals);
          } else {
            return p1__14386_SHARP_;
          }
        }
      };
    }(nod_col), cljs.core.PersistentHashSet.EMPTY, nod_col);
    if (cljs.core.empty_QMARK_.call(null, result)) {
      return null;
    } else {
      if (cljs.core._EQ_.call(null, 1, cljs.core.count.call(null, result)) && cljs.core.not.call(null, (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["checkbox", null, "select-multiple", null], null), null)).call(null, cljs.core.first.call(null, nod_col).type))) {
        return cljs.core.first.call(null, result);
      } else {
        return result;
      }
    }
  };
  if (typeof enfocus.core.t_enfocus$core14391 !== "undefined") {
  } else {
    enfocus.core.t_enfocus$core14391 = function(read_form_input, trans, meta14392) {
      this.read_form_input = read_form_input;
      this.trans = trans;
      this.meta14392 = meta14392;
      this.cljs$lang$protocol_mask$partition0$ = 393217;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    enfocus.core.t_enfocus$core14391.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(trans) {
      return function(_14393, meta14392__$1) {
        var self__ = this;
        var _14393__$1 = this;
        return new enfocus.core.t_enfocus$core14391(self__.read_form_input, self__.trans, meta14392__$1);
      };
    }(trans);
    enfocus.core.t_enfocus$core14391.prototype.cljs$core$IMeta$_meta$arity$1 = function(trans) {
      return function(_14393) {
        var self__ = this;
        var _14393__$1 = this;
        return self__.meta14392;
      };
    }(trans);
    enfocus.core.t_enfocus$core14391.prototype.enfocus$core$ITransform$ = true;
    enfocus.core.t_enfocus$core14391.prototype.enfocus$core$ITransform$apply_transform$arity$2 = function(trans) {
      return function(_, nodes) {
        var self__ = this;
        var ___$1 = this;
        return self__.trans.call(null, nodes, null);
      };
    }(trans);
    enfocus.core.t_enfocus$core14391.prototype.enfocus$core$ITransform$apply_transform$arity$3 = function(trans) {
      return function(_, nodes, chain) {
        var self__ = this;
        var ___$1 = this;
        return self__.trans.call(null, nodes, chain);
      };
    }(trans);
    enfocus.core.t_enfocus$core14391.prototype.call = function(trans) {
      return function() {
        var G__14395 = null;
        var G__14395__2 = function(self__, nodes) {
          var self__ = this;
          var self____$1 = this;
          var _ = self____$1;
          return self__.trans.call(null, nodes, null);
        };
        var G__14395__3 = function(self__, nodes, chain) {
          var self__ = this;
          var self____$1 = this;
          var _ = self____$1;
          return self__.trans.call(null, nodes, chain);
        };
        G__14395 = function(self__, nodes, chain) {
          switch(arguments.length) {
            case 2:
              return G__14395__2.call(this, self__, nodes);
            case 3:
              return G__14395__3.call(this, self__, nodes, chain);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__14395.cljs$core$IFn$_invoke$arity$2 = G__14395__2;
        G__14395.cljs$core$IFn$_invoke$arity$3 = G__14395__3;
        return G__14395;
      }();
    }(trans);
    enfocus.core.t_enfocus$core14391.prototype.apply = function(trans) {
      return function(self__, args14394) {
        var self__ = this;
        var self____$1 = this;
        return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args14394)));
      };
    }(trans);
    enfocus.core.t_enfocus$core14391.prototype.cljs$core$IFn$_invoke$arity$1 = function(trans) {
      return function(nodes) {
        var self__ = this;
        var _ = this;
        return self__.trans.call(null, nodes, null);
      };
    }(trans);
    enfocus.core.t_enfocus$core14391.prototype.cljs$core$IFn$_invoke$arity$2 = function(trans) {
      return function(nodes, chain) {
        var self__ = this;
        var _ = this;
        return self__.trans.call(null, nodes, chain);
      };
    }(trans);
    enfocus.core.t_enfocus$core14391.getBasis = function(trans) {
      return function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "read-form-input", "read-form-input", 1575979010, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(cljs.core.PersistentVector.EMPTY)), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "returns the value of a given form input (text,select,checkbox,etc...)    If more than  one value exists it will return a set of values."], 
        null)), new cljs.core.Symbol(null, "trans", "trans", 322027676, null), new cljs.core.Symbol(null, "meta14392", "meta14392", -1269260504, null)], null);
      };
    }(trans);
    enfocus.core.t_enfocus$core14391.cljs$lang$type = true;
    enfocus.core.t_enfocus$core14391.cljs$lang$ctorStr = "enfocus.core/t_enfocus$core14391";
    enfocus.core.t_enfocus$core14391.cljs$lang$ctorPrWriter = function(trans) {
      return function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
        return cljs.core._write.call(null, writer__6752__auto__, "enfocus.core/t_enfocus$core14391");
      };
    }(trans);
    enfocus.core.__GT_t_enfocus$core14391 = function(trans) {
      return function enfocus$core$read_form_input_$___GT_t_enfocus$core14391(read_form_input__$1, trans__$1, meta14392) {
        return new enfocus.core.t_enfocus$core14391(read_form_input__$1, trans__$1, meta14392);
      };
    }(trans);
  }
  return new enfocus.core.t_enfocus$core14391(enfocus$core$read_form_input, trans, cljs.core.PersistentArrayMap.EMPTY);
};
enfocus.core.read_form = function enfocus$core$read_form() {
  return enfocus.core.extr_multi_node.call(null, function(node) {
    var inputs = node.elements;
    return cljs.core.reduce.call(null, function(inputs) {
      return function(p1__14397_SHARP_, p2__14396_SHARP_) {
        if (!cljs.core.empty_QMARK_.call(null, inputs.item(p2__14396_SHARP_).name)) {
          return enfocus.core.merge_form_val.call(null, p1__14397_SHARP_, cljs.core.keyword.call(null, inputs.item(p2__14396_SHARP_).name), enfocus.core.read_form_input.call(null).call(null, inputs.item(p2__14396_SHARP_)));
        } else {
          return p1__14397_SHARP_;
        }
      };
    }(inputs), cljs.core.PersistentArrayMap.EMPTY, cljs.core.range.call(null, inputs.length));
  });
};
enfocus.core.reg_filt = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
enfocus.core.filter = function enfocus$core$filter(tst, trans) {
  return enfocus.core.multi_node_chain.call(null, function() {
    var enfocus$core$filter_$_filt = null;
    var enfocus$core$filter_$_filt__1 = function(pnodes) {
      return enfocus$core$filter_$_filt.call(null, pnodes, null);
    };
    var enfocus$core$filter_$_filt__2 = function(pnodes, chain) {
      var pnod_col = enfocus.core.nodes__GT_coll.call(null, pnodes);
      var ttest = tst instanceof cljs.core.Keyword ? cljs.core.deref.call(null, enfocus.core.reg_filt).call(null, tst) : tst;
      var res = cljs.core.filter.call(null, ttest, pnod_col);
      if (chain == null) {
        return enfocus.core.apply_transform.call(null, trans, res);
      } else {
        return enfocus.core.apply_transform.call(null, trans, res, chain);
      }
    };
    enfocus$core$filter_$_filt = function(pnodes, chain) {
      switch(arguments.length) {
        case 1:
          return enfocus$core$filter_$_filt__1.call(this, pnodes);
        case 2:
          return enfocus$core$filter_$_filt__2.call(this, pnodes, chain);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    enfocus$core$filter_$_filt.cljs$core$IFn$_invoke$arity$1 = enfocus$core$filter_$_filt__1;
    enfocus$core$filter_$_filt.cljs$core$IFn$_invoke$arity$2 = enfocus$core$filter_$_filt__2;
    return enfocus$core$filter_$_filt;
  }());
};
enfocus.core.register_filter = function enfocus$core$register_filter(ky, func) {
  return cljs.core.swap_BANG_.call(null, enfocus.core.reg_filt, cljs.core.assoc, ky, func);
};
enfocus.core.selected_options = function enfocus$core$selected_options(pnod) {
  return pnod.selected;
};
enfocus.core.checked_radio_checkbox = function enfocus$core$checked_radio_checkbox(pnod) {
  return pnod.checked;
};
enfocus.core.register_filter.call(null, new cljs.core.Keyword(null, "selected", "selected", 574897764), enfocus.core.selected_options);
enfocus.core.register_filter.call(null, new cljs.core.Keyword(null, "checked", "checked", -50955819), enfocus.core.checked_radio_checkbox);
enfocus.core.match_QMARK_ = function enfocus$core$match_QMARK_(selector) {
  return function(node) {
    if (cljs.core.truth_(node["matches"])) {
      return node.matches(selector);
    } else {
      if (cljs.core.truth_(node["matchesSelector"])) {
        return node.matchesSelector(selector);
      } else {
        if (cljs.core.truth_(node["msMatchesSelector"])) {
          return node.msMatchesSelector(selector);
        } else {
          if (cljs.core.truth_(node["mozMatchesSelector"])) {
            return node.mozMatchesSelector(selector);
          } else {
            if (cljs.core.truth_(node["webkitMatchesSelector"])) {
              return node.webkitMatchesSelector(selector);
            } else {
              return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([node], true), enfocus.core.nodes__GT_coll.call(null, enfocus.core.select.call(null, node)));
            }
          }
        }
      }
    }
  };
};
enfocus.core.create_sel_str = function enfocus$core$create_sel_str(var_args) {
  var args14399 = [];
  var len__7211__auto___14402 = arguments.length;
  var i__7212__auto___14403 = 0;
  while (true) {
    if (i__7212__auto___14403 < len__7211__auto___14402) {
      args14399.push(arguments[i__7212__auto___14403]);
      var G__14404 = i__7212__auto___14403 + 1;
      i__7212__auto___14403 = G__14404;
      continue;
    } else {
    }
    break;
  }
  var G__14401 = args14399.length;
  switch(G__14401) {
    case 1:
      return enfocus.core.create_sel_str.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.core.create_sel_str.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args14399.length)].join(""));;
  }
};
enfocus.core.create_sel_str.cljs$core$IFn$_invoke$arity$1 = function(css_sel) {
  return enfocus.core.create_sel_str.call(null, "", css_sel);
};
enfocus.core.create_sel_str.cljs$core$IFn$_invoke$arity$2 = function(id_mask_sym, css_sel) {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, function(p1__14398_SHARP_) {
    if (p1__14398_SHARP_ instanceof cljs.core.Symbol) {
      return enfocus.core.css_syms.call(null, p1__14398_SHARP_);
    } else {
      if (p1__14398_SHARP_ instanceof cljs.core.Keyword) {
        return [cljs.core.str(" "), cljs.core.str(cljs.core.name.call(null, p1__14398_SHARP_).replace("#", [cljs.core.str("#"), cljs.core.str(id_mask_sym)].join("")))].join("");
      } else {
        if (cljs.core.vector_QMARK_.call(null, p1__14398_SHARP_)) {
          return enfocus.core.create_sel_str.call(null, p1__14398_SHARP_);
        } else {
          if (typeof p1__14398_SHARP_ === "string") {
            return p1__14398_SHARP_.replace("#", [cljs.core.str("#"), cljs.core.str(id_mask_sym)].join(""));
          } else {
            return null;
          }
        }
      }
    }
  }, css_sel));
};
enfocus.core.create_sel_str.cljs$lang$maxFixedArity = 2;
enfocus.core.css_select = function enfocus$core$css_select(var_args) {
  var args14406 = [];
  var len__7211__auto___14409 = arguments.length;
  var i__7212__auto___14410 = 0;
  while (true) {
    if (i__7212__auto___14410 < len__7211__auto___14409) {
      args14406.push(arguments[i__7212__auto___14410]);
      var G__14411 = i__7212__auto___14410 + 1;
      i__7212__auto___14410 = G__14411;
      continue;
    } else {
    }
    break;
  }
  var G__14408 = args14406.length;
  switch(G__14408) {
    case 1:
      return enfocus.core.css_select.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.core.css_select.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return enfocus.core.css_select.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args14406.length)].join(""));;
  }
};
enfocus.core.css_select.cljs$core$IFn$_invoke$arity$1 = function(css_sel) {
  return enfocus.core.css_select.call(null, "", document, css_sel);
};
enfocus.core.css_select.cljs$core$IFn$_invoke$arity$2 = function(dom_node, css_sel) {
  return enfocus.core.css_select.call(null, "", dom_node, css_sel);
};
enfocus.core.css_select.cljs$core$IFn$_invoke$arity$3 = function(id_mask_sym, dom_node, css_sel) {
  var sel = clojure.string.trim.call(null, enfocus.enlive.syntax.convert.call(null, enfocus.core.create_sel_str.call(null, id_mask_sym, css_sel)));
  var ret = domina.css.sel.call(null, dom_node, sel);
  return ret;
};
enfocus.core.css_select.cljs$lang$maxFixedArity = 3;
enfocus.core.nil_t = function enfocus$core$nil_t(func) {
  var or__6153__auto__ = func;
  if (cljs.core.truth_(or__6153__auto__)) {
    return or__6153__auto__;
  } else {
    return enfocus.core.remove_node;
  }
};
enfocus.core.i_at = function enfocus$core$i_at(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___14425 = arguments.length;
  var i__7212__auto___14426 = 0;
  while (true) {
    if (i__7212__auto___14426 < len__7211__auto___14425) {
      args__7218__auto__.push(arguments[i__7212__auto___14426]);
      var G__14427 = i__7212__auto___14426 + 1;
      i__7212__auto___14426 = G__14427;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 2 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(2), 0) : null;
  return enfocus.core.i_at.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__7219__auto__);
};
enfocus.core.i_at.cljs$core$IFn$_invoke$arity$variadic = function(id_mask, node, trans) {
  var cnt = cljs.core.count.call(null, trans);
  var sel_QMARK_ = function() {
    var and__6141__auto__ = !(node == null);
    if (and__6141__auto__) {
      if (!(node == null)) {
        if (false || node.enfocus$core$ISelector$) {
          return true;
        } else {
          if (!node.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, enfocus.core.ISelector, node);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, enfocus.core.ISelector, node);
      }
    } else {
      return and__6141__auto__;
    }
  }();
  if (!sel_QMARK_ && cljs.core._EQ_.call(null, 1, cnt)) {
    return enfocus.core.apply_transform.call(null, cljs.core.first.call(null, trans), node);
  } else {
    var vec__14418 = sel_QMARK_ ? cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.conj.call(null, trans, node)), document) : cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, trans), node);
    var node__$1 = cljs.core.nth.call(null, vec__14418, 0, null);
    var trans__$1 = cljs.core.nth.call(null, vec__14418, 1, null);
    var seq__14419 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, trans__$1));
    var chunk__14420 = null;
    var count__14421 = 0;
    var i__14422 = 0;
    while (true) {
      if (i__14422 < count__14421) {
        var vec__14423 = cljs.core._nth.call(null, chunk__14420, i__14422);
        var sel = cljs.core.nth.call(null, vec__14423, 0, null);
        var t = cljs.core.nth.call(null, vec__14423, 1, null);
        enfocus.core.apply_transform.call(null, enfocus.core.nil_t.call(null, t), enfocus.core.select.call(null, sel, node__$1, id_mask));
        var G__14428 = seq__14419;
        var G__14429 = chunk__14420;
        var G__14430 = count__14421;
        var G__14431 = i__14422 + 1;
        seq__14419 = G__14428;
        chunk__14420 = G__14429;
        count__14421 = G__14430;
        i__14422 = G__14431;
        continue;
      } else {
        var temp__4657__auto__ = cljs.core.seq.call(null, seq__14419);
        if (temp__4657__auto__) {
          var seq__14419__$1 = temp__4657__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14419__$1)) {
            var c__6956__auto__ = cljs.core.chunk_first.call(null, seq__14419__$1);
            var G__14432 = cljs.core.chunk_rest.call(null, seq__14419__$1);
            var G__14433 = c__6956__auto__;
            var G__14434 = cljs.core.count.call(null, c__6956__auto__);
            var G__14435 = 0;
            seq__14419 = G__14432;
            chunk__14420 = G__14433;
            count__14421 = G__14434;
            i__14422 = G__14435;
            continue;
          } else {
            var vec__14424 = cljs.core.first.call(null, seq__14419__$1);
            var sel = cljs.core.nth.call(null, vec__14424, 0, null);
            var t = cljs.core.nth.call(null, vec__14424, 1, null);
            enfocus.core.apply_transform.call(null, enfocus.core.nil_t.call(null, t), enfocus.core.select.call(null, sel, node__$1, id_mask));
            var G__14436 = cljs.core.next.call(null, seq__14419__$1);
            var G__14437 = null;
            var G__14438 = 0;
            var G__14439 = 0;
            seq__14419 = G__14436;
            chunk__14420 = G__14437;
            count__14421 = G__14438;
            i__14422 = G__14439;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  }
};
enfocus.core.i_at.cljs$lang$maxFixedArity = 2;
enfocus.core.i_at.cljs$lang$applyTo = function(seq14413) {
  var G__14414 = cljs.core.first.call(null, seq14413);
  var seq14413__$1 = cljs.core.next.call(null, seq14413);
  var G__14415 = cljs.core.first.call(null, seq14413__$1);
  var seq14413__$2 = cljs.core.next.call(null, seq14413__$1);
  return enfocus.core.i_at.cljs$core$IFn$_invoke$arity$variadic(G__14414, G__14415, seq14413__$2);
};
enfocus.core.at = function enfocus$core$at(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___14442 = arguments.length;
  var i__7212__auto___14443 = 0;
  while (true) {
    if (i__7212__auto___14443 < len__7211__auto___14442) {
      args__7218__auto__.push(arguments[i__7212__auto___14443]);
      var G__14444 = i__7212__auto___14443 + 1;
      i__7212__auto___14443 = G__14444;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return enfocus.core.at.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
enfocus.core.at.cljs$core$IFn$_invoke$arity$variadic = function(node, trans) {
  return cljs.core.apply.call(null, enfocus.core.i_at, "", node, trans);
};
enfocus.core.at.cljs$lang$maxFixedArity = 1;
enfocus.core.at.cljs$lang$applyTo = function(seq14440) {
  var G__14441 = cljs.core.first.call(null, seq14440);
  var seq14440__$1 = cljs.core.next.call(null, seq14440);
  return enfocus.core.at.cljs$core$IFn$_invoke$arity$variadic(G__14441, seq14440__$1);
};
enfocus.core.from = function enfocus$core$from(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___14451 = arguments.length;
  var i__7212__auto___14452 = 0;
  while (true) {
    if (i__7212__auto___14452 < len__7211__auto___14451) {
      args__7218__auto__.push(arguments[i__7212__auto___14452]);
      var G__14453 = i__7212__auto___14452 + 1;
      i__7212__auto___14452 = G__14453;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return enfocus.core.from.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
enfocus.core.from.cljs$core$IFn$_invoke$arity$variadic = function(node, trans) {
  var cnt = cljs.core.count.call(null, trans);
  var sel_QMARK_ = !(node == null) ? false || node.enfocus$core$ISelector$ ? true : !node.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_.call(null, enfocus.core.ISelector, node) : false : cljs.core.native_satisfies_QMARK_.call(null, enfocus.core.ISelector, node);
  if (sel_QMARK_ && cljs.core._EQ_.call(null, 1, cnt)) {
    return enfocus.core.apply_transform.call(null, cljs.core.first.call(null, trans), enfocus.core.select.call(null, node));
  } else {
    if (cljs.core._EQ_.call(null, 1, cnt)) {
      return enfocus.core.apply_transform.call(null, cljs.core.first.call(null, trans), node);
    } else {
      var vec__14448 = sel_QMARK_ ? cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.conj.call(null, trans, node)), document) : cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, trans), node);
      var node__$1 = cljs.core.nth.call(null, vec__14448, 0, null);
      var trans__$1 = cljs.core.nth.call(null, vec__14448, 1, null);
      return cljs.core.apply.call(null, cljs.core.hash_map, cljs.core.mapcat.call(null, function(vec__14448, node__$1, trans__$1, cnt, sel_QMARK_) {
        return function(p__14449) {
          var vec__14450 = p__14449;
          var ky = cljs.core.nth.call(null, vec__14450, 0, null);
          var sel = cljs.core.nth.call(null, vec__14450, 1, null);
          var ext = cljs.core.nth.call(null, vec__14450, 2, null);
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ky, enfocus.core.apply_transform.call(null, ext, enfocus.core.select.call(null, sel, node__$1, ""))], null);
        };
      }(vec__14448, node__$1, trans__$1, cnt, sel_QMARK_), cljs.core.partition.call(null, 3, trans__$1)));
    }
  }
};
enfocus.core.from.cljs$lang$maxFixedArity = 1;
enfocus.core.from.cljs$lang$applyTo = function(seq14445) {
  var G__14446 = cljs.core.first.call(null, seq14445);
  var seq14445__$1 = cljs.core.next.call(null, seq14445);
  return enfocus.core.from.cljs$core$IFn$_invoke$arity$variadic(G__14446, seq14445__$1);
};
enfocus.core.xpath = function enfocus$core$xpath(path) {
  return function(root, id_mask) {
    if (cljs.core.empty_QMARK_.call(null, id_mask)) {
      return domina.xpath.xpath.call(null, root, path);
    } else {
      var tmp = path.replace("@ID\x3d'", [cljs.core.str("@ID\x3d'"), cljs.core.str(id_mask)].join(""));
      var mpath = path.replace("@id\x3d'", [cljs.core.str("@id\x3d'"), cljs.core.str(id_mask)].join(""));
      return domina.xpath.xpath.call(null, root, mpath);
    }
  };
};
enfocus.core.this_node = function enfocus$core$this_node(root, id_mask) {
  return root;
};
if (cljs.core.truth_(typeof Text != "undefined")) {
  Text.prototype.domina$DomContent$ = true;
  Text.prototype.domina$DomContent$nodes$arity$1 = function(content) {
    var content__$1 = this;
    return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [content__$1], null);
  };
  Text.prototype.domina$DomContent$single_node$arity$1 = function(content) {
    var content__$1 = this;
    return content__$1;
  };
} else {
}
enfocus.core.ISelector["function"] = true;
enfocus.core.select["function"] = function() {
  var G__14454 = null;
  var G__14454__1 = function(this$) {
    return enfocus.core.select.call(null, this$, document, "");
  };
  var G__14454__2 = function(this$, root) {
    return enfocus.core.select.call(null, this$, root, "");
  };
  var G__14454__3 = function(this$, root, id_mask) {
    return this$.call(null, root, id_mask);
  };
  G__14454 = function(this$, root, id_mask) {
    switch(arguments.length) {
      case 1:
        return G__14454__1.call(this, this$);
      case 2:
        return G__14454__2.call(this, this$, root);
      case 3:
        return G__14454__3.call(this, this$, root, id_mask);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14454.cljs$core$IFn$_invoke$arity$1 = G__14454__1;
  G__14454.cljs$core$IFn$_invoke$arity$2 = G__14454__2;
  G__14454.cljs$core$IFn$_invoke$arity$3 = G__14454__3;
  return G__14454;
}();
cljs.core.PersistentVector.prototype.enfocus$core$ISelector$ = true;
cljs.core.PersistentVector.prototype.enfocus$core$ISelector$select$arity$1 = function(this$) {
  var this$__$1 = this;
  return enfocus.core.select.call(null, this$__$1, document, "");
};
cljs.core.PersistentVector.prototype.enfocus$core$ISelector$select$arity$2 = function(this$, root) {
  var this$__$1 = this;
  return enfocus.core.select.call(null, this$__$1, root, "");
};
cljs.core.PersistentVector.prototype.enfocus$core$ISelector$select$arity$3 = function(this$, root, id_mask) {
  var this$__$1 = this;
  return enfocus.core.css_select.call(null, id_mask, root, this$__$1);
};
enfocus.core.ISelector["string"] = true;
enfocus.core.select["string"] = function() {
  var G__14455 = null;
  var G__14455__1 = function(this$) {
    return enfocus.core.select.call(null, this$, document, "");
  };
  var G__14455__2 = function(this$, root) {
    return enfocus.core.select.call(null, this$, root, "");
  };
  var G__14455__3 = function(this$, root, id_mask) {
    return enfocus.core.css_select.call(null, id_mask, root, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [this$], null));
  };
  G__14455 = function(this$, root, id_mask) {
    switch(arguments.length) {
      case 1:
        return G__14455__1.call(this, this$);
      case 2:
        return G__14455__2.call(this, this$, root);
      case 3:
        return G__14455__3.call(this, this$, root, id_mask);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14455.cljs$core$IFn$_invoke$arity$1 = G__14455__1;
  G__14455.cljs$core$IFn$_invoke$arity$2 = G__14455__2;
  G__14455.cljs$core$IFn$_invoke$arity$3 = G__14455__3;
  return G__14455;
}();
enfocus.core.ISelector["null"] = true;
enfocus.core.select["null"] = function() {
  var G__14456 = null;
  var G__14456__1 = function(this$) {
    return cljs.core.List.EMPTY;
  };
  var G__14456__2 = function(this$, root) {
    return cljs.core.List.EMPTY;
  };
  var G__14456__3 = function(this$, root, id_mask) {
    return cljs.core.List.EMPTY;
  };
  G__14456 = function(this$, root, id_mask) {
    switch(arguments.length) {
      case 1:
        return G__14456__1.call(this, this$);
      case 2:
        return G__14456__2.call(this, this$, root);
      case 3:
        return G__14456__3.call(this, this$, root, id_mask);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14456.cljs$core$IFn$_invoke$arity$1 = G__14456__1;
  G__14456.cljs$core$IFn$_invoke$arity$2 = G__14456__2;
  G__14456.cljs$core$IFn$_invoke$arity$3 = G__14456__3;
  return G__14456;
}();
enfocus.core.ITransform["function"] = true;
enfocus.core.apply_transform["function"] = function() {
  var G__14457 = null;
  var G__14457__2 = function(trans, nodes) {
    return cljs.core.doall.call(null, cljs.core.map.call(null, trans, enfocus.core.nodes__GT_coll.call(null, nodes)));
  };
  var G__14457__3 = function(trans, nodes, chain) {
    var pnod_col = enfocus.core.nodes__GT_coll.call(null, nodes);
    var val = cljs.core.doall.call(null, cljs.core.map.call(null, trans, pnod_col));
    if (cljs.core.truth_(chain)) {
      return enfocus.core.apply_transform.call(null, chain, nodes);
    } else {
      return val;
    }
  };
  G__14457 = function(trans, nodes, chain) {
    switch(arguments.length) {
      case 2:
        return G__14457__2.call(this, trans, nodes);
      case 3:
        return G__14457__3.call(this, trans, nodes, chain);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14457.cljs$core$IFn$_invoke$arity$2 = G__14457__2;
  G__14457.cljs$core$IFn$_invoke$arity$3 = G__14457__3;
  return G__14457;
}();
enfocus.core.ITransform["null"] = true;
enfocus.core.apply_transform["null"] = function() {
  var G__14458 = null;
  var G__14458__2 = function(trans, nodes) {
    return nodes;
  };
  var G__14458__3 = function(trans, nodes, chain) {
    return nodes;
  };
  G__14458 = function(trans, nodes, chain) {
    switch(arguments.length) {
      case 2:
        return G__14458__2.call(this, trans, nodes);
      case 3:
        return G__14458__3.call(this, trans, nodes, chain);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14458.cljs$core$IFn$_invoke$arity$2 = G__14458__2;
  G__14458.cljs$core$IFn$_invoke$arity$3 = G__14458__3;
  return G__14458;
}();
goog.provide("goog.fx.Transition");
goog.provide("goog.fx.Transition.EventType");
goog.fx.Transition = function() {
};
goog.fx.Transition.EventType = {PLAY:"play", BEGIN:"begin", RESUME:"resume", END:"end", STOP:"stop", FINISH:"finish", PAUSE:"pause"};
goog.fx.Transition.prototype.play;
goog.fx.Transition.prototype.stop;
goog.provide("goog.fx.TransitionBase");
goog.provide("goog.fx.TransitionBase.State");
goog.require("goog.events.EventTarget");
goog.require("goog.fx.Transition");
goog.fx.TransitionBase = function() {
  goog.fx.TransitionBase.base(this, "constructor");
  this.state_ = goog.fx.TransitionBase.State.STOPPED;
  this.startTime = null;
  this.endTime = null;
};
goog.inherits(goog.fx.TransitionBase, goog.events.EventTarget);
goog.fx.TransitionBase.State = {STOPPED:0, PAUSED:-1, PLAYING:1};
goog.fx.TransitionBase.prototype.play = goog.abstractMethod;
goog.fx.TransitionBase.prototype.stop = goog.abstractMethod;
goog.fx.TransitionBase.prototype.pause = goog.abstractMethod;
goog.fx.TransitionBase.prototype.getStateInternal = function() {
  return this.state_;
};
goog.fx.TransitionBase.prototype.setStatePlaying = function() {
  this.state_ = goog.fx.TransitionBase.State.PLAYING;
};
goog.fx.TransitionBase.prototype.setStatePaused = function() {
  this.state_ = goog.fx.TransitionBase.State.PAUSED;
};
goog.fx.TransitionBase.prototype.setStateStopped = function() {
  this.state_ = goog.fx.TransitionBase.State.STOPPED;
};
goog.fx.TransitionBase.prototype.isPlaying = function() {
  return this.state_ == goog.fx.TransitionBase.State.PLAYING;
};
goog.fx.TransitionBase.prototype.isPaused = function() {
  return this.state_ == goog.fx.TransitionBase.State.PAUSED;
};
goog.fx.TransitionBase.prototype.isStopped = function() {
  return this.state_ == goog.fx.TransitionBase.State.STOPPED;
};
goog.fx.TransitionBase.prototype.onBegin = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.BEGIN);
};
goog.fx.TransitionBase.prototype.onEnd = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.END);
};
goog.fx.TransitionBase.prototype.onFinish = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.FINISH);
};
goog.fx.TransitionBase.prototype.onPause = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.PAUSE);
};
goog.fx.TransitionBase.prototype.onPlay = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.PLAY);
};
goog.fx.TransitionBase.prototype.onResume = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.RESUME);
};
goog.fx.TransitionBase.prototype.onStop = function() {
  this.dispatchAnimationEvent(goog.fx.Transition.EventType.STOP);
};
goog.fx.TransitionBase.prototype.dispatchAnimationEvent = function(type) {
  this.dispatchEvent(type);
};
goog.provide("goog.async.AnimationDelay");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.functions");
goog.async.AnimationDelay = function(listener, opt_window, opt_handler) {
  goog.async.AnimationDelay.base(this, "constructor");
  this.id_ = null;
  this.usingListeners_ = false;
  this.listener_ = listener;
  this.handler_ = opt_handler;
  this.win_ = opt_window || window;
  this.callback_ = goog.bind(this.doAction_, this);
};
goog.inherits(goog.async.AnimationDelay, goog.Disposable);
goog.async.AnimationDelay.TIMEOUT = 20;
goog.async.AnimationDelay.MOZ_BEFORE_PAINT_EVENT_ = "MozBeforePaint";
goog.async.AnimationDelay.prototype.start = function() {
  this.stop();
  this.usingListeners_ = false;
  var raf = this.getRaf_();
  var cancelRaf = this.getCancelRaf_();
  if (raf && !cancelRaf && this.win_.mozRequestAnimationFrame) {
    this.id_ = goog.events.listen(this.win_, goog.async.AnimationDelay.MOZ_BEFORE_PAINT_EVENT_, this.callback_);
    this.win_.mozRequestAnimationFrame(null);
    this.usingListeners_ = true;
  } else {
    if (raf && cancelRaf) {
      this.id_ = raf.call(this.win_, this.callback_);
    } else {
      this.id_ = this.win_.setTimeout(goog.functions.lock(this.callback_), goog.async.AnimationDelay.TIMEOUT);
    }
  }
};
goog.async.AnimationDelay.prototype.stop = function() {
  if (this.isActive()) {
    var raf = this.getRaf_();
    var cancelRaf = this.getCancelRaf_();
    if (raf && !cancelRaf && this.win_.mozRequestAnimationFrame) {
      goog.events.unlistenByKey(this.id_);
    } else {
      if (raf && cancelRaf) {
        cancelRaf.call(this.win_, (this.id_));
      } else {
        this.win_.clearTimeout((this.id_));
      }
    }
  }
  this.id_ = null;
};
goog.async.AnimationDelay.prototype.fire = function() {
  this.stop();
  this.doAction_();
};
goog.async.AnimationDelay.prototype.fireIfActive = function() {
  if (this.isActive()) {
    this.fire();
  }
};
goog.async.AnimationDelay.prototype.isActive = function() {
  return this.id_ != null;
};
goog.async.AnimationDelay.prototype.doAction_ = function() {
  if (this.usingListeners_ && this.id_) {
    goog.events.unlistenByKey(this.id_);
  }
  this.id_ = null;
  this.listener_.call(this.handler_, goog.now());
};
goog.async.AnimationDelay.prototype.disposeInternal = function() {
  this.stop();
  goog.async.AnimationDelay.base(this, "disposeInternal");
};
goog.async.AnimationDelay.prototype.getRaf_ = function() {
  var win = this.win_;
  return win.requestAnimationFrame || win.webkitRequestAnimationFrame || win.mozRequestAnimationFrame || win.oRequestAnimationFrame || win.msRequestAnimationFrame || null;
};
goog.async.AnimationDelay.prototype.getCancelRaf_ = function() {
  var win = this.win_;
  return win.cancelAnimationFrame || win.cancelRequestAnimationFrame || win.webkitCancelRequestAnimationFrame || win.mozCancelRequestAnimationFrame || win.oCancelRequestAnimationFrame || win.msCancelRequestAnimationFrame || null;
};
goog.provide("goog.fx.anim");
goog.provide("goog.fx.anim.Animated");
goog.require("goog.async.AnimationDelay");
goog.require("goog.async.Delay");
goog.require("goog.object");
goog.fx.anim.Animated = function() {
};
goog.fx.anim.Animated.prototype.onAnimationFrame;
goog.fx.anim.TIMEOUT = goog.async.AnimationDelay.TIMEOUT;
goog.fx.anim.activeAnimations_ = {};
goog.fx.anim.animationWindow_ = null;
goog.fx.anim.animationDelay_ = null;
goog.fx.anim.registerAnimation = function(animation) {
  var uid = goog.getUid(animation);
  if (!(uid in goog.fx.anim.activeAnimations_)) {
    goog.fx.anim.activeAnimations_[uid] = animation;
  }
  goog.fx.anim.requestAnimationFrame_();
};
goog.fx.anim.unregisterAnimation = function(animation) {
  var uid = goog.getUid(animation);
  delete goog.fx.anim.activeAnimations_[uid];
  if (goog.object.isEmpty(goog.fx.anim.activeAnimations_)) {
    goog.fx.anim.cancelAnimationFrame_();
  }
};
goog.fx.anim.tearDown = function() {
  goog.fx.anim.animationWindow_ = null;
  goog.dispose(goog.fx.anim.animationDelay_);
  goog.fx.anim.animationDelay_ = null;
  goog.fx.anim.activeAnimations_ = {};
};
goog.fx.anim.setAnimationWindow = function(animationWindow) {
  var hasTimer = goog.fx.anim.animationDelay_ && goog.fx.anim.animationDelay_.isActive();
  goog.dispose(goog.fx.anim.animationDelay_);
  goog.fx.anim.animationDelay_ = null;
  goog.fx.anim.animationWindow_ = animationWindow;
  if (hasTimer) {
    goog.fx.anim.requestAnimationFrame_();
  }
};
goog.fx.anim.requestAnimationFrame_ = function() {
  if (!goog.fx.anim.animationDelay_) {
    if (goog.fx.anim.animationWindow_) {
      goog.fx.anim.animationDelay_ = new goog.async.AnimationDelay(function(now) {
        goog.fx.anim.cycleAnimations_(now);
      }, goog.fx.anim.animationWindow_);
    } else {
      goog.fx.anim.animationDelay_ = new goog.async.Delay(function() {
        goog.fx.anim.cycleAnimations_(goog.now());
      }, goog.fx.anim.TIMEOUT);
    }
  }
  var delay = goog.fx.anim.animationDelay_;
  if (!delay.isActive()) {
    delay.start();
  }
};
goog.fx.anim.cancelAnimationFrame_ = function() {
  if (goog.fx.anim.animationDelay_) {
    goog.fx.anim.animationDelay_.stop();
  }
};
goog.fx.anim.cycleAnimations_ = function(now) {
  goog.object.forEach(goog.fx.anim.activeAnimations_, function(anim) {
    anim.onAnimationFrame(now);
  });
  if (!goog.object.isEmpty(goog.fx.anim.activeAnimations_)) {
    goog.fx.anim.requestAnimationFrame_();
  }
};
goog.provide("goog.fx.Animation");
goog.provide("goog.fx.Animation.EventType");
goog.provide("goog.fx.Animation.State");
goog.provide("goog.fx.AnimationEvent");
goog.require("goog.array");
goog.require("goog.events.Event");
goog.require("goog.fx.Transition");
goog.require("goog.fx.TransitionBase");
goog.require("goog.fx.anim");
goog.require("goog.fx.anim.Animated");
goog.fx.Animation = function(start, end, duration, opt_acc) {
  goog.fx.Animation.base(this, "constructor");
  if (!goog.isArray(start) || !goog.isArray(end)) {
    throw Error("Start and end parameters must be arrays");
  }
  if (start.length != end.length) {
    throw Error("Start and end points must be the same length");
  }
  this.startPoint = start;
  this.endPoint = end;
  this.duration = duration;
  this.accel_ = opt_acc;
  this.coords = [];
  this.useRightPositioningForRtl_ = false;
  this.fps_ = 0;
  this.progress = 0;
  this.lastFrame = null;
};
goog.inherits(goog.fx.Animation, goog.fx.TransitionBase);
goog.fx.Animation.prototype.enableRightPositioningForRtl = function(useRightPositioningForRtl) {
  this.useRightPositioningForRtl_ = useRightPositioningForRtl;
};
goog.fx.Animation.prototype.isRightPositioningForRtlEnabled = function() {
  return this.useRightPositioningForRtl_;
};
goog.fx.Animation.EventType = {PLAY:goog.fx.Transition.EventType.PLAY, BEGIN:goog.fx.Transition.EventType.BEGIN, RESUME:goog.fx.Transition.EventType.RESUME, END:goog.fx.Transition.EventType.END, STOP:goog.fx.Transition.EventType.STOP, FINISH:goog.fx.Transition.EventType.FINISH, PAUSE:goog.fx.Transition.EventType.PAUSE, ANIMATE:"animate", DESTROY:"destroy"};
goog.fx.Animation.TIMEOUT = goog.fx.anim.TIMEOUT;
goog.fx.Animation.State = goog.fx.TransitionBase.State;
goog.fx.Animation.setAnimationWindow = function(animationWindow) {
  goog.fx.anim.setAnimationWindow(animationWindow);
};
goog.fx.Animation.prototype.play = function(opt_restart) {
  if (opt_restart || this.isStopped()) {
    this.progress = 0;
    this.coords = this.startPoint;
  } else {
    if (this.isPlaying()) {
      return false;
    }
  }
  goog.fx.anim.unregisterAnimation(this);
  var now = (goog.now());
  this.startTime = now;
  if (this.isPaused()) {
    this.startTime -= this.duration * this.progress;
  }
  this.endTime = this.startTime + this.duration;
  this.lastFrame = this.startTime;
  if (!this.progress) {
    this.onBegin();
  }
  this.onPlay();
  if (this.isPaused()) {
    this.onResume();
  }
  this.setStatePlaying();
  goog.fx.anim.registerAnimation(this);
  this.cycle(now);
  return true;
};
goog.fx.Animation.prototype.stop = function(opt_gotoEnd) {
  goog.fx.anim.unregisterAnimation(this);
  this.setStateStopped();
  if (!!opt_gotoEnd) {
    this.progress = 1;
  }
  this.updateCoords_(this.progress);
  this.onStop();
  this.onEnd();
};
goog.fx.Animation.prototype.pause = function() {
  if (this.isPlaying()) {
    goog.fx.anim.unregisterAnimation(this);
    this.setStatePaused();
    this.onPause();
  }
};
goog.fx.Animation.prototype.getProgress = function() {
  return this.progress;
};
goog.fx.Animation.prototype.setProgress = function(progress) {
  this.progress = progress;
  if (this.isPlaying()) {
    var now = goog.now();
    this.startTime = now - this.duration * this.progress;
    this.endTime = this.startTime + this.duration;
  }
};
goog.fx.Animation.prototype.disposeInternal = function() {
  if (!this.isStopped()) {
    this.stop(false);
  }
  this.onDestroy();
  goog.fx.Animation.base(this, "disposeInternal");
};
goog.fx.Animation.prototype.destroy = function() {
  this.dispose();
};
goog.fx.Animation.prototype.onAnimationFrame = function(now) {
  this.cycle(now);
};
goog.fx.Animation.prototype.cycle = function(now) {
  this.progress = (now - this.startTime) / (this.endTime - this.startTime);
  if (this.progress >= 1) {
    this.progress = 1;
  }
  this.fps_ = 1E3 / (now - this.lastFrame);
  this.lastFrame = now;
  this.updateCoords_(this.progress);
  if (this.progress == 1) {
    this.setStateStopped();
    goog.fx.anim.unregisterAnimation(this);
    this.onFinish();
    this.onEnd();
  } else {
    if (this.isPlaying()) {
      this.onAnimate();
    }
  }
};
goog.fx.Animation.prototype.updateCoords_ = function(t) {
  if (goog.isFunction(this.accel_)) {
    t = this.accel_(t);
  }
  this.coords = new Array(this.startPoint.length);
  for (var i = 0;i < this.startPoint.length;i++) {
    this.coords[i] = (this.endPoint[i] - this.startPoint[i]) * t + this.startPoint[i];
  }
};
goog.fx.Animation.prototype.onAnimate = function() {
  this.dispatchAnimationEvent(goog.fx.Animation.EventType.ANIMATE);
};
goog.fx.Animation.prototype.onDestroy = function() {
  this.dispatchAnimationEvent(goog.fx.Animation.EventType.DESTROY);
};
goog.fx.Animation.prototype.dispatchAnimationEvent = function(type) {
  this.dispatchEvent(new goog.fx.AnimationEvent(type, this));
};
goog.fx.AnimationEvent = function(type, anim) {
  goog.fx.AnimationEvent.base(this, "constructor", type);
  this.coords = anim.coords;
  this.x = anim.coords[0];
  this.y = anim.coords[1];
  this.z = anim.coords[2];
  this.duration = anim.duration;
  this.progress = anim.getProgress();
  this.fps = anim.fps_;
  this.state = anim.getStateInternal();
  this.anim = anim;
};
goog.inherits(goog.fx.AnimationEvent, goog.events.Event);
goog.fx.AnimationEvent.prototype.coordsAsInts = function() {
  return goog.array.map(this.coords, Math.round);
};
goog.provide("goog.fx.easing");
goog.fx.easing.easeIn = function(t) {
  return goog.fx.easing.easeInInternal_(t, 3);
};
goog.fx.easing.easeInInternal_ = function(t, exp) {
  return Math.pow(t, exp);
};
goog.fx.easing.easeOut = function(t) {
  return goog.fx.easing.easeOutInternal_(t, 3);
};
goog.fx.easing.easeOutInternal_ = function(t, exp) {
  return 1 - goog.fx.easing.easeInInternal_(1 - t, exp);
};
goog.fx.easing.easeOutLong = function(t) {
  return goog.fx.easing.easeOutInternal_(t, 4);
};
goog.fx.easing.inAndOut = function(t) {
  return 3 * t * t - 2 * t * t * t;
};
goog.provide("goog.fx");
goog.require("goog.asserts");
goog.require("goog.fx.Animation");
goog.require("goog.fx.Animation.EventType");
goog.require("goog.fx.Animation.State");
goog.require("goog.fx.AnimationEvent");
goog.require("goog.fx.Transition.EventType");
goog.require("goog.fx.easing");
goog.provide("goog.color.names");
goog.color.names = {"aliceblue":"#f0f8ff", "antiquewhite":"#faebd7", "aqua":"#00ffff", "aquamarine":"#7fffd4", "azure":"#f0ffff", "beige":"#f5f5dc", "bisque":"#ffe4c4", "black":"#000000", "blanchedalmond":"#ffebcd", "blue":"#0000ff", "blueviolet":"#8a2be2", "brown":"#a52a2a", "burlywood":"#deb887", "cadetblue":"#5f9ea0", "chartreuse":"#7fff00", "chocolate":"#d2691e", "coral":"#ff7f50", "cornflowerblue":"#6495ed", "cornsilk":"#fff8dc", "crimson":"#dc143c", "cyan":"#00ffff", "darkblue":"#00008b", "darkcyan":"#008b8b", 
"darkgoldenrod":"#b8860b", "darkgray":"#a9a9a9", "darkgreen":"#006400", "darkgrey":"#a9a9a9", "darkkhaki":"#bdb76b", "darkmagenta":"#8b008b", "darkolivegreen":"#556b2f", "darkorange":"#ff8c00", "darkorchid":"#9932cc", "darkred":"#8b0000", "darksalmon":"#e9967a", "darkseagreen":"#8fbc8f", "darkslateblue":"#483d8b", "darkslategray":"#2f4f4f", "darkslategrey":"#2f4f4f", "darkturquoise":"#00ced1", "darkviolet":"#9400d3", "deeppink":"#ff1493", "deepskyblue":"#00bfff", "dimgray":"#696969", "dimgrey":"#696969", 
"dodgerblue":"#1e90ff", "firebrick":"#b22222", "floralwhite":"#fffaf0", "forestgreen":"#228b22", "fuchsia":"#ff00ff", "gainsboro":"#dcdcdc", "ghostwhite":"#f8f8ff", "gold":"#ffd700", "goldenrod":"#daa520", "gray":"#808080", "green":"#008000", "greenyellow":"#adff2f", "grey":"#808080", "honeydew":"#f0fff0", "hotpink":"#ff69b4", "indianred":"#cd5c5c", "indigo":"#4b0082", "ivory":"#fffff0", "khaki":"#f0e68c", "lavender":"#e6e6fa", "lavenderblush":"#fff0f5", "lawngreen":"#7cfc00", "lemonchiffon":"#fffacd", 
"lightblue":"#add8e6", "lightcoral":"#f08080", "lightcyan":"#e0ffff", "lightgoldenrodyellow":"#fafad2", "lightgray":"#d3d3d3", "lightgreen":"#90ee90", "lightgrey":"#d3d3d3", "lightpink":"#ffb6c1", "lightsalmon":"#ffa07a", "lightseagreen":"#20b2aa", "lightskyblue":"#87cefa", "lightslategray":"#778899", "lightslategrey":"#778899", "lightsteelblue":"#b0c4de", "lightyellow":"#ffffe0", "lime":"#00ff00", "limegreen":"#32cd32", "linen":"#faf0e6", "magenta":"#ff00ff", "maroon":"#800000", "mediumaquamarine":"#66cdaa", 
"mediumblue":"#0000cd", "mediumorchid":"#ba55d3", "mediumpurple":"#9370db", "mediumseagreen":"#3cb371", "mediumslateblue":"#7b68ee", "mediumspringgreen":"#00fa9a", "mediumturquoise":"#48d1cc", "mediumvioletred":"#c71585", "midnightblue":"#191970", "mintcream":"#f5fffa", "mistyrose":"#ffe4e1", "moccasin":"#ffe4b5", "navajowhite":"#ffdead", "navy":"#000080", "oldlace":"#fdf5e6", "olive":"#808000", "olivedrab":"#6b8e23", "orange":"#ffa500", "orangered":"#ff4500", "orchid":"#da70d6", "palegoldenrod":"#eee8aa", 
"palegreen":"#98fb98", "paleturquoise":"#afeeee", "palevioletred":"#db7093", "papayawhip":"#ffefd5", "peachpuff":"#ffdab9", "peru":"#cd853f", "pink":"#ffc0cb", "plum":"#dda0dd", "powderblue":"#b0e0e6", "purple":"#800080", "red":"#ff0000", "rosybrown":"#bc8f8f", "royalblue":"#4169e1", "saddlebrown":"#8b4513", "salmon":"#fa8072", "sandybrown":"#f4a460", "seagreen":"#2e8b57", "seashell":"#fff5ee", "sienna":"#a0522d", "silver":"#c0c0c0", "skyblue":"#87ceeb", "slateblue":"#6a5acd", "slategray":"#708090", 
"slategrey":"#708090", "snow":"#fffafa", "springgreen":"#00ff7f", "steelblue":"#4682b4", "tan":"#d2b48c", "teal":"#008080", "thistle":"#d8bfd8", "tomato":"#ff6347", "turquoise":"#40e0d0", "violet":"#ee82ee", "wheat":"#f5deb3", "white":"#ffffff", "whitesmoke":"#f5f5f5", "yellow":"#ffff00", "yellowgreen":"#9acd32"};
goog.provide("goog.color");
goog.provide("goog.color.Hsl");
goog.provide("goog.color.Hsv");
goog.provide("goog.color.Rgb");
goog.require("goog.color.names");
goog.require("goog.math");
goog.color.Rgb;
goog.color.Hsv;
goog.color.Hsl;
goog.color.parse = function(str) {
  var result = {};
  str = String(str);
  var maybeHex = goog.color.prependHashIfNecessaryHelper(str);
  if (goog.color.isValidHexColor_(maybeHex)) {
    result.hex = goog.color.normalizeHex(maybeHex);
    result.type = "hex";
    return result;
  } else {
    var rgb = goog.color.isValidRgbColor_(str);
    if (rgb.length) {
      result.hex = goog.color.rgbArrayToHex(rgb);
      result.type = "rgb";
      return result;
    } else {
      if (goog.color.names) {
        var hex = goog.color.names[str.toLowerCase()];
        if (hex) {
          result.hex = hex;
          result.type = "named";
          return result;
        }
      }
    }
  }
  throw Error(str + " is not a valid color string");
};
goog.color.isValidColor = function(str) {
  var maybeHex = goog.color.prependHashIfNecessaryHelper(str);
  return !!(goog.color.isValidHexColor_(maybeHex) || goog.color.isValidRgbColor_(str).length || goog.color.names && goog.color.names[str.toLowerCase()]);
};
goog.color.parseRgb = function(str) {
  var rgb = goog.color.isValidRgbColor_(str);
  if (!rgb.length) {
    throw Error(str + " is not a valid RGB color");
  }
  return rgb;
};
goog.color.hexToRgbStyle = function(hexColor) {
  return goog.color.rgbStyle_(goog.color.hexToRgb(hexColor));
};
goog.color.hexTripletRe_ = /#(.)(.)(.)/;
goog.color.normalizeHex = function(hexColor) {
  if (!goog.color.isValidHexColor_(hexColor)) {
    throw Error("'" + hexColor + "' is not a valid hex color");
  }
  if (hexColor.length == 4) {
    hexColor = hexColor.replace(goog.color.hexTripletRe_, "#$1$1$2$2$3$3");
  }
  return hexColor.toLowerCase();
};
goog.color.hexToRgb = function(hexColor) {
  hexColor = goog.color.normalizeHex(hexColor);
  var r = parseInt(hexColor.substr(1, 2), 16);
  var g = parseInt(hexColor.substr(3, 2), 16);
  var b = parseInt(hexColor.substr(5, 2), 16);
  return [r, g, b];
};
goog.color.rgbToHex = function(r, g, b) {
  r = Number(r);
  g = Number(g);
  b = Number(b);
  if (isNaN(r) || r < 0 || r > 255 || isNaN(g) || g < 0 || g > 255 || isNaN(b) || b < 0 || b > 255) {
    throw Error('"(' + r + "," + g + "," + b + '") is not a valid RGB color');
  }
  var hexR = goog.color.prependZeroIfNecessaryHelper(r.toString(16));
  var hexG = goog.color.prependZeroIfNecessaryHelper(g.toString(16));
  var hexB = goog.color.prependZeroIfNecessaryHelper(b.toString(16));
  return "#" + hexR + hexG + hexB;
};
goog.color.rgbArrayToHex = function(rgb) {
  return goog.color.rgbToHex(rgb[0], rgb[1], rgb[2]);
};
goog.color.rgbToHsl = function(r, g, b) {
  var normR = r / 255;
  var normG = g / 255;
  var normB = b / 255;
  var max = Math.max(normR, normG, normB);
  var min = Math.min(normR, normG, normB);
  var h = 0;
  var s = 0;
  var l = .5 * (max + min);
  if (max != min) {
    if (max == normR) {
      h = 60 * (normG - normB) / (max - min);
    } else {
      if (max == normG) {
        h = 60 * (normB - normR) / (max - min) + 120;
      } else {
        if (max == normB) {
          h = 60 * (normR - normG) / (max - min) + 240;
        }
      }
    }
    if (0 < l && l <= .5) {
      s = (max - min) / (2 * l);
    } else {
      s = (max - min) / (2 - 2 * l);
    }
  }
  return [Math.round(h + 360) % 360, s, l];
};
goog.color.rgbArrayToHsl = function(rgb) {
  return goog.color.rgbToHsl(rgb[0], rgb[1], rgb[2]);
};
goog.color.hueToRgb_ = function(v1, v2, vH) {
  if (vH < 0) {
    vH += 1;
  } else {
    if (vH > 1) {
      vH -= 1;
    }
  }
  if (6 * vH < 1) {
    return v1 + (v2 - v1) * 6 * vH;
  } else {
    if (2 * vH < 1) {
      return v2;
    } else {
      if (3 * vH < 2) {
        return v1 + (v2 - v1) * (2 / 3 - vH) * 6;
      }
    }
  }
  return v1;
};
goog.color.hslToRgb = function(h, s, l) {
  var r = 0;
  var g = 0;
  var b = 0;
  var normH = h / 360;
  if (s == 0) {
    r = g = b = l * 255;
  } else {
    var temp1 = 0;
    var temp2 = 0;
    if (l < .5) {
      temp2 = l * (1 + s);
    } else {
      temp2 = l + s - s * l;
    }
    temp1 = 2 * l - temp2;
    r = 255 * goog.color.hueToRgb_(temp1, temp2, normH + 1 / 3);
    g = 255 * goog.color.hueToRgb_(temp1, temp2, normH);
    b = 255 * goog.color.hueToRgb_(temp1, temp2, normH - 1 / 3);
  }
  return [Math.round(r), Math.round(g), Math.round(b)];
};
goog.color.hslArrayToRgb = function(hsl) {
  return goog.color.hslToRgb(hsl[0], hsl[1], hsl[2]);
};
goog.color.validHexColorRe_ = /^#(?:[0-9a-f]{3}){1,2}$/i;
goog.color.isValidHexColor_ = function(str) {
  return goog.color.validHexColorRe_.test(str);
};
goog.color.normalizedHexColorRe_ = /^#[0-9a-f]{6}$/;
goog.color.isNormalizedHexColor_ = function(str) {
  return goog.color.normalizedHexColorRe_.test(str);
};
goog.color.rgbColorRe_ = /^(?:rgb)?\((0|[1-9]\d{0,2}),\s?(0|[1-9]\d{0,2}),\s?(0|[1-9]\d{0,2})\)$/i;
goog.color.isValidRgbColor_ = function(str) {
  var regExpResultArray = str.match(goog.color.rgbColorRe_);
  if (regExpResultArray) {
    var r = Number(regExpResultArray[1]);
    var g = Number(regExpResultArray[2]);
    var b = Number(regExpResultArray[3]);
    if (r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255) {
      return [r, g, b];
    }
  }
  return [];
};
goog.color.prependZeroIfNecessaryHelper = function(hex) {
  return hex.length == 1 ? "0" + hex : hex;
};
goog.color.prependHashIfNecessaryHelper = function(str) {
  return str.charAt(0) == "#" ? str : "#" + str;
};
goog.color.rgbStyle_ = function(rgb) {
  return "rgb(" + rgb.join(",") + ")";
};
goog.color.hsvToRgb = function(h, s, brightness) {
  var red = 0;
  var green = 0;
  var blue = 0;
  if (s == 0) {
    red = brightness;
    green = brightness;
    blue = brightness;
  } else {
    var sextant = Math.floor(h / 60);
    var remainder = h / 60 - sextant;
    var val1 = brightness * (1 - s);
    var val2 = brightness * (1 - s * remainder);
    var val3 = brightness * (1 - s * (1 - remainder));
    switch(sextant) {
      case 1:
        red = val2;
        green = brightness;
        blue = val1;
        break;
      case 2:
        red = val1;
        green = brightness;
        blue = val3;
        break;
      case 3:
        red = val1;
        green = val2;
        blue = brightness;
        break;
      case 4:
        red = val3;
        green = val1;
        blue = brightness;
        break;
      case 5:
        red = brightness;
        green = val1;
        blue = val2;
        break;
      case 6:
      ;
      case 0:
        red = brightness;
        green = val3;
        blue = val1;
        break;
    }
  }
  return [Math.floor(red), Math.floor(green), Math.floor(blue)];
};
goog.color.rgbToHsv = function(red, green, blue) {
  var max = Math.max(Math.max(red, green), blue);
  var min = Math.min(Math.min(red, green), blue);
  var hue;
  var saturation;
  var value = max;
  if (min == max) {
    hue = 0;
    saturation = 0;
  } else {
    var delta = max - min;
    saturation = delta / max;
    if (red == max) {
      hue = (green - blue) / delta;
    } else {
      if (green == max) {
        hue = 2 + (blue - red) / delta;
      } else {
        hue = 4 + (red - green) / delta;
      }
    }
    hue *= 60;
    if (hue < 0) {
      hue += 360;
    }
    if (hue > 360) {
      hue -= 360;
    }
  }
  return [hue, saturation, value];
};
goog.color.rgbArrayToHsv = function(rgb) {
  return goog.color.rgbToHsv(rgb[0], rgb[1], rgb[2]);
};
goog.color.hsvArrayToRgb = function(hsv) {
  return goog.color.hsvToRgb(hsv[0], hsv[1], hsv[2]);
};
goog.color.hexToHsl = function(hex) {
  var rgb = goog.color.hexToRgb(hex);
  return goog.color.rgbToHsl(rgb[0], rgb[1], rgb[2]);
};
goog.color.hslToHex = function(h, s, l) {
  return goog.color.rgbArrayToHex(goog.color.hslToRgb(h, s, l));
};
goog.color.hslArrayToHex = function(hsl) {
  return goog.color.rgbArrayToHex(goog.color.hslToRgb(hsl[0], hsl[1], hsl[2]));
};
goog.color.hexToHsv = function(hex) {
  return goog.color.rgbArrayToHsv(goog.color.hexToRgb(hex));
};
goog.color.hsvToHex = function(h, s, v) {
  return goog.color.rgbArrayToHex(goog.color.hsvToRgb(h, s, v));
};
goog.color.hsvArrayToHex = function(hsv) {
  return goog.color.hsvToHex(hsv[0], hsv[1], hsv[2]);
};
goog.color.hslDistance = function(hsl1, hsl2) {
  var sl1, sl2;
  if (hsl1[2] <= .5) {
    sl1 = hsl1[1] * hsl1[2];
  } else {
    sl1 = hsl1[1] * (1 - hsl1[2]);
  }
  if (hsl2[2] <= .5) {
    sl2 = hsl2[1] * hsl2[2];
  } else {
    sl2 = hsl2[1] * (1 - hsl2[2]);
  }
  var h1 = hsl1[0] / 360;
  var h2 = hsl2[0] / 360;
  var dh = (h1 - h2) * 2 * Math.PI;
  return (hsl1[2] - hsl2[2]) * (hsl1[2] - hsl2[2]) + sl1 * sl1 + sl2 * sl2 - 2 * sl1 * sl2 * Math.cos(dh);
};
goog.color.blend = function(rgb1, rgb2, factor) {
  factor = goog.math.clamp(factor, 0, 1);
  return [Math.round(factor * rgb1[0] + (1 - factor) * rgb2[0]), Math.round(factor * rgb1[1] + (1 - factor) * rgb2[1]), Math.round(factor * rgb1[2] + (1 - factor) * rgb2[2])];
};
goog.color.darken = function(rgb, factor) {
  var black = [0, 0, 0];
  return goog.color.blend(black, rgb, factor);
};
goog.color.lighten = function(rgb, factor) {
  var white = [255, 255, 255];
  return goog.color.blend(white, rgb, factor);
};
goog.color.highContrast = function(prime, suggestions) {
  var suggestionsWithDiff = [];
  for (var i = 0;i < suggestions.length;i++) {
    suggestionsWithDiff.push({color:suggestions[i], diff:goog.color.yiqBrightnessDiff_(suggestions[i], prime) + goog.color.colorDiff_(suggestions[i], prime)});
  }
  suggestionsWithDiff.sort(function(a, b) {
    return b.diff - a.diff;
  });
  return suggestionsWithDiff[0].color;
};
goog.color.yiqBrightness_ = function(rgb) {
  return Math.round((rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1E3);
};
goog.color.yiqBrightnessDiff_ = function(rgb1, rgb2) {
  return Math.abs(goog.color.yiqBrightness_(rgb1) - goog.color.yiqBrightness_(rgb2));
};
goog.color.colorDiff_ = function(rgb1, rgb2) {
  return Math.abs(rgb1[0] - rgb2[0]) + Math.abs(rgb1[1] - rgb2[1]) + Math.abs(rgb1[2] - rgb2[2]);
};
goog.provide("goog.style.bidi");
goog.require("goog.dom");
goog.require("goog.style");
goog.require("goog.userAgent");
goog.style.bidi.getScrollLeft = function(element) {
  var isRtl = goog.style.isRightToLeft(element);
  if (isRtl && goog.userAgent.GECKO) {
    return -element.scrollLeft;
  } else {
    if (isRtl && !(goog.userAgent.IE && goog.userAgent.isVersionOrHigher("8"))) {
      var overflowX = goog.style.getComputedOverflowX(element);
      if (overflowX == "visible") {
        return element.scrollLeft;
      } else {
        return element.scrollWidth - element.clientWidth - element.scrollLeft;
      }
    }
  }
  return element.scrollLeft;
};
goog.style.bidi.getOffsetStart = function(element) {
  element = (element);
  var offsetLeftForReal = element.offsetLeft;
  var bestParent = element.offsetParent;
  if (!bestParent && goog.style.getComputedPosition(element) == "fixed") {
    bestParent = goog.dom.getOwnerDocument(element).documentElement;
  }
  if (!bestParent) {
    return offsetLeftForReal;
  }
  if (goog.userAgent.GECKO) {
    var borderWidths = goog.style.getBorderBox(bestParent);
    offsetLeftForReal += borderWidths.left;
  } else {
    if (goog.userAgent.isDocumentModeOrHigher(8) && !goog.userAgent.isDocumentModeOrHigher(9)) {
      var borderWidths = goog.style.getBorderBox(bestParent);
      offsetLeftForReal -= borderWidths.left;
    }
  }
  if (goog.style.isRightToLeft(bestParent)) {
    var elementRightOffset = offsetLeftForReal + element.offsetWidth;
    return bestParent.clientWidth - elementRightOffset;
  }
  return offsetLeftForReal;
};
goog.style.bidi.setScrollOffset = function(element, offsetStart) {
  offsetStart = Math.max(offsetStart, 0);
  if (!goog.style.isRightToLeft(element)) {
    element.scrollLeft = offsetStart;
  } else {
    if (goog.userAgent.GECKO) {
      element.scrollLeft = -offsetStart;
    } else {
      if (!(goog.userAgent.IE && goog.userAgent.isVersionOrHigher("8"))) {
        element.scrollLeft = element.scrollWidth - offsetStart - element.clientWidth;
      } else {
        element.scrollLeft = offsetStart;
      }
    }
  }
};
goog.style.bidi.setPosition = function(elem, left, top, isRtl) {
  if (!goog.isNull(top)) {
    elem.style.top = top + "px";
  }
  if (isRtl) {
    elem.style.right = left + "px";
    elem.style.left = "";
  } else {
    elem.style.left = left + "px";
    elem.style.right = "";
  }
};
goog.provide("goog.fx.dom");
goog.provide("goog.fx.dom.BgColorTransform");
goog.provide("goog.fx.dom.ColorTransform");
goog.provide("goog.fx.dom.Fade");
goog.provide("goog.fx.dom.FadeIn");
goog.provide("goog.fx.dom.FadeInAndShow");
goog.provide("goog.fx.dom.FadeOut");
goog.provide("goog.fx.dom.FadeOutAndHide");
goog.provide("goog.fx.dom.PredefinedEffect");
goog.provide("goog.fx.dom.Resize");
goog.provide("goog.fx.dom.ResizeHeight");
goog.provide("goog.fx.dom.ResizeWidth");
goog.provide("goog.fx.dom.Scroll");
goog.provide("goog.fx.dom.Slide");
goog.provide("goog.fx.dom.SlideFrom");
goog.provide("goog.fx.dom.Swipe");
goog.require("goog.color");
goog.require("goog.events");
goog.require("goog.fx.Animation");
goog.require("goog.fx.Transition");
goog.require("goog.style");
goog.require("goog.style.bidi");
goog.fx.dom.PredefinedEffect = function(element, start, end, time, opt_acc) {
  goog.fx.Animation.call(this, start, end, time, opt_acc);
  this.element = element;
  this.rightToLeft_;
};
goog.inherits(goog.fx.dom.PredefinedEffect, goog.fx.Animation);
goog.fx.dom.PredefinedEffect.prototype.updateStyle = goog.nullFunction;
goog.fx.dom.PredefinedEffect.prototype.isRightToLeft = function() {
  if (!goog.isDef(this.rightToLeft_)) {
    this.rightToLeft_ = goog.style.isRightToLeft(this.element);
  }
  return this.rightToLeft_;
};
goog.fx.dom.PredefinedEffect.prototype.onAnimate = function() {
  this.updateStyle();
  goog.fx.dom.PredefinedEffect.superClass_.onAnimate.call(this);
};
goog.fx.dom.PredefinedEffect.prototype.onEnd = function() {
  this.updateStyle();
  goog.fx.dom.PredefinedEffect.superClass_.onEnd.call(this);
};
goog.fx.dom.PredefinedEffect.prototype.onBegin = function() {
  this.updateStyle();
  goog.fx.dom.PredefinedEffect.superClass_.onBegin.call(this);
};
goog.fx.dom.Slide = function(element, start, end, time, opt_acc) {
  if (start.length != 2 || end.length != 2) {
    throw Error("Start and end points must be 2D");
  }
  goog.fx.dom.PredefinedEffect.apply(this, arguments);
};
goog.inherits(goog.fx.dom.Slide, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Slide.prototype.updateStyle = function() {
  var pos = this.isRightPositioningForRtlEnabled() && this.isRightToLeft() ? "right" : "left";
  this.element.style[pos] = Math.round(this.coords[0]) + "px";
  this.element.style.top = Math.round(this.coords[1]) + "px";
};
goog.fx.dom.SlideFrom = function(element, end, time, opt_acc) {
  this.startPoint;
  var offsetLeft = this.isRightPositioningForRtlEnabled() ? goog.style.bidi.getOffsetStart(element) : (element).offsetLeft;
  var start = [offsetLeft, (element).offsetTop];
  goog.fx.dom.Slide.call(this, element, start, end, time, opt_acc);
};
goog.inherits(goog.fx.dom.SlideFrom, goog.fx.dom.Slide);
goog.fx.dom.SlideFrom.prototype.onBegin = function() {
  var offsetLeft = this.isRightPositioningForRtlEnabled() ? goog.style.bidi.getOffsetStart(this.element) : this.element.offsetLeft;
  this.startPoint = [offsetLeft, (this.element).offsetTop];
  goog.fx.dom.SlideFrom.superClass_.onBegin.call(this);
};
goog.fx.dom.Swipe = function(element, start, end, time, opt_acc) {
  if (start.length != 2 || end.length != 2) {
    throw Error("Start and end points must be 2D");
  }
  goog.fx.dom.PredefinedEffect.apply(this, arguments);
  this.maxWidth_ = Math.max(this.endPoint[0], this.startPoint[0]);
  this.maxHeight_ = Math.max(this.endPoint[1], this.startPoint[1]);
};
goog.inherits(goog.fx.dom.Swipe, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Swipe.prototype.updateStyle = function() {
  var x = this.coords[0];
  var y = this.coords[1];
  this.clip_(Math.round(x), Math.round(y), this.maxWidth_, this.maxHeight_);
  this.element.style.width = Math.round(x) + "px";
  var marginX = this.isRightPositioningForRtlEnabled() && this.isRightToLeft() ? "marginRight" : "marginLeft";
  this.element.style[marginX] = Math.round(x) - this.maxWidth_ + "px";
  this.element.style.marginTop = Math.round(y) - this.maxHeight_ + "px";
};
goog.fx.dom.Swipe.prototype.clip_ = function(x, y, w, h) {
  this.element.style.clip = "rect(" + (h - y) + "px " + w + "px " + h + "px " + (w - x) + "px)";
};
goog.fx.dom.Scroll = function(element, start, end, time, opt_acc) {
  if (start.length != 2 || end.length != 2) {
    throw Error("Start and end points must be 2D");
  }
  goog.fx.dom.PredefinedEffect.apply(this, arguments);
};
goog.inherits(goog.fx.dom.Scroll, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Scroll.prototype.updateStyle = function() {
  if (this.isRightPositioningForRtlEnabled()) {
    goog.style.bidi.setScrollOffset(this.element, Math.round(this.coords[0]));
  } else {
    this.element.scrollLeft = Math.round(this.coords[0]);
  }
  this.element.scrollTop = Math.round(this.coords[1]);
};
goog.fx.dom.Resize = function(element, start, end, time, opt_acc) {
  if (start.length != 2 || end.length != 2) {
    throw Error("Start and end points must be 2D");
  }
  goog.fx.dom.PredefinedEffect.apply(this, arguments);
};
goog.inherits(goog.fx.dom.Resize, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Resize.prototype.updateStyle = function() {
  this.element.style.width = Math.round(this.coords[0]) + "px";
  this.element.style.height = Math.round(this.coords[1]) + "px";
};
goog.fx.dom.ResizeWidth = function(element, start, end, time, opt_acc) {
  goog.fx.dom.PredefinedEffect.call(this, element, [start], [end], time, opt_acc);
};
goog.inherits(goog.fx.dom.ResizeWidth, goog.fx.dom.PredefinedEffect);
goog.fx.dom.ResizeWidth.prototype.updateStyle = function() {
  this.element.style.width = Math.round(this.coords[0]) + "px";
};
goog.fx.dom.ResizeHeight = function(element, start, end, time, opt_acc) {
  goog.fx.dom.PredefinedEffect.call(this, element, [start], [end], time, opt_acc);
};
goog.inherits(goog.fx.dom.ResizeHeight, goog.fx.dom.PredefinedEffect);
goog.fx.dom.ResizeHeight.prototype.updateStyle = function() {
  this.element.style.height = Math.round(this.coords[0]) + "px";
};
goog.fx.dom.Fade = function(element, start, end, time, opt_acc) {
  if (goog.isNumber(start)) {
    start = [start];
  }
  if (goog.isNumber(end)) {
    end = [end];
  }
  goog.fx.dom.Fade.base(this, "constructor", element, start, end, time, opt_acc);
  if (start.length != 1 || end.length != 1) {
    throw Error("Start and end points must be 1D");
  }
  this.lastOpacityUpdate_ = goog.fx.dom.Fade.OPACITY_UNSET_;
};
goog.inherits(goog.fx.dom.Fade, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Fade.TOLERANCE_ = 1 / 1024;
goog.fx.dom.Fade.OPACITY_UNSET_ = -1;
goog.fx.dom.Fade.prototype.updateStyle = function() {
  var opacity = this.coords[0];
  var delta = Math.abs(opacity - this.lastOpacityUpdate_);
  if (delta >= goog.fx.dom.Fade.TOLERANCE_) {
    goog.style.setOpacity(this.element, opacity);
    this.lastOpacityUpdate_ = opacity;
  }
};
goog.fx.dom.Fade.prototype.onBegin = function() {
  this.lastOpacityUpdate_ = goog.fx.dom.Fade.OPACITY_UNSET_;
  goog.fx.dom.Fade.base(this, "onBegin");
};
goog.fx.dom.Fade.prototype.onEnd = function() {
  this.lastOpacityUpdate_ = goog.fx.dom.Fade.OPACITY_UNSET_;
  goog.fx.dom.Fade.base(this, "onEnd");
};
goog.fx.dom.Fade.prototype.show = function() {
  this.element.style.display = "";
};
goog.fx.dom.Fade.prototype.hide = function() {
  this.element.style.display = "none";
};
goog.fx.dom.FadeOut = function(element, time, opt_acc) {
  goog.fx.dom.Fade.call(this, element, 1, 0, time, opt_acc);
};
goog.inherits(goog.fx.dom.FadeOut, goog.fx.dom.Fade);
goog.fx.dom.FadeIn = function(element, time, opt_acc) {
  goog.fx.dom.Fade.call(this, element, 0, 1, time, opt_acc);
};
goog.inherits(goog.fx.dom.FadeIn, goog.fx.dom.Fade);
goog.fx.dom.FadeOutAndHide = function(element, time, opt_acc) {
  goog.fx.dom.Fade.call(this, element, 1, 0, time, opt_acc);
};
goog.inherits(goog.fx.dom.FadeOutAndHide, goog.fx.dom.Fade);
goog.fx.dom.FadeOutAndHide.prototype.onBegin = function() {
  this.show();
  goog.fx.dom.FadeOutAndHide.superClass_.onBegin.call(this);
};
goog.fx.dom.FadeOutAndHide.prototype.onEnd = function() {
  this.hide();
  goog.fx.dom.FadeOutAndHide.superClass_.onEnd.call(this);
};
goog.fx.dom.FadeInAndShow = function(element, time, opt_acc) {
  goog.fx.dom.Fade.call(this, element, 0, 1, time, opt_acc);
};
goog.inherits(goog.fx.dom.FadeInAndShow, goog.fx.dom.Fade);
goog.fx.dom.FadeInAndShow.prototype.onBegin = function() {
  this.show();
  goog.fx.dom.FadeInAndShow.superClass_.onBegin.call(this);
};
goog.fx.dom.BgColorTransform = function(element, start, end, time, opt_acc) {
  if (start.length != 3 || end.length != 3) {
    throw Error("Start and end points must be 3D");
  }
  goog.fx.dom.PredefinedEffect.apply(this, arguments);
};
goog.inherits(goog.fx.dom.BgColorTransform, goog.fx.dom.PredefinedEffect);
goog.fx.dom.BgColorTransform.prototype.setColor = function() {
  var coordsAsInts = [];
  for (var i = 0;i < this.coords.length;i++) {
    coordsAsInts[i] = Math.round(this.coords[i]);
  }
  var color = "rgb(" + coordsAsInts.join(",") + ")";
  this.element.style.backgroundColor = color;
};
goog.fx.dom.BgColorTransform.prototype.updateStyle = function() {
  this.setColor();
};
goog.fx.dom.bgColorFadeIn = function(element, start, time, opt_eventHandler) {
  var initialBgColor = element.style.backgroundColor || "";
  var computedBgColor = goog.style.getBackgroundColor(element);
  var end;
  if (computedBgColor && computedBgColor != "transparent" && computedBgColor != "rgba(0, 0, 0, 0)") {
    end = goog.color.hexToRgb(goog.color.parse(computedBgColor).hex);
  } else {
    end = [255, 255, 255];
  }
  var anim = new goog.fx.dom.BgColorTransform(element, start, end, time);
  function setBgColor() {
    element.style.backgroundColor = initialBgColor;
  }
  if (opt_eventHandler) {
    opt_eventHandler.listen(anim, goog.fx.Transition.EventType.END, setBgColor);
  } else {
    goog.events.listen(anim, goog.fx.Transition.EventType.END, setBgColor);
  }
  anim.play();
};
goog.fx.dom.ColorTransform = function(element, start, end, time, opt_acc) {
  if (start.length != 3 || end.length != 3) {
    throw Error("Start and end points must be 3D");
  }
  goog.fx.dom.PredefinedEffect.apply(this, arguments);
};
goog.inherits(goog.fx.dom.ColorTransform, goog.fx.dom.PredefinedEffect);
goog.fx.dom.ColorTransform.prototype.updateStyle = function() {
  var coordsAsInts = [];
  for (var i = 0;i < this.coords.length;i++) {
    coordsAsInts[i] = Math.round(this.coords[i]);
  }
  var color = "rgb(" + coordsAsInts.join(",") + ")";
  this.element.style.color = color;
};
goog.provide("enfocus.effects");
goog.require("cljs.core");
goog.require("goog.dom.query");
goog.require("enfocus.core");
goog.require("goog.fx");
goog.require("goog.fx.dom");
goog.require("goog.events");
goog.require("goog.style");
enfocus.effects.chainable_effect = function enfocus$effects$chainable_effect(func, callback) {
  var trans = function(pnodes, chain) {
    var pnod_col = enfocus.core.nodes__GT_coll.call(null, pnodes);
    var cnt = cljs.core.atom.call(null, cljs.core.count.call(null, pnod_col));
    var partial_cback = function(pnod_col, cnt) {
      return function() {
        cljs.core.swap_BANG_.call(null, cnt, cljs.core.dec);
        if (cljs.core._EQ_.call(null, 0, cljs.core.deref.call(null, cnt))) {
          if (cljs.core.truth_(callback)) {
            enfocus.core.apply_transform.call(null, callback, pnodes);
          } else {
          }
          if (cljs.core.truth_(chain)) {
            return enfocus.core.apply_transform.call(null, chain, pnodes);
          } else {
            return null;
          }
        } else {
          return null;
        }
      };
    }(pnod_col, cnt);
    var seq__14788 = cljs.core.seq.call(null, pnod_col);
    var chunk__14789 = null;
    var count__14790 = 0;
    var i__14791 = 0;
    while (true) {
      if (i__14791 < count__14790) {
        var pnod = cljs.core._nth.call(null, chunk__14789, i__14791);
        func.call(null, pnod, partial_cback);
        var G__14795 = seq__14788;
        var G__14796 = chunk__14789;
        var G__14797 = count__14790;
        var G__14798 = i__14791 + 1;
        seq__14788 = G__14795;
        chunk__14789 = G__14796;
        count__14790 = G__14797;
        i__14791 = G__14798;
        continue;
      } else {
        var temp__4657__auto__ = cljs.core.seq.call(null, seq__14788);
        if (temp__4657__auto__) {
          var seq__14788__$1 = temp__4657__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14788__$1)) {
            var c__6956__auto__ = cljs.core.chunk_first.call(null, seq__14788__$1);
            var G__14799 = cljs.core.chunk_rest.call(null, seq__14788__$1);
            var G__14800 = c__6956__auto__;
            var G__14801 = cljs.core.count.call(null, c__6956__auto__);
            var G__14802 = 0;
            seq__14788 = G__14799;
            chunk__14789 = G__14800;
            count__14790 = G__14801;
            i__14791 = G__14802;
            continue;
          } else {
            var pnod = cljs.core.first.call(null, seq__14788__$1);
            func.call(null, pnod, partial_cback);
            var G__14803 = cljs.core.next.call(null, seq__14788__$1);
            var G__14804 = null;
            var G__14805 = 0;
            var G__14806 = 0;
            seq__14788 = G__14803;
            chunk__14789 = G__14804;
            count__14790 = G__14805;
            i__14791 = G__14806;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  if (typeof enfocus.effects.t_enfocus$effects14792 !== "undefined") {
  } else {
    enfocus.effects.t_enfocus$effects14792 = function(chainable_effect, func, callback, trans, meta14793) {
      this.chainable_effect = chainable_effect;
      this.func = func;
      this.callback = callback;
      this.trans = trans;
      this.meta14793 = meta14793;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    enfocus.effects.t_enfocus$effects14792.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(trans) {
      return function(_14794, meta14793__$1) {
        var self__ = this;
        var _14794__$1 = this;
        return new enfocus.effects.t_enfocus$effects14792(self__.chainable_effect, self__.func, self__.callback, self__.trans, meta14793__$1);
      };
    }(trans);
    enfocus.effects.t_enfocus$effects14792.prototype.cljs$core$IMeta$_meta$arity$1 = function(trans) {
      return function(_14794) {
        var self__ = this;
        var _14794__$1 = this;
        return self__.meta14793;
      };
    }(trans);
    enfocus.effects.t_enfocus$effects14792.prototype.enfocus$core$ITransform$ = true;
    enfocus.effects.t_enfocus$effects14792.prototype.enfocus$core$ITransform$apply_transform$arity$2 = function(trans) {
      return function(_, nodes) {
        var self__ = this;
        var ___$1 = this;
        return self__.trans.call(null, nodes, null);
      };
    }(trans);
    enfocus.effects.t_enfocus$effects14792.prototype.enfocus$core$ITransform$apply_transform$arity$3 = function(trans) {
      return function(_, nodes, chain) {
        var self__ = this;
        var ___$1 = this;
        return self__.trans.call(null, nodes, chain);
      };
    }(trans);
    enfocus.effects.t_enfocus$effects14792.getBasis = function(trans) {
      return function() {
        return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "chainable-effect", "chainable-effect", -2085024423, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), cljs.core.list(new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, 
        "func", "func", 1401825487, null), new cljs.core.Symbol(null, "callback", "callback", 935395299, null)], null))), new cljs.core.Keyword(null, "doc", "doc", 1913296891), "wrapper function for effects, maps the effect to all nodes returned by the\n   selector and provides chaining and callback functionality"], null)), new cljs.core.Symbol(null, "func", "func", 1401825487, null), new cljs.core.Symbol(null, "callback", "callback", 935395299, null), new cljs.core.Symbol(null, "trans", "trans", 
        322027676, null), new cljs.core.Symbol(null, "meta14793", "meta14793", 636813912, null)], null);
      };
    }(trans);
    enfocus.effects.t_enfocus$effects14792.cljs$lang$type = true;
    enfocus.effects.t_enfocus$effects14792.cljs$lang$ctorStr = "enfocus.effects/t_enfocus$effects14792";
    enfocus.effects.t_enfocus$effects14792.cljs$lang$ctorPrWriter = function(trans) {
      return function(this__6751__auto__, writer__6752__auto__, opt__6753__auto__) {
        return cljs.core._write.call(null, writer__6752__auto__, "enfocus.effects/t_enfocus$effects14792");
      };
    }(trans);
    enfocus.effects.__GT_t_enfocus$effects14792 = function(trans) {
      return function enfocus$effects$chainable_effect_$___GT_t_enfocus$effects14792(chainable_effect__$1, func__$1, callback__$1, trans__$1, meta14793) {
        return new enfocus.effects.t_enfocus$effects14792(chainable_effect__$1, func__$1, callback__$1, trans__$1, meta14793);
      };
    }(trans);
  }
  return new enfocus.effects.t_enfocus$effects14792(enfocus$effects$chainable_effect, func, callback, trans, cljs.core.PersistentArrayMap.EMPTY);
};
enfocus.effects.chain = function enfocus$effects$chain(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___14809 = arguments.length;
  var i__7212__auto___14810 = 0;
  while (true) {
    if (i__7212__auto___14810 < len__7211__auto___14809) {
      args__7218__auto__.push(arguments[i__7212__auto___14810]);
      var G__14811 = i__7212__auto___14810 + 1;
      i__7212__auto___14810 = G__14811;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 1 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(1), 0) : null;
  return enfocus.effects.chain.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__7219__auto__);
};
enfocus.effects.chain.cljs$core$IFn$_invoke$arity$variadic = function(func, chains) {
  if (cljs.core.empty_QMARK_.call(null, chains)) {
    return function(pnod) {
      return enfocus.core.apply_transform.call(null, func, pnod);
    };
  } else {
    return function(pnod) {
      return enfocus.core.apply_transform.call(null, func, pnod, cljs.core.apply.call(null, enfocus.effects.chain, chains));
    };
  }
};
enfocus.effects.chain.cljs$lang$maxFixedArity = 1;
enfocus.effects.chain.cljs$lang$applyTo = function(seq14807) {
  var G__14808 = cljs.core.first.call(null, seq14807);
  var seq14807__$1 = cljs.core.next.call(null, seq14807);
  return enfocus.effects.chain.cljs$core$IFn$_invoke$arity$variadic(G__14808, seq14807__$1);
};
enfocus.effects.fade_out = function enfocus$effects$fade_out(var_args) {
  var args14812 = [];
  var len__7211__auto___14815 = arguments.length;
  var i__7212__auto___14816 = 0;
  while (true) {
    if (i__7212__auto___14816 < len__7211__auto___14815) {
      args14812.push(arguments[i__7212__auto___14816]);
      var G__14817 = i__7212__auto___14816 + 1;
      i__7212__auto___14816 = G__14817;
      continue;
    } else {
    }
    break;
  }
  var G__14814 = args14812.length;
  switch(G__14814) {
    case 1:
      return enfocus.effects.fade_out.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.effects.fade_out.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return enfocus.effects.fade_out.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args14812.length)].join(""));;
  }
};
enfocus.effects.fade_out.cljs$core$IFn$_invoke$arity$1 = function(ttime) {
  return enfocus.effects.fade_out.call(null, ttime, null, null);
};
enfocus.effects.fade_out.cljs$core$IFn$_invoke$arity$2 = function(ttime, callback) {
  return enfocus.effects.fade_out.call(null, ttime, callback, null);
};
enfocus.effects.fade_out.cljs$core$IFn$_invoke$arity$3 = function(ttime, callback, accel) {
  return enfocus.effects.chainable_effect.call(null, function(pnod, pcallback) {
    var anim = new goog.fx.dom.FadeOut(pnod, ttime, accel);
    if (cljs.core.truth_(pcallback)) {
      goog.events.listen(anim, goog.fx.Animation.EventType.END, pcallback);
    } else {
    }
    return anim.play();
  }, callback);
};
enfocus.effects.fade_out.cljs$lang$maxFixedArity = 3;
enfocus.effects.fade_in = function enfocus$effects$fade_in(var_args) {
  var args14819 = [];
  var len__7211__auto___14822 = arguments.length;
  var i__7212__auto___14823 = 0;
  while (true) {
    if (i__7212__auto___14823 < len__7211__auto___14822) {
      args14819.push(arguments[i__7212__auto___14823]);
      var G__14824 = i__7212__auto___14823 + 1;
      i__7212__auto___14823 = G__14824;
      continue;
    } else {
    }
    break;
  }
  var G__14821 = args14819.length;
  switch(G__14821) {
    case 1:
      return enfocus.effects.fade_in.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.effects.fade_in.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return enfocus.effects.fade_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args14819.length)].join(""));;
  }
};
enfocus.effects.fade_in.cljs$core$IFn$_invoke$arity$1 = function(ttime) {
  return enfocus.effects.fade_in.call(null, ttime, null, null);
};
enfocus.effects.fade_in.cljs$core$IFn$_invoke$arity$2 = function(ttime, callback) {
  return enfocus.effects.fade_in.call(null, ttime, callback, null);
};
enfocus.effects.fade_in.cljs$core$IFn$_invoke$arity$3 = function(ttime, callback, accel) {
  return enfocus.effects.chainable_effect.call(null, function(pnod, pcallback) {
    var anim = new goog.fx.dom.FadeIn(pnod, ttime, accel);
    if (cljs.core.truth_(pcallback)) {
      goog.events.listen(anim, goog.fx.Animation.EventType.END, pcallback);
    } else {
    }
    return anim.play();
  }, callback);
};
enfocus.effects.fade_in.cljs$lang$maxFixedArity = 3;
enfocus.effects.resize = function enfocus$effects$resize(var_args) {
  var args14826 = [];
  var len__7211__auto___14829 = arguments.length;
  var i__7212__auto___14830 = 0;
  while (true) {
    if (i__7212__auto___14830 < len__7211__auto___14829) {
      args14826.push(arguments[i__7212__auto___14830]);
      var G__14831 = i__7212__auto___14830 + 1;
      i__7212__auto___14830 = G__14831;
      continue;
    } else {
    }
    break;
  }
  var G__14828 = args14826.length;
  switch(G__14828) {
    case 2:
      return enfocus.effects.resize.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return enfocus.effects.resize.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return enfocus.effects.resize.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return enfocus.effects.resize.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args14826.length)].join(""));;
  }
};
enfocus.effects.resize.cljs$core$IFn$_invoke$arity$2 = function(wth, hgt) {
  return enfocus.effects.resize.call(null, wth, hgt, 0, null, null);
};
enfocus.effects.resize.cljs$core$IFn$_invoke$arity$3 = function(wth, hgt, ttime) {
  return enfocus.effects.resize.call(null, wth, hgt, ttime, null, null);
};
enfocus.effects.resize.cljs$core$IFn$_invoke$arity$4 = function(wth, hgt, ttime, callback) {
  return enfocus.effects.resize.call(null, wth, hgt, ttime, callback, null);
};
enfocus.effects.resize.cljs$core$IFn$_invoke$arity$5 = function(wth, hgt, ttime, callback, accel) {
  return enfocus.effects.chainable_effect.call(null, function(pnod, pcallback) {
    var csize = goog.style.getContentBoxSize(pnod);
    var start = [csize.width, csize.height];
    var wth__$1 = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "curwidth", "curwidth", 1831107733), wth) ? csize.width : wth;
    var hgt__$1 = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "curheight", "curheight", -119931765), hgt) ? csize.height : hgt;
    var end = [wth__$1, hgt__$1];
    var anim = new goog.fx.dom.Resize(pnod, start, end, ttime, accel);
    if (cljs.core.truth_(pcallback)) {
      goog.events.listen(anim, goog.fx.Animation.EventType.END, pcallback);
    } else {
    }
    return anim.play();
  }, callback);
};
enfocus.effects.resize.cljs$lang$maxFixedArity = 5;
enfocus.effects.move = function enfocus$effects$move(var_args) {
  var args14833 = [];
  var len__7211__auto___14836 = arguments.length;
  var i__7212__auto___14837 = 0;
  while (true) {
    if (i__7212__auto___14837 < len__7211__auto___14836) {
      args14833.push(arguments[i__7212__auto___14837]);
      var G__14838 = i__7212__auto___14837 + 1;
      i__7212__auto___14837 = G__14838;
      continue;
    } else {
    }
    break;
  }
  var G__14835 = args14833.length;
  switch(G__14835) {
    case 2:
      return enfocus.effects.move.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return enfocus.effects.move.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return enfocus.effects.move.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return enfocus.effects.move.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args14833.length)].join(""));;
  }
};
enfocus.effects.move.cljs$core$IFn$_invoke$arity$2 = function(xpos, ypos) {
  return enfocus.effects.move.call(null, xpos, ypos, 0, null, null);
};
enfocus.effects.move.cljs$core$IFn$_invoke$arity$3 = function(xpos, ypos, ttime) {
  return enfocus.effects.move.call(null, xpos, ypos, ttime, null, null);
};
enfocus.effects.move.cljs$core$IFn$_invoke$arity$4 = function(xpos, ypos, ttime, callback) {
  return enfocus.effects.move.call(null, xpos, ypos, ttime, callback, null);
};
enfocus.effects.move.cljs$core$IFn$_invoke$arity$5 = function(xpos, ypos, ttime, callback, accel) {
  return enfocus.effects.chainable_effect.call(null, function(pnod, pcallback) {
    var cpos = goog.style.getPosition(pnod);
    var start = [cpos.x, cpos.y];
    var xpos__$1 = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "curx", "curx", -1922579418), xpos) ? cpos.x : xpos;
    var ypos__$1 = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "cury", "cury", -230854218), ypos) ? cpos.y : ypos;
    var end = [xpos__$1, ypos__$1];
    var anim = new goog.fx.dom.Slide(pnod, start, end, ttime, accel);
    if (cljs.core.truth_(pcallback)) {
      goog.events.listen(anim, goog.fx.Animation.EventType.END, pcallback);
    } else {
    }
    return anim.play();
  }, callback);
};
enfocus.effects.move.cljs$lang$maxFixedArity = 5;
enfocus.effects.scroll = function enfocus$effects$scroll(var_args) {
  var args14840 = [];
  var len__7211__auto___14843 = arguments.length;
  var i__7212__auto___14844 = 0;
  while (true) {
    if (i__7212__auto___14844 < len__7211__auto___14843) {
      args14840.push(arguments[i__7212__auto___14844]);
      var G__14845 = i__7212__auto___14844 + 1;
      i__7212__auto___14844 = G__14845;
      continue;
    } else {
    }
    break;
  }
  var G__14842 = args14840.length;
  switch(G__14842) {
    case 2:
      return enfocus.effects.scroll.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return enfocus.effects.scroll.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return enfocus.effects.scroll.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return enfocus.effects.scroll.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args14840.length)].join(""));;
  }
};
enfocus.effects.scroll.cljs$core$IFn$_invoke$arity$2 = function(xpos, ypos) {
  return enfocus.effects.scroll.call(null, xpos, ypos, 0, null, null);
};
enfocus.effects.scroll.cljs$core$IFn$_invoke$arity$3 = function(xpos, ypos, ttime) {
  return enfocus.effects.scroll.call(null, xpos, ypos, ttime, null, null);
};
enfocus.effects.scroll.cljs$core$IFn$_invoke$arity$4 = function(xpos, ypos, ttime, callback) {
  return enfocus.effects.scroll.call(null, xpos, ypos, ttime, callback, null);
};
enfocus.effects.scroll.cljs$core$IFn$_invoke$arity$5 = function(xpos, ypos, ttime, callback, accel) {
  return enfocus.effects.chainable_effect.call(null, function(pnod, pcallback) {
    var start = [pnod.scrollLeft, pnod.scrollTop];
    var xpos__$1 = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "curx", "curx", -1922579418), xpos) ? pnod.scrollLeft : xpos;
    var ypos__$1 = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "cury", "cury", -230854218), ypos) ? pnod.scrollTop : ypos;
    var end = [xpos__$1, ypos__$1];
    var anim = new goog.fx.dom.Scroll(pnod, start, end, ttime, accel);
    if (cljs.core.truth_(pcallback)) {
      goog.events.listen(anim, goog.fx.Animation.EventType.END, pcallback);
    } else {
    }
    return anim.play();
  }, callback);
};
enfocus.effects.scroll.cljs$lang$maxFixedArity = 5;
enfocus.effects.liner = function enfocus$effects$liner(t) {
  return t;
};
enfocus.effects.ease_in_quad = function enfocus$effects$ease_in_quad(t) {
  return t * t;
};
enfocus.effects.ease_out_quad = function enfocus$effects$ease_out_quad(t) {
  return -1 * (t * (t - 2));
};
enfocus.effects.ease_in_out_quad = function enfocus$effects$ease_in_out_quad(t) {
  var nt = t * 2;
  if (nt < 1) {
    return .5 * nt * nt;
  } else {
    return -.5 * ((nt - 1) * (nt - 2) - 1);
  }
};
enfocus.effects.ease_in_cubic = function enfocus$effects$ease_in_cubic(t) {
  return t * t * t;
};
enfocus.effects.ease_out_cubic = function enfocus$effects$ease_out_cubic(t) {
  var nt = t - 1;
  return nt * nt * nt + 1;
};
enfocus.effects.ease_in_out_cubic = function enfocus$effects$ease_in_out_cubic(t) {
  var nt = t * 2;
  if (nt < 1) {
    return .5 * nt * nt * nt;
  } else {
    var mt = nt - 2;
    return .5 * (2 + mt * mt * mt);
  }
};
enfocus.effects.ease_in_quart = function enfocus$effects$ease_in_quart(t) {
  return t * t * t * t;
};
enfocus.effects.ease_out_quart = function enfocus$effects$ease_out_quart(t) {
  var nt = t - 1;
  return -1 * (nt * nt * nt * nt - 1);
};
enfocus.effects.ease_in_out_quart = function enfocus$effects$ease_in_out_quart(t) {
  var nt = t * 2;
  if (nt < 1) {
    return .5 * nt * nt * nt * nt;
  } else {
    var mt = nt - 2;
    return .5 * (2 + mt * mt * mt * mt);
  }
};
enfocus.effects.ease_in_quint = function enfocus$effects$ease_in_quint(t) {
  return t * t * t * t;
};
enfocus.effects.ease_out_quint = function enfocus$effects$ease_out_quint(t) {
  var nt = t - 1;
  return nt * nt * nt * nt + 1;
};
enfocus.effects.ease_in_out_quint = function enfocus$effects$ease_in_out_quint(t) {
  var nt = t * 2;
  if (nt < 1) {
    return .5 * nt * nt * nt * nt * nt;
  } else {
    var mt = nt - 2;
    return .5 * (2 + mt * mt * mt * mt * mt);
  }
};
enfocus.effects.sign_in = function enfocus$effects$sign_in(t) {
  return -1 * Math.cos(.5 * Math.PI * t) + 1;
};
enfocus.effects.sign_out = function enfocus$effects$sign_out(t) {
  return Math.sin(t * Math.PI * .5);
};
enfocus.effects.sign_in_out = function enfocus$effects$sign_in_out(t) {
  return -.5 * (Math.cos(Math.PI * t) - 1);
};
enfocus.effects.expo_in = function enfocus$effects$expo_in(t) {
  if (cljs.core._EQ_.call(null, t, 0)) {
    return 0;
  } else {
    return Math.pow(2, 10 * (t - 1));
  }
};
enfocus.effects.expo_out = function enfocus$effects$expo_out(t) {
  if (cljs.core._EQ_.call(null, t, 0)) {
    return 1;
  } else {
    return -1 * Math.pow(2, -10 * t) + 1;
  }
};
enfocus.effects.expo_in_out = function enfocus$effects$expo_in_out(t) {
  if (cljs.core._EQ_.call(null, t, 0)) {
    return 0;
  } else {
    if (cljs.core._EQ_.call(null, t, 1)) {
      return 1;
    } else {
      if (t < 1) {
        return .5 * Math.pow(2, 10 * (t - 1));
      } else {
        return .5 * (-1 * Math.pow(2, -10 * (t - 1)) + 2);
      }
    }
  }
};
enfocus.effects.circular_in = function enfocus$effects$circular_in(t) {
  return -1 * (Math.sqrt(1 - Math.pow(t, 2)) - 1);
};
enfocus.effects.circular_out = function enfocus$effects$circular_out(t) {
  var nt = t - 1;
  return Math.sqrt(1 - Math.pow(nt, 2));
};
enfocus.effects.circular_in_out = function enfocus$effects$circular_in_out(t) {
  var nt = t * 2;
  if (t < 1) {
    return -.5 * (Math.sqrt(1 - Math.pow(nt, 2)) - 1);
  } else {
    var mt = nt - 2;
    return -.5 * (Math.sqrt(1 - Math.pow(nt, 2)) + 1);
  }
};
goog.provide("enfocus.events");
goog.require("cljs.core");
goog.require("goog.events");
goog.require("goog.dom");
goog.require("enfocus.core");
goog.require("goog.object");
enfocus.events.view_port_monitor = cljs.core.atom.call(null, null);
enfocus.events.get_vp_monitor = function enfocus$events$get_vp_monitor() {
  if (cljs.core.truth_(cljs.core.deref.call(null, enfocus.events.view_port_monitor))) {
    return cljs.core.deref.call(null, enfocus.events.view_port_monitor);
  } else {
    cljs.core.swap_BANG_.call(null, enfocus.events.view_port_monitor, function() {
      return new goog.dom.ViewportSizeMonitor;
    });
    return cljs.core.deref.call(null, enfocus.events.view_port_monitor);
  }
};
enfocus.events.gen_enter_leave_wrapper = function enfocus$events$gen_enter_leave_wrapper(event) {
  var obj = new Object;
  obj.listen = function(obj) {
    return function(elm, func, opt_cap, opt_scope, opt_handler) {
      var callback = enfocus.events.mouse_enter_leave.call(null, func);
      callback.listen = func;
      callback.scope = opt_scope;
      if (cljs.core.truth_(opt_handler)) {
        return opt_handler.listen(elm, cljs.core.name.call(null, event), callback);
      } else {
        return goog.events.listen(elm, cljs.core.name.call(null, event), callback);
      }
    };
  }(obj);
  obj.unlisten = function(obj) {
    return function(elm, func, opt_cap, opt_scope, opt_handler) {
      var listeners = goog.events.getListeners(elm, cljs.core.name.call(null, event), false);
      var seq__14601_14605 = cljs.core.seq.call(null, listeners);
      var chunk__14602_14606 = null;
      var count__14603_14607 = 0;
      var i__14604_14608 = 0;
      while (true) {
        if (i__14604_14608 < count__14603_14607) {
          var obj_14609__$1 = cljs.core._nth.call(null, chunk__14602_14606, i__14604_14608);
          var listener_14610 = obj_14609__$1.listener;
          if ((cljs.core.not.call(null, func) || cljs.core._EQ_.call(null, listener_14610.listen, func)) && (cljs.core.not.call(null, opt_scope) || cljs.core._EQ_.call(null, listener_14610.scope, opt_scope))) {
            if (cljs.core.truth_(opt_handler)) {
              opt_handler.unlisten(elm, cljs.core.name.call(null, event), listener_14610);
            } else {
              goog.events.unlisten(elm, cljs.core.name.call(null, event), listener_14610);
            }
          } else {
          }
          var G__14611 = seq__14601_14605;
          var G__14612 = chunk__14602_14606;
          var G__14613 = count__14603_14607;
          var G__14614 = i__14604_14608 + 1;
          seq__14601_14605 = G__14611;
          chunk__14602_14606 = G__14612;
          count__14603_14607 = G__14613;
          i__14604_14608 = G__14614;
          continue;
        } else {
          var temp__4657__auto___14615 = cljs.core.seq.call(null, seq__14601_14605);
          if (temp__4657__auto___14615) {
            var seq__14601_14616__$1 = temp__4657__auto___14615;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__14601_14616__$1)) {
              var c__6956__auto___14617 = cljs.core.chunk_first.call(null, seq__14601_14616__$1);
              var G__14618 = cljs.core.chunk_rest.call(null, seq__14601_14616__$1);
              var G__14619 = c__6956__auto___14617;
              var G__14620 = cljs.core.count.call(null, c__6956__auto___14617);
              var G__14621 = 0;
              seq__14601_14605 = G__14618;
              chunk__14602_14606 = G__14619;
              count__14603_14607 = G__14620;
              i__14604_14608 = G__14621;
              continue;
            } else {
              var obj_14622__$1 = cljs.core.first.call(null, seq__14601_14616__$1);
              var listener_14623 = obj_14622__$1.listener;
              if ((cljs.core.not.call(null, func) || cljs.core._EQ_.call(null, listener_14623.listen, func)) && (cljs.core.not.call(null, opt_scope) || cljs.core._EQ_.call(null, listener_14623.scope, opt_scope))) {
                if (cljs.core.truth_(opt_handler)) {
                  opt_handler.unlisten(elm, cljs.core.name.call(null, event), listener_14623);
                } else {
                  goog.events.unlisten(elm, cljs.core.name.call(null, event), listener_14623);
                }
              } else {
              }
              var G__14624 = cljs.core.next.call(null, seq__14601_14616__$1);
              var G__14625 = null;
              var G__14626 = 0;
              var G__14627 = 0;
              seq__14601_14605 = G__14624;
              chunk__14602_14606 = G__14625;
              count__14603_14607 = G__14626;
              i__14604_14608 = G__14627;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return listeners;
    };
  }(obj);
  return obj;
};
enfocus.events.wrapper_register = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "mouseenter", "mouseenter", -1792413560), enfocus.events.gen_enter_leave_wrapper.call(null, new cljs.core.Keyword(null, "mouseover", "mouseover", -484272303)), new cljs.core.Keyword(null, "mouseleave", "mouseleave", 531566580), enfocus.events.gen_enter_leave_wrapper.call(null, new cljs.core.Keyword(null, "mouseout", "mouseout", 2049446890))], null);
enfocus.events.listen = function enfocus$events$listen(event, func) {
  var wrapper = enfocus.events.wrapper_register.call(null, event);
  return function(wrapper) {
    return function(pnod) {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "resize", "resize", 297367086), event) && window === pnod) {
        return goog.events.listen(enfocus.events.get_vp_monitor.call(null), "resize", func);
      } else {
        if (wrapper == null) {
          return goog.events.listen(pnod, cljs.core.name.call(null, event), func);
        } else {
          return goog.events.listenWithWrapper(pnod, wrapper, func);
        }
      }
    };
  }(wrapper);
};
enfocus.events.remove_listeners = function enfocus$events$remove_listeners(var_args) {
  var args__7218__auto__ = [];
  var len__7211__auto___14634 = arguments.length;
  var i__7212__auto___14635 = 0;
  while (true) {
    if (i__7212__auto___14635 < len__7211__auto___14634) {
      args__7218__auto__.push(arguments[i__7212__auto___14635]);
      var G__14636 = i__7212__auto___14635 + 1;
      i__7212__auto___14635 = G__14636;
      continue;
    } else {
    }
    break;
  }
  var argseq__7219__auto__ = 0 < args__7218__auto__.length ? new cljs.core.IndexedSeq(args__7218__auto__.slice(0), 0) : null;
  return enfocus.events.remove_listeners.cljs$core$IFn$_invoke$arity$variadic(argseq__7219__auto__);
};
enfocus.events.remove_listeners.cljs$core$IFn$_invoke$arity$variadic = function(event_list) {
  var get_name = function(p1__14628_SHARP_) {
    return cljs.core.name.call(null, cljs.core._EQ_.call(null, p1__14628_SHARP_, new cljs.core.Keyword(null, "mouseenter", "mouseenter", -1792413560)) ? new cljs.core.Keyword(null, "mouseover", "mouseover", -484272303) : cljs.core._EQ_.call(null, p1__14628_SHARP_, new cljs.core.Keyword(null, "mouseleave", "mouseleave", 531566580)) ? new cljs.core.Keyword(null, "mouseout", "mouseout", 2049446890) : p1__14628_SHARP_);
  };
  return function(get_name) {
    return function(pnod) {
      var seq__14630 = cljs.core.seq.call(null, event_list);
      var chunk__14631 = null;
      var count__14632 = 0;
      var i__14633 = 0;
      while (true) {
        if (i__14633 < count__14632) {
          var ev = cljs.core._nth.call(null, chunk__14631, i__14633);
          goog.events.removeAll(pnod, get_name.call(null, ev));
          var G__14637 = seq__14630;
          var G__14638 = chunk__14631;
          var G__14639 = count__14632;
          var G__14640 = i__14633 + 1;
          seq__14630 = G__14637;
          chunk__14631 = G__14638;
          count__14632 = G__14639;
          i__14633 = G__14640;
          continue;
        } else {
          var temp__4657__auto__ = cljs.core.seq.call(null, seq__14630);
          if (temp__4657__auto__) {
            var seq__14630__$1 = temp__4657__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__14630__$1)) {
              var c__6956__auto__ = cljs.core.chunk_first.call(null, seq__14630__$1);
              var G__14641 = cljs.core.chunk_rest.call(null, seq__14630__$1);
              var G__14642 = c__6956__auto__;
              var G__14643 = cljs.core.count.call(null, c__6956__auto__);
              var G__14644 = 0;
              seq__14630 = G__14641;
              chunk__14631 = G__14642;
              count__14632 = G__14643;
              i__14633 = G__14644;
              continue;
            } else {
              var ev = cljs.core.first.call(null, seq__14630__$1);
              goog.events.removeAll(pnod, get_name.call(null, ev));
              var G__14645 = cljs.core.next.call(null, seq__14630__$1);
              var G__14646 = null;
              var G__14647 = 0;
              var G__14648 = 0;
              seq__14630 = G__14645;
              chunk__14631 = G__14646;
              count__14632 = G__14647;
              i__14633 = G__14648;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    };
  }(get_name);
};
enfocus.events.remove_listeners.cljs$lang$maxFixedArity = 0;
enfocus.events.remove_listeners.cljs$lang$applyTo = function(seq14629) {
  return enfocus.events.remove_listeners.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq14629));
};
enfocus.events.unlisten = function enfocus$events$unlisten(var_args) {
  var args14649 = [];
  var len__7211__auto___14652 = arguments.length;
  var i__7212__auto___14653 = 0;
  while (true) {
    if (i__7212__auto___14653 < len__7211__auto___14652) {
      args14649.push(arguments[i__7212__auto___14653]);
      var G__14654 = i__7212__auto___14653 + 1;
      i__7212__auto___14653 = G__14654;
      continue;
    } else {
    }
    break;
  }
  var G__14651 = args14649.length;
  switch(G__14651) {
    case 1:
      return enfocus.events.unlisten.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return enfocus.events.unlisten.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args14649.length)].join(""));;
  }
};
enfocus.events.unlisten.cljs$core$IFn$_invoke$arity$1 = function(event) {
  return enfocus.events.remove_listeners.call(null, event);
};
enfocus.events.unlisten.cljs$core$IFn$_invoke$arity$2 = function(event, func) {
  var wrapper = enfocus.events.wrapper_register.call(null, event);
  return function(wrapper) {
    return function(pnod) {
      if (wrapper == null) {
        return goog.events.unlisten(pnod, cljs.core.name.call(null, event), func);
      } else {
        return goog.events.unlistenWithWrapper(pnod, wrapper, func);
      }
    };
  }(wrapper);
};
enfocus.events.unlisten.cljs$lang$maxFixedArity = 2;
enfocus.events.get_node_chain = function enfocus$events$get_node_chain(top, node) {
  if (node == null || cljs.core._EQ_.call(null, node, top)) {
    return cljs.core.List.EMPTY;
  } else {
    return cljs.core.conj.call(null, enfocus$events$get_node_chain.call(null, top, node.parentNode), node);
  }
};
enfocus.events.create_event = function enfocus$events$create_event(cur, cur_event) {
  var event = goog.object.clone(cur_event);
  event.currentTarget = cur;
  return event;
};
enfocus.events.listen_live = function enfocus$events$listen_live(event, selector, func) {
  return function(node) {
    return enfocus.core.at.call(null, node, enfocus.events.listen.call(null, event, function(p1__14656_SHARP_) {
      var seq__14661 = cljs.core.seq.call(null, enfocus.events.get_node_chain.call(null, node, p1__14656_SHARP_.target));
      var chunk__14662 = null;
      var count__14663 = 0;
      var i__14664 = 0;
      while (true) {
        if (i__14664 < count__14663) {
          var el = cljs.core._nth.call(null, chunk__14662, i__14664);
          enfocus.core.at.call(null, el, enfocus.core.filter.call(null, enfocus.core.match_QMARK_.call(null, selector), function(seq__14661, chunk__14662, count__14663, i__14664, el) {
            return function(node__$1) {
              var event_copy = enfocus.events.create_event.call(null, el, p1__14656_SHARP_);
              func.call(null, event_copy);
              if (cljs.core.truth_(event_copy.defaultPrevented)) {
                p1__14656_SHARP_.preventDefault();
              } else {
              }
              if (cljs.core.truth_(event_copy.propagationStopped)) {
                return p1__14656_SHARP_.stopPropagation();
              } else {
                return null;
              }
            };
          }(seq__14661, chunk__14662, count__14663, i__14664, el)));
          var G__14665 = seq__14661;
          var G__14666 = chunk__14662;
          var G__14667 = count__14663;
          var G__14668 = i__14664 + 1;
          seq__14661 = G__14665;
          chunk__14662 = G__14666;
          count__14663 = G__14667;
          i__14664 = G__14668;
          continue;
        } else {
          var temp__4657__auto__ = cljs.core.seq.call(null, seq__14661);
          if (temp__4657__auto__) {
            var seq__14661__$1 = temp__4657__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__14661__$1)) {
              var c__6956__auto__ = cljs.core.chunk_first.call(null, seq__14661__$1);
              var G__14669 = cljs.core.chunk_rest.call(null, seq__14661__$1);
              var G__14670 = c__6956__auto__;
              var G__14671 = cljs.core.count.call(null, c__6956__auto__);
              var G__14672 = 0;
              seq__14661 = G__14669;
              chunk__14662 = G__14670;
              count__14663 = G__14671;
              i__14664 = G__14672;
              continue;
            } else {
              var el = cljs.core.first.call(null, seq__14661__$1);
              enfocus.core.at.call(null, el, enfocus.core.filter.call(null, enfocus.core.match_QMARK_.call(null, selector), function(seq__14661, chunk__14662, count__14663, i__14664, el, seq__14661__$1, temp__4657__auto__) {
                return function(node__$1) {
                  var event_copy = enfocus.events.create_event.call(null, el, p1__14656_SHARP_);
                  func.call(null, event_copy);
                  if (cljs.core.truth_(event_copy.defaultPrevented)) {
                    p1__14656_SHARP_.preventDefault();
                  } else {
                  }
                  if (cljs.core.truth_(event_copy.propagationStopped)) {
                    return p1__14656_SHARP_.stopPropagation();
                  } else {
                    return null;
                  }
                };
              }(seq__14661, chunk__14662, count__14663, i__14664, el, seq__14661__$1, temp__4657__auto__)));
              var G__14673 = cljs.core.next.call(null, seq__14661__$1);
              var G__14674 = null;
              var G__14675 = 0;
              var G__14676 = 0;
              seq__14661 = G__14673;
              chunk__14662 = G__14674;
              count__14663 = G__14675;
              i__14664 = G__14676;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    }));
  };
};
enfocus.events.child_of_QMARK_ = function enfocus$events$child_of_QMARK_(parent, child) {
  while (true) {
    if (cljs.core.not.call(null, child)) {
      return false;
    } else {
      if (parent === child) {
        return false;
      } else {
        if (child.parentNode === parent) {
          return true;
        } else {
          var G__14677 = parent;
          var G__14678 = child.parentNode;
          parent = G__14677;
          child = G__14678;
          continue;
        }
      }
    }
    break;
  }
};
enfocus.events.mouse_enter_leave = function enfocus$events$mouse_enter_leave(func) {
  return function(e) {
    var re = e.relatedTarget;
    var this$ = e.currentTarget;
    if (!(re === this$) && cljs.core.not.call(null, enfocus.events.child_of_QMARK_.call(null, this$, re))) {
      return func.call(null, e);
    } else {
      return null;
    }
  };
};
goog.provide("cheshire_cat.core");
goog.require("cljs.core");
goog.require("enfocus.core");
goog.require("clojure.browser.repl");
goog.require("cljs_http.client");
goog.require("enfocus.events");
goog.require("enfocus.effects");
goog.require("cljs.core.async");
cheshire_cat.core.say_goodbye = function cheshire_cat$core$say_goodbye() {
  return enfocus.core.at.call(null, "#cat-name", enfocus.effects.fade_out.call(null, 500), "#button1", enfocus.effects.fade_out.call(null, 500), "#status", enfocus.effects.fade_out.call(null, 5E3));
};
cheshire_cat.core.init = function cheshire_cat$core$init() {
  clojure.browser.repl.connect.call(null, "http://localhost:9000/repl");
  var c__10448__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__10448__auto__) {
    return function() {
      var f__10449__auto__ = function() {
        var switch__10383__auto__ = function(c__10448__auto__) {
          return function(state_14995) {
            var state_val_14996 = state_14995[1];
            if (state_val_14996 === 1) {
              var inst_14981 = cljs_http.client.get.call(null, "/cheshire-cat");
              var state_14995__$1 = state_14995;
              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_14995__$1, 2, inst_14981);
            } else {
              if (state_val_14996 === 2) {
                var inst_14983 = state_14995[2];
                var inst_14984 = (new cljs.core.Keyword(null, "body", "body", -2049205669)).cljs$core$IFn$_invoke$arity$1(inst_14983);
                var inst_14985 = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(inst_14984);
                var inst_14986 = enfocus.core.content.call(null, inst_14985);
                var inst_14987 = (new cljs.core.Keyword(null, "status", "status", -1997798413)).cljs$core$IFn$_invoke$arity$1(inst_14984);
                var inst_14988 = enfocus.core.content.call(null, inst_14987);
                var inst_14989 = enfocus.core.set_style.call(null, new cljs.core.Keyword(null, "font-size", "font-size", -1847940346), "500%");
                var inst_14990 = enfocus.core.do__GT_.call(null, inst_14988, inst_14989);
                var inst_14991 = enfocus.core.at.call(null, "#cat-name", inst_14986, "#status", inst_14990);
                var inst_14992 = enfocus.events.listen.call(null, new cljs.core.Keyword(null, "click", "click", 1912301393), cheshire_cat.core.say_goodbye);
                var inst_14993 = enfocus.core.at.call(null, "#button1", inst_14992);
                var state_14995__$1 = function() {
                  var statearr_14997 = state_14995;
                  statearr_14997[7] = inst_14991;
                  return statearr_14997;
                }();
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_14995__$1, inst_14993);
              } else {
                return null;
              }
            }
          };
        }(c__10448__auto__);
        return function(switch__10383__auto__, c__10448__auto__) {
          return function() {
            var cheshire_cat$core$init_$_state_machine__10384__auto__ = null;
            var cheshire_cat$core$init_$_state_machine__10384__auto____0 = function() {
              var statearr_15001 = [null, null, null, null, null, null, null, null];
              statearr_15001[0] = cheshire_cat$core$init_$_state_machine__10384__auto__;
              statearr_15001[1] = 1;
              return statearr_15001;
            };
            var cheshire_cat$core$init_$_state_machine__10384__auto____1 = function(state_14995) {
              while (true) {
                var ret_value__10385__auto__ = function() {
                  try {
                    while (true) {
                      var result__10386__auto__ = switch__10383__auto__.call(null, state_14995);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__10386__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__10386__auto__;
                      }
                      break;
                    }
                  } catch (e15002) {
                    if (e15002 instanceof Object) {
                      var ex__10387__auto__ = e15002;
                      var statearr_15003_15005 = state_14995;
                      statearr_15003_15005[5] = ex__10387__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_14995);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15002;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__10385__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15006 = state_14995;
                  state_14995 = G__15006;
                  continue;
                } else {
                  return ret_value__10385__auto__;
                }
                break;
              }
            };
            cheshire_cat$core$init_$_state_machine__10384__auto__ = function(state_14995) {
              switch(arguments.length) {
                case 0:
                  return cheshire_cat$core$init_$_state_machine__10384__auto____0.call(this);
                case 1:
                  return cheshire_cat$core$init_$_state_machine__10384__auto____1.call(this, state_14995);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cheshire_cat$core$init_$_state_machine__10384__auto__.cljs$core$IFn$_invoke$arity$0 = cheshire_cat$core$init_$_state_machine__10384__auto____0;
            cheshire_cat$core$init_$_state_machine__10384__auto__.cljs$core$IFn$_invoke$arity$1 = cheshire_cat$core$init_$_state_machine__10384__auto____1;
            return cheshire_cat$core$init_$_state_machine__10384__auto__;
          }();
        }(switch__10383__auto__, c__10448__auto__);
      }();
      var state__10450__auto__ = function() {
        var statearr_15004 = f__10449__auto__.call(null);
        statearr_15004[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__10448__auto__;
        return statearr_15004;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__10450__auto__);
    };
  }(c__10448__auto__));
  return c__10448__auto__;
};
goog.exportSymbol("cheshire_cat.core.init", cheshire_cat.core.init);
